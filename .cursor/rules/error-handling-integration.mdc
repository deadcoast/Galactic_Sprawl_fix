---
description: 
globs: **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
alwaysApply: false
---
---
description: Implement consistent error handling patterns across the codebase.
globs: **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
---

### Error Handling Integration Rule

1. Manager Error Handling:
```typescript
// CORRECT: Error handling in manager methods
public performAction(id: string): boolean {
  try {
    // Validate inputs
    if (!id) {
      console.warn('[ResourceManager] Cannot perform action with empty ID');
      return false;
    }

    // Implementation...
    return true;
  } catch (error) {
    console.error('[ResourceManager] Error performing action:', error);

    // Emit error event
    moduleEventBus.emit({
      type: EventType.ERROR_OCCURRED,
      moduleId: 'resource-manager',
      moduleType: ModuleType.MANAGER,
      timestamp: Date.now(),
      data: {
        error: error instanceof Error ? error.message : String(error),
        context: { action: 'performAction', id }
      }
    });

    return false;
  }
}
```

1. Component Error Handling:

```typescript
typescript// CORRECT: Using error boundaries for component error handling
function ResourceSection() {
  return (
    <ErrorBoundary
      fallback={<ResourceErrorFallback />}
      onError={(error, errorInfo) => {
        console.error('Resource error:', error);

        // Log error to monitoring service
        errorLoggingService.logError({
          type: ErrorType.RUNTIME,
          severity: ErrorSeverity.HIGH,
          message: error.message,
          stack: error.stack,
          componentStack: errorInfo.componentStack,
        });
      }}
    >
      <ResourceDisplay />
    </ErrorBoundary>
  );
}
```

1. Async Function Error Handling:

```typescript
typescript; // CORRECT: Error handling in async functions
async function fetchResourceData() {
  try {
    const data = await resourceService.getData();
    return processData(data);
  } catch (error) {
    console.error('Failed to fetch resource data:', error);

    // Report error to tracking
    errorLoggingService.logError({
      type: ErrorType.NETWORK,
      severity: ErrorSeverity.MEDIUM,
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    });

    // Return empty data as fallback
    return [];
  }
}
```

1. Event Handler Error Handling:

```typescript
typescript; // CORRECT: Error handling in event handlers
const handleResourceClick = (resource: Resource) => {
  try {
    resourceManager.selectResource(resource.id);
  } catch (error) {
    console.error('Error selecting resource:', error);

    // Show user-friendly error message
    setError('Unable to select resource. Please try again.');
  }
};
```

1. Hook Error Handling:

```typescript
typescript; // CORRECT: Error handling in custom hooks
function useResourceData(resourceId: string) {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let isMounted = true;

    const fetchData = async () => {
      try {
        setLoading(true);
        const resourceManager = getResourceManager();
        const resourceData = await resourceManager.getResourceData(resourceId);

        if (isMounted) {
          setData(resourceData);
          setError(null);
        }
      } catch (error) {
        console.error('Error fetching resource data:', error);

        if (isMounted) {
          setError(error instanceof Error ? error.message : String(error));
          setData(null);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    fetchData();

    return () => {
      isMounted = false;
    };
  }, [resourceId]);

  return { data, error, loading };
}
```


```typescript
/**
 * Set a threshold for a resource type with error handling
 */
public setThreshold(threshold: ResourceThreshold): void {
  try {
    // Validate threshold
    if (!isResourceType(threshold.resourceType)) {
      console.warn(
        \`[ResourceThresholdManager] Invalid resource type: ${threshold.resourceType}\`
      );
      return;
    }

    if (!Object.values(ThresholdType).includes(threshold.thresholdType)) {
      console.warn(
        \`[ResourceThresholdManager] Invalid threshold type: ${threshold.thresholdType}\`
      );
      return;
    }

    if (typeof threshold.value !== 'number' || isNaN(threshold.value)) {
      console.warn(
        \`[ResourceThresholdManager] Invalid threshold value: ${threshold.value}\`
      );
      return;
    }

    // Implementation...
  } catch (error) {
    console.error('[ResourceThresholdManager] Error setting threshold:', error);

    // Emit error event
    moduleEventBus.emit({
      type: EventType.ERROR_OCCURRED,
      moduleId: 'resource-threshold-manager',
      moduleType: ModuleType.MANAGER,
      timestamp: Date.now(),
      data: {
        error: error instanceof Error ? error.message : String(error),
        context: {
          action: 'setThreshold',
          resourceType: threshold.resourceType,
          thresholdType: threshold.thresholdType
        }
      }
    });
  }
}
```

Always handle errors appropriately for the context, log relevant information, and provide fallback mechanisms when possible.