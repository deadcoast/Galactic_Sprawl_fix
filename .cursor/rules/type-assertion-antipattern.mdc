---
description: 
globs: **/*.tsx
alwaysApply: false
---
---
description: Avoid direct type assertions without validation. Always use type guards to validate types at runtime before performing operations that assume a specific type.
globs: **/*.tsx, **/*.ts, src/**/*.ts, src/**/*.tsx
---

### Type Assertion Anti-Pattern Rule

Anti-patterns to avoid:

1. Direct type assertion without validation:
```typescript
// INCORRECT: Unsafe type assertion
function processEvent(event: unknown): void {
  const typedEvent = event as BaseEvent;
  handleEvent(typedEvent);
}
```

Correct implementation using type guards:

```typescript
typescript; // CORRECT: Using type guards for validation
function processEvent(event: unknown): void {
  if (!isValidEvent(event)) {
    console.error('Invalid event received:', event);
    return;
  }

  // Now it's safe to use the event
  handleEvent(event);
}

// Type guard implementation
function isValidEvent(value: unknown): value is BaseEvent {
  return (
    typeof value === 'object' &&
    value !== null &&
    'type' in value &&
    'moduleId' in value &&
    'timestamp' in value
  );
}
```

1. Direct property access without validation:

```typescript
typescript// INCORRECT: Unsafe property access on potentially undefined objects
function displayResourceInfo(data: unknown): void {
  console.log(\`Resource: ${data.type}, Amount: ${data.amount}\`);
}
```

Correct implementation using safe extraction:

```typescript
typescript// CORRECT: Using safe extraction utilities
function displayResourceInfo(data: unknown): void {
  if (typeof data !== 'object' || data === null) {
    console.error('Invalid data received:', data);
    return;
  }

  const record = data as Record<string, unknown>;
  const resourceType = safelyExtractString(record, 'type', 'unknown');
  const amount = safelyExtractNumber(record, 'amount', 0);

  console.log(\`Resource: ${resourceType}, Amount: ${amount}\`);
}
```

Always validate types at runtime before performing operations that assume a specific type structure."