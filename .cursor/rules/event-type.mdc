---
description: 
globs: **/*.tsx, **/*.ts, src/types/events/**/*.ts, src/managers/events/**/*.ts, src/components/**/use*Events.ts
alwaysApply: false
---
---
description: When implementing code related to events, you must always use the EventType enum instead of string literals. Event types should be accessed through the enum to ensure type safety and consistency across the codebase.
globs: **/*.tsx, **/*.ts, src/types/events/**/*.ts, src/managers/events/**/*.ts, src/components/**/use*Events.ts
---

Example of correct implementation:
```typescript
// Subscribe to events
const unsubscribe = moduleEventBus.subscribe(
  EventType.RESOURCE_PRODUCED,
  (event) => {
    // Handle event
  }
);

// Emit events
moduleEventBus.emit({
  type: EventType.RESOURCE_PRODUCED,
  moduleId: 'module-id',
  moduleType: ModuleType.RESOURCE_GENERATOR,
  timestamp: Date.now(),
  data: {
    resourceType: ResourceType.ENERGY,
    amount: 100
  }
});
```

Example of incorrect implementation:

```typescript
typescript; // INCORRECT: String literal for event type
const unsubscribe = moduleEventBus.subscribe('RESOURCE_PRODUCED', event => {
  // Handle event
});

// INCORRECT: String literal for event type and incomplete data
moduleEventBus.emit({
  type: 'RESOURCE_PRODUCED',
  data: {
    resourceType: 'energy',
    amount: 100,
  },
});
```

Event type definitions should follow this pattern:

```typescript
typescriptexport enum EventType {
  RESOURCE_PRODUCED = 'RESOURCE_PRODUCED',
  RESOURCE_CONSUMED = 'RESOURCE_CONSUMED',
  // Additional event types...
}
\`\`\`"
}
```