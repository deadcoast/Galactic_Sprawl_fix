[{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shipHangarManager' is assigned a value but never used.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2464,2508],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":74,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":74,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2560,2612],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":80,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":80,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2790,2838],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":85,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":85,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2998,3043],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":89,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":89,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3135,3186],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":95,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":95,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3326,3369],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":107,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":107,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3688,3729],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":118,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":118,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3937,3974],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":122,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":122,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4055,4099],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { GameLayout } from './components/ui/GameLayout';\nimport { TooltipProvider } from './components/ui/TooltipProvider';\nimport { defaultColony, defaultMothership } from './config/buildings/defaultBuildings';\nimport { defaultModuleConfigs } from './config/modules/defaultModuleConfigs';\nimport { GameProvider, useGame } from './contexts/GameContext';\nimport { ModuleProvider } from './contexts/ModuleContext';\nimport { ThresholdProvider } from './contexts/ThresholdContext';\nimport { assetManager } from './managers/game/assetManager';\nimport { gameManager } from './managers/game/gameManager';\nimport { ResourceManager } from './managers/game/ResourceManager';\nimport { TechNode, techTreeManager } from './managers/game/techTreeManager';\nimport { moduleManager } from './managers/module/ModuleManager';\nimport { OfficerManager } from './managers/module/OfficerManager';\nimport { ShipHangarManager } from './managers/module/ShipHangarManager';\n\n// Initial tech tree setup\nconst initialTechs: TechNode[] = [\n  {\n    id: 'basic-ship-hangar',\n    name: 'Basic Ship Hangar',\n    description: 'Enables basic ship construction',\n    type: 'hangar',\n    tier: 1 as const,\n    requirements: [],\n    unlocked: true,\n    category: 'infrastructure',\n  },\n  {\n    id: 'basic-weapons',\n    name: 'Basic Weapons',\n    description: 'Enables basic weapon systems',\n    type: 'weapons',\n    tier: 1 as const,\n    requirements: ['basic-ship-hangar'],\n    unlocked: false,\n    category: 'weapons',\n  },\n  {\n    id: 'basic-sensors',\n    name: 'Basic Sensors',\n    description: 'Enables basic scanning capabilities',\n    type: 'recon',\n    tier: 1 as const,\n    requirements: ['basic-ship-hangar'],\n    unlocked: false,\n    category: 'reconFleet',\n  },\n];\n\nconst GameInitializer = ({ children }: { children: React.ReactNode }) => {\n  const gameContext = useGame();\n\n  // Ensure context is available\n  if (!gameContext) {\n    return null;\n  }\n\n  const { dispatch } = gameContext;\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [loadingError, setLoadingError] = useState<string | null>(null);\n  const [resourceManager] = useState(() => new ResourceManager());\n  const [officerManager] = useState(() => new OfficerManager());\n  const [shipHangarManager] = useState(\n    () => new ShipHangarManager(resourceManager, officerManager)\n  );\n\n  useEffect(() => {\n    const initializeGame = async () => {\n      try {\n        console.log('Initializing game systems...');\n\n        // Register module configurations\n        console.log('Registering module configurations...');\n        Object.values(defaultModuleConfigs).forEach(config => {\n          moduleManager.registerModuleConfig(config);\n        });\n\n        // Register default buildings\n        console.log('Registering default buildings...');\n        moduleManager.registerBuilding(defaultMothership);\n        moduleManager.registerBuilding(defaultColony);\n\n        // Initialize asset manager\n        console.log('Initializing asset manager...');\n        await assetManager.initialize();\n\n        // Register initial technologies\n        console.log('Registering initial technologies...');\n        initialTechs.forEach(tech => {\n          techTreeManager.registerNode(tech);\n        });\n\n        // Add initial resources\n        console.log('Adding initial resources...');\n        dispatch({\n          type: 'UPDATE_RESOURCES',\n          resources: {\n            minerals: 2000, // Increased initial resources to allow for early module building\n            energy: 2000,\n            research: 0,\n            population: 100,\n          },\n        });\n\n        // Update systems count\n        console.log('Updating system counts...');\n        dispatch({\n          type: 'UPDATE_SYSTEMS',\n          systems: {\n            total: 1,\n            colonized: 1,\n            explored: 1,\n          },\n        });\n\n        // Start the game\n        console.log('Starting game loop...');\n        dispatch({ type: 'START_GAME' });\n        gameManager.start();\n\n        console.log('Game initialization complete');\n        setIsInitialized(true);\n      } catch (error) {\n        console.error('Failed to initialize game:', error);\n        setLoadingError(error instanceof Error ? error.message : 'Failed to initialize game');\n      }\n    };\n\n    initializeGame();\n\n    // Cleanup function\n    return () => {\n      gameManager.stop();\n      assetManager.destroy();\n    };\n  }, [dispatch]);\n\n  if (loadingError) {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          color: '#ff4444',\n          padding: '20px',\n          textAlign: 'center',\n        }}\n      >\n        <h2>Failed to Initialize Game</h2>\n        <p>{loadingError}</p>\n        <button\n          onClick={() => window.location.reload()}\n          style={{\n            padding: '10px 20px',\n            marginTop: '20px',\n            background: '#444',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!isInitialized) {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh',\n          color: '#fff',\n          background: '#111',\n          padding: '20px',\n          textAlign: 'center',\n        }}\n      >\n        <h2>Initializing game...</h2>\n        <p>Loading assets and preparing game systems</p>\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default function App() {\n  return (\n    <GameProvider>\n      <ThresholdProvider>\n        <ModuleProvider>\n          <TooltipProvider>\n            <GameInitializer>\n              <GameLayout empireName=\"Stellar Dominion\" bannerColor=\"#4FD1C5\">\n                <div className=\"min-h-screen bg-gray-900\">\n                  <div className=\"flex h-full flex-col items-center justify-center\">\n                    <h1 className=\"mb-4 text-2xl text-blue-500\">Mothership Control</h1>\n                    <div className=\"rounded-lg bg-gray-800 p-6 shadow-lg\">\n                      <div className=\"mb-4 text-blue-400\">\n                        Resources:\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div>Minerals: 2000</div>\n                          <div>Energy: 2000</div>\n                          <div>Population: 100</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </GameLayout>\n            </GameInitializer>\n          </TooltipProvider>\n        </ModuleProvider>\n      </ThresholdProvider>\n    </GameProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/AutomatedExpansion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/BiodomeModule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/ColonyCore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/CulturalCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/EconomicHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/HabitableWorld.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/ResourceTransferAnimation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationHub.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":205,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":205,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5424,5474],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":800,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":800,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25306,25309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25306,25309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AlertTriangle,\n  Filter,\n  Flag,\n  History,\n  Map,\n  Radar,\n  Rocket,\n  Search,\n  Target,\n  ZoomIn,\n  ZoomOut,\n} from 'lucide-react';\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { ContextMenuItem, useContextMenu } from '../../../../components/ui/ContextMenu';\nimport { Draggable, DragItem, DropTarget } from '../../../../components/ui/DragAndDrop';\nimport { useTooltipContext } from '../../../../components/ui/tooltip-context';\nimport { explorationRules } from '../../../../config/automation/explorationRules';\nimport { ReconShipManagerImpl } from '../../../../managers/exploration/ReconShipManagerImpl';\nimport { automationManager } from '../../../../managers/game/AutomationManager';\nimport { ResourceTransfer } from '../MiningHub/ResourceTransfer';\nimport { ExplorationControls } from './ExplorationControls';\nimport { ExplorationTutorial } from './ExplorationTutorial';\nimport { MissionLog } from './MissionLog';\nimport { ReconShipStatus } from './ReconShipStatus';\n\ninterface Sector {\n  id: string;\n  name: string;\n  status: 'unmapped' | 'mapped' | 'scanning';\n  coordinates: { x: number; y: number };\n  resourcePotential: number;\n  habitabilityScore: number;\n  anomalies: Anomaly[];\n  lastScanned?: number;\n  resources?: Array<{\n    type: string;\n    amount: number;\n  }>;\n}\n\ninterface Anomaly {\n  id: string;\n  type: 'artifact' | 'signal' | 'phenomenon';\n  severity: 'low' | 'medium' | 'high';\n  description: string;\n  investigated: boolean;\n}\n\ninterface ReconShip {\n  id: string;\n  name: string;\n  status: 'idle' | 'scanning' | 'investigating' | 'returning';\n  targetSector?: string;\n  experience: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  efficiency: number;\n  lastUpdate?: number;\n}\n\ninterface MapOffset {\n  x: number;\n  y: number;\n}\n\ninterface AdvancedFilters {\n  minResourcePotential: number;\n  minHabitabilityScore: number;\n  hasAnomalies: boolean;\n  anomalySeverity: 'any' | 'low' | 'medium' | 'high';\n  lastScannedWithin: number; // hours\n  resourceTypes: string[];\n}\n\n// Mock data for demonstration\nconst mockSectors: Sector[] = [\n  {\n    id: 'alpha-sector',\n    name: 'Alpha Sector',\n    status: 'mapped',\n    coordinates: { x: 0, y: 0 },\n    resourcePotential: 0.8,\n    habitabilityScore: 0.6,\n    anomalies: [\n      {\n        id: 'ancient-ruins',\n        type: 'artifact',\n        severity: 'high',\n        description: 'Ancient ruins of unknown origin',\n        investigated: false,\n      },\n    ],\n    lastScanned: Date.now() - 3600000,\n  },\n  {\n    id: 'beta-sector',\n    name: 'Beta Sector',\n    status: 'scanning',\n    coordinates: { x: 200, y: -150 },\n    resourcePotential: 0.5,\n    habitabilityScore: 0.3,\n    anomalies: [],\n    lastScanned: Date.now(),\n  },\n  {\n    id: 'gamma-sector',\n    name: 'Gamma Sector',\n    status: 'unmapped',\n    coordinates: { x: -180, y: 120 },\n    resourcePotential: 0.4,\n    habitabilityScore: 0.7,\n    anomalies: [],\n  },\n];\n\nconst mockShips: ReconShip[] = [\n  {\n    id: 'recon-1',\n    name: 'Pathfinder Alpha',\n    status: 'scanning',\n    targetSector: 'beta-sector',\n    experience: 1250,\n    specialization: 'mapping',\n    efficiency: 0.9,\n  },\n  {\n    id: 'recon-2',\n    name: 'Signal Hunter Beta',\n    status: 'investigating',\n    targetSector: 'alpha-sector',\n    experience: 800,\n    specialization: 'anomaly',\n    efficiency: 0.85,\n  },\n];\n\n// Mock transfer data for exploration discoveries\nconst mockExplorationTransfers = [\n  {\n    id: 'discovery-1',\n    sourceId: 'alpha-sector',\n    targetId: 'storage',\n    resourceType: 'Dark Matter',\n    amount: 100,\n    progress: 0.5,\n  },\n];\n\ntype FilterType = 'all' | 'unmapped' | 'anomalies';\n\n// Memoized Sector Component\nconst SectorComponent = memo(\n  ({\n    sector,\n    isSelected,\n    showHeatMap,\n    onSelect,\n    onHover,\n    getSectorHeat,\n    ships,\n    onShipAssign,\n  }: {\n    sector: Sector;\n    isSelected: boolean;\n    showHeatMap: boolean;\n    onSelect: (sector: Sector) => void;\n    onHover: (show: boolean, sector: Sector) => void;\n    getSectorHeat: (sector: Sector) => number;\n    ships: ReconShip[];\n    onShipAssign: (shipId: string, sectorId: string) => void;\n  }) => {\n    const scanningShip = ships.find(ship => ship.targetSector === sector.id);\n    const heatValue = getSectorHeat(sector);\n\n    // Context menu for sector actions\n    const getSectorMenuItems = (): ContextMenuItem[] => {\n      const assignedShip = ships.find(ship => ship.targetSector === sector.id);\n      return [\n        {\n          id: 'info',\n          label: 'View Details',\n          icon: <Map className=\"h-4 w-4\" />,\n          action: () => onSelect(sector),\n        },\n        {\n          id: 'assign-ship',\n          label: assignedShip ? 'Reassign Ship' : 'Assign Ship',\n          icon: <Rocket className=\"h-4 w-4\" />,\n          action: () => {}, // No-op action for parent menu\n          children: ships\n            .filter(ship => ship.status === 'idle' || ship.targetSector === sector.id)\n            .map(ship => ({\n              id: ship.id,\n              label: ship.name,\n              icon: <Target className=\"h-4 w-4\" />,\n              action: () => onShipAssign(ship.id, sector.id),\n            })),\n        },\n        {\n          id: 'mark-priority',\n          label: 'Mark as Priority',\n          icon: <Flag className=\"h-4 w-4\" />,\n          action: () => {\n            // Handle priority marking\n            console.log(`Marking ${sector.name} as priority`);\n          },\n        },\n      ];\n    };\n\n    const { handleContextMenu, ContextMenuComponent } = useContextMenu({\n      items: getSectorMenuItems(),\n    });\n\n    return (\n      <div\n        className=\"absolute\"\n        style={{\n          left: `calc(50% + ${sector.coordinates.x}px)`,\n          top: `calc(50% + ${sector.coordinates.y}px)`,\n          transform: 'translate(-50%, -50%)',\n        }}\n      >\n        <DropTarget\n          accept={['ship']}\n          onDrop={(item: DragItem) => {\n            if (item.type === 'ship') {\n              onShipAssign(item.data.id, sector.id);\n            }\n          }}\n          className=\"group relative\"\n        >\n          <div\n            onContextMenu={handleContextMenu}\n            onClick={() => onSelect(sector)}\n            onMouseEnter={() => onHover(true, sector)}\n            onMouseLeave={() => onHover(false, sector)}\n          >\n            {/* Sector Visualization */}\n            <div\n              className={`h-24 w-24 rounded-lg transition-all duration-300 ${\n                sector.status === 'unmapped'\n                  ? 'bg-gray-800/50'\n                  : sector.status === 'scanning'\n                    ? 'animate-pulse bg-teal-900/50'\n                    : 'bg-teal-800/30'\n              } relative ${\n                isSelected ? 'ring-2 ring-teal-400 ring-offset-2 ring-offset-gray-900' : ''\n              }`}\n            >\n              {/* Heat Map Overlay */}\n              {showHeatMap && sector.status !== 'unmapped' && (\n                <div\n                  className=\"absolute inset-0 rounded-lg mix-blend-overlay\"\n                  style={{\n                    background: `rgba(${Math.round(heatValue * 255)}, ${Math.round(heatValue * 100)}, 0, ${heatValue * 0.8})`,\n                  }}\n                />\n              )}\n\n              {/* Resource Potential Indicator */}\n              {sector.status !== 'unmapped' && (\n                <div\n                  className=\"absolute inset-2 rounded border-2 border-teal-500/30 transition-all\"\n                  style={{\n                    clipPath: `polygon(0 ${100 - sector.resourcePotential * 100}%, 100% ${100 - sector.resourcePotential * 100}%, 0%, 0 100%)`,\n                  }}\n                />\n              )}\n\n              {/* Habitability Score Ring */}\n              {sector.status !== 'unmapped' && (\n                <div\n                  className=\"absolute inset-0 rounded-lg border-4 border-teal-400/20 transition-all\"\n                  style={{\n                    clipPath: `polygon(0 0, ${sector.habitabilityScore * 100}% 0, ${sector.habitabilityScore * 100}% 100%, 0 100%)`,\n                  }}\n                />\n              )}\n\n              {/* Anomaly Indicators */}\n              {sector.anomalies.length > 0 && (\n                <div className=\"mb-3\">\n                  <div className=\"mb-2 text-xs font-medium text-gray-300\">Detected Anomalies</div>\n                  <div className=\"space-y-1\">\n                    {sector.anomalies.map(anomaly => (\n                      <div\n                        key={anomaly.id}\n                        className={`rounded px-2 py-1 text-xs ${\n                          anomaly.severity === 'high'\n                            ? 'bg-red-900/50 text-red-400'\n                            : anomaly.severity === 'medium'\n                              ? 'bg-yellow-900/50 text-yellow-400'\n                              : 'bg-blue-900/50 text-blue-400'\n                        }`}\n                      >\n                        {anomaly.type.charAt(0).toUpperCase() + anomaly.type.slice(1)}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Scanning Ship Indicator */}\n              {scanningShip && (\n                <div className=\"absolute -right-2 -top-2\">\n                  <Rocket className=\"h-5 w-5 animate-pulse text-teal-400\" />\n                </div>\n              )}\n            </div>\n\n            {/* Sector Label */}\n            <div className=\"absolute left-1/2 top-full mt-2 -translate-x-1/2 text-center\">\n              <div className=\"font-medium text-teal-200\">{sector.name}</div>\n              {sector.status !== 'unmapped' && (\n                <div className=\"text-sm text-teal-300/70\">\n                  {sector.status === 'scanning' ? 'Scanning in Progress' : 'Mapped'}\n                </div>\n              )}\n            </div>\n          </div>\n        </DropTarget>\n        {ContextMenuComponent}\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    // Custom comparison function for memo\n    return (\n      prevProps.sector === nextProps.sector &&\n      prevProps.isSelected === nextProps.isSelected &&\n      prevProps.showHeatMap === nextProps.showHeatMap &&\n      prevProps.ships.length === nextProps.ships.length\n    );\n  }\n);\n\n// Ship Marker Component with drag-and-drop\nconst ShipMarker = memo(({ ship, targetSector }: { ship: ReconShip; targetSector: Sector }) => {\n  return (\n    <div\n      className=\"absolute transition-all duration-300\"\n      style={{\n        left: `calc(50% + ${targetSector.coordinates.x}px)`,\n        top: `calc(50% + ${targetSector.coordinates.y}px)`,\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Draggable\n        item={{\n          id: ship.id,\n          type: 'ship',\n          data: ship,\n        }}\n      >\n        <div className=\"rounded-lg border border-teal-500/30 bg-teal-900/80 p-2 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Rocket className=\"h-4 w-4 text-teal-400\" />\n            <span className=\"text-xs font-medium text-teal-200\">{ship.name}</span>\n          </div>\n          <div className=\"mt-1 text-xs text-teal-400/70\">\n            {ship.status.charAt(0).toUpperCase() + ship.status.slice(1)}\n          </div>\n        </div>\n      </Draggable>\n    </div>\n  );\n});\n\nexport function ExplorationHub() {\n  const [selectedSector, setSelectedSector] = useState<Sector | null>(null);\n  const [showTutorial, setShowTutorial] = useState(true);\n  const [showMissionLog, setShowMissionLog] = useState(false);\n  const [filter, setFilter] = useState<FilterType>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [zoom, setZoom] = useState(1);\n  const [position, setPosition] = useState<{ x: number; y: number } | null>(null);\n  const [showHeatMap, setShowHeatMap] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n  const [advancedFilters, setAdvancedFilters] = useState<AdvancedFilters>({\n    minResourcePotential: 0,\n    minHabitabilityScore: 0,\n    hasAnomalies: false,\n    anomalySeverity: 'any',\n    lastScannedWithin: 24,\n    resourceTypes: [],\n  });\n  const [mapOffset, setMapOffset] = useState<MapOffset>({ x: 0, y: 0 });\n\n  const isDragging = useRef(false);\n  const lastPosition = useRef({ x: 0, y: 0 });\n  const { showTooltip, hideTooltip } = useTooltipContext();\n\n  // Add new state for real-time updates\n  const [sectors, setSectors] = useState(mockSectors);\n  const [ships, setShips] = useState(mockShips);\n  const [transfers, setTransfers] = useState(mockExplorationTransfers);\n\n  // Optimize update intervals with useRef\n  const updateIntervals = useRef({\n    ships: null as NodeJS.Timeout | null,\n    sectors: null as NodeJS.Timeout | null,\n    transfers: null as NodeJS.Timeout | null,\n  });\n\n  // Memoize complex calculations\n  const activeShips = useMemo(() => {\n    return ships.filter(ship => ship.status !== 'idle');\n  }, [ships]);\n\n  // Initialize ReconShipManager\n  const reconManager = useMemo(() => new ReconShipManagerImpl(), []);\n\n  // Register automation rules on mount\n  useEffect(() => {\n    // Register each exploration rule\n    explorationRules.forEach(rule => {\n      automationManager.registerRule(rule);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      explorationRules.forEach(rule => {\n        automationManager.removeRule(rule.id);\n      });\n    };\n  }, []);\n\n  // Optimize real-time updates with separate intervals\n  useEffect(() => {\n    // Ship position updates (more frequent)\n    updateIntervals.current.ships = setInterval(() => {\n      setShips(prevShips =>\n        prevShips.map(ship => {\n          if (ship.status === 'idle' || !ship.targetSector) return ship;\n\n          const targetSector = sectors.find(s => s.id === ship.targetSector);\n          if (!targetSector) return ship;\n\n          // Calculate progress based on efficiency and time\n          const progress = Math.min(\n            1,\n            (Date.now() - (ship.lastUpdate || Date.now())) / (10000 / ship.efficiency)\n          );\n\n          // Update ship status based on progress\n          if (progress >= 1) {\n            return {\n              ...ship,\n              status: ship.status === 'scanning' ? 'investigating' : 'returning',\n              lastUpdate: Date.now(),\n            };\n          }\n\n          return {\n            ...ship,\n            lastUpdate: Date.now(),\n          };\n        })\n      );\n    }, 1000);\n\n    // Sector updates (less frequent)\n    updateIntervals.current.sectors = setInterval(() => {\n      setSectors(prevSectors =>\n        prevSectors.map(sector => {\n          const scanningShip = ships.find(\n            ship => ship.targetSector === sector.id && ship.status === 'scanning'\n          );\n\n          if (scanningShip) {\n            // Update sector data based on ship's scan\n            return {\n              ...sector,\n              status: 'scanning',\n              lastScanned: Date.now(),\n            };\n          }\n\n          if (sector.status === 'scanning' && !scanningShip) {\n            // Complete the scan\n            return {\n              ...sector,\n              status: 'mapped',\n              lastScanned: Date.now(),\n            };\n          }\n\n          return sector;\n        })\n      );\n    }, 2000);\n\n    // Transfer updates (least frequent)\n    updateIntervals.current.transfers = setInterval(() => {\n      setTransfers(prevTransfers =>\n        prevTransfers.map(transfer => {\n          if (transfer.progress >= 1) return transfer;\n\n          return {\n            ...transfer,\n            progress: Math.min(1, transfer.progress + 0.1),\n          };\n        })\n      );\n    }, 3000);\n\n    // Store current intervals for cleanup\n    const currentIntervals = { ...updateIntervals.current };\n\n    return () => {\n      Object.values(currentIntervals).forEach(interval => {\n        if (interval) clearInterval(interval);\n      });\n    };\n  }, [sectors, ships]);\n\n  // Enhanced sector filtering\n  const filteredSectors = useMemo(() => {\n    return sectors.filter(sector => {\n      // Basic text search\n      if (searchQuery && !sector.name.toLowerCase().includes(searchQuery.toLowerCase())) {\n        return false;\n      }\n\n      // Basic type filter\n      if (filter === 'unmapped' && sector.status !== 'unmapped') {\n        return false;\n      }\n      if (filter === 'anomalies' && sector.anomalies.length === 0) {\n        return false;\n      }\n\n      // Advanced filters\n      if (sector.resourcePotential < advancedFilters.minResourcePotential) {\n        return false;\n      }\n      if (sector.habitabilityScore < advancedFilters.minHabitabilityScore) {\n        return false;\n      }\n      if (advancedFilters.hasAnomalies && sector.anomalies.length === 0) {\n        return false;\n      }\n      if (advancedFilters.anomalySeverity !== 'any') {\n        const hasMatchingSeverity = sector.anomalies.some(\n          a => a.severity === advancedFilters.anomalySeverity\n        );\n        if (!hasMatchingSeverity) {\n          return false;\n        }\n      }\n      if (advancedFilters.lastScannedWithin > 0 && sector.lastScanned) {\n        const hoursSinceLastScan = (Date.now() - sector.lastScanned) / (1000 * 60 * 60);\n        if (hoursSinceLastScan > advancedFilters.lastScannedWithin) {\n          return false;\n        }\n      }\n      if (\n        advancedFilters.resourceTypes.length > 0 &&\n        !sector.resources?.some(r => advancedFilters.resourceTypes.includes(r.type))\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n  }, [sectors, searchQuery, filter, advancedFilters]);\n\n  // Enhanced heat map calculation\n  const getSectorHeat = useCallback((sector: Sector) => {\n    let heatValue = 0;\n\n    // Base heat from resource potential\n    heatValue += sector.resourcePotential * 0.4;\n\n    // Heat from habitability\n    heatValue += sector.habitabilityScore * 0.3;\n\n    // Heat from anomalies\n    const anomalyHeat = sector.anomalies.reduce((sum, anomaly) => {\n      const severityValue =\n        anomaly.severity === 'high' ? 0.3 : anomaly.severity === 'medium' ? 0.2 : 0.1;\n      return sum + severityValue;\n    }, 0);\n    heatValue += anomalyHeat;\n\n    // Reduce heat for older scans\n    if (sector.lastScanned) {\n      const hoursSinceLastScan = (Date.now() - sector.lastScanned) / (1000 * 60 * 60);\n      const ageFactor = Math.max(0, 1 - hoursSinceLastScan / 168); // 168 hours = 1 week\n      heatValue *= ageFactor;\n    }\n\n    return Math.min(1, heatValue);\n  }, []);\n\n  // Memoize handlers\n  const handleSectorSelect = useCallback((sector: Sector) => {\n    setSelectedSector(sector);\n  }, []);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    isDragging.current = true;\n    lastPosition.current = { x: e.clientX, y: e.clientY };\n    const startX = e.clientX;\n    const startY = e.clientY;\n    setPosition({ x: startX, y: startY });\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent) => {\n      // Implementation for map panning\n      if (position && isDragging.current) {\n        const dx = e.clientX - position.x;\n        const dy = e.clientY - position.y;\n        setPosition({ x: e.clientX, y: e.clientY });\n        // Update map position based on dx and dy\n        setMapOffset((prev: MapOffset) => ({\n          x: prev.x + dx,\n          y: prev.y + dy,\n        }));\n      }\n    },\n    [position]\n  );\n\n  const handleMouseUp = useCallback(() => {\n    isDragging.current = false;\n    setPosition(null);\n  }, []);\n\n  const handleZoom = useCallback((delta: number) => {\n    setZoom(prev => Math.max(0.5, Math.min(2, prev + delta)));\n  }, []);\n\n  // Enhanced sector hover tooltip\n  const handleSectorHover = useCallback(\n    (show: boolean, sector: Sector) => {\n      if (show) {\n        showTooltip(\n          <div className=\"max-w-xs rounded-lg border border-gray-700 bg-gray-800/95 p-4 shadow-xl\">\n            <div className=\"mb-3 flex items-center justify-between\">\n              <div className=\"font-medium text-white\">{sector.name}</div>\n              <div\n                className={`rounded px-2 py-0.5 text-xs ${\n                  sector.status === 'unmapped'\n                    ? 'bg-gray-700 text-gray-400'\n                    : sector.status === 'scanning'\n                      ? 'bg-teal-900/50 text-teal-400'\n                      : 'bg-teal-800/30 text-teal-300'\n                }`}\n              >\n                {sector.status.charAt(0).toUpperCase() + sector.status.slice(1)}\n              </div>\n            </div>\n\n            {sector.status !== 'unmapped' && (\n              <>\n                {/* Resource and Habitability Bars */}\n                <div className=\"mb-3 space-y-2\">\n                  <div>\n                    <div className=\"mb-1 flex justify-between text-xs\">\n                      <span className=\"text-gray-400\">Resources</span>\n                      <span className=\"text-teal-400\">\n                        {Math.round(sector.resourcePotential * 100)}%\n                      </span>\n                    </div>\n                    <div className=\"h-1.5 overflow-hidden rounded-full bg-gray-700\">\n                      <div\n                        className=\"h-full rounded-full bg-teal-500\"\n                        style={{ width: `${sector.resourcePotential * 100}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"mb-1 flex justify-between text-xs\">\n                      <span className=\"text-gray-400\">Habitability</span>\n                      <span className=\"text-teal-400\">\n                        {Math.round(sector.habitabilityScore * 100)}%\n                      </span>\n                    </div>\n                    <div className=\"h-1.5 overflow-hidden rounded-full bg-gray-700\">\n                      <div\n                        className=\"h-full rounded-full bg-teal-500\"\n                        style={{ width: `${sector.habitabilityScore * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Anomalies */}\n                {sector.anomalies.length > 0 && (\n                  <div className=\"mb-3\">\n                    <div className=\"mb-2 text-xs font-medium text-gray-300\">Detected Anomalies</div>\n                    <div className=\"space-y-1\">\n                      {sector.anomalies.map(anomaly => (\n                        <div\n                          key={anomaly.id}\n                          className={`rounded px-2 py-1 text-xs ${\n                            anomaly.severity === 'high'\n                              ? 'bg-red-900/50 text-red-400'\n                              : anomaly.severity === 'medium'\n                                ? 'bg-yellow-900/50 text-yellow-400'\n                                : 'bg-blue-900/50 text-blue-400'\n                          }`}\n                        >\n                          {anomaly.type.charAt(0).toUpperCase() + anomaly.type.slice(1)}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Last Scanned */}\n                {sector.lastScanned && (\n                  <div className=\"text-xs text-gray-500\">\n                    Last Scanned: {new Date(sector.lastScanned).toLocaleString()}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        );\n      } else {\n        hideTooltip();\n      }\n    },\n    [showTooltip, hideTooltip]\n  );\n\n  // Handle ship assignment\n  const handleShipAssign = useCallback(\n    (shipId: string, sectorId: string) => {\n      const sector = sectors.find(s => s.id === sectorId);\n      if (!sector) return;\n\n      reconManager.assignExplorationTask(\n        shipId,\n        sectorId,\n        sector.coordinates,\n        'mapping' // Default to mapping, can be updated based on sector type\n      );\n\n      setShips(prevShips =>\n        prevShips.map(ship =>\n          ship.id === shipId\n            ? {\n                ...ship,\n                status: 'scanning',\n                targetSector: sectorId,\n                lastUpdate: Date.now(),\n              }\n            : ship\n        )\n      );\n    },\n    [sectors, reconManager]\n  );\n\n  // Register ships with ReconShipManager\n  useEffect(() => {\n    ships.forEach(ship => {\n      reconManager.registerShip({\n        ...ship,\n        type: 'AC27G',\n        position: { x: 0, y: 0 }, // Initial position\n        capabilities: {\n          canScan: true,\n          canSalvage: false,\n          canMine: false,\n          canJump: true,\n        },\n        stealth: {\n          active: false,\n          level: 1,\n          cooldown: 0,\n        },\n        sensors: {\n          range: 100,\n          accuracy: 0.8,\n          anomalyDetection: 0.7,\n        },\n        discoveries: {\n          mappedSectors: 0,\n          anomaliesFound: 0,\n          resourcesLocated: 0,\n        },\n      });\n    });\n\n    // Cleanup on unmount\n    return () => {\n      ships.forEach(ship => reconManager.unregisterShip(ship.id));\n    };\n  }, [ships, reconManager]);\n\n  // Listen for ReconShipManager events\n  useEffect(() => {\n    const handleTaskCompleted = ({ shipId, task }: { shipId: string; task: any }) => {\n      setShips(prevShips =>\n        prevShips.map(ship =>\n          ship.id === shipId\n            ? {\n                ...ship,\n                status: 'returning',\n                experience: ship.experience + 100, // Base XP gain\n              }\n            : ship\n        )\n      );\n\n      // Update sector status\n      setSectors(prevSectors =>\n        prevSectors.map(sector =>\n          sector.id === task.target.id\n            ? {\n                ...sector,\n                status: 'mapped',\n                lastScanned: Date.now(),\n              }\n            : sector\n        )\n      );\n    };\n\n    reconManager.on('taskCompleted', handleTaskCompleted);\n    return () => {\n      reconManager.off('taskCompleted', handleTaskCompleted);\n    };\n  }, [reconManager]);\n\n  // Update ReconShipManager\n  useEffect(() => {\n    const interval = setInterval(() => {\n      reconManager.update(1000 / 60); // Update at 60fps\n    }, 1000 / 60);\n\n    return () => clearInterval(interval);\n  }, [reconManager]);\n\n  return (\n    <div className=\"fixed inset-4 flex overflow-hidden rounded-lg border border-gray-700 bg-gray-900/95 shadow-2xl backdrop-blur-md\">\n      {/* Left Panel - Exploration Map */}\n      <div className=\"flex w-2/3 flex-col border-r border-gray-700 p-6\">\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Radar className=\"h-6 w-6 text-teal-400\" />\n            <h2 className=\"text-xl font-bold text-white\">Exploration Hub</h2>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search sectors...\"\n                className=\"w-64 rounded-lg border border-gray-700 bg-gray-800/90 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-teal-500\"\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n              />\n              <Search className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => handleZoom(0.1)}\n                className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n              >\n                <ZoomIn className=\"h-5 w-5 text-teal-400\" />\n              </button>\n              <button\n                onClick={() => handleZoom(-0.1)}\n                className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n              >\n                <ZoomOut className=\"h-5 w-5 text-teal-400\" />\n              </button>\n            </div>\n\n            <button\n              onClick={() => setShowMissionLog(true)}\n              className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n            >\n              <History className=\"h-5 w-5 text-teal-400\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Enhanced Filter Controls */}\n        <div className=\"mb-6\">\n          <div className=\"mb-2 flex items-center justify-between\">\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => setFilter('all')}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  filter === 'all'\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <Map className=\"h-4 w-4\" />\n                <span>All Sectors</span>\n              </button>\n              <button\n                onClick={() => setFilter('unmapped')}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  filter === 'unmapped'\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <Radar className=\"h-4 w-4\" />\n                <span>Unmapped</span>\n              </button>\n              <button\n                onClick={() => setFilter('anomalies')}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  filter === 'anomalies'\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <AlertTriangle className=\"h-4 w-4\" />\n                <span>Anomalies</span>\n              </button>\n              <button\n                onClick={() => setShowHeatMap(!showHeatMap)}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  showHeatMap\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <Map className=\"h-4 w-4\" />\n                <span>Heat Map</span>\n              </button>\n            </div>\n\n            <button\n              onClick={() => setShowFilters(!showFilters)}\n              className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                Object.values(advancedFilters).some(v =>\n                  Array.isArray(v) ? v.length > 0 : v !== 0 && v !== false && v !== 'any'\n                )\n                  ? 'bg-teal-600 text-white'\n                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n              }`}\n            >\n              <Filter className=\"h-4 w-4\" />\n              <span>Advanced Filters</span>\n            </button>\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showFilters && (\n            <div className=\"mt-4 rounded-lg bg-gray-800/50 p-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Min Resource Potential</label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={advancedFilters.minResourcePotential}\n                    onChange={e =>\n                      setAdvancedFilters(prev => ({\n                        ...prev,\n                        minResourcePotential: parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"w-full\"\n                  />\n                  <div className=\"mt-1 text-sm text-teal-400\">\n                    {Math.round(advancedFilters.minResourcePotential * 100)}%\n                  </div>\n                </div>\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Min Habitability Score</label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={advancedFilters.minHabitabilityScore}\n                    onChange={e =>\n                      setAdvancedFilters(prev => ({\n                        ...prev,\n                        minHabitabilityScore: parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"w-full\"\n                  />\n                  <div className=\"mt-1 text-sm text-teal-400\">\n                    {Math.round(advancedFilters.minHabitabilityScore * 100)}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Anomaly Settings</label>\n                  <div className=\"space-y-2\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={advancedFilters.hasAnomalies}\n                        onChange={e =>\n                          setAdvancedFilters(prev => ({\n                            ...prev,\n                            hasAnomalies: e.target.checked,\n                          }))\n                        }\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm text-gray-300\">Has Anomalies</span>\n                    </label>\n                    <select\n                      value={advancedFilters.anomalySeverity}\n                      onChange={e =>\n                        setAdvancedFilters(prev => ({\n                          ...prev,\n                          anomalySeverity: e.target.value as 'any' | 'low' | 'medium' | 'high',\n                        }))\n                      }\n                      className=\"w-full rounded bg-gray-700 px-2 py-1 text-sm text-white\"\n                    >\n                      <option value=\"any\">Any Severity</option>\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                    </select>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Last Scanned Within</label>\n                  <select\n                    value={advancedFilters.lastScannedWithin}\n                    onChange={e =>\n                      setAdvancedFilters(prev => ({\n                        ...prev,\n                        lastScannedWithin: parseInt(e.target.value),\n                      }))\n                    }\n                    className=\"w-full rounded bg-gray-700 px-2 py-1 text-sm text-white\"\n                  >\n                    <option value={0}>Any Time</option>\n                    <option value={24}>24 Hours</option>\n                    <option value={72}>3 Days</option>\n                    <option value={168}>1 Week</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <label className=\"mb-2 block text-sm text-gray-400\">Resource Types</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {['Dark Matter', 'Helium-3', 'Rare Metals', 'Common Ores'].map(type => (\n                    <button\n                      key={type}\n                      onClick={() =>\n                        setAdvancedFilters(prev => ({\n                          ...prev,\n                          resourceTypes: prev.resourceTypes.includes(type)\n                            ? prev.resourceTypes.filter(t => t !== type)\n                            : [...prev.resourceTypes, type],\n                        }))\n                      }\n                      className={`rounded px-2 py-1 text-sm ${\n                        advancedFilters.resourceTypes.includes(type)\n                          ? 'bg-teal-600 text-white'\n                          : 'bg-gray-700 text-gray-400'\n                      }`}\n                    >\n                      {type}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Map Content */}\n        <div\n          className=\"relative flex-1 overflow-hidden\"\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n        >\n          <div\n            className=\"absolute inset-0\"\n            style={{\n              transform: `translate(${mapOffset.x}px, ${mapOffset.y}px) scale(${zoom})`,\n              transformOrigin: 'center',\n              transition: isDragging.current ? 'none' : 'transform 0.3s ease-out',\n            }}\n          >\n            {filteredSectors.map(sector => (\n              <SectorComponent\n                key={sector.id}\n                sector={sector}\n                isSelected={selectedSector?.id === sector.id}\n                showHeatMap={showHeatMap}\n                onSelect={handleSectorSelect}\n                onHover={handleSectorHover}\n                getSectorHeat={getSectorHeat}\n                ships={ships}\n                onShipAssign={handleShipAssign}\n              />\n            ))}\n\n            {/* Ship Markers */}\n            {activeShips.map(ship => {\n              const targetSector = sectors.find(s => s.id === ship.targetSector);\n              if (!targetSector) {\n                return null;\n              }\n              return <ShipMarker key={ship.id} ship={ship} targetSector={targetSector} />;\n            })}\n\n            {/* Resource Transfers */}\n            <ResourceTransfer transfers={transfers} />\n          </div>\n        </div>\n      </div>\n\n      {/* Right Panel */}\n      <div className=\"flex w-1/3 flex-col p-6\">\n        {selectedSector ? (\n          <>\n            <ExplorationControls sector={selectedSector} onClose={() => setSelectedSector(null)} />\n            <div className=\"mt-6\">\n              <ReconShipStatus ships={activeShips} />\n            </div>\n          </>\n        ) : (\n          <div className=\"flex h-full items-center justify-center text-gray-400\">\n            Select a sector to view details\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      {showMissionLog && <MissionLog onClose={() => setShowMissionLog(false)} />}\n      {showTutorial && <ExplorationTutorial onClose={() => setShowTutorial(false)} />}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationTutorial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationWindow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/MissionLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/MissionReplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ReconShipStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ShipStatusMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/AutomationMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MineralProcessingCentre.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningTutorial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningWindow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFilter' is assigned a value but never used.","line":158,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":217,"column":15,"nodeType":"MemberExpression","messageId":"limited","endLine":217,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5424,5482],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":231,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":231,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5907,5971],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":242,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":242,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6222,6303],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ArrowDown,\n  ArrowUp,\n  ChevronRight,\n  Database,\n  Grid2X2,\n  HelpCircle,\n  Map,\n  Rocket,\n  Settings,\n  Ship,\n} from 'lucide-react';\nimport { useState } from 'react';\nimport { ContextMenuItem, useContextMenu } from '../../../../components/ui/ContextMenu';\nimport { Draggable, DragItem, DropTarget } from '../../../../components/ui/DragAndDrop';\nimport { MiningMap } from './MiningMap';\nimport { MiningTutorial } from './MiningTutorial';\nimport { ResourceNode } from './ResourceNode';\nimport { ResourceStorage } from './ResourceStorage';\nimport { ResourceTransfer } from './ResourceTransfer';\n\n// Mock storage data\nconst mockStorageData = [\n  {\n    id: 'iron-storage',\n    resourceType: 'Iron',\n    currentAmount: 8500,\n    maxCapacity: 10000,\n    refiningAmount: 250,\n    refiningProgress: 0.65,\n    transferRate: 25,\n  },\n  {\n    id: 'helium-storage',\n    resourceType: 'Helium-3',\n    currentAmount: 2800,\n    maxCapacity: 5000,\n    refiningAmount: 100,\n    refiningProgress: 0.3,\n    transferRate: 15,\n  },\n];\n\n// Mock transfer animations\nconst mockTransfers = [\n  {\n    id: 'transfer-1',\n    sourceId: 'iron-belt-1',\n    targetId: 'iron-storage',\n    resourceType: 'Iron',\n    amount: 50,\n    progress: 0.3,\n  },\n  {\n    id: 'transfer-2',\n    sourceId: 'helium-cloud-1',\n    targetId: 'helium-storage',\n    resourceType: 'Helium-3',\n    amount: 25,\n    progress: 0.7,\n  },\n];\n\ninterface Resource {\n  id: string;\n  name: string;\n  type: 'mineral' | 'gas' | 'exotic';\n  abundance: number;\n  distance: number;\n  extractionRate: number;\n  depletion: number;\n  priority: number;\n  thresholds: {\n    min: number;\n    max: number;\n  };\n}\n\ninterface MiningShip {\n  id: string;\n  name: string;\n  type: 'rockBreaker' | 'voidDredger';\n  status: 'idle' | 'mining' | 'returning' | 'maintenance';\n  capacity: number;\n  currentLoad: number;\n  targetNode?: string;\n  efficiency: number;\n}\n\nconst mockResources: Resource[] = [\n  {\n    id: 'iron-belt-1',\n    name: 'Iron Belt Alpha',\n    type: 'mineral',\n    abundance: 0.8,\n    distance: 150,\n    extractionRate: 25,\n    depletion: 0.2,\n    priority: 1,\n    thresholds: { min: 3000, max: 10000 },\n  },\n  {\n    id: 'helium-cloud-1',\n    name: 'Helium Cloud Beta',\n    type: 'gas',\n    abundance: 0.6,\n    distance: 300,\n    extractionRate: 15,\n    depletion: 0.1,\n    priority: 2,\n    thresholds: { min: 1000, max: 5000 },\n  },\n  {\n    id: 'dark-matter-1',\n    name: 'Dark Matter Cluster',\n    type: 'exotic',\n    abundance: 0.3,\n    distance: 500,\n    extractionRate: 5,\n    depletion: 0.05,\n    priority: 3,\n    thresholds: { min: 100, max: 1000 },\n  },\n];\n\nconst mockShips: MiningShip[] = [\n  {\n    id: 'rb-1',\n    name: 'Rock Breaker Alpha',\n    type: 'rockBreaker',\n    status: 'mining',\n    capacity: 1000,\n    currentLoad: 450,\n    targetNode: 'iron-belt-1',\n    efficiency: 0.9,\n  },\n  {\n    id: 'vd-1',\n    name: 'Void Dredger Beta',\n    type: 'voidDredger',\n    status: 'returning',\n    capacity: 2000,\n    currentLoad: 1800,\n    targetNode: 'helium-cloud-1',\n    efficiency: 0.85,\n  },\n];\n\ntype ViewMode = 'map' | 'grid';\ntype SortOption = 'priority' | 'name' | 'type' | 'abundance' | 'distance';\ntype FilterOption = 'all' | 'mineral' | 'gas' | 'exotic';\n\nexport function MiningWindow() {\n  const [selectedNode, setSelectedNode] = useState<Resource | null>(null);\n  const [viewMode, setViewMode] = useState<ViewMode>('map');\n  const [sortBy, setSortBy] = useState<SortOption>('priority');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [filter, setFilter] = useState<FilterOption>('all');\n  const [showTutorial, setShowTutorial] = useState(false);\n\n  // Mock tech bonuses\n  const techBonuses = {\n    extractionRate: 1.2,\n    efficiency: 1.1,\n    range: 1.15,\n    storageCapacity: 1.5,\n  };\n\n  // Filter and sort resources\n  const filteredResources = mockResources\n    .filter(resource => filter === 'all' || resource.type === filter)\n    .sort((a, b) => {\n      let comparison = 0;\n      switch (sortBy) {\n        case 'priority':\n          comparison = a.priority - b.priority;\n          break;\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'type':\n          comparison = a.type.localeCompare(b.type);\n          break;\n        case 'abundance':\n          comparison = b.abundance - a.abundance;\n          break;\n        case 'distance':\n          comparison = a.distance - b.distance;\n          break;\n      }\n      return sortOrder === 'asc' ? comparison : -comparison;\n    });\n\n  // Context menu for resources\n  const getResourceMenuItems = (resource: Resource): ContextMenuItem[] => {\n    const assignedShip = mockShips.find(ship => ship.targetNode === resource.id);\n    return [\n      {\n        id: 'info',\n        label: 'Resource Info',\n        icon: <Database className=\"h-4 w-4\" />,\n        action: () => setSelectedNode(resource),\n      },\n      {\n        id: 'assign-ship',\n        label: assignedShip ? 'Reassign Ship' : 'Assign Ship',\n        icon: <Ship className=\"h-4 w-4\" />,\n        action: () => {}, // No-op action for parent menu\n        children: mockShips\n          .filter(ship => ship.status === 'idle' || ship.targetNode === resource.id)\n          .map(ship => ({\n            id: ship.id,\n            label: ship.name,\n            icon: <Rocket className=\"h-4 w-4\" />,\n            action: () => {\n              // Handle ship assignment\n              console.log(`Assigning ${ship.name} to ${resource.name}`);\n            },\n          })),\n      },\n      {\n        id: 'set-priority',\n        label: 'Set Priority',\n        icon: <ChevronRight className=\"h-4 w-4\" />,\n        action: () => {}, // No-op action for parent menu\n        children: [1, 2, 3, 4, 5].map(priority => ({\n          id: `priority-${priority}`,\n          label: `Priority ${priority}`,\n          action: () => {\n            // Handle priority change\n            console.log(`Setting ${resource.name} priority to ${priority}`);\n          },\n        })),\n      },\n    ];\n  };\n\n  // Handle resource drop on storage\n  const handleResourceDrop = (item: DragItem, storage: (typeof mockStorageData)[0]) => {\n    if (item.type === 'resource') {\n      // Handle resource transfer\n      console.log(`Transferring ${item.data.type} to ${storage.resourceType} storage`);\n    }\n  };\n\n  return (\n    <div className=\"flex h-full flex-col\">\n      {/* Header */}\n      <div className=\"mb-6 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-xl font-bold text-white\">Mineral Processing</h2>\n          <button\n            onClick={() => setShowTutorial(true)}\n            className=\"p-2 text-gray-400 hover:text-gray-300\"\n          >\n            <HelpCircle className=\"h-5 w-5\" />\n          </button>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => setViewMode(prev => (prev === 'map' ? 'grid' : 'map'))}\n            className=\"p-2 text-gray-400 hover:text-gray-300\"\n          >\n            {viewMode === 'map' ? <Grid2X2 className=\"h-5 w-5\" /> : <Map className=\"h-5 w-5\" />}\n          </button>\n          <button className=\"p-2 text-gray-400 hover:text-gray-300\">\n            <Settings className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"mb-4 flex items-center space-x-4\">\n        <select\n          value={sortBy}\n          onChange={e => setSortBy(e.target.value as SortOption)}\n          className=\"rounded-lg border border-gray-700 bg-gray-800 px-3 py-1.5 text-sm text-gray-300\"\n        >\n          <option value=\"priority\">Sort by Priority</option>\n          <option value=\"name\">Sort by Name</option>\n          <option value=\"type\">Sort by Type</option>\n          <option value=\"abundance\">Sort by Abundance</option>\n          <option value=\"distance\">Sort by Distance</option>\n        </select>\n        <button\n          onClick={() => setSortOrder(prev => (prev === 'asc' ? 'desc' : 'asc'))}\n          className=\"rounded-lg bg-gray-800 p-1.5 text-gray-400 hover:text-gray-300\"\n        >\n          {sortOrder === 'asc' ? (\n            <ArrowUp className=\"h-4 w-4\" />\n          ) : (\n            <ArrowDown className=\"h-4 w-4\" />\n          )}\n        </button>\n      </div>\n\n      {/* Resource View (Map or Grid) */}\n      {viewMode === 'map' ? (\n        <MiningMap\n          resources={filteredResources}\n          selectedNode={selectedNode}\n          onSelectNode={setSelectedNode}\n          techBonuses={techBonuses}\n          ships={mockShips}\n          quality=\"high\"\n        >\n          <ResourceTransfer transfers={mockTransfers} />\n        </MiningMap>\n      ) : (\n        <div className=\"grid flex-1 grid-cols-2 gap-4 overflow-y-auto\">\n          {filteredResources.map(resource => {\n            const { handleContextMenu, ContextMenuComponent } = useContextMenu({\n              items: getResourceMenuItems(resource),\n            });\n\n            return (\n              <div key={resource.id}>\n                <Draggable\n                  item={{\n                    id: resource.id,\n                    type: 'resource',\n                    data: resource,\n                  }}\n                >\n                  <div onContextMenu={handleContextMenu}>\n                    <ResourceNode\n                      resource={resource}\n                      isSelected={selectedNode?.id === resource.id}\n                      techBonuses={techBonuses}\n                      onClick={() => setSelectedNode(resource)}\n                    />\n                  </div>\n                </Draggable>\n                {ContextMenuComponent}\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Storage Section */}\n      <div className=\"mt-4 grid grid-cols-2 gap-4\">\n        <DropTarget\n          accept={['resource']}\n          onDrop={item => handleResourceDrop(item, mockStorageData[0])}\n          className=\"rounded-lg bg-gray-800 p-4 transition-colors hover:bg-gray-800/80\"\n        >\n          <ResourceStorage storageData={mockStorageData} />\n        </DropTarget>\n      </div>\n\n      {/* Mining Fleet Status */}\n      <div className=\"mt-4\">\n        <h3 className=\"mb-3 text-lg font-medium text-white\">Mining Fleet</h3>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {mockShips.map(ship => {\n            const assignedResource = mockResources.find(r => r.id === ship.targetNode);\n\n            return (\n              <Draggable\n                key={ship.id}\n                item={{\n                  id: ship.id,\n                  type: 'ship',\n                  data: ship,\n                }}\n              >\n                <div className=\"rounded-lg bg-gray-800 p-4\">\n                  <div className=\"mb-2 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Ship className=\"h-4 w-4 text-cyan-400\" />\n                      <span className=\"font-medium text-gray-200\">{ship.name}</span>\n                    </div>\n                    <span\n                      className={`rounded-full px-2 py-0.5 text-xs ${\n                        ship.status === 'mining'\n                          ? 'bg-green-900/50 text-green-400'\n                          : ship.status === 'returning'\n                            ? 'bg-blue-900/50 text-blue-400'\n                            : 'bg-gray-900/50 text-gray-400'\n                      }`}\n                    >\n                      {ship.status}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-400\">\n                    {assignedResource ? <>Mining: {assignedResource.name}</> : <>No assignment</>}\n                  </div>\n                  <div className=\"mt-2 text-xs text-gray-500\">\n                    Cargo: {ship.currentLoad}/{ship.capacity} • Efficiency:{' '}\n                    {Math.round(ship.efficiency * 100)}%\n                  </div>\n                </div>\n              </Draggable>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Tutorial Modal */}\n      {showTutorial && <MiningTutorial onClose={() => setShowTutorial(false)} />}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ResourceNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ResourceStorage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ResourceTransfer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/TechBonus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ThresholdManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ThresholdPresetsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ThresholdStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/HiringPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/OfficerAcademy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/OfficerCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/OfficerDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/hangar/HangarModule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/hangar/ShipBuildingInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/hangar/ShipHangar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockShips' is assigned a value but never used.","line":51,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'queueItem' is defined but never used.","line":170,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Grid2X2, List, Rocket, Search } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useScalingSystem } from '../../../../hooks/game/useScalingSystem';\nimport { ShipHangarManager } from '../../../../managers/module/ShipHangarManager';\nimport { ShipBuildQueueItem } from '../../../../types/buildings/ShipHangarTypes';\nimport { Effect } from '../../../../types/core/GameTypes';\nimport { CommonShip } from '../../../../types/ships/CommonShipTypes';\nimport {\n  WeaponSystem as BaseWeaponSystem,\n  WeaponCategory,\n  WeaponStatus,\n} from '../../../../types/weapons/WeaponTypes';\nimport { createWeaponEffect, createWeaponLike } from '../../../../utils/weapons/weaponEffectUtils';\nimport { PlayerShipCustomization } from '../../../ships/player/customization/PlayerShipCustomization';\nimport { PlayerShipUpgradeSystem } from '../../../ships/player/customization/PlayerShipUpgradeSystem';\nimport { WarShip } from '../../../ships/player/variants/warships/WarShip';\n\ninterface HangarWeaponSystem extends BaseWeaponSystem {\n  name: string;\n}\n\ninterface Ship {\n  id: string;\n  name: string;\n  type:\n    | 'spitflare'\n    | 'starSchooner'\n    | 'orionFrigate'\n    | 'harbringerGalleon'\n    | 'midwayCarrier'\n    | 'motherEarthRevenge';\n  tier: 1 | 2 | 3;\n  status: 'idle' | 'patrolling' | 'engaging' | 'returning' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: HangarWeaponSystem[];\n  abilities: Array<{\n    name: string;\n    description: string;\n    cooldown: number;\n    duration: number;\n    active: boolean;\n    effect: Effect;\n  }>;\n  alerts?: string[];\n}\n\n// Mock data for demonstration\nconst mockShips: Ship[] = [\n  {\n    id: 'spitflare-1',\n    name: 'Spitflare Alpha',\n    type: 'spitflare',\n    tier: 1,\n    status: 'idle',\n    hull: 100,\n    maxHull: 100,\n    shield: 50,\n    maxShield: 50,\n    weapons: [\n      {\n        id: 'mg-1',\n        name: 'Machine Gun',\n        type: 'machineGun',\n        damage: 10,\n        range: 100,\n        cooldown: 5,\n        status: 'ready',\n      },\n    ],\n    abilities: [\n      {\n        name: 'Machine Gun',\n        description: 'Standard weapon system',\n        cooldown: 5,\n        duration: 10,\n        active: false,\n        effect: createWeaponEffect(\n          createWeaponLike({\n            id: 'mg-1',\n            type: 'machineGun',\n            damage: 10,\n            cooldown: 5,\n            displayName: 'Machine Gun',\n          })\n        ),\n      },\n    ],\n  },\n  {\n    id: 'schooner-1',\n    name: 'Star Schooner Beta',\n    type: 'starSchooner',\n    tier: 2,\n    status: 'patrolling',\n    hull: 150,\n    maxHull: 150,\n    shield: 100,\n    maxShield: 100,\n    weapons: [\n      {\n        id: 'rail-1',\n        name: 'Rail Gun',\n        type: 'railGun',\n        damage: 25,\n        range: 200,\n        cooldown: 10,\n        status: 'charging',\n      },\n    ],\n    abilities: [\n      {\n        name: 'Rail Gun',\n        description: 'Standard weapon system',\n        cooldown: 10,\n        duration: 10,\n        active: false,\n        effect: createWeaponEffect(\n          createWeaponLike({\n            id: 'rail-1',\n            type: 'railGun',\n            damage: 25,\n            cooldown: 10,\n            displayName: 'Rail Gun',\n          })\n        ),\n      },\n    ],\n  },\n];\n\ninterface ShipHangarProps {\n  manager: ShipHangarManager;\n}\n\nexport function ShipHangar({ manager }: ShipHangarProps) {\n  const [filter, setFilter] = useState<'all' | 'idle' | 'active' | 'damaged'>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedShip, setSelectedShip] = useState<Ship | null>(null);\n  const [view, setView] = useState<'grid' | 'list'>('grid');\n  const [showCustomization, setShowCustomization] = useState(false);\n  const [ships, setShips] = useState<Ship[]>([]);\n  const [buildQueue, setBuildQueue] = useState<ShipBuildQueueItem[]>([]);\n\n  const scaling = useScalingSystem();\n  const quality =\n    scaling.performance.fps > 45 ? 'high' : scaling.performance.fps > 30 ? 'medium' : 'low';\n\n  useEffect(() => {\n    // Initial load\n    const dockedShips = manager.getDockedShips();\n    const convertedShips = dockedShips.map(convertCommonShipToShip);\n    setShips(convertedShips);\n    setBuildQueue(manager.getBuildQueue());\n\n    // Subscribe to events\n    const handleShipDocked = ({ ship }: { ship: CommonShip }) => {\n      setShips(prev => [...prev, convertCommonShipToShip(ship)]);\n    };\n\n    const handleShipLaunched = ({ ship }: { ship: CommonShip }) => {\n      setShips(prev => prev.filter(s => s.id !== ship.id));\n      if (selectedShip?.id === ship.id) {\n        setSelectedShip(null);\n      }\n    };\n\n    const handleBuildStarted = ({ queueItem }: { queueItem: ShipBuildQueueItem }) => {\n      setBuildQueue(manager.getBuildQueue());\n    };\n\n    const handleBuildCompleted = ({ ship }: { ship: CommonShip }) => {\n      setBuildQueue(manager.getBuildQueue());\n      setShips(prev => [...prev, convertCommonShipToShip(ship)]);\n    };\n\n    const handleBuildProgressed = () => {\n      setBuildQueue(manager.getBuildQueue());\n    };\n\n    manager.on('shipDocked', handleShipDocked);\n    manager.on('shipLaunched', handleShipLaunched);\n    manager.on('buildStarted', handleBuildStarted);\n    manager.on('buildCompleted', handleBuildCompleted);\n    manager.on('buildProgressed', handleBuildProgressed);\n\n    return () => {\n      manager.off('shipDocked', handleShipDocked);\n      manager.off('shipLaunched', handleShipLaunched);\n      manager.off('buildStarted', handleBuildStarted);\n      manager.off('buildCompleted', handleBuildCompleted);\n      manager.off('buildProgressed', handleBuildProgressed);\n    };\n  }, [manager]);\n\n  // Convert CommonShip to Ship interface\n  const convertCommonShipToShip = (commonShip: CommonShip): Ship => {\n    const weapons = commonShip.abilities.map(ability => ({\n      id: crypto.randomUUID(),\n      name: ability.name,\n      type: 'machineGun' as WeaponCategory,\n      damage: 10,\n      range: 100,\n      cooldown: ability.cooldown,\n      status: 'ready' as WeaponStatus,\n    }));\n\n    return {\n      id: commonShip.id,\n      name: commonShip.name,\n      type: commonShip.name.toLowerCase().split('-')[0] as Ship['type'],\n      tier: 1,\n      status: commonShip.status === 'ready' ? 'idle' : 'damaged',\n      hull: commonShip.stats.defense.armor,\n      maxHull: commonShip.stats.defense.armor,\n      shield: commonShip.stats.defense.shield,\n      maxShield: commonShip.stats.defense.shield,\n      weapons,\n      abilities: weapons.map(w => ({\n        name: w.name,\n        description: 'Standard weapon system',\n        cooldown: w.cooldown,\n        duration: 10,\n        active: false,\n        effect: createWeaponEffect(createWeaponLike(w)),\n      })),\n    };\n  };\n\n  const filteredShips = ships.filter(ship => {\n    if (searchQuery && !ship.name.toLowerCase().includes(searchQuery.toLowerCase())) {\n      return false;\n    }\n    if (filter === 'idle' && ship.status !== 'idle') {\n      return false;\n    }\n    if (filter === 'active' && !['patrolling', 'engaging'].includes(ship.status)) {\n      return false;\n    }\n    if (filter === 'damaged' && ship.status !== 'damaged') {\n      return false;\n    }\n    return true;\n  });\n\n  const handleDeploy = (shipId: string) => {\n    try {\n      manager.launchShip(shipId);\n    } catch (error) {\n      console.error('Failed to launch ship:', error);\n    }\n  };\n\n  const handleRecall = (shipId: string) => {\n    const ship = ships.find(s => s.id === shipId);\n    if (ship) {\n      try {\n        const commonShip: CommonShip = {\n          id: ship.id,\n          name: ship.name,\n          category: ship.type.includes('void-dredger')\n            ? 'mining'\n            : ship.type.includes('schooner')\n              ? 'recon'\n              : 'war',\n          status: ship.status === 'idle' ? 'ready' : 'damaged',\n          stats: {\n            health: ship.hull,\n            maxHealth: ship.maxHull,\n            shield: ship.shield,\n            maxShield: ship.maxShield,\n            energy: 100,\n            maxEnergy: 100,\n            speed: 10,\n            turnRate: 5,\n            cargo: 0,\n            weapons: [],\n            abilities: [],\n            defense: {\n              armor: ship.hull,\n              shield: ship.shield,\n              evasion: 0,\n            },\n            mobility: {\n              speed: 10,\n              turnRate: 5,\n              acceleration: 5,\n            },\n          },\n          abilities: ship.weapons.map(w => ({\n            name: w.name,\n            description: 'Standard weapon system',\n            cooldown: w.cooldown,\n            duration: 10,\n            active: false,\n            effect: createWeaponEffect(createWeaponLike(w)),\n          })),\n        };\n        manager.dockShip(commonShip);\n      } catch (error) {\n        console.error('Failed to dock ship:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-4 flex overflow-hidden rounded-lg border border-gray-700 bg-gray-900/95 shadow-2xl backdrop-blur-md\">\n      {/* Ship List */}\n      <div className=\"w-2/3 border-r border-gray-700 p-6\">\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Rocket className=\"h-6 w-6 text-indigo-400\" />\n            <h2 className=\"text-xl font-bold text-white\">Ship Hangar</h2>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search ships...\"\n                className=\"w-64 rounded-lg border border-gray-700 bg-gray-800/90 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n              />\n              <Search className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n\n            {/* View Toggle */}\n            <div className=\"flex rounded-lg bg-gray-800 p-1\">\n              <button\n                onClick={() => setView('grid')}\n                className={`rounded p-1.5 ${\n                  view === 'grid' ? 'bg-indigo-600 text-white' : 'text-gray-400 hover:text-gray-300'\n                }`}\n              >\n                <Grid2X2 className=\"h-5 w-5\" />\n              </button>\n              <button\n                onClick={() => setView('list')}\n                className={`rounded p-1.5 ${\n                  view === 'list' ? 'bg-indigo-600 text-white' : 'text-gray-400 hover:text-gray-300'\n                }`}\n              >\n                <List className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Filter Controls */}\n        <div className=\"mb-6 flex space-x-2\">\n          {[\n            { id: 'all', label: 'All Ships' },\n            { id: 'idle', label: 'Idle' },\n            { id: 'active', label: 'Active' },\n            { id: 'damaged', label: 'Damaged' },\n          ].map(({ id, label }) => (\n            <button\n              key={id}\n              onClick={() => setFilter(id as 'all' | 'idle' | 'active' | 'damaged')}\n              className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                filter === id\n                  ? 'bg-indigo-600 text-white'\n                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n              }`}\n            >\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Ship Grid */}\n        <div\n          className={`${\n            view === 'grid' ? 'grid grid-cols-2 gap-6' : 'space-y-4'\n          } max-h-[calc(100vh-16rem)] overflow-y-auto`}\n        >\n          {filteredShips.map(ship => (\n            <WarShip\n              key={ship.id}\n              ship={ship}\n              quality={quality}\n              onDeploy={() => handleDeploy(ship.id)}\n              onRecall={() => handleRecall(ship.id)}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Ship Details Panel */}\n      <div className=\"w-1/3 p-6\">\n        {selectedShip ? (\n          <>\n            <div className=\"mb-4 flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium text-white\">{selectedShip.name}</h3>\n              <button\n                onClick={() => setShowCustomization(prev => !prev)}\n                className=\"rounded bg-indigo-600 px-3 py-1 text-sm text-white hover:bg-indigo-700\"\n              >\n                {showCustomization ? 'Show Upgrades' : 'Customize'}\n              </button>\n            </div>\n            {showCustomization ? (\n              <PlayerShipCustomization\n                ship={{\n                  id: selectedShip.id,\n                  name: selectedShip.name,\n                  type:\n                    selectedShip.type === 'motherEarthRevenge'\n                      ? 'midwayCarrier'\n                      : selectedShip.type,\n                  tier: selectedShip.tier,\n                  customization: {\n                    colors: [],\n                    patterns: [],\n                    decals: [],\n                  },\n                  loadout: {\n                    weapons: [],\n                    shields: [],\n                    engines: [],\n                  },\n                }}\n                onApplyCustomization={() => {}}\n                onEquipLoadout={() => {}}\n              />\n            ) : (\n              <PlayerShipUpgradeSystem\n                ship={{\n                  id: selectedShip.id,\n                  name: selectedShip.name,\n                  type:\n                    selectedShip.type === 'motherEarthRevenge'\n                      ? 'midwayCarrier'\n                      : selectedShip.type,\n                  tier: selectedShip.tier,\n                  upgradeAvailable: true,\n                  requirements: [],\n                  stats: {\n                    hull: {\n                      current: selectedShip.hull,\n                      upgraded: selectedShip.hull * 1.5,\n                    },\n                    shield: {\n                      current: selectedShip.shield,\n                      upgraded: selectedShip.shield * 1.5,\n                    },\n                    weapons: { current: 100, upgraded: 150 },\n                    speed: { current: 100, upgraded: 120 },\n                  },\n                  resourceCost: [],\n                  visualUpgrades: [],\n                }}\n                onUpgrade={() => {}}\n                onPreviewUpgrade={() => {}}\n              />\n            )}\n          </>\n        ) : (\n          <div className=\"flex h-full items-center justify-center text-center text-gray-400\">\n            <div>\n              <Rocket className=\"mx-auto mb-4 h-12 w-12 opacity-50\" />\n              <p>Select a ship to view details and manage loadout</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Build Queue Panel */}\n      <div className=\"absolute bottom-0 left-0 right-0 border-t border-gray-700 bg-gray-800/90 p-4\">\n        <div className=\"mb-2 flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium text-white\">Build Queue</h4>\n          <span className=\"text-xs text-gray-400\">\n            {buildQueue.length} / {manager.getState().maxQueueSize}\n          </span>\n        </div>\n        <div className=\"flex space-x-4 overflow-x-auto\">\n          {buildQueue.map(item => (\n            <div key={item.id} className=\"w-48 flex-shrink-0 rounded-lg bg-gray-700 p-3\">\n              <div className=\"mb-2 flex items-center justify-between\">\n                <span className=\"text-sm text-white\">{item.shipClass}</span>\n                <button\n                  onClick={() => manager.cancelBuild(item.id)}\n                  className=\"text-xs text-gray-400 hover:text-white\"\n                >\n                  Cancel\n                </button>\n              </div>\n              <div className=\"h-2 w-full rounded-full bg-gray-600\">\n                <div\n                  className=\"h-2 rounded-full bg-indigo-500\"\n                  style={{ width: `${item.progress * 100}%` }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Docking Bay Status */}\n      <div className=\"absolute bottom-6 left-6 flex items-center space-x-2 rounded-lg border border-indigo-700/30 bg-indigo-900/50 px-4 py-2\">\n        <Rocket className=\"h-4 w-4 text-indigo-400\" />\n        <span className=\"text-sm text-indigo-200\">\n          {ships.length} Ships Docked •{' '}\n          {ships.filter(s => ['engaging', 'patrolling'].includes(s.status)).length} Active\n        </span>\n      </div>\n\n      {/* Warnings */}\n      {ships.some(s => s.status === 'damaged') && (\n        <div className=\"absolute bottom-6 right-6 flex items-center space-x-2 rounded-lg border border-red-700/30 bg-red-900/50 px-4 py-2\">\n          <Rocket className=\"h-4 w-4 text-red-400\" />\n          <span className=\"text-sm text-red-200\">Ships requiring repairs detected</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/radar/RadarModule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/trading/TradingHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/mothership/MothershipCore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/combat/BattleEnvironment.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FleetAIResult' is defined but never used.","line":113,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateParticles' is assigned a value but never used.","line":248,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":248,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleCollisionEffect' is assigned a value but never used.","line":279,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleThreatDetection' is assigned a value but never used.","line":355,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":355,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertTriangle, Shield, Zap } from 'lucide-react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { CombatAutomationEffect } from '../../effects/component_effects/CombatAutomationEffect';\nimport { useFleetAI } from '../../hooks/factions/useFleetAI';\nimport { useGlobalEvents } from '../../hooks/game/useGlobalEvents';\nimport { useVPR } from '../../hooks/ui/useVPR';\nimport { ModuleEvent, moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { Position } from '../../types/core/GameTypes';\nimport { FactionId } from '../../types/ships/FactionTypes';\n\ninterface HazardVPR {\n  type: Hazard['type'];\n  severity: Hazard['severity'];\n  effectType: Hazard['effect']['type'];\n  visualTier: 1 | 2 | 3;\n  animationSet: {\n    idle: string;\n    active: string;\n    impact: string;\n  };\n  particleSystem: {\n    density: number;\n    color: string;\n    pattern: 'circular' | 'radial' | 'directed';\n  };\n}\n\ninterface Hazard {\n  id: string;\n  type: 'asteroids' | 'debris' | 'radiation' | 'anomaly';\n  position: { x: number; y: number };\n  radius: number;\n  severity: 'low' | 'medium' | 'high';\n  effect: {\n    type: 'damage' | 'slow' | 'shield' | 'weapon';\n    value: number;\n  };\n  movement?: {\n    speed: number;\n    direction: number;\n  };\n  particles?: number;\n  vpr?: HazardVPR;\n}\n\ninterface TechBonuses {\n  hazardResistance: number;\n  detectionRange: number;\n  effectPotency: number;\n}\n\ninterface CombatUnit {\n  id: string;\n  type:\n    | 'spitflare'\n    | 'starSchooner'\n    | 'orionFrigate'\n    | 'harbringerGalleon'\n    | 'midwayCarrier'\n    | 'motherEarthRevenge';\n  tier: 1 | 2 | 3;\n  position: { x: number; y: number };\n  status: 'idle' | 'patrolling' | 'engaging' | 'returning' | 'damaged';\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  weapons: WeaponSystem[];\n}\n\ninterface WeaponSystem {\n  id: string;\n  type: 'machineGun' | 'gaussCannon' | 'railGun' | 'mgss' | 'rockets';\n  damage: number;\n  range: number;\n  cooldown: number;\n  status: 'ready' | 'charging' | 'cooling';\n  upgrades?: {\n    name: string;\n    description: string;\n    unlocked: boolean;\n  }[];\n}\n\ninterface BattleEnvironmentProps {\n  hazards: Hazard[];\n  units: CombatUnit[];\n  fleetId: string;\n  factionId: FactionId;\n  onHazardEffect: (hazardId: string, shipId: string, effect: Hazard['effect']) => void;\n  onWeaponFire: (weaponId: string, targetId: string) => void;\n  onUnitMove: (unitId: string, position: { x: number; y: number }) => void;\n  quality: 'low' | 'medium' | 'high';\n  tier: 1 | 2 | 3;\n  techBonuses?: TechBonuses;\n  onThreatDetected?: (hazard: Hazard) => void;\n}\n\ninterface FormationLines {\n  points: Array<{ x: number; y: number }>;\n  style: 'solid' | 'dashed';\n  color: string;\n  opacity: number;\n}\n\ninterface RangeCircle {\n  center: { x: number; y: number };\n  radius: number;\n  type: 'engagement' | 'support';\n  opacity: number;\n}\n\ninterface FleetAIResult {\n  formationPatterns: {\n    defensive: {\n      spacing: number;\n      facing: number;\n      pattern: 'defensive';\n      adaptiveSpacing: boolean;\n    };\n    offensive: {\n      spacing: number;\n      facing: number;\n      pattern: 'offensive';\n      adaptiveSpacing: boolean;\n    };\n    balanced: {\n      spacing: number;\n      facing: number;\n      pattern: 'balanced';\n      adaptiveSpacing: boolean;\n    };\n  };\n  adaptiveAI: {\n    experienceLevel: number;\n    performance: {\n      damageEfficiency: number;\n      survivalRate: number;\n    };\n  };\n  factionBehavior: {\n    aggressionLevel: number;\n    territorialControl: {\n      facing: number;\n    };\n  };\n  visualFeedback?: {\n    formationLines: FormationLines;\n    rangeCircles: RangeCircle[];\n  };\n}\n\nexport function BattleEnvironment({\n  hazards,\n  units,\n  fleetId,\n  factionId,\n  onHazardEffect,\n  onWeaponFire,\n  onUnitMove,\n  quality,\n  tier,\n  techBonuses = { hazardResistance: 1, detectionRange: 1, effectPotency: 1 },\n  onThreatDetected,\n}: BattleEnvironmentProps) {\n  // Use refs for mutable state that doesn't need re-renders\n  const activeHazardsRef = useRef(hazards);\n  const particlePositionsRef = useRef<Record<string, Array<{ x: number; y: number }>>>({});\n  const weaponEffectsRef = useRef<Record<string, { active: boolean; type: string }>>({});\n\n  // State that needs re-renders\n  const [impactAnimations, setImpactAnimations] = useState<Record<string, boolean>>({});\n  const [automationEffects, setAutomationEffects] = useState<\n    Array<{\n      id: string;\n      type: 'formation' | 'engagement' | 'repair' | 'shield' | 'attack' | 'retreat';\n      position: Position;\n      timestamp: number;\n    }>\n  >([]);\n\n  // Batch updates using requestAnimationFrame\n  const requestUpdate = useCallback(() => {\n    requestAnimationFrame(() => {\n      setImpactAnimations(prev => ({ ...prev }));\n    });\n  }, []);\n\n  // Memoize event handlers\n  const { emitEvent } = useGlobalEvents();\n  const { getVPRAnimationSet } = useVPR();\n  const fleetAIResult = useFleetAI(fleetId, factionId);\n\n  // Memoize fleet AI result\n  const fleetAI = useMemo(\n    () => ({\n      formationPatterns: fleetAIResult.formationPatterns,\n      adaptiveAI: fleetAIResult.adaptiveAI,\n      factionBehavior: {\n        aggressionLevel: fleetAIResult.factionBehavior.behaviorState.aggression,\n        territorialControl: {\n          facing: fleetAIResult.factionBehavior.territory.center.x || 0,\n        },\n      },\n      visualFeedback: {\n        formationLines: {\n          points: [],\n          style: 'solid',\n          color: '#fff',\n          opacity: 0.5,\n        },\n        rangeCircles: [],\n      },\n    }),\n    [fleetAIResult]\n  );\n\n  // Memoize tech-enhanced values\n  const enhancedValues = useMemo(\n    () => ({\n      detectionRadius: 1000 * techBonuses.detectionRange,\n      hazardResistance: Math.min(0.9, techBonuses.hazardResistance),\n      effectMultiplier: Math.max(0.1, techBonuses.effectPotency),\n    }),\n    [techBonuses]\n  );\n\n  // Optimize collision detection with spatial partitioning\n  const spatialGrid = useMemo(() => {\n    const grid: Record<string, Set<string>> = {};\n    const cellSize = 100; // Adjust based on typical unit sizes\n\n    units.forEach(unit => {\n      const cellX = Math.floor(unit.position.x / cellSize);\n      const cellY = Math.floor(unit.position.y / cellSize);\n      const cellKey = `${cellX},${cellY}`;\n\n      if (!grid[cellKey]) {\n        grid[cellKey] = new Set();\n      }\n      grid[cellKey].add(unit.id);\n    });\n\n    return grid;\n  }, [units]);\n\n  // Optimize particle system\n  const updateParticles = useCallback(() => {\n    if (quality === 'low') {\n      return;\n    }\n\n    const newPositions: Record<string, Array<{ x: number; y: number }>> = {};\n    activeHazardsRef.current.forEach(hazard => {\n      const baseParticleCount = quality === 'high' ? 20 : 10;\n      const tierMultiplier = 1 + (tier - 1) * 0.5;\n      const particleCount = Math.floor(baseParticleCount * tierMultiplier);\n\n      // Use object pooling for particles\n      const particles = particlePositionsRef.current[hazard.id] || [];\n      while (particles.length < particleCount) {\n        particles.push({ x: 0, y: 0 });\n      }\n\n      // Update particle positions\n      for (let i = 0; i < particleCount; i++) {\n        particles[i].x = hazard.position.x + (Math.random() - 0.5) * hazard.radius;\n        particles[i].y = hazard.position.y + (Math.random() - 0.5) * hazard.radius;\n      }\n\n      newPositions[hazard.id] = particles.slice(0, particleCount);\n    });\n\n    particlePositionsRef.current = newPositions;\n    requestUpdate();\n  }, [quality, tier, requestUpdate]);\n\n  // Enhanced collision effect handling\n  const handleCollisionEffect = useCallback(\n    (hazardId: string, shipId: string, effect: Hazard['effect']) => {\n      // Apply tech bonuses to effect\n      const modifiedEffect = {\n        ...effect,\n        value:\n          effect.value * enhancedValues.effectMultiplier * (1 - enhancedValues.hazardResistance),\n      };\n\n      // Trigger impact animation\n      setImpactAnimations(prev => ({ ...prev, [hazardId]: true }));\n      setTimeout(() => {\n        setImpactAnimations(prev => ({ ...prev, [hazardId]: false }));\n      }, 1000);\n\n      onHazardEffect(hazardId, shipId, modifiedEffect);\n    },\n    [enhancedValues, onHazardEffect]\n  );\n\n  // Handle weapon firing with visual effects\n  const handleWeaponFire = useCallback(\n    (weaponId: string, targetId: string, type: string) => {\n      onWeaponFire(weaponId, targetId);\n      weaponEffectsRef.current[weaponId] = { active: true, type };\n      setTimeout(() => {\n        weaponEffectsRef.current[weaponId] = { active: false, type };\n      }, 1000);\n    },\n    [onWeaponFire]\n  );\n\n  // Optimize combat loop with worker\n  useEffect(() => {\n    const worker = new Worker(new URL('../../workers/combatWorker.ts', import.meta.url));\n\n    worker.onmessage = e => {\n      const { type, data } = e.data;\n      switch (type) {\n        case 'WEAPON_FIRE':\n          handleWeaponFire(data.weaponId, data.targetId, data.weaponType);\n          break;\n        case 'UNIT_MOVE':\n          onUnitMove(data.unitId, data.position);\n          break;\n      }\n    };\n\n    const interval = setInterval(() => {\n      worker.postMessage({\n        type: 'UPDATE',\n        units: units,\n        hazards: activeHazardsRef.current,\n        spatialGrid,\n      });\n    }, 100);\n\n    return () => {\n      clearInterval(interval);\n      worker.terminate();\n    };\n  }, [units, onUnitMove, handleWeaponFire, spatialGrid]);\n\n  // Optimize render with virtualization\n  const virtualizedUnits = useMemo(() => {\n    return units.filter(unit => {\n      return (\n        unit.position.x >= 0 &&\n        unit.position.x <= window.innerWidth &&\n        unit.position.y >= 0 &&\n        unit.position.y <= window.innerHeight\n      );\n    });\n  }, [units]);\n\n  // Handle hazard detection and threat response\n  const handleThreatDetection = useCallback(\n    (hazard: Hazard) => {\n      if (onThreatDetected) {\n        onThreatDetected(hazard);\n      }\n\n      // Emit global event for fleet response\n      emitEvent('THREAT_DETECTED', {\n        hazardId: hazard.id,\n        position: hazard.position,\n        severity: hazard.severity,\n        type: hazard.type,\n      });\n    },\n    [onThreatDetected, emitEvent]\n  );\n\n  // Combat automation effect\n  useEffect(() => {\n    const subscription = moduleEventBus.subscribe('AUTOMATION_STARTED', (event: ModuleEvent) => {\n      if (\n        event.type === 'AUTOMATION_STARTED' &&\n        event.moduleType === 'hangar' &&\n        event.data?.type\n      ) {\n        setAutomationEffects(prev => [\n          ...prev,\n          {\n            id: `${event.moduleId}-${Date.now()}`,\n            type: event.data.type,\n            position: event.data.position || { x: 50, y: 50 },\n            timestamp: Date.now(),\n          },\n        ]);\n\n        // Cleanup old effects\n        setTimeout(() => {\n          setAutomationEffects(prev => prev.filter(effect => Date.now() - effect.timestamp < 2000));\n        }, 2000);\n      }\n    });\n\n    return () => {\n      subscription();\n    };\n  }, []);\n\n  // Get enhanced hazard visuals based on tier and type\n  const getHazardVisuals = useCallback(\n    (hazard: Hazard) => {\n      const baseColor = getHazardColor(hazard.type);\n      const vprAnimations = getVPRAnimationSet(hazard.type, tier);\n\n      return {\n        color: baseColor,\n        glowIntensity: tier * (hazard.severity === 'high' ? 1.5 : 1),\n        animations: vprAnimations,\n        particlePattern: hazard.vpr?.particleSystem.pattern || 'circular',\n      };\n    },\n    [tier, getVPRAnimationSet]\n  );\n\n  const getHazardColor = (type: Hazard['type']) => {\n    switch (type) {\n      case 'asteroids':\n        return 'amber';\n      case 'debris':\n        return 'gray';\n      case 'radiation':\n        return 'green';\n      case 'anomaly':\n        return 'purple';\n      default:\n        return 'blue';\n    }\n  };\n\n  // Add unit movement handling\n  useEffect(() => {\n    const moveInterval = setInterval(() => {\n      units.forEach(unit => {\n        if (unit.status === 'engaging') {\n          const nearestHazard = activeHazardsRef.current.reduce(\n            (nearest, current) => {\n              const currentDist = Math.sqrt(\n                Math.pow(current.position.x - unit.position.x, 2) +\n                  Math.pow(current.position.y - unit.position.y, 2)\n              );\n              const nearestDist = nearest\n                ? Math.sqrt(\n                    Math.pow(nearest.position.x - unit.position.x, 2) +\n                      Math.pow(nearest.position.y - unit.position.y, 2)\n                  )\n                : Infinity;\n              return currentDist < nearestDist ? current : nearest;\n            },\n            null as Hazard | null\n          );\n\n          if (nearestHazard) {\n            const newPosition = {\n              x: unit.position.x + (nearestHazard.position.x - unit.position.x) * 0.1,\n              y: unit.position.y + (nearestHazard.position.y - unit.position.y) * 0.1,\n            };\n            onUnitMove(unit.id, newPosition);\n          }\n        }\n      });\n    }, 100);\n\n    return () => clearInterval(moveInterval);\n  }, [units, onUnitMove]);\n\n  return (\n    <div className=\"relative h-full w-full overflow-hidden\">\n      {/* Combat HUD - Only render visible units */}\n      <div className=\"absolute left-4 top-4 space-y-2\">\n        {virtualizedUnits.map(unit => (\n          <div\n            key={unit.id}\n            className={`rounded-lg border bg-gray-900/80 px-3 py-2 backdrop-blur-sm ${\n              unit.status === 'engaging'\n                ? 'border-red-500'\n                : unit.status === 'damaged'\n                  ? 'border-yellow-500'\n                  : 'border-gray-700'\n            }`}\n          >\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-300\">{unit.type}</span>\n              <span\n                className={`rounded-full px-2 py-0.5 text-xs ${\n                  unit.status === 'engaging'\n                    ? 'bg-red-900/50 text-red-400'\n                    : unit.status === 'damaged'\n                      ? 'bg-yellow-900/50 text-yellow-400'\n                      : 'bg-gray-800 text-gray-400'\n                }`}\n              >\n                {unit.status}\n              </span>\n            </div>\n            {/* Health and Shield Bars */}\n            <div className=\"mt-1 space-y-1\">\n              <div className=\"h-1 overflow-hidden rounded-full bg-gray-700\">\n                <div\n                  className=\"h-full bg-green-500 transition-all\"\n                  style={{ width: `${(unit.health / unit.maxHealth) * 100}%` }}\n                />\n              </div>\n              <div className=\"h-1 overflow-hidden rounded-full bg-gray-700\">\n                <div\n                  className=\"h-full bg-blue-500 transition-all\"\n                  style={{ width: `${(unit.shield / unit.maxShield) * 100}%` }}\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Hazards */}\n      {hazards.map(hazard => {\n        const visuals = getHazardVisuals(hazard);\n\n        return (\n          <div\n            key={hazard.id}\n            className=\"absolute\"\n            style={{\n              left: `${hazard.position.x}%`,\n              top: `${hazard.position.y}%`,\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            {/* Enhanced Hazard Visualization */}\n            <div\n              className={`animate-pulse rounded-full bg-${visuals.color}-500/20 relative overflow-hidden ${impactAnimations[hazard.id] ? visuals.animations.impact : visuals.animations.idle} `}\n              style={{\n                width: `${hazard.radius * 2}px`,\n                height: `${hazard.radius * 2}px`,\n                boxShadow: `0 0 ${hazard.severity === 'high' ? '20px' : '10px'} ${visuals.color}-500/${30 * visuals.glowIntensity}`,\n              }}\n            >\n              {/* Enhanced Particle Effects */}\n              {quality !== 'low' &&\n                particlePositionsRef.current[hazard.id]?.map((particle, index) => (\n                  <div\n                    key={index}\n                    className={`absolute h-1 w-1 rounded-full bg-${visuals.color}-400/50 ${visuals.animations.active} `}\n                    style={{\n                      left: `${particle.x}%`,\n                      top: `${particle.y}%`,\n                      animation: `float ${1 + Math.random()}s infinite`,\n                    }}\n                  />\n                ))}\n\n              {/* Hazard Icon with Tier-based Effects */}\n              <div\n                className={`absolute inset-0 flex items-center justify-center ${visuals.animations.idle}`}\n              >\n                {hazard.type === 'asteroids' && (\n                  <AlertTriangle className={`h-8 w-8 text-${visuals.color}-400`} />\n                )}\n                {hazard.type === 'radiation' && (\n                  <Zap className={`h-8 w-8 text-${visuals.color}-400`} />\n                )}\n                {hazard.type === 'anomaly' && (\n                  <Shield className={`h-8 w-8 text-${visuals.color}-400`} />\n                )}\n              </div>\n            </div>\n\n            {/* Enhanced Effect Indicator */}\n            <div\n              className={`absolute left-1/2 top-full mt-2 -translate-x-1/2 rounded-full px-2 py-1 bg-${visuals.color}-900/80 border border-${visuals.color}-500/50 text-${visuals.color}-200 whitespace-nowrap text-xs ${hazard.severity === 'high' ? 'animate-pulse' : ''} ${visuals.animations.active}`}\n            >\n              {hazard.effect.type.charAt(0).toUpperCase() + hazard.effect.type.slice(1)}:{' '}\n              {Math.round(\n                hazard.effect.value *\n                  enhancedValues.effectMultiplier *\n                  (1 - enhancedValues.hazardResistance)\n              )}\n              {hazard.severity === 'high' && ' ⚠️'}\n              {tier > 1 && ` (Tier ${tier})`}\n            </div>\n          </div>\n        );\n      })}\n\n      {/* Weapon Effects */}\n      {Object.entries(weaponEffectsRef.current).map(([weaponId, effect]) => {\n        if (!effect.active) return null;\n\n        const weapon = units.flatMap(u => u.weapons).find(w => w.id === weaponId);\n        if (!weapon) return null;\n\n        return (\n          <div\n            key={weaponId}\n            className={`absolute transition-opacity ${\n              effect.type === 'machineGun'\n                ? 'bg-yellow-500/50'\n                : effect.type === 'gaussCannon'\n                  ? 'bg-cyan-500/50'\n                  : effect.type === 'railGun'\n                    ? 'bg-violet-500/50'\n                    : effect.type === 'mgss'\n                      ? 'bg-red-500/50'\n                      : 'bg-orange-500/50'\n            }`}\n            style={{\n              width: '4px',\n              height: weapon.range,\n              transformOrigin: 'center',\n              opacity: effect.active ? 1 : 0,\n            }}\n          />\n        );\n      })}\n\n      {/* Formation Lines */}\n      {fleetAI.visualFeedback && (\n        <svg className=\"pointer-events-none absolute inset-0\">\n          <path\n            d={`M ${fleetAI.visualFeedback.formationLines.points.map((p: { x: number; y: number }) => `${p.x},${p.y}`).join(' L ')}`}\n            stroke={fleetAI.visualFeedback.formationLines.color}\n            strokeWidth=\"2\"\n            fill=\"none\"\n            strokeDasharray={\n              fleetAI.visualFeedback.formationLines.style === 'dashed' ? '4 4' : 'none'\n            }\n            opacity={fleetAI.visualFeedback.formationLines.opacity}\n          />\n        </svg>\n      )}\n\n      {/* Range Circles */}\n      {fleetAI.visualFeedback?.rangeCircles.map((circle: RangeCircle, index: number) => (\n        <div\n          key={index}\n          className=\"absolute rounded-full border-2 transition-all\"\n          style={{\n            left: circle.center.x,\n            top: circle.center.y,\n            width: circle.radius * 2,\n            height: circle.radius * 2,\n            transform: 'translate(-50%, -50%)',\n            borderColor:\n              circle.type === 'engagement' ? 'rgba(239, 68, 68, 0.5)' : 'rgba(59, 130, 246, 0.5)',\n            opacity: circle.opacity,\n          }}\n        />\n      ))}\n\n      {/* Combat Automation Effects */}\n      {automationEffects.map(effect => (\n        <CombatAutomationEffect\n          key={effect.id}\n          type={effect.type}\n          position={effect.position}\n          quality={quality}\n          intensity={techBonuses.effectPotency}\n        />\n      ))}\n    </div>\n  );\n}\n\n// Enhanced animation keyframes with tier-based variations\nconst style = document.createElement('style');\nstyle.textContent = `\n  @keyframes float {\n    0%, 100% { transform: translate(0, 0); }\n    50% { transform: translate(3px, -3px); }\n  }\n  \n  @keyframes impact {\n    0% { transform: scale(1); opacity: 1; }\n    50% { transform: scale(1.2); opacity: 0.8; }\n    100% { transform: scale(1); opacity: 1; }\n  }\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.6; }\n  }\n`;\ndocument.head.appendChild(style);\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/combat/SalvageSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/debug/AIDebugOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/factions/FactionAI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/factions/FactionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/FactionDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/equatorHorizon/CelestialArbiter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/equatorHorizon/EtherealGalleon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/equatorHorizon/StellarEquinox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/lostNova/DarkMatterReaper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/lostNova/EclipseScythe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/lostNova/NullHunter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/spaceRats/AsteroidMarauder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/spaceRats/RatKing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/spaceRats/RogueNebula.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/base/BaseShip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSpecialAbility' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair } from 'lucide-react';\nimport { ReactNode, useEffect } from 'react';\nimport { ShipProvider, useShipState } from '../../../contexts/ShipContext';\nimport { BaseEffect } from '../../../effects/types_effects/EffectTypes';\nimport { useShipActions } from '../../../hooks/ships/useShipActions';\nimport { useShipEffects } from '../../../hooks/ships/useShipEffects';\nimport { CommonShipStats } from '../../../types/ships/CommonShipTypes';\nimport { WeaponMount } from '../../../types/weapons/WeaponTypes';\n\ninterface BaseShipProps {\n  id: string;\n  name: string;\n  status: 'engaging' | 'patrolling' | 'retreating' | 'disabled';\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  weapons: WeaponMount[];\n  stats: CommonShipStats;\n  onFire?: (weaponId: string) => void;\n  onEngage?: () => void;\n  onRetreat?: () => void;\n  onSpecialAbility?: () => void;\n  className?: string;\n  children?: ReactNode;\n}\n\n/**\n * BaseShipContent Component\n *\n * Internal component that uses ship state hooks\n */\nfunction BaseShipContent({\n  onFire,\n  onEngage,\n  onRetreat,\n  onSpecialAbility,\n  className = '',\n  children,\n}: Omit<\n  BaseShipProps,\n  'id' | 'name' | 'status' | 'health' | 'maxHealth' | 'shield' | 'maxShield' | 'weapons' | 'stats'\n>) {\n  const { state } = useShipState();\n  const { fireWeapon } = useShipActions();\n  const { activeEffects, clearExpiredEffects } = useShipEffects();\n\n  // Clear expired effects periodically\n  useEffect(() => {\n    const interval = setInterval(clearExpiredEffects, 1000);\n    return () => clearInterval(interval);\n  }, [clearExpiredEffects]);\n\n  // Handle weapon firing\n  const handleFire = (weaponId: string) => {\n    fireWeapon(weaponId);\n    onFire?.(weaponId);\n  };\n\n  return (\n    <div className={`ship-container relative ${className}`}>\n      {/* Ship Header */}\n      <div className=\"ship-header mb-4\">\n        <h3 className=\"text-lg font-medium text-white\">{state.name}</h3>\n        <div\n          className={`status-badge rounded-full px-2 py-1 text-sm ${\n            state.status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : state.status === 'patrolling'\n                ? 'bg-green-900/50 text-green-400'\n                : state.status === 'retreating'\n                  ? 'bg-yellow-900/50 text-yellow-400'\n                  : 'bg-gray-700 text-gray-400'\n          }`}\n        >\n          {state.status.charAt(0).toUpperCase() + state.status.slice(1)}\n        </div>\n      </div>\n\n      {/* Health & Shield Bars */}\n      <div className=\"stats-container mb-4\">\n        <div className=\"stat-bar mb-2\">\n          <div className=\"mb-1 text-sm text-gray-400\">Shield</div>\n          <div className=\"h-2 rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(state.shield / state.maxShield) * 100}%` }}\n            />\n          </div>\n          <div className=\"mt-1 text-xs text-gray-500\">\n            {Math.round(state.shield)}/{state.maxShield}\n          </div>\n        </div>\n        <div className=\"stat-bar\">\n          <div className=\"mb-1 text-sm text-gray-400\">Health</div>\n          <div className=\"h-2 rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-red-500 transition-all\"\n              style={{ width: `${(state.health / state.maxHealth) * 100}%` }}\n            />\n          </div>\n          <div className=\"mt-1 text-xs text-gray-500\">\n            {Math.round(state.health)}/{state.maxHealth}\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"weapons-container mb-4 grid grid-cols-2 gap-3\">\n        {state.weapons.map(mount => {\n          if (!mount.currentWeapon) return null;\n\n          return (\n            <div\n              key={mount.id}\n              className={`rounded-lg p-3 ${\n                mount.currentWeapon.state.status === 'ready'\n                  ? 'bg-gray-800/50 hover:bg-gray-700/50'\n                  : 'bg-gray-800/30'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">\n                  {mount.currentWeapon.config.name}\n                </div>\n                <div\n                  className={`text-xs ${\n                    mount.currentWeapon.state.status === 'ready'\n                      ? 'text-green-400'\n                      : mount.currentWeapon.state.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {mount.currentWeapon.state.status}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Range: {mount.currentWeapon.state.currentStats.range}ly</span>\n                <span>DMG: {mount.currentWeapon.state.currentStats.damage}</span>\n              </div>\n              <button\n                onClick={() => handleFire(mount.id)}\n                disabled={mount.currentWeapon.state.status !== 'ready'}\n                className={`mt-2 flex w-full items-center justify-center space-x-2 rounded px-3 py-1.5 ${\n                  mount.currentWeapon.state.status === 'ready'\n                    ? 'bg-gray-700 text-white hover:bg-gray-600'\n                    : 'cursor-not-allowed bg-gray-800 text-gray-500'\n                }`}\n              >\n                <Crosshair className=\"h-4 w-4\" />\n                <span>Fire</span>\n              </button>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Active Effects */}\n      {activeEffects.length > 0 && (\n        <div className=\"active-effects mb-4\">\n          <div className=\"mb-2 text-sm text-gray-400\">Active Effects</div>\n          <div className=\"space-y-2\">\n            {activeEffects.map((effect: BaseEffect) => (\n              <div key={effect.id} className=\"rounded-lg bg-gray-800/50 px-3 py-2 text-sm\">\n                <div className=\"font-medium text-gray-300\">{effect.name}</div>\n                <div className=\"text-xs text-gray-400\">{effect.description}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Status Effects and Custom Content */}\n      <div className=\"custom-content\">{children}</div>\n\n      {/* Action Buttons */}\n      <div className=\"action-buttons-container mt-4 flex gap-2\">\n        {onEngage && (\n          <button\n            onClick={onEngage}\n            disabled={state.status === 'disabled'}\n            className=\"flex-1 rounded-lg bg-red-900/30 px-4 py-2 text-sm font-medium text-red-400 transition-colors hover:bg-red-900/50 disabled:opacity-50\"\n          >\n            Engage\n          </button>\n        )}\n        {onRetreat && (\n          <button\n            onClick={onRetreat}\n            disabled={state.status === 'disabled'}\n            className=\"flex-1 rounded-lg bg-yellow-900/30 px-4 py-2 text-sm font-medium text-yellow-400 transition-colors hover:bg-yellow-900/50 disabled:opacity-50\"\n          >\n            Retreat\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * BaseShip Component\n *\n * Core ship component that provides common functionality for all ship types:\n * - Health and shield display\n * - Weapon mounting and firing\n * - Status effects\n * - Action buttons\n */\nexport function BaseShip(props: BaseShipProps) {\n  const { id, name, status, health, maxHealth, shield, maxShield, weapons, stats, ...rest } = props;\n\n  return (\n    <ShipProvider\n      initialState={{\n        id,\n        name,\n        status,\n        health,\n        maxHealth,\n        shield,\n        maxShield,\n        weapons,\n        stats,\n      }}\n    >\n      <BaseShipContent {...rest} />\n    </ShipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/CommonShipMovement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/CommonShipStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/EquatorHorizonShip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tactics' is defined but never used.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":73,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":73,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2308,2433],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Shield, Target } from 'lucide-react';\nimport { ReactNode, useCallback } from 'react';\nimport { CombatEffectType } from '../../../effects/types_effects/EffectTypes';\nimport { createEffect, isDamageEffect } from '../../../effects/util_effects/effectUtils';\nimport { useShipEffects } from '../../../hooks/ships/useShipEffects';\nimport { Effect } from '../../../types/core/GameTypes';\nimport { EquatorHorizonShipClass, FactionShipStats } from '../../../types/ships/FactionShipTypes';\nimport { FactionBehaviorType, FactionId } from '../../../types/ships/FactionTypes';\nimport { WeaponMount } from '../../../types/weapons/WeaponTypes';\nimport { createDamageEffect } from '../../../utils/weapons/weaponEffectUtils';\nimport { AbilityButton } from '../../ui/buttons/AbilityButton';\nimport { StatusEffect } from '../../ui/status/StatusEffect';\nimport { FactionShipBase } from './FactionShipBase';\n\ninterface EquatorHorizonShipProps {\n  id: string;\n  name: string;\n  type: EquatorHorizonShipClass;\n  status: 'engaging' | 'patrolling' | 'retreating' | 'disabled';\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  weapons: WeaponMount[];\n  stats: FactionShipStats;\n  tactics: 'aggressive' | 'defensive' | 'hit-and-run' | 'stealth';\n  position: { x: number; y: number };\n  rotation: number;\n  onEngage?: () => void;\n  onRetreat?: () => void;\n  onSpecialAbility?: () => void;\n  onFire?: (weaponId: string) => void;\n  children?: ReactNode;\n}\n\n/**\n * EquatorHorizonShip Component\n *\n * Base component for Equator Horizon faction ships.\n * Provides faction-specific styling and behavior.\n */\nexport function EquatorHorizonShip({\n  id,\n  name,\n  type,\n  status,\n  health,\n  maxHealth,\n  shield,\n  maxShield,\n  weapons,\n  stats,\n  tactics,\n  position,\n  rotation,\n  onEngage,\n  onRetreat,\n  onSpecialAbility,\n  onFire,\n  children,\n}: EquatorHorizonShipProps) {\n  const { addEffect, removeEffect, hasEffect } = useShipEffects();\n\n  // Handle weapon firing\n  const handleFire = useCallback(\n    (weaponId: string) => {\n      const weapon = weapons.find(mount => mount.id === weaponId)?.currentWeapon;\n\n      if (weapon && weapon.state.status === 'ready') {\n        // Apply weapon effects\n        weapon.state.effects.forEach(effect => {\n          if (isDamageEffect(effect)) {\n            console.debug(\n              `[EquatorHorizonShip] Firing weapon ${weaponId} with strength ${effect.strength}`\n            );\n          }\n        });\n\n        // Update weapon state\n        weapon.state.status = 'cooling';\n        setTimeout(() => {\n          if (weapon) {\n            weapon.state.status = 'ready';\n          }\n        }, weapon.config.baseStats.cooldown * 1000);\n\n        // Call the onFire callback if provided\n        onFire?.(weaponId);\n      }\n    },\n    [weapons, onFire]\n  );\n\n  // Faction-specific effects\n  const handleOvercharge = useCallback(() => {\n    const effectId = 'overcharge';\n    const hasOvercharge = hasEffect(effectId);\n    if (hasOvercharge) {\n      removeEffect(effectId);\n      // Remove overcharge effect from weapons\n      weapons.forEach(mount => {\n        if (mount.currentWeapon) {\n          mount.currentWeapon.state.effects = mount.currentWeapon.state.effects.filter(effect => {\n            if (isDamageEffect(effect)) {\n              return effect.id !== effectId;\n            }\n            return true;\n          });\n\n          // Reset weapon stats\n          mount.currentWeapon.state.currentStats = {\n            ...mount.currentWeapon.config.baseStats,\n          };\n        }\n      });\n    } else {\n      // Create base effect for ship\n      const baseEffect = createEffect(\n        effectId,\n        'Overcharge',\n        'damage' as CombatEffectType,\n        1.4,\n        'Increases weapon damage and accuracy',\n        {\n          duration: 10,\n          active: true,\n        }\n      );\n      addEffect(baseEffect);\n\n      // Create weapon effect for each weapon\n      weapons.forEach(mount => {\n        if (mount.currentWeapon) {\n          const weaponEffect = createDamageEffect({\n            id: `${mount.currentWeapon.config.id}-${effectId}`,\n            magnitude: mount.currentWeapon.state.currentStats.damage * 1.4,\n            duration: 10,\n            strength: 1.4,\n            damageType: 'energy',\n            penetration: 0.2,\n          });\n\n          mount.currentWeapon.state.effects = [\n            ...mount.currentWeapon.state.effects.filter(effect => {\n              if (isDamageEffect(effect)) {\n                return effect.id !== weaponEffect.id;\n              }\n              return true;\n            }),\n            weaponEffect,\n          ];\n\n          // Update weapon stats with overcharge\n          const { currentStats } = mount.currentWeapon.state;\n          mount.currentWeapon.state.currentStats = {\n            ...currentStats,\n            damage: currentStats.damage * 1.4,\n            accuracy: Math.min(1, currentStats.accuracy * 1.4),\n          };\n        }\n      });\n    }\n    onSpecialAbility?.();\n  }, [hasEffect, removeEffect, addEffect, weapons, onSpecialAbility]);\n\n  // Handle reinforced shields effect\n  const handleReinforcedShields = useCallback(() => {\n    const effectId = 'reinforced-shields';\n    const hasShields = hasEffect(effectId);\n    if (hasShields) {\n      removeEffect(effectId);\n    } else {\n      const baseEffect = createEffect(\n        effectId,\n        'Reinforced Shields',\n        'shield' as CombatEffectType,\n        1.5,\n        'Boosts shield strength and regeneration',\n        {\n          duration: 15,\n          active: true,\n        }\n      );\n      addEffect(baseEffect);\n    }\n    onSpecialAbility?.();\n  }, [hasEffect, removeEffect, addEffect, onSpecialAbility]);\n\n  return (\n    <FactionShipBase\n      ship={{\n        id,\n        name,\n        class: type,\n        faction: 'equator-horizon' as FactionId,\n        status,\n        tactics: {\n          formation: 'balanced',\n          behavior: 'defensive',\n        } as FactionBehaviorType,\n        category: 'war',\n        health,\n        maxHealth,\n        shield,\n        maxShield,\n        position,\n        rotation,\n        abilities: [\n          {\n            name: 'Overcharge',\n            description: 'Increases weapon damage and accuracy',\n            cooldown: 15,\n            duration: 10,\n            active: hasEffect('overcharge'),\n            effect: {\n              id: 'overcharge',\n              type: 'damage',\n              magnitude: 1.4,\n              duration: 10,\n            } as Effect,\n          },\n          {\n            name: 'Reinforced Shields',\n            description: 'Boosts shield strength and regeneration',\n            cooldown: 20,\n            duration: 15,\n            active: hasEffect('reinforced-shields'),\n            effect: {\n              id: 'reinforced-shields',\n              type: 'shield',\n              magnitude: 1.5,\n              duration: 15,\n            } as Effect,\n          },\n        ],\n        stats,\n      }}\n      onEngage={onEngage}\n      onRetreat={onRetreat}\n      onSpecialAbility={onSpecialAbility}\n      onFire={handleFire}\n    >\n      {/* Status Effects */}\n      <StatusEffect\n        active={hasEffect('overcharge')}\n        icon={Target}\n        label=\"Overcharge\"\n        color=\"amber\"\n      />\n      <StatusEffect\n        active={hasEffect('reinforced-shields')}\n        icon={Shield}\n        label=\"Reinforced Shields\"\n        color=\"cyan\"\n      />\n\n      {/* Ability Buttons */}\n      <AbilityButton\n        active={hasEffect('overcharge')}\n        icon={Target}\n        label=\"Overcharge\"\n        color=\"amber\"\n        onClick={handleOvercharge}\n      />\n      <AbilityButton\n        active={hasEffect('reinforced-shields')}\n        icon={Shield}\n        label=\"Reinforced Shields\"\n        color=\"cyan\"\n        onClick={handleReinforcedShields}\n      />\n\n      {children}\n    </FactionShipBase>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/FactionFleet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/FactionShipBase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/FactionShipStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/LostNovaShip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/SpaceRatShip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/adapters/ShipAdapter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/base/PlayerShipBase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/base/PlayerShipStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/customization/PlayerShipCustomization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/customization/PlayerShipUpgrade.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/customization/PlayerShipUpgradeSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/miningships/VoidDredgerMiner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/reconships/ReconShipControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/reconships/ReconShipStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/HarbringerGalleon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/MidwayCarrier.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/MotherEarthRevenge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/OrionFrigate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair, Shield } from 'lucide-react';\n\ninterface OrionFrigateProps {\n  id: string;\n  status: 'idle' | 'engaging' | 'retreating' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: {\n    id: string;\n    name: string;\n    type: 'machineGun' | 'gaussCannon';\n    damage: number;\n    status: 'ready' | 'charging' | 'cooling';\n  }[];\n  specialAbility: {\n    name: string;\n    description: string;\n    active: boolean;\n    cooldown: number;\n  };\n  onFire: (weaponId: string) => void;\n  onActivateAbility: () => void;\n  onRetreat: () => void;\n}\n\nexport function OrionFrigate({\n  id,\n  status,\n  hull,\n  maxHull,\n  shield,\n  maxShield,\n  weapons,\n  specialAbility,\n  onFire,\n  onActivateAbility,\n  onRetreat,\n}: OrionFrigateProps) {\n  return (\n    <div className=\"rounded-lg border border-violet-700/30 bg-violet-900/20 p-6\">\n      {/* Ship Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-white\">Orion's Frigate</h3>\n          <div className=\"text-sm text-gray-400\">Tier 2 Combat Frigate</div>\n        </div>\n        <div\n          className={`rounded-full px-3 py-1 text-sm ${\n            status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : status === 'retreating'\n                ? 'bg-yellow-900/50 text-yellow-400'\n                : status === 'damaged'\n                  ? 'bg-red-900/50 text-red-400'\n                  : 'bg-green-900/50 text-green-400'\n          }`}\n        >\n          {status.charAt(0).toUpperCase() + status.slice(1)}\n        </div>\n      </div>\n\n      {/* Combat Status */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Hull Integrity</span>\n            <span className={hull < maxHull * 0.3 ? 'text-red-400' : 'text-gray-300'}>\n              {Math.round((hull / maxHull) * 100)}%\n            </span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className={`h-full rounded-full transition-all ${\n                hull < maxHull * 0.3 ? 'bg-red-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${(hull / maxHull) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Shield Power</span>\n            <span className=\"text-gray-300\">{Math.round((shield / maxShield) * 100)}%</span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(shield / maxShield) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"mb-6 space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Weapon Systems</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {weapons.map(weapon => (\n            <button\n              key={weapon.id}\n              onClick={() => onFire(weapon.id)}\n              disabled={weapon.status !== 'ready'}\n              className={`rounded-lg p-3 transition-colors ${\n                weapon.status === 'ready'\n                  ? 'border border-violet-500/30 bg-violet-500/20 hover:bg-violet-500/30'\n                  : 'cursor-not-allowed border border-gray-600/30 bg-gray-700/50'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">{weapon.name}</div>\n                <div\n                  className={`text-xs ${\n                    weapon.status === 'ready'\n                      ? 'text-green-400'\n                      : weapon.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {weapon.status.charAt(0).toUpperCase() + weapon.status.slice(1)}\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-400\">Damage: {weapon.damage}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Special Ability */}\n      <div className=\"mb-6\">\n        <button\n          onClick={onActivateAbility}\n          disabled={specialAbility.active}\n          className={`w-full rounded-lg p-3 text-left transition-colors ${\n            specialAbility.active\n              ? 'border border-violet-500/30 bg-violet-500/20'\n              : 'bg-gray-700/50 hover:bg-gray-600/50'\n          }`}\n        >\n          <div className=\"mb-1 flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-white\">{specialAbility.name}</span>\n            {specialAbility.active ? (\n              <span className=\"text-xs text-green-400\">Active</span>\n            ) : (\n              <span className=\"text-xs text-gray-400\">{specialAbility.cooldown}s</span>\n            )}\n          </div>\n          <p className=\"text-xs text-gray-400\">{specialAbility.description}</p>\n        </button>\n      </div>\n\n      {/* Combat Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <button\n          onClick={() => onFire(weapons[0].id)}\n          disabled={!weapons.some(w => w.status === 'ready')}\n          className={`flex items-center justify-center space-x-2 rounded-lg px-4 py-2 text-sm ${\n            weapons.some(w => w.status === 'ready')\n              ? 'bg-violet-500/20 text-violet-200 hover:bg-violet-500/30'\n              : 'cursor-not-allowed bg-gray-700 text-gray-500'\n          }`}\n        >\n          <Crosshair className=\"h-4 w-4\" />\n          <span>Fire Weapons</span>\n        </button>\n        <button\n          onClick={onRetreat}\n          disabled={status === 'damaged'}\n          className={`flex items-center justify-center space-x-2 rounded-lg bg-gray-700 px-4 py-2 text-sm hover:bg-gray-600 ${\n            status === 'damaged' ? 'cursor-not-allowed opacity-50' : ''\n          }`}\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Retreat</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/PlayerWarShipCombat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/Spitflare.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair, Shield } from 'lucide-react';\n\ninterface SpitflareProps {\n  id: string;\n  status: 'idle' | 'engaging' | 'retreating' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: {\n    id: string;\n    name: string;\n    type: 'machineGun';\n    damage: number;\n    status: 'ready' | 'charging' | 'cooling';\n  }[];\n  onFire: (weaponId: string) => void;\n  onRetreat: () => void;\n}\n\nexport function Spitflare({\n  id,\n  status,\n  hull,\n  maxHull,\n  shield,\n  maxShield,\n  weapons,\n  onFire,\n  onRetreat,\n}: SpitflareProps) {\n  return (\n    <div className=\"rounded-lg border border-cyan-700/30 bg-cyan-900/20 p-6\">\n      {/* Ship Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-white\">Spitflare</h3>\n          <div className=\"text-sm text-gray-400\">Tier 1 Light Fighter</div>\n        </div>\n        <div\n          className={`rounded-full px-3 py-1 text-sm ${\n            status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : status === 'retreating'\n                ? 'bg-yellow-900/50 text-yellow-400'\n                : status === 'damaged'\n                  ? 'bg-red-900/50 text-red-400'\n                  : 'bg-green-900/50 text-green-400'\n          }`}\n        >\n          {status.charAt(0).toUpperCase() + status.slice(1)}\n        </div>\n      </div>\n\n      {/* Combat Status */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Hull Integrity</span>\n            <span className={hull < maxHull * 0.3 ? 'text-red-400' : 'text-gray-300'}>\n              {Math.round((hull / maxHull) * 100)}%\n            </span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className={`h-full rounded-full transition-all ${\n                hull < maxHull * 0.3 ? 'bg-red-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${(hull / maxHull) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Shield Power</span>\n            <span className=\"text-gray-300\">{Math.round((shield / maxShield) * 100)}%</span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(shield / maxShield) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"mb-6 space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Machine Guns</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {weapons.map(weapon => (\n            <button\n              key={weapon.id}\n              onClick={() => onFire(weapon.id)}\n              disabled={weapon.status !== 'ready'}\n              className={`rounded-lg p-3 transition-colors ${\n                weapon.status === 'ready'\n                  ? 'border border-cyan-500/30 bg-cyan-500/20 hover:bg-cyan-500/30'\n                  : 'cursor-not-allowed border border-gray-600/30 bg-gray-700/50'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">{weapon.name}</div>\n                <div\n                  className={`text-xs ${\n                    weapon.status === 'ready'\n                      ? 'text-green-400'\n                      : weapon.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {weapon.status.charAt(0).toUpperCase() + weapon.status.slice(1)}\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-400\">Damage: {weapon.damage}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Combat Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <button\n          onClick={() => onFire(weapons[0].id)}\n          disabled={!weapons.some(w => w.status === 'ready')}\n          className={`flex items-center justify-center space-x-2 rounded-lg px-4 py-2 text-sm ${\n            weapons.some(w => w.status === 'ready')\n              ? 'bg-cyan-500/20 text-cyan-200 hover:bg-cyan-500/30'\n              : 'cursor-not-allowed bg-gray-700 text-gray-500'\n          }`}\n        >\n          <Crosshair className=\"h-4 w-4\" />\n          <span>Fire Weapons</span>\n        </button>\n        <button\n          onClick={onRetreat}\n          disabled={status === 'damaged'}\n          className={`flex items-center justify-center space-x-2 rounded-lg bg-gray-700 px-4 py-2 text-sm hover:bg-gray-600 ${\n            status === 'damaged' ? 'cursor-not-allowed opacity-50' : ''\n          }`}\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Retreat</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/StarSchooner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair, Shield } from 'lucide-react';\n\ninterface StarSchoonerProps {\n  id: string;\n  tier: 1 | 2;\n  status: 'idle' | 'engaging' | 'retreating' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: {\n    id: string;\n    name: string;\n    type: 'railGun';\n    damage: number;\n    status: 'ready' | 'charging' | 'cooling';\n  }[];\n  onFire: (weaponId: string) => void;\n  onRetreat: () => void;\n}\n\nexport function StarSchooner({\n  id,\n  tier,\n  status,\n  hull,\n  maxHull,\n  shield,\n  maxShield,\n  weapons,\n  onFire,\n  onRetreat,\n}: StarSchoonerProps) {\n  return (\n    <div className=\"rounded-lg border border-indigo-700/30 bg-indigo-900/20 p-6\">\n      {/* Ship Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-white\">Star Schooner</h3>\n          <div className=\"text-sm text-gray-400\">Tier {tier} Rail Gun Vessel</div>\n        </div>\n        <div\n          className={`rounded-full px-3 py-1 text-sm ${\n            status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : status === 'retreating'\n                ? 'bg-yellow-900/50 text-yellow-400'\n                : status === 'damaged'\n                  ? 'bg-red-900/50 text-red-400'\n                  : 'bg-green-900/50 text-green-400'\n          }`}\n        >\n          {status.charAt(0).toUpperCase() + status.slice(1)}\n        </div>\n      </div>\n\n      {/* Combat Status */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Hull Integrity</span>\n            <span className={hull < maxHull * 0.3 ? 'text-red-400' : 'text-gray-300'}>\n              {Math.round((hull / maxHull) * 100)}%\n            </span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className={`h-full rounded-full transition-all ${\n                hull < maxHull * 0.3 ? 'bg-red-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${(hull / maxHull) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Shield Power</span>\n            <span className=\"text-gray-300\">{Math.round((shield / maxShield) * 100)}%</span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(shield / maxShield) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"mb-6 space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Rail Gun System</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {weapons.map(weapon => (\n            <button\n              key={weapon.id}\n              onClick={() => onFire(weapon.id)}\n              disabled={weapon.status !== 'ready'}\n              className={`rounded-lg p-3 transition-colors ${\n                weapon.status === 'ready'\n                  ? 'border border-indigo-500/30 bg-indigo-500/20 hover:bg-indigo-500/30'\n                  : 'cursor-not-allowed border border-gray-600/30 bg-gray-700/50'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">{weapon.name}</div>\n                <div\n                  className={`text-xs ${\n                    weapon.status === 'ready'\n                      ? 'text-green-400'\n                      : weapon.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {weapon.status.charAt(0).toUpperCase() + weapon.status.slice(1)}\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-400\">Damage: {weapon.damage}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Combat Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <button\n          onClick={() => onFire(weapons[0].id)}\n          disabled={!weapons.some(w => w.status === 'ready')}\n          className={`flex items-center justify-center space-x-2 rounded-lg px-4 py-2 text-sm ${\n            weapons.some(w => w.status === 'ready')\n              ? 'bg-indigo-500/20 text-indigo-200 hover:bg-indigo-500/30'\n              : 'cursor-not-allowed bg-gray-700 text-gray-500'\n          }`}\n        >\n          <Crosshair className=\"h-4 w-4\" />\n          <span>Fire Rail Gun</span>\n        </button>\n        <button\n          onClick={onRetreat}\n          disabled={status === 'damaged'}\n          className={`flex items-center justify-center space-x-2 rounded-lg bg-gray-700 px-4 py-2 text-sm hover:bg-gray-600 ${\n            status === 'damaged' ? 'cursor-not-allowed opacity-50' : ''\n          }`}\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Retreat</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/WarShip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/trade/TradeRouteVisualizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/DiplomacyPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/DragAndDrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/GalaxyMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/GameHUD.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Notification' is defined but never used.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'categoryColors' is assigned a value but never used.","line":226,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'categoryIcons' is assigned a value but never used.","line":249,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":249,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setActiveCategory' is assigned a value but never used.","line":257,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showTechTree' is assigned a value but never used.","line":258,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'moduleState' is assigned a value but never used.","line":269,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":269,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentMenuItems' is assigned a value but never used.","line":321,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":321,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resourceStats' is assigned a value but never used.","line":323,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":323,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getTierColor' is defined but never used.","line":415,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":415,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crown, Database, Map, Radar, Rocket } from 'lucide-react';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useGame } from '../../contexts/GameContext';\nimport { buildModule, canBuildModule, useModules } from '../../contexts/ModuleContext';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { NotificationSystem, notificationManager } from './NotificationSystem';\nimport { ResourceVisualization } from './ResourceVisualization';\n\ninterface GameHUDProps {\n  empireName: string;\n  onToggleSprawlView: () => void;\n  onToggleVPRView: () => void;\n}\n\ntype MenuCategory = 'mining' | 'exploration' | 'mothership' | 'colony';\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  action: () => void;\n  moduleType?: ModuleType;\n  cost?: {\n    minerals?: number;\n    energy?: number;\n  };\n}\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error';\n  message: string;\n}\n\nconst menuItems: Record<MenuCategory, MenuItem[]> = {\n  mining: [\n    {\n      id: 'mineral-processing',\n      name: 'Mineral Processing',\n      description: 'Process raw minerals and manage resource extraction',\n      moduleType: 'mineral',\n      cost: {\n        minerals: 500,\n        energy: 300,\n      },\n      action: () => {\n        if (canBuildModule('mineral', { minerals: 500, energy: 300 })) {\n          buildModule('mineral', { minerals: 500, energy: 300 });\n        }\n      },\n    },\n    {\n      id: 'mining-fleet',\n      name: 'Mining Fleet',\n      description: 'Manage mining ships and automated resource collection',\n      moduleType: 'hangar',\n      cost: {\n        minerals: 400,\n        energy: 200,\n      },\n      action: () => {\n        if (canBuildModule('hangar', { minerals: 400, energy: 200 })) {\n          buildModule('hangar', { minerals: 400, energy: 200 });\n        }\n      },\n    },\n    {\n      id: 'resource-storage',\n      name: 'Resource Storage',\n      description: 'Monitor and manage resource stockpiles',\n      moduleType: 'resource-manager',\n      cost: {\n        minerals: 300,\n        energy: 100,\n      },\n      action: () => {\n        if (canBuildModule('resource-manager', { minerals: 300, energy: 100 })) {\n          buildModule('resource-manager', { minerals: 300, energy: 100 });\n        }\n      },\n    },\n  ],\n  exploration: [\n    {\n      id: 'recon-hub',\n      name: 'Recon Hub',\n      description: 'Coordinate exploration missions and scout ships',\n      moduleType: 'exploration',\n      cost: {\n        minerals: 400,\n        energy: 300,\n      },\n      action: () => {\n        if (canBuildModule('exploration', { minerals: 400, energy: 300 })) {\n          buildModule('exploration', { minerals: 400, energy: 300 });\n        }\n      },\n    },\n    {\n      id: 'galaxy-map',\n      name: 'Galaxy Map',\n      description: 'View and analyze discovered star systems',\n      moduleType: 'radar',\n      cost: {\n        minerals: 200,\n        energy: 100,\n      },\n      action: () => {\n        if (canBuildModule('radar', { minerals: 200, energy: 100 })) {\n          buildModule('radar', { minerals: 200, energy: 100 });\n        }\n      },\n    },\n    {\n      id: 'anomaly-scanner',\n      name: 'Anomaly Scanner',\n      description: 'Track and investigate spatial anomalies',\n      moduleType: 'radar',\n      cost: {\n        minerals: 300,\n        energy: 200,\n      },\n      action: () => {\n        if (canBuildModule('radar', { minerals: 300, energy: 200 })) {\n          buildModule('radar', { minerals: 300, energy: 200 });\n        }\n      },\n    },\n  ],\n  mothership: [\n    {\n      id: 'ship-hanger',\n      name: 'Ship Hangar',\n      description: 'Build and manage your fleet of ships',\n      moduleType: 'hangar',\n      cost: {\n        minerals: 600,\n        energy: 400,\n      },\n      action: () => {\n        if (canBuildModule('hangar', { minerals: 600, energy: 400 })) {\n          buildModule('hangar', { minerals: 600, energy: 400 });\n        }\n      },\n    },\n    {\n      id: 'radar-system',\n      name: 'Radar System',\n      description: 'Monitor system-wide activity and threats',\n      moduleType: 'radar',\n      cost: {\n        minerals: 300,\n        energy: 200,\n      },\n      action: () => {\n        if (canBuildModule('radar', { minerals: 300, energy: 200 })) {\n          buildModule('radar', { minerals: 300, energy: 200 });\n        }\n      },\n    },\n    {\n      id: 'defense-grid',\n      name: 'Defense Grid',\n      description: 'Manage defensive systems and fortifications',\n      moduleType: 'resource-manager',\n      cost: {\n        minerals: 500,\n        energy: 300,\n      },\n      action: () => {\n        if (canBuildModule('resource-manager', { minerals: 500, energy: 300 })) {\n          buildModule('resource-manager', { minerals: 500, energy: 300 });\n        }\n      },\n    },\n  ],\n  colony: [\n    {\n      id: 'population',\n      name: 'Population',\n      description: 'Manage colonists and population growth',\n      moduleType: 'resource-manager',\n      cost: {\n        minerals: 400,\n        energy: 300,\n      },\n      action: () => {\n        if (canBuildModule('resource-manager', { minerals: 400, energy: 300 })) {\n          buildModule('resource-manager', { minerals: 400, energy: 300 });\n        }\n      },\n    },\n    {\n      id: 'infrastructure',\n      name: 'Infrastructure',\n      description: 'Build and upgrade colony facilities',\n      moduleType: 'resource-manager',\n      cost: {\n        minerals: 500,\n        energy: 400,\n      },\n      action: () => {\n        if (canBuildModule('resource-manager', { minerals: 500, energy: 400 })) {\n          buildModule('resource-manager', { minerals: 500, energy: 400 });\n        }\n      },\n    },\n    {\n      id: 'trade-hub',\n      name: 'Trade Hub',\n      description: 'Establish and monitor trade routes',\n      moduleType: 'trading',\n      cost: {\n        minerals: 400,\n        energy: 300,\n      },\n      action: () => {\n        if (canBuildModule('trading', { minerals: 400, energy: 300 })) {\n          buildModule('trading', { minerals: 400, energy: 300 });\n        }\n      },\n    },\n  ],\n};\n\nconst categoryColors: Record<MenuCategory, { bg: string; border: string; hover: string }> = {\n  mining: {\n    bg: 'from-amber-950/80 to-amber-900/80',\n    border: 'border-amber-700/50',\n    hover: 'hover:bg-amber-800/30',\n  },\n  exploration: {\n    bg: 'from-teal-950/80 to-teal-900/80',\n    border: 'border-teal-700/50',\n    hover: 'hover:bg-teal-800/30',\n  },\n  mothership: {\n    bg: 'from-cyan-950/80 to-cyan-900/80',\n    border: 'border-cyan-700/50',\n    hover: 'hover:bg-cyan-800/30',\n  },\n  colony: {\n    bg: 'from-purple-950/80 to-purple-900/80',\n    border: 'border-purple-700/50',\n    hover: 'hover:bg-purple-800/30',\n  },\n};\n\nconst categoryIcons = {\n  mining: Database,\n  exploration: Radar,\n  mothership: Rocket,\n  colony: Map,\n};\n\nexport function GameHUD({ empireName, onToggleSprawlView, onToggleVPRView }: GameHUDProps) {\n  const [activeCategory, setActiveCategory] = useState<MenuCategory | null>(null);\n  const [showTechTree, setShowTechTree] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const gameContext = useGame();\n  const moduleContext = useModules();\n\n  // Ensure contexts are available\n  if (!gameContext || !moduleContext) {\n    return null;\n  }\n\n  const { state: gameState, dispatch: gameDispatch } = gameContext;\n  const { state: moduleState } = moduleContext;\n\n  // Add notification\n  const addNotification = (\n    type: 'success' | 'error' | 'info' | 'warning',\n    title: string,\n    message: string\n  ) => {\n    notificationManager.show({\n      type,\n      title,\n      message,\n      duration: 5000,\n    });\n  };\n\n  // Update menu items with actual actions and notifications\n  const getUpdatedMenuItems = () => {\n    const updatedItems = { ...menuItems };\n    Object.keys(updatedItems).forEach(category => {\n      updatedItems[category as MenuCategory] = updatedItems[category as MenuCategory].map(item => ({\n        ...item,\n        action: () => {\n          if (item.moduleType && item.cost) {\n            if (canBuildModule(item.moduleType, item.cost)) {\n              buildModule(item.moduleType, item.cost);\n              gameDispatch({\n                type: 'UPDATE_RESOURCES',\n                resources: {\n                  minerals: gameState.resources.minerals - (item.cost?.minerals || 0),\n                  energy: gameState.resources.energy - (item.cost?.energy || 0),\n                },\n              });\n              addNotification(\n                'success',\n                `Successfully built ${item.name}`,\n                `Successfully built ${item.name}`\n              );\n            } else {\n              addNotification(\n                'error',\n                `Insufficient resources to build ${item.name}`,\n                `Insufficient resources to build ${item.name}`\n              );\n            }\n          }\n        },\n      }));\n    });\n    return updatedItems;\n  };\n\n  const currentMenuItems = getUpdatedMenuItems();\n\n  const resourceStats = useMemo(\n    () => ({\n      minerals: {\n        currentAmount: gameState.resources.minerals,\n        minThreshold: 200,\n        maxThreshold: 2000,\n        maxCapacity: 3000,\n        extractionRate: gameState.resourceRates?.minerals || 0,\n      },\n      energy: {\n        currentAmount: gameState.resources.energy,\n        minThreshold: 100,\n        maxThreshold: 1500,\n        maxCapacity: 2000,\n        extractionRate: gameState.resourceRates?.energy || 0,\n      },\n    }),\n    [gameState.resources, gameState.resourceRates]\n  );\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      // Sprawl View toggle\n      if ((e.key === 's' || e.key === 'S') && !e.ctrlKey && !e.metaKey) {\n        onToggleSprawlView();\n        return;\n      }\n\n      // VPR View toggle\n      if ((e.key === 'v' || e.key === 'V') && !e.ctrlKey && !e.metaKey) {\n        onToggleVPRView();\n        return;\n      }\n\n      // Tech Tree toggle\n      if ((e.key === 't' || e.key === 'T') && !e.ctrlKey && !e.metaKey) {\n        setShowTechTree(prev => !prev);\n        return;\n      }\n\n      // Settings toggle\n      if (e.key === 'Escape') {\n        setShowSettings(prev => !prev);\n        return;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [onToggleSprawlView, onToggleVPRView]);\n\n  return (\n    <div className=\"pointer-events-none fixed inset-0\">\n      {/* Top Bar */}\n      <div className=\"pointer-events-auto border-b border-gray-700/50 bg-gray-900/80 p-4 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Crown className=\"h-5 w-5 text-amber-400\" />\n              <span className=\"text-lg font-medium text-white\">{empireName}</span>\n            </div>\n            <ResourceVisualization />\n          </div>\n          <div className=\"flex items-center space-x-4\">{/* ... existing buttons ... */}</div>\n        </div>\n      </div>\n\n      {/* Menu Categories */}\n      <div className=\"pointer-events-auto fixed left-4 top-24 space-y-2\">\n        {/* ... existing menu category buttons ... */}\n      </div>\n\n      {/* Active Category Menu */}\n      {activeCategory && (\n        <div className=\"pointer-events-auto fixed left-24 top-24 w-80 rounded-lg border border-gray-700/50 bg-gray-900/95 p-4 backdrop-blur-sm\">\n          {/* ... existing menu items ... */}\n        </div>\n      )}\n\n      {/* Settings Panel */}\n      {showSettings && (\n        <div className=\"pointer-events-auto fixed right-4 top-24 w-80 rounded-lg border border-gray-700/50 bg-gray-900/95 p-4 backdrop-blur-sm\">\n          {/* ... existing settings ... */}\n        </div>\n      )}\n\n      {/* Notification System */}\n      <NotificationSystem position=\"top-right\" maxNotifications={5} />\n    </div>\n  );\n}\n\nfunction getTierColor(tier: number) {\n  switch (tier) {\n    case 1:\n      return 'emerald';\n    case 2:\n      return 'teal';\n    case 3:\n      return 'cyan';\n    default:\n      return 'green';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/GameLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/NotificationSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/ResourceVisualization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'prev' is defined but never used.","line":127,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AnimatePresence, motion } from 'framer-motion';\nimport { Beaker, Database, Users, Zap } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useResources } from '../../contexts/GameContext';\n\ninterface ResourceDisplayProps {\n  type: 'minerals' | 'energy' | 'population' | 'research';\n  value: number;\n  rate: number;\n  capacity?: number;\n  thresholds?: {\n    low: number;\n    critical: number;\n  };\n}\n\nconst resourceIcons = {\n  minerals: Database,\n  energy: Zap,\n  population: Users,\n  research: Beaker,\n};\n\nconst resourceColors = {\n  minerals: {\n    base: 'text-amber-400',\n    bg: 'bg-amber-900/20',\n    border: 'border-amber-700/30',\n    fill: 'bg-amber-500',\n  },\n  energy: {\n    base: 'text-cyan-400',\n    bg: 'bg-cyan-900/20',\n    border: 'border-cyan-700/30',\n    fill: 'bg-cyan-500',\n  },\n  population: {\n    base: 'text-green-400',\n    bg: 'bg-green-900/20',\n    border: 'border-green-700/30',\n    fill: 'bg-green-500',\n  },\n  research: {\n    base: 'text-purple-400',\n    bg: 'bg-purple-900/20',\n    border: 'border-purple-700/30',\n    fill: 'bg-purple-500',\n  },\n};\n\nfunction ResourceDisplay({ type, value, rate, capacity, thresholds }: ResourceDisplayProps) {\n  const Icon = resourceIcons[type];\n  const colors = resourceColors[type];\n  const percentage = capacity ? (value / capacity) * 100 : 100;\n  const isLow = thresholds && value <= thresholds.low;\n  const isCritical = thresholds && value <= thresholds.critical;\n\n  return (\n    <div className={`p-3 ${colors.bg} rounded-lg border ${colors.border}`}>\n      <div className=\"mb-2 flex items-center space-x-3\">\n        <div className={`rounded-lg p-1.5 ${colors.bg}`}>\n          <Icon className={`h-4 w-4 ${colors.base}`} />\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"text-sm font-medium capitalize text-gray-300\">{type}</div>\n          <div className={`text-lg font-bold ${colors.base}`}>\n            {value.toLocaleString()}\n            {capacity && ` / ${capacity.toLocaleString()}`}\n          </div>\n        </div>\n        <AnimatePresence>\n          {rate !== 0 && (\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: 10 }}\n              className={`text-sm ${rate > 0 ? 'text-green-400' : 'text-red-400'}`}\n            >\n              {rate > 0 ? '+' : ''}\n              {rate}/s\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"h-1.5 overflow-hidden rounded-full bg-gray-800\">\n        <motion.div\n          className={`h-full ${colors.fill} transition-all duration-500`}\n          initial={{ width: 0 }}\n          animate={{ width: `${percentage}%` }}\n          style={{\n            opacity: isCritical ? 0.5 : isLow ? 0.7 : 1,\n          }}\n        />\n      </div>\n\n      {/* Warning Indicator */}\n      <AnimatePresence>\n        {(isLow || isCritical) && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className={`mt-2 text-xs ${isCritical ? 'text-red-400' : 'text-yellow-400'}`}\n          >\n            {isCritical ? 'Critical' : 'Low'} {type} levels\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport function ResourceVisualization() {\n  const resources = useResources();\n  const [resourceRates, setResourceRates] = useState({\n    minerals: 0,\n    energy: 0,\n    population: 0,\n    research: 0,\n  });\n\n  // Calculate resource rates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setResourceRates(prev => ({\n        minerals: Math.random() * 10 - 2, // Example rate calculation\n        energy: Math.random() * 15 - 5,\n        population: Math.random() * 2 - 0.5,\n        research: Math.random() * 5,\n      }));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"grid grid-cols-2 gap-4\">\n      <ResourceDisplay\n        type=\"minerals\"\n        value={resources.minerals}\n        rate={resourceRates.minerals}\n        capacity={10000}\n        thresholds={{ low: 1000, critical: 500 }}\n      />\n      <ResourceDisplay\n        type=\"energy\"\n        value={resources.energy}\n        rate={resourceRates.energy}\n        capacity={8000}\n        thresholds={{ low: 800, critical: 400 }}\n      />\n      <ResourceDisplay\n        type=\"population\"\n        value={resources.population}\n        rate={resourceRates.population}\n        thresholds={{ low: 50, critical: 25 }}\n      />\n      <ResourceDisplay type=\"research\" value={resources.research} rate={resourceRates.research} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/ResourceVisualizationEnhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/SprawlView.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":291,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":291,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6992,7027],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AlertTriangle,\n  Bell,\n  ChevronRight,\n  Crown,\n  Database,\n  Flag,\n  HelpCircle,\n  Layers,\n  Map,\n  Rocket,\n  Search,\n  Star,\n  Zap,\n  ZoomIn,\n  ZoomOut,\n} from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { GameLayout } from './GameLayout';\n\ninterface EmpireDetails {\n  name: string;\n  bannerColor: string;\n}\n\ninterface Asset {\n  id: string;\n  type: 'colony' | 'dysonSphere' | 'starStation' | 'tradeHub';\n  name: string;\n  position: { x: number; y: number };\n  population?: number;\n  resources?: string[];\n  tradeConnections?: { target: string; volume: number }[];\n  status: 'active' | 'constructing' | 'damaged';\n  developmentLevel: number;\n  lastUpdate?: number;\n}\n\ninterface ViewState {\n  zoom: number;\n  focusedAsset: string | null;\n  position: { x: number; y: number };\n  activeOverlays: string[];\n  searchQuery: string;\n  notifications: {\n    id: string;\n    type: 'info' | 'warning' | 'success';\n    message: string;\n    timestamp: number;\n  }[];\n  dayNightCycle: number;\n}\n\nexport function SprawlView({ empire }: { empire: EmpireDetails }) {\n  const [view, setView] = useState<ViewState>({\n    zoom: 1,\n    focusedAsset: null,\n    position: { x: 0, y: 0 },\n    activeOverlays: ['trade', 'resources'],\n    searchQuery: '',\n    notifications: [],\n    dayNightCycle: 0,\n  });\n\n  const [assets, setAssets] = useState<Asset[]>([\n    {\n      id: 'alpha-colony',\n      type: 'colony',\n      name: 'Alpha Prime',\n      position: { x: 0, y: 0 },\n      population: 10000,\n      resources: ['Iron', 'Titanium'],\n      tradeConnections: [\n        { target: 'beta-station', volume: 0.8 },\n        { target: 'gamma-sphere', volume: 0.5 },\n      ],\n      status: 'active',\n      developmentLevel: 0.8,\n      lastUpdate: Date.now(),\n    },\n    {\n      id: 'beta-station',\n      type: 'starStation',\n      name: 'Beta Station',\n      position: { x: 150, y: -100 },\n      population: 5000,\n      resources: ['Helium-3'],\n      tradeConnections: [{ target: 'alpha-colony', volume: 0.8 }],\n      status: 'active',\n      developmentLevel: 0.6,\n      lastUpdate: Date.now(),\n    },\n    {\n      id: 'gamma-sphere',\n      type: 'dysonSphere',\n      name: 'Gamma Sphere',\n      position: { x: -120, y: 80 },\n      tradeConnections: [\n        { target: 'alpha-colony', volume: 0.5 },\n        { target: 'delta-hub', volume: 0.3 },\n      ],\n      status: 'constructing',\n      developmentLevel: 0.4,\n      lastUpdate: Date.now(),\n    },\n    {\n      id: 'delta-hub',\n      type: 'tradeHub',\n      name: 'Delta Trading Post',\n      position: { x: 80, y: 120 },\n      population: 2000,\n      tradeConnections: [{ target: 'gamma-sphere', volume: 0.3 }],\n      status: 'active',\n      developmentLevel: 0.3,\n      lastUpdate: Date.now(),\n    },\n  ]);\n\n  // Day/Night cycle effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setView(prev => ({\n        ...prev,\n        dayNightCycle: (prev.dayNightCycle + 0.01) % 1,\n      }));\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAssets(currentAssets => {\n        return currentAssets.map(asset => {\n          if (asset.status === 'active' && Math.random() > 0.8) {\n            const populationChange = Math.floor(Math.random() * 100) - 30;\n            const newPopulation = asset.population ? asset.population + populationChange : 0;\n\n            if (populationChange > 0) {\n              addNotification(\n                'success',\n                `${asset.name}: Population increased by ${populationChange}`,\n                asset.id\n              );\n            }\n\n            return {\n              ...asset,\n              population: Math.max(0, newPopulation),\n              lastUpdate: Date.now(),\n            };\n          }\n          return asset;\n        });\n      });\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const addNotification = (\n    type: 'info' | 'warning' | 'success',\n    message: string,\n    assetId: string\n  ) => {\n    const notification = {\n      id: `${assetId}-${Date.now()}`,\n      type,\n      message,\n      timestamp: Date.now(),\n    };\n\n    setView(prev => ({\n      ...prev,\n      notifications: [...prev.notifications, notification],\n    }));\n\n    // Remove notification after 5 seconds\n    setTimeout(() => {\n      setView(prev => ({\n        ...prev,\n        notifications: prev.notifications.filter(n => n.id !== notification.id),\n      }));\n    }, 5000);\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const isDragging = useRef(false);\n  const lastPosition = useRef({ x: 0, y: 0 });\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    isDragging.current = true;\n    lastPosition.current = { x: e.clientX, y: e.clientY };\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isDragging.current) {\n      return;\n    }\n\n    const deltaX = e.clientX - lastPosition.current.x;\n    const deltaY = e.clientY - lastPosition.current.y;\n\n    setView(prev => ({\n      ...prev,\n      position: {\n        x: prev.position.x + deltaX,\n        y: prev.position.y + deltaY,\n      },\n    }));\n\n    lastPosition.current = { x: e.clientX, y: e.clientY };\n  };\n\n  const handleMouseUp = () => {\n    isDragging.current = false;\n  };\n\n  const handleZoom = (delta: number) => {\n    setView(prev => ({\n      ...prev,\n      zoom: Math.max(0.5, Math.min(2, prev.zoom + delta)),\n    }));\n  };\n\n  const focusAsset = (assetName: string) => {\n    setView(prev => ({\n      ...prev,\n      focusedAsset: assetName,\n      zoom: 1.5,\n    }));\n  };\n\n  const getAssetIcon = (type: Asset['type']) => {\n    switch (type) {\n      case 'colony':\n        return Crown;\n      case 'dysonSphere':\n        return Star;\n      case 'starStation':\n        return Rocket;\n      case 'tradeHub':\n        return Database;\n      default:\n        return Crown;\n    }\n  };\n\n  const getAssetColor = (asset: Asset) => {\n    if (asset.status === 'constructing') {\n      return 'yellow';\n    }\n    if (asset.status === 'damaged') {\n      return 'red';\n    }\n    switch (asset.type) {\n      case 'colony':\n        return 'cyan';\n      case 'dysonSphere':\n        return 'orange';\n      case 'starStation':\n        return 'purple';\n      case 'tradeHub':\n        return 'emerald';\n      default:\n        return 'blue';\n    }\n  };\n\n  const filteredAssets = assets.filter(asset =>\n    view.searchQuery ? asset.name.toLowerCase().includes(view.searchQuery.toLowerCase()) : true\n  );\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        setView(prev => ({\n          ...prev,\n          focusedAsset: null,\n          zoom: 1,\n        }));\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, []);\n\n  const onToggleSprawlView = () => {\n    // Implement the logic to toggle the sprawl view\n    console.log('Sprawl view toggled');\n  };\n\n  return (\n    <GameLayout empireName={empire.name} bannerColor={empire.bannerColor}>\n      <div className=\"absolute inset-0 overflow-hidden bg-gray-900\">\n        {/* Multi-layered Starfield Background */}\n        <div\n          className=\"absolute inset-0\"\n          style={{\n            backgroundColor: `rgba(0, 0, 0, ${0.3 + Math.sin(view.dayNightCycle * Math.PI * 2) * 0.2})`,\n          }}\n        >\n          <div\n            className=\"absolute inset-0 scale-100 transform bg-[url('https://images.unsplash.com/photo-1506318137071-a8e063b4bec0?q=80&w=3000')] bg-cover opacity-20\"\n            style={{ transition: 'transform 120s linear' }}\n          />\n          <div\n            className=\"absolute inset-0 scale-150 transform bg-[url('https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?q=80&w=2013')] bg-cover opacity-10\"\n            style={{ transition: 'transform 180s linear' }}\n          />\n\n          {/* Aurora Effect */}\n          <div\n            className=\"absolute inset-0 bg-gradient-to-b from-indigo-500/5 via-transparent to-transparent\"\n            style={{\n              transform: `translateY(${Math.sin(view.dayNightCycle * Math.PI * 2) * 20}px)`,\n              opacity: 0.3 + Math.sin(view.dayNightCycle * Math.PI * 2) * 0.2,\n            }}\n          />\n        </div>\n\n        {/* Controls */}\n        <div className=\"absolute left-6 right-6 top-6 z-10 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search assets...\"\n                className=\"w-64 rounded-lg border border-gray-700 bg-gray-800/90 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500\"\n                value={view.searchQuery}\n                onChange={e => setView(prev => ({ ...prev, searchQuery: e.target.value }))}\n              />\n              <Search className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n\n            {/* Overlay Toggles */}\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() =>\n                  setView(prev => ({\n                    ...prev,\n                    activeOverlays: prev.activeOverlays.includes('trade')\n                      ? prev.activeOverlays.filter(o => o !== 'trade')\n                      : [...prev.activeOverlays, 'trade'],\n                  }))\n                }\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 transition-colors ${\n                  view.activeOverlays.includes('trade')\n                    ? 'bg-indigo-600 text-white'\n                    : 'bg-gray-800/90 text-gray-400 hover:bg-gray-700/90'\n                }`}\n              >\n                <Database className=\"h-4 w-4\" />\n                <span>Trade Routes</span>\n              </button>\n\n              <button\n                onClick={() =>\n                  setView(prev => ({\n                    ...prev,\n                    activeOverlays: prev.activeOverlays.includes('resources')\n                      ? prev.activeOverlays.filter(o => o !== 'resources')\n                      : [...prev.activeOverlays, 'resources'],\n                  }))\n                }\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 transition-colors ${\n                  view.activeOverlays.includes('resources')\n                    ? 'bg-indigo-600 text-white'\n                    : 'bg-gray-800/90 text-gray-400 hover:bg-gray-700/90'\n                }`}\n              >\n                <Layers className=\"h-4 w-4\" />\n                <span>Resources</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => handleZoom(0.1)}\n              className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n            >\n              <ZoomIn className=\"h-5 w-5 text-cyan-400\" />\n            </button>\n            <button\n              onClick={() => handleZoom(-0.1)}\n              className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n            >\n              <ZoomOut className=\"h-5 w-5 text-cyan-400\" />\n            </button>\n            <button className=\"group relative rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\">\n              <HelpCircle className=\"h-5 w-5 text-cyan-400\" />\n              <div className=\"absolute right-0 top-full mt-2 hidden w-64 rounded-lg border border-gray-700 bg-gray-800/95 p-3 group-hover:block\">\n                <h4 className=\"mb-2 font-medium text-white\">Navigation Help</h4>\n                <ul className=\"space-y-1 text-sm text-gray-300\">\n                  <li className=\"flex items-center\">\n                    <ZoomIn className=\"mr-2 h-4 w-4\" /> Zoom in view\n                  </li>\n                  <li className=\"flex items-center\">\n                    <ZoomOut className=\"mr-2 h-4 w-4\" /> Zoom out view\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Flag className=\"mr-2 h-4 w-4\" /> Mark territory\n                  </li>\n                  <li className=\"flex items-center\">\n                    <ChevronRight className=\"mr-2 h-4 w-4\" /> Navigate sectors\n                  </li>\n                </ul>\n              </div>\n            </button>\n          </div>\n        </div>\n\n        {/* Map Area */}\n        <div\n          ref={containerRef}\n          className=\"absolute inset-0 cursor-move\"\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n        >\n          <div\n            className=\"absolute inset-0 transition-transform duration-300 ease-out\"\n            style={{\n              transform: `translate(${view.position.x}px, ${view.position.y}px) scale(${view.zoom})`,\n            }}\n          >\n            {/* Trade Routes */}\n            {view.activeOverlays.includes('trade') && (\n              <svg className=\"pointer-events-none absolute inset-0\">\n                {assets.map(asset =>\n                  asset.tradeConnections?.map(connection => {\n                    const target = assets.find(a => a.id === connection.target);\n                    if (!target) {\n                      return null;\n                    }\n\n                    const startX = asset.position.x + window.innerWidth / 2;\n                    const startY = asset.position.y + window.innerHeight / 2;\n                    const endX = target.position.x + window.innerWidth / 2;\n                    const endY = target.position.y + window.innerHeight / 2;\n\n                    return (\n                      <g key={`${asset.id}-${target.id}`}>\n                        <line\n                          x1={startX}\n                          y1={startY}\n                          x2={endX}\n                          y2={endY}\n                          stroke=\"rgba(99, 102, 241, 0.3)\"\n                          strokeWidth={2 + connection.volume * 4}\n                          strokeDasharray=\"4 4\"\n                        >\n                          <animate\n                            attributeName=\"stroke-dashoffset\"\n                            from=\"0\"\n                            to=\"8\"\n                            dur={`${1 / connection.volume}s`}\n                            repeatCount=\"indefinite\"\n                          />\n                        </line>\n                        {/* Trade Volume Indicator */}\n                        <circle\n                          cx={(startX + endX) / 2}\n                          cy={(startY + endY) / 2}\n                          r={4 + connection.volume * 4}\n                          fill=\"rgba(99, 102, 241, 0.2)\"\n                          className=\"animate-pulse\"\n                        />\n                      </g>\n                    );\n                  })\n                )}\n              </svg>\n            )}\n\n            {/* Assets */}\n            {filteredAssets.map(asset => {\n              const Icon = getAssetIcon(asset.type);\n              const color = getAssetColor(asset);\n\n              return (\n                <div\n                  key={asset.id}\n                  className=\"absolute\"\n                  style={{\n                    left: `calc(50% + ${asset.position.x}px)`,\n                    top: `calc(50% + ${asset.position.y}px)`,\n                    transform: 'translate(-50%, -50%)',\n                  }}\n                >\n                  <button onClick={() => focusAsset(asset.id)} className=\"group relative\">\n                    <div\n                      className={`h-24 w-24 rounded-full bg-${color}-500/20 relative animate-pulse`}\n                      style={{\n                        boxShadow: `0 0 ${20 + asset.developmentLevel * 30}px ${asset.developmentLevel * 20}px rgba(${\n                          color === 'cyan'\n                            ? '34, 211, 238'\n                            : color === 'orange'\n                              ? '234, 88, 12'\n                              : color === 'purple'\n                                ? '147, 51, 234'\n                                : color === 'emerald'\n                                  ? '16, 185, 129'\n                                  : '59, 130, 246'\n                        }, ${0.1 + asset.developmentLevel * 0.2})`,\n                      }}\n                    >\n                      <div\n                        className={`absolute left-1/2 top-1/2 h-16 w-16 -translate-x-1/2 -translate-y-1/2 rounded-full bg-${color}-400/30`}\n                        style={{\n                          transform: `translate(-50%, -50%) scale(${0.8 + Math.sin(Date.now() / 1000) * 0.1})`,\n                        }}\n                      >\n                        <div\n                          className={`absolute left-1/2 top-1/2 h-8 w-8 -translate-x-1/2 -translate-y-1/2 rounded-full bg-${color}-300/40 animate-spin-slow flex items-center justify-center`}\n                        >\n                          <Icon className={`h-5 w-5 text-${color}-200`} />\n                        </div>\n                      </div>\n\n                      {/* Development Level Rings */}\n                      {Array.from({\n                        length: Math.ceil(asset.developmentLevel * 5),\n                      }).map((_, i) => (\n                        <div\n                          key={i}\n                          className=\"absolute inset-0 rounded-full border\"\n                          style={{\n                            borderColor: `rgba(${\n                              color === 'cyan'\n                                ? '34, 211, 238'\n                                : color === 'orange'\n                                  ? '234, 88, 12'\n                                  : color === 'purple'\n                                    ? '147, 51, 234'\n                                    : color === 'emerald'\n                                      ? '16, 185, 129'\n                                      : '59, 130, 246'\n                            }, ${0.1 + (i / 5) * 0.2})`,\n                            transform: `scale(${1.2 + i * 0.2}) rotate(${i * 30}deg)`,\n                            animation: `spin ${10 + i * 5}s linear infinite`,\n                          }}\n                        />\n                      ))}\n                    </div>\n\n                    {/* Asset Label */}\n                    <div className=\"absolute left-1/2 top-full mt-2 -translate-x-1/2 text-center\">\n                      <div className={`text-${color}-200 font-medium`}>{asset.name}</div>\n                      {asset.population && (\n                        <div className={`text-${color}-300/70 text-sm`}>\n                          Pop: {asset.population.toLocaleString()}\n                        </div>\n                      )}\n                      {asset.status === 'constructing' && (\n                        <div className=\"flex items-center justify-center text-sm text-yellow-300/70\">\n                          <Zap className=\"mr-1 h-4 w-4\" />\n                          Power Required\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Hover Tooltip */}\n                    <div className=\"pointer-events-none absolute bottom-full left-1/2 mb-2 -translate-x-1/2 opacity-0 transition-opacity group-hover:opacity-100\">\n                      <div className=\"whitespace-nowrap rounded-lg border border-gray-700 bg-gray-800/95 px-3 py-2 backdrop-blur-sm\">\n                        {asset.resources && view.activeOverlays.includes('resources') && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            {asset.resources.map(resource => (\n                              <span key={resource} className=\"text-gray-300\">\n                                {resource}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Notifications */}\n        <div className=\"fixed bottom-6 left-6 space-y-2\">\n          {view.notifications.map(notification => (\n            <div\n              key={notification.id}\n              className={`flex items-center space-x-2 rounded-lg px-4 py-2 backdrop-blur-sm transition-all ${\n                notification.type === 'success'\n                  ? 'bg-green-900/80 text-green-200'\n                  : notification.type === 'warning'\n                    ? 'bg-yellow-900/80 text-yellow-200'\n                    : 'bg-blue-900/80 text-blue-200'\n              }`}\n              style={{\n                animation: 'slideIn 0.3s ease-out',\n              }}\n            >\n              {notification.type === 'success' && <Bell className=\"h-4 w-4\" />}\n              {notification.type === 'warning' && <AlertTriangle className=\"h-4 w-4\" />}\n              {notification.type === 'info' && <Database className=\"h-4 w-4\" />}\n              <span>{notification.message}</span>\n            </div>\n          ))}\n        </div>\n\n        <button\n          onClick={onToggleSprawlView}\n          className=\"group w-full rounded-lg border border-indigo-700/50 bg-gradient-to-r from-indigo-950/80 to-indigo-900/80 px-4 py-3 text-left backdrop-blur-sm transition-all hover:bg-indigo-800/30\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Map className=\"h-5 w-5 text-indigo-400\" />\n              <span className=\"font-medium text-indigo-100\">{empire.name} Map</span>\n            </div>\n            <span className=\"text-sm text-indigo-400 opacity-60 transition-opacity group-hover:opacity-100\">\n              Press S\n            </span>\n          </div>\n        </button>\n      </div>\n    </GameLayout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/TechTree.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/TooltipProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/VPRErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":20,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AlertTriangle } from 'lucide-react';\nimport React, { Component, ErrorInfo } from 'react';\n\ninterface Props {\n  moduleId: string;\n  onError: (error: Error, moduleId: string) => void;\n  children: React.ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class VPRErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.props.onError(error, this.props.moduleId);\n    console.error('VPR Module Error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"rounded-lg border border-red-700/30 bg-red-900/20 p-4\">\n          <div className=\"mb-2 flex items-center space-x-2 text-red-400\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            <span className=\"font-medium\">Module Error</span>\n          </div>\n          <p className=\"text-sm text-red-200\">\n            This module has encountered an error and has been disabled.\n          </p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/VPRLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/VPRStarSystemView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/automation/AutomationVisualization.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":158,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":158,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3986,4033],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  GlobalAutomationManager,\n  GlobalRoutine,\n} from '../../../managers/automation/GlobalAutomationManager';\nimport '../../../styles/automation.css';\n\n// Define the routine type enum to match what's in GlobalAutomationManager\nenum RoutineType {\n  RESOURCE_BALANCING = 'RESOURCE_BALANCING',\n  PERFORMANCE_OPTIMIZATION = 'PERFORMANCE_OPTIMIZATION',\n  EMERGENCY_RESPONSE = 'EMERGENCY_RESPONSE',\n  SYSTEM_MAINTENANCE = 'SYSTEM_MAINTENANCE',\n}\n\n// Define SystemId type to match what's expected\ntype SystemId = string;\n\ninterface AutomationVisualizationProps {\n  automationManager?: GlobalAutomationManager;\n  className?: string;\n}\n\nexport const AutomationVisualization: React.FC<AutomationVisualizationProps> = ({\n  automationManager,\n  className = '',\n}) => {\n  const [routines, setRoutines] = useState<GlobalRoutine[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [filter, setFilter] = useState<{\n    type: string;\n    system: string;\n    status: string;\n    search: string;\n  }>({\n    type: 'all',\n    system: 'all',\n    status: 'all',\n    search: '',\n  });\n\n  // Get all available types and systems for filtering\n  const routineTypes = Object.values(RoutineType);\n  const systems = [\n    ...new Set(\n      routines.map(routine =>\n        Array.isArray(routine.systems) && routine.systems.length > 0\n          ? routine.systems[0]\n          : 'unknown'\n      )\n    ),\n  ];\n\n  useEffect(() => {\n    if (!automationManager) {\n      return;\n    }\n\n    // Initial load\n    loadRoutines();\n\n    // Subscribe to automation events\n    const unsubscribe = subscribeToAutomationEvents();\n\n    return () => {\n      unsubscribe();\n    };\n  }, [automationManager]);\n\n  const loadRoutines = () => {\n    if (!automationManager) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const allRoutines = automationManager.getAllRoutines();\n      setRoutines(allRoutines);\n    } catch (error) {\n      console.error('Failed to load automation routines:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const subscribeToAutomationEvents = () => {\n    if (!automationManager) {\n      return () => {};\n    }\n\n    // This would be implemented with the event system\n    // For now, we'll just return an empty function\n    return () => {};\n  };\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setFilter(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleToggleRoutine = (routineId: string) => {\n    if (!automationManager) {\n      return;\n    }\n\n    const routine = routines.find(r => r.id === routineId);\n    if (!routine) {\n      return;\n    }\n\n    try {\n      if (routine.enabled) {\n        automationManager.disableRoutine(routineId);\n      } else {\n        automationManager.enableRoutine(routineId);\n      }\n\n      // Update local state\n      setRoutines(prev => prev.map(r => (r.id === routineId ? { ...r, enabled: !r.enabled } : r)));\n    } catch (error) {\n      console.error(`Failed to toggle routine ${routineId}:`, error);\n    }\n  };\n\n  const handleRemoveRoutine = (routineId: string) => {\n    if (!automationManager) {\n      return;\n    }\n\n    try {\n      automationManager.unregisterRoutine(routineId);\n\n      // Update local state\n      setRoutines(prev => prev.filter(r => r.id !== routineId));\n    } catch (error) {\n      console.error(`Failed to remove routine ${routineId}:`, error);\n    }\n  };\n\n  const handleRunRoutine = (routineId: string) => {\n    if (!automationManager) {\n      return;\n    }\n\n    try {\n      // Find the routine first\n      const routine = routines.find(r => r.id === routineId);\n      if (!routine) {\n        return;\n      }\n\n      // Manually trigger the routine execution\n      // Note: Since executeRoutine is private, we'll just update the UI\n      // In a real implementation, we would need a public method to execute a routine\n      console.log(`Executing routine: ${routineId}`);\n\n      // Update local state to reflect the routine was run\n      const now = new Date().getTime(); // Use number instead of string for lastRun\n      setRoutines(prev => prev.map(r => (r.id === routineId ? { ...r, lastRun: now } : r)));\n    } catch (error) {\n      console.error(`Failed to run routine ${routineId}:`, error);\n    }\n  };\n\n  // Filter routines based on current filter settings\n  const filteredRoutines = routines.filter(routine => {\n    const matchesType = filter.type === 'all' || routine.type === filter.type;\n    const matchesSystem =\n      filter.system === 'all' ||\n      (Array.isArray(routine.systems) &&\n        routine.systems.some(sys => sys === (filter.system as SystemId)));\n    const matchesStatus =\n      filter.status === 'all' ||\n      (filter.status === 'active' && routine.enabled) ||\n      (filter.status === 'inactive' && !routine.enabled);\n    const matchesSearch =\n      !filter.search ||\n      routine.name.toLowerCase().includes(filter.search.toLowerCase()) ||\n      routine.description.toLowerCase().includes(filter.search.toLowerCase()) ||\n      (Array.isArray(routine.tags) &&\n        routine.tags.some(tag => tag.toLowerCase().includes(filter.search.toLowerCase())));\n\n    return matchesType && matchesSystem && matchesStatus && matchesSearch;\n  });\n\n  // Get routine type icon based on type\n  const getRoutineTypeIcon = (type: string) => {\n    switch (type) {\n      case RoutineType.RESOURCE_BALANCING:\n        return '⚖️';\n      case RoutineType.PERFORMANCE_OPTIMIZATION:\n        return '⚡';\n      case RoutineType.EMERGENCY_RESPONSE:\n        return '🚨';\n      case RoutineType.SYSTEM_MAINTENANCE:\n        return '🔧';\n      default:\n        return '🤖';\n    }\n  };\n\n  // Format relative time\n  const formatRelativeTime = (timestamp: number | undefined) => {\n    if (!timestamp) {\n      return 'Never';\n    }\n\n    const now = new Date().getTime();\n    const diffMs = now - timestamp;\n    const diffSec = Math.floor(diffMs / 1000);\n\n    if (diffSec < 60) {\n      return `${diffSec}s ago`;\n    }\n    if (diffSec < 3600) {\n      return `${Math.floor(diffSec / 60)}m ago`;\n    }\n    if (diffSec < 86400) {\n      return `${Math.floor(diffSec / 3600)}h ago`;\n    }\n    return `${Math.floor(diffSec / 86400)}d ago`;\n  };\n\n  // Get priority label and color\n  const getPriorityLabel = (priority: number) => {\n    if (priority >= 90) {\n      return { label: 'Critical', color: '#f44336' };\n    }\n    if (priority >= 70) {\n      return { label: 'High', color: '#ff9800' };\n    }\n    if (priority >= 40) {\n      return { label: 'Medium', color: '#2196f3' };\n    }\n    if (priority >= 10) {\n      return { label: 'Low', color: '#4caf50' };\n    }\n    return { label: 'Background', color: '#9e9e9e' };\n  };\n\n  if (loading) {\n    return (\n      <div className={`automation-visualization automation-visualization--loading ${className}`}>\n        <div className=\"automation-visualization__loading-spinner\">\n          {/* Spinner component would go here */}\n          <div>Loading...</div>\n        </div>\n        <div className=\"automation-visualization__loading-text\">Loading automation routines...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`automation-visualization ${className}`}>\n      <div className=\"automation-visualization__header\">\n        <h2 className=\"automation-visualization__title\">\n          <span style={{ marginRight: '8px' }}>🤖</span>\n          Automation Routines\n        </h2>\n        <div className=\"automation-visualization__stats\">\n          <div className=\"automation-visualization__stat\">\n            <span className=\"automation-visualization__stat-label\">Total:</span>\n            <span className=\"automation-visualization__stat-value\">{routines.length}</span>\n          </div>\n          <div className=\"automation-visualization__stat\">\n            <span className=\"automation-visualization__stat-label\">Active:</span>\n            <span className=\"automation-visualization__stat-value\">\n              {routines.filter(r => r.enabled).length}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"automation-visualization__filters\">\n        <div className=\"automation-visualization__filter\">\n          <label className=\"automation-visualization__filter-label\">Type:</label>\n          <select\n            className=\"automation-visualization__filter-select\"\n            name=\"type\"\n            value={filter.type}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All Types</option>\n            {routineTypes.map(type => (\n              <option key={type} value={type}>\n                {type.replace(/_/g, ' ')}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"automation-visualization__filter\">\n          <label className=\"automation-visualization__filter-label\">System:</label>\n          <select\n            className=\"automation-visualization__filter-select\"\n            name=\"system\"\n            value={filter.system}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All Systems</option>\n            {systems.map(system => (\n              <option key={system} value={system}>\n                {system}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"automation-visualization__filter\">\n          <label className=\"automation-visualization__filter-label\">Status:</label>\n          <select\n            className=\"automation-visualization__filter-select\"\n            name=\"status\"\n            value={filter.status}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All Statuses</option>\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n          </select>\n        </div>\n\n        <input\n          type=\"text\"\n          className=\"automation-visualization__search\"\n          name=\"search\"\n          value={filter.search}\n          onChange={handleFilterChange}\n          placeholder=\"Search routines...\"\n        />\n      </div>\n\n      <div className=\"automation-visualization__routines\">\n        {filteredRoutines.length === 0 ? (\n          <div className=\"automation-visualization__empty\">\n            <div>No automation routines found</div>\n            <div>Try adjusting your filters or create a new routine</div>\n          </div>\n        ) : (\n          <div className=\"automation-visualization__routines-list\">\n            {filteredRoutines.map(routine => {\n              const priorityInfo = getPriorityLabel(routine.priority);\n              const systemName =\n                Array.isArray(routine.systems) && routine.systems.length > 0\n                  ? routine.systems[0]\n                  : 'unknown';\n\n              return (\n                <div\n                  key={routine.id}\n                  className={`automation-visualization__routine ${\n                    routine.enabled\n                      ? 'automation-visualization__routine--active'\n                      : 'automation-visualization__routine--inactive'\n                  }`}\n                >\n                  <div className=\"automation-visualization__routine-header\">\n                    <div className=\"automation-visualization__routine-type\">\n                      {getRoutineTypeIcon(routine.type)}\n                    </div>\n                    <div className=\"automation-visualization__routine-name\">{routine.name}</div>\n                    <div\n                      className=\"automation-visualization__routine-priority\"\n                      style={{ backgroundColor: priorityInfo.color }}\n                    >\n                      {priorityInfo.label}\n                    </div>\n                  </div>\n\n                  <div className=\"automation-visualization__routine-description\">\n                    {routine.description}\n                  </div>\n\n                  <div className=\"automation-visualization__routine-meta\">\n                    <div className=\"automation-visualization__routine-systems\">\n                      System: {systemName}\n                    </div>\n                    {routine.interval && (\n                      <div className=\"automation-visualization__routine-interval\">\n                        Interval: {routine.interval}ms\n                      </div>\n                    )}\n                    <div className=\"automation-visualization__routine-last-run\">\n                      Last run: {formatRelativeTime(routine.lastRun)}\n                    </div>\n                  </div>\n\n                  {Array.isArray(routine.tags) && routine.tags.length > 0 && (\n                    <div className=\"automation-visualization__routine-tags\">\n                      {routine.tags.map((tag, index) => (\n                        <div\n                          key={`${routine.id}-tag-${index}`}\n                          className=\"automation-visualization__routine-tag\"\n                        >\n                          {tag}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  <div className=\"automation-visualization__routine-controls\">\n                    <button\n                      className=\"automation-visualization__routine-control automation-visualization__routine-control--run\"\n                      onClick={() => handleRunRoutine(routine.id)}\n                      title=\"Run now\"\n                    >\n                      ▶️\n                    </button>\n                    <button\n                      className=\"automation-visualization__routine-control automation-visualization__routine-control--toggle\"\n                      onClick={() => handleToggleRoutine(routine.id)}\n                      title={routine.enabled ? 'Disable' : 'Enable'}\n                    >\n                      {routine.enabled ? '⏸️' : '▶️'}\n                    </button>\n                    <button\n                      className=\"automation-visualization__routine-control automation-visualization__routine-control--remove\"\n                      onClick={() => handleRemoveRoutine(routine.id)}\n                      title=\"Remove\"\n                    >\n                      🗑️\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <div className=\"automation-visualization__create\">\n        <button className=\"automation-visualization__create-button\">+ Create New Routine</button>\n      </div>\n    </div>\n  );\n};\n\nexport default AutomationVisualization;\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/buttons/AbilityButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleHUD.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleUpgradeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleUpgradeVisualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/SubModuleHUD.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/status/StatusEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/tooltip-context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponLoadout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponSpecialization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponSystem.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":32,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[727,815],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair } from 'lucide-react';\nimport {\n  CombatWeaponStats,\n  WEAPON_COLORS,\n  WeaponEffect,\n  WeaponSystemProps,\n  WeaponUpgrade,\n} from '../../types/weapons/WeaponTypes';\nimport {\n  WeaponEffectsDisplay,\n  WeaponHeader,\n  WeaponStatsDisplay,\n  WeaponUpgradeDisplay,\n} from './WeaponComponents';\n\nexport function WeaponSystem({\n  weapon,\n  availableUpgrades,\n  resources,\n  onFire,\n  onUpgrade,\n  onToggleEffect,\n}: WeaponSystemProps) {\n  const color = WEAPON_COLORS[weapon.config.category];\n\n  const handleUpgrade = (upgradeId: string, upgrade: WeaponUpgrade) => {\n    if (onUpgrade) {\n      const updatedStats: CombatWeaponStats = {\n        ...weapon.state.currentStats,\n        ...upgrade.stats,\n      };\n      console.debug(`[WeaponSystem] Applying upgrade ${upgradeId}, new stats:`, updatedStats);\n      onUpgrade(upgradeId);\n    }\n  };\n\n  const mapToWeaponEffect = (effect: WeaponEffect): WeaponEffect => ({\n    ...effect,\n    active: effect.active ?? true,\n    cooldown: effect.cooldown ?? 0,\n  });\n\n  return (\n    <div className={`bg-${color}-900/20 border border-${color}-700/30 rounded-lg p-6`}>\n      <WeaponHeader\n        name={weapon.config.name}\n        tier={weapon.config.tier}\n        type={weapon.config.category}\n        status={weapon.state.status}\n        color={color}\n      />\n\n      {/* Main Stats */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 text-sm text-gray-400\">Damage</div>\n          <div className=\"flex items-baseline space-x-1\">\n            <span className=\"text-2xl font-bold text-white\">\n              {weapon.state.currentStats.damage}\n            </span>\n            <span className=\"text-sm text-gray-400\">DPS</span>\n          </div>\n        </div>\n        <div>\n          <div className=\"mb-1 text-sm text-gray-400\">Range</div>\n          <div className=\"flex items-baseline space-x-1\">\n            <span className=\"text-2xl font-bold text-white\">{weapon.state.currentStats.range}</span>\n            <span className=\"text-sm text-gray-400\">ly</span>\n          </div>\n        </div>\n      </div>\n\n      <WeaponStatsDisplay\n        stats={weapon.state.currentStats}\n        color={color}\n        showAmmo={weapon.state.currentAmmo !== undefined}\n        currentAmmo={weapon.state.currentAmmo}\n        maxAmmo={weapon.state.maxAmmo}\n      />\n\n      <WeaponEffectsDisplay\n        effects={weapon.state.effects.map(mapToWeaponEffect)}\n        color={color}\n        onToggle={onToggleEffect}\n      />\n\n      {/* Available Upgrades */}\n      {availableUpgrades && availableUpgrades.length > 0 && resources && (\n        <div className=\"mb-6 space-y-3\">\n          <h4 className=\"text-sm font-medium text-gray-300\">Available Upgrades</h4>\n          {availableUpgrades.map((upgrade: WeaponUpgrade) => (\n            <WeaponUpgradeDisplay\n              key={upgrade.id}\n              upgrade={upgrade}\n              currentStats={weapon.state.currentStats}\n              resources={resources}\n              onUpgrade={id => handleUpgrade(id, upgrade)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Fire Control */}\n      <button\n        onClick={() => onFire?.(weapon.config.id)}\n        disabled={weapon.state.status !== 'ready'}\n        className={`flex w-full items-center justify-center space-x-2 rounded-lg px-4 py-3 ${\n          weapon.state.status === 'ready'\n            ? `bg-${color}-600 hover:bg-${color}-700 text-white`\n            : 'cursor-not-allowed bg-gray-700 text-gray-500'\n        }`}\n      >\n        <Crosshair className=\"h-5 w-5\" />\n        <span>Fire Weapon</span>\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponUpgradeSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/OfficerConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ShipBlueprints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/colonyRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/combatRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/explorationRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/hangarRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/miningRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/buildings/defaultBuildings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/combat/combatConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/combat/weaponConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/factions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/factions/factionConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/factions/factions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/game/gameConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/modules/defaultModuleConfigs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/modules/upgradePathsConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8524,8527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8524,8527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleUpgradePath } from '../../managers/module/ModuleUpgradeManager';\n\n/**\n * Sample upgrade paths for different module types\n */\nexport const moduleUpgradePaths: ModuleUpgradePath[] = [\n  // Radar module upgrade path\n  {\n    moduleType: 'radar',\n    levels: [\n      {\n        level: 2,\n        name: 'Enhanced Radar Array',\n        description: 'Improved scanning capabilities with extended range and better resolution.',\n        requirements: {\n          minLevel: 1,\n          resourceCosts: [\n            { type: 'minerals', amount: 100 },\n            { type: 'energy', amount: 50 },\n          ],\n          buildingLevel: 2,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'range',\n            value: 20,\n            isPercentage: true,\n            description: 'Increases radar range',\n          },\n          {\n            type: 'stat',\n            target: 'resolution',\n            value: 15,\n            isPercentage: true,\n            description: 'Improves scan resolution',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Larger radar dish',\n            value: 'medium',\n          },\n          {\n            type: 'color',\n            description: 'Enhanced emitter glow',\n            value: 'cyan',\n          },\n        ],\n      },\n      {\n        level: 3,\n        name: 'Advanced Sensor Suite',\n        description: 'Cutting-edge sensor technology with deep space scanning capabilities.',\n        requirements: {\n          minLevel: 2,\n          resourceCosts: [\n            { type: 'minerals', amount: 200 },\n            { type: 'energy', amount: 100 },\n            { type: 'plasma', amount: 50 },\n          ],\n          techRequirements: ['advanced_sensors'],\n          buildingLevel: 3,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'range',\n            value: 50,\n            isPercentage: true,\n            description: 'Greatly increases radar range',\n          },\n          {\n            type: 'stat',\n            target: 'resolution',\n            value: 30,\n            isPercentage: true,\n            description: 'Significantly improves scan resolution',\n          },\n          {\n            type: 'ability',\n            target: 'deep_scan',\n            value: 1,\n            isPercentage: false,\n            description: 'Unlocks deep space scanning',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Large radar array',\n            value: 'large',\n          },\n          {\n            type: 'color',\n            description: 'Advanced emitter glow',\n            value: 'blue',\n          },\n          {\n            type: 'effect',\n            description: 'Scanning beam effect',\n            value: 'pulse',\n          },\n        ],\n      },\n    ],\n  },\n\n  // Hangar module upgrade path\n  {\n    moduleType: 'hangar',\n    levels: [\n      {\n        level: 2,\n        name: 'Expanded Hangar Bay',\n        description: 'Larger hangar with improved ship maintenance facilities.',\n        requirements: {\n          minLevel: 1,\n          resourceCosts: [\n            { type: 'minerals', amount: 150 },\n            { type: 'energy', amount: 75 },\n          ],\n          buildingLevel: 2,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'capacity',\n            value: 2,\n            isPercentage: false,\n            description: 'Increases ship capacity',\n          },\n          {\n            type: 'stat',\n            target: 'maintenance_efficiency',\n            value: 15,\n            isPercentage: true,\n            description: 'Improves maintenance efficiency',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Wider hangar doors',\n            value: 'medium',\n          },\n          {\n            type: 'texture',\n            description: 'Reinforced plating',\n            value: 'metallic',\n          },\n        ],\n      },\n      {\n        level: 3,\n        name: 'Advanced Docking System',\n        description: 'State-of-the-art docking facilities with automated maintenance.',\n        requirements: {\n          minLevel: 2,\n          resourceCosts: [\n            { type: 'minerals', amount: 300 },\n            { type: 'energy', amount: 150 },\n            { type: 'plasma', amount: 75 },\n          ],\n          techRequirements: ['automated_docking'],\n          buildingLevel: 3,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'capacity',\n            value: 3,\n            isPercentage: false,\n            description: 'Further increases ship capacity',\n          },\n          {\n            type: 'stat',\n            target: 'maintenance_efficiency',\n            value: 30,\n            isPercentage: true,\n            description: 'Greatly improves maintenance efficiency',\n          },\n          {\n            type: 'ability',\n            target: 'auto_repair',\n            value: 1,\n            isPercentage: false,\n            description: 'Unlocks automated ship repairs',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Large hangar complex',\n            value: 'large',\n          },\n          {\n            type: 'texture',\n            description: 'Advanced composite plating',\n            value: 'composite',\n          },\n          {\n            type: 'effect',\n            description: 'Docking guidance beams',\n            value: 'beam',\n          },\n        ],\n      },\n    ],\n  },\n\n  // Mineral module upgrade path\n  {\n    moduleType: 'mineral',\n    levels: [\n      {\n        level: 2,\n        name: 'Enhanced Mining Facility',\n        description: 'Improved mining equipment with better extraction rates.',\n        requirements: {\n          minLevel: 1,\n          resourceCosts: [\n            { type: 'minerals', amount: 120 },\n            { type: 'energy', amount: 60 },\n          ],\n          buildingLevel: 2,\n        },\n        effects: [\n          {\n            type: 'resource',\n            target: 'minerals',\n            value: 25,\n            isPercentage: true,\n            description: 'Increases mineral production',\n          },\n          {\n            type: 'stat',\n            target: 'efficiency',\n            value: 15,\n            isPercentage: true,\n            description: 'Improves mining efficiency',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Larger mining equipment',\n            value: 'medium',\n          },\n          {\n            type: 'color',\n            description: 'Industrial coloring',\n            value: 'orange',\n          },\n        ],\n      },\n      {\n        level: 3,\n        name: 'Automated Mining Complex',\n        description: 'Fully automated mining operation with advanced extraction technology.',\n        requirements: {\n          minLevel: 2,\n          resourceCosts: [\n            { type: 'minerals', amount: 250 },\n            { type: 'energy', amount: 125 },\n            { type: 'plasma', amount: 60 },\n          ],\n          techRequirements: ['automated_mining'],\n          buildingLevel: 3,\n        },\n        effects: [\n          {\n            type: 'resource',\n            target: 'minerals',\n            value: 50,\n            isPercentage: true,\n            description: 'Greatly increases mineral production',\n          },\n          {\n            type: 'stat',\n            target: 'efficiency',\n            value: 30,\n            isPercentage: true,\n            description: 'Significantly improves mining efficiency',\n          },\n          {\n            type: 'ability',\n            target: 'deep_mining',\n            value: 1,\n            isPercentage: false,\n            description: 'Unlocks deep mining capabilities',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Large mining complex',\n            value: 'large',\n          },\n          {\n            type: 'color',\n            description: 'Advanced industrial coloring',\n            value: 'deep-orange',\n          },\n          {\n            type: 'effect',\n            description: 'Mining operation particles',\n            value: 'dust',\n          },\n        ],\n      },\n    ],\n  },\n];\n\n/**\n * Initialize module upgrade paths\n */\nexport function initializeModuleUpgradePaths(moduleUpgradeManager: any): void {\n  for (const path of moduleUpgradePaths) {\n    moduleUpgradeManager.registerUpgradePath(path);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/resource/ResourceConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/equatorHorizonShips.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TEMPORAL_EFFECT' is assigned a value but never used.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QUANTUM_EFFECT' is assigned a value but never used.","line":34,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HARMONIC_EFFECT' is assigned a value but never used.","line":48,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DamageEffect } from '../../effects/types_effects/WeaponEffects';\nimport {\n  DAMAGE_BOOST_EFFECT,\n  EXPLOSIVE_EFFECT,\n  GAUSS_EFFECT,\n  PLASMA_EFFECT,\n  SHIELD_FIELD_EFFECT,\n  SPEED_REDUCTION_EFFECT,\n  STEALTH_EFFECT,\n} from '../../effects/types_effects/shipEffects';\nimport { EquatorHorizonShipClass, FactionShipStats } from '../../types/ships/FactionShipTypes';\nimport {\n  WeaponInstance,\n  WeaponMountPosition,\n  WeaponMountSize,\n  WeaponStatus,\n} from '../../types/weapons/WeaponTypes';\n\n// Special weapon effects for Equator Horizon\nconst TEMPORAL_EFFECT = {\n  type: 'damage',\n  name: 'Temporal Disruption',\n  description: 'Time-warping energy damage',\n  magnitude: 80,\n  duration: 3,\n  active: true,\n  cooldown: 3.0,\n  damage: 80,\n  damageType: 'energy',\n  penetration: 0.3,\n  strength: 80,\n} as DamageEffect;\n\nconst QUANTUM_EFFECT = {\n  type: 'damage',\n  name: 'Quantum Collapse',\n  description: 'Reality-warping energy damage',\n  magnitude: 100,\n  duration: 2,\n  active: true,\n  cooldown: 4.0,\n  damage: 100,\n  damageType: 'energy',\n  penetration: 0.4,\n  strength: 100,\n} as DamageEffect;\n\nconst HARMONIC_EFFECT = {\n  type: 'damage',\n  name: 'Harmonic Resonance',\n  description: 'Shield-penetrating harmonic damage',\n  magnitude: 60,\n  duration: 4,\n  active: true,\n  cooldown: 2.5,\n  damage: 60,\n  damageType: 'energy',\n  penetration: 0.25,\n  strength: 60,\n} as DamageEffect;\n\nexport const EQUATOR_HORIZON_SHIPS: Record<EquatorHorizonShipClass, FactionShipStats> = {\n  celestialArbiter: {\n    health: 1500,\n    maxHealth: 1500,\n    shield: 1500,\n    maxShield: 1500,\n    energy: 1200,\n    maxEnergy: 1200,\n    speed: 90,\n    turnRate: 1.5,\n    cargo: 400,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'plasma-1',\n        size: 'large' as WeaponMountSize,\n        position: 'turret' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['plasmaCannon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-plasma',\n            name: 'Ancient Plasma Cannon',\n            category: 'plasmaCannon',\n            tier: 3,\n            baseStats: {\n              damage: 400,\n              range: 1200,\n              accuracy: 0.95,\n              rateOfFire: 2,\n              energyCost: 40,\n              cooldown: 5,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/plasma/ancient',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 60,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 400,\n              range: 1200,\n              accuracy: 0.95,\n              rateOfFire: 2,\n              energyCost: 40,\n              cooldown: 5,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 500,\n      shield: 1500,\n      evasion: 0.15,\n      regeneration: 15,\n    },\n    mobility: {\n      speed: 90,\n      turnRate: 1.5,\n      acceleration: 30,\n    },\n    abilities: [\n      {\n        name: 'Celestial Shield',\n        description: 'Creates an impenetrable energy barrier',\n        cooldown: 60,\n        duration: 12,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n  etherealGalleon: {\n    health: 1200,\n    maxHealth: 1200,\n    shield: 1800,\n    maxShield: 1800,\n    energy: 1500,\n    maxEnergy: 1500,\n    speed: 70,\n    turnRate: 1,\n    cargo: 600,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'beam-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['beamWeapon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-beam',\n            name: 'Ancient Beam Weapon',\n            category: 'beamWeapon',\n            tier: 3,\n            baseStats: {\n              damage: 600,\n              range: 1000,\n              accuracy: 1,\n              rateOfFire: 1,\n              energyCost: 100,\n              cooldown: 8,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/beam/ancient',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 80,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 600,\n              range: 1000,\n              accuracy: 1,\n              rateOfFire: 1,\n              energyCost: 100,\n              cooldown: 8,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 400,\n      shield: 1800,\n      evasion: 0.1,\n      regeneration: 20,\n    },\n    mobility: {\n      speed: 70,\n      turnRate: 1,\n      acceleration: 20,\n    },\n    abilities: [\n      {\n        name: 'Energy Surge',\n        description: 'Temporarily boosts weapon damage',\n        cooldown: 45,\n        duration: 15,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  stellarEquinox: {\n    health: 900,\n    maxHealth: 900,\n    shield: 1200,\n    maxShield: 1200,\n    energy: 1000,\n    maxEnergy: 1000,\n    speed: 120,\n    turnRate: 2,\n    cargo: 300,\n    tier: 2,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'pulse-1',\n        size: 'medium' as WeaponMountSize,\n        position: 'turret' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['pulseWeapon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-pulse',\n            name: 'Ancient Pulse Weapon',\n            category: 'pulseWeapon',\n            tier: 2,\n            baseStats: {\n              damage: 150,\n              range: 800,\n              accuracy: 0.9,\n              rateOfFire: 4,\n              energyCost: 20,\n              cooldown: 2,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/pulse/ancient',\n            mountRequirements: {\n              size: 'medium' as WeaponMountSize,\n              power: 40,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 150,\n              range: 800,\n              accuracy: 0.9,\n              rateOfFire: 4,\n              energyCost: 20,\n              cooldown: 2,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 300,\n      shield: 1200,\n      evasion: 0.3,\n      regeneration: 12,\n    },\n    mobility: {\n      speed: 120,\n      turnRate: 2,\n      acceleration: 50,\n    },\n    abilities: [\n      {\n        name: 'Time Dilation',\n        description: 'Slows nearby enemies',\n        cooldown: 40,\n        duration: 8,\n        active: false,\n        effect: SPEED_REDUCTION_EFFECT,\n      },\n    ],\n  },\n  chronosSentinel: {\n    health: 800,\n    maxHealth: 800,\n    shield: 1000,\n    maxShield: 1000,\n    energy: 800,\n    maxEnergy: 800,\n    speed: 140,\n    turnRate: 2.5,\n    cargo: 200,\n    tier: 2,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'disruptor-1',\n        size: 'medium' as WeaponMountSize,\n        position: 'turret' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['disruptor'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-disruptor',\n            name: 'Ancient Disruptor',\n            category: 'disruptor',\n            tier: 2,\n            baseStats: {\n              damage: 120,\n              range: 600,\n              accuracy: 0.85,\n              rateOfFire: 5,\n              energyCost: 15,\n              cooldown: 1,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/disruptor/ancient',\n            mountRequirements: {\n              size: 'medium' as WeaponMountSize,\n              power: 35,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 120,\n              range: 600,\n              accuracy: 0.85,\n              rateOfFire: 5,\n              energyCost: 15,\n              cooldown: 1,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 250,\n      shield: 1000,\n      evasion: 0.4,\n      regeneration: 10,\n    },\n    mobility: {\n      speed: 140,\n      turnRate: 2.5,\n      acceleration: 70,\n    },\n    abilities: [\n      {\n        name: 'Temporal Shield',\n        description: 'Creates a shield that absorbs damage',\n        cooldown: 30,\n        duration: 6,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n  nebulasJudgement: {\n    health: 1000,\n    maxHealth: 1000,\n    shield: 1400,\n    maxShield: 1400,\n    energy: 1100,\n    maxEnergy: 1100,\n    speed: 100,\n    turnRate: 1.8,\n    cargo: 350,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'ion-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['ionCannon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-ion',\n            name: 'Ancient Ion Cannon',\n            category: 'ionCannon',\n            tier: 3,\n            baseStats: {\n              damage: 300,\n              range: 1100,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 35,\n              cooldown: 4,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/ion/ancient',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 55,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 300,\n              range: 1100,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 35,\n              cooldown: 4,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 350,\n      shield: 1400,\n      evasion: 0.25,\n      regeneration: 14,\n    },\n    mobility: {\n      speed: 100,\n      turnRate: 1.8,\n      acceleration: 40,\n    },\n    abilities: [\n      {\n        name: 'Judgement Beam',\n        description: 'Fires a powerful beam of energy',\n        cooldown: 50,\n        duration: 3,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  aetherialHorizon: {\n    health: 1400,\n    maxHealth: 1400,\n    shield: 1300,\n    maxShield: 1300,\n    energy: 800,\n    maxEnergy: 800,\n    speed: 110,\n    turnRate: 3,\n    cargo: 300,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'rocket-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['rockets'],\n        currentWeapon: {\n          config: {\n            id: 'heavy-rockets',\n            name: 'Heavy Rockets',\n            category: 'rockets',\n            tier: 3,\n            baseStats: {\n              damage: 280,\n              range: 1600,\n              accuracy: 0.85,\n              rateOfFire: 2,\n              energyCost: 20,\n              cooldown: 4,\n              effects: [EXPLOSIVE_EFFECT],\n            },\n            visualAsset: 'weapons/rockets/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 45,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 280,\n              range: 1600,\n              accuracy: 0.85,\n              rateOfFire: 2,\n              energyCost: 20,\n              cooldown: 4,\n              effects: [EXPLOSIVE_EFFECT],\n            },\n            effects: [EXPLOSIVE_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 450,\n      shield: 1300,\n      evasion: 0.3,\n      regeneration: 10,\n    },\n    mobility: {\n      speed: 110,\n      turnRate: 3,\n      acceleration: 55,\n    },\n    abilities: [\n      {\n        name: 'First Contact',\n        description: 'Creates a massive protective shield',\n        cooldown: 55,\n        duration: 18,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n  cosmicCrusader: {\n    health: 1200,\n    maxHealth: 1200,\n    shield: 1000,\n    maxShield: 1000,\n    energy: 700,\n    maxEnergy: 700,\n    speed: 130,\n    turnRate: 3,\n    cargo: 280,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'gauss-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['gaussCannon'],\n        currentWeapon: {\n          config: {\n            id: 'gauss-cannon',\n            name: 'Gauss Cannon',\n            category: 'gaussCannon',\n            tier: 3,\n            baseStats: {\n              damage: 220,\n              range: 1400,\n              accuracy: 0.94,\n              rateOfFire: 3,\n              energyCost: 18,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            visualAsset: 'weapons/gauss/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 40,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 220,\n              range: 1400,\n              accuracy: 0.94,\n              rateOfFire: 3,\n              energyCost: 18,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            effects: [GAUSS_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 380,\n      shield: 1000,\n      evasion: 0.35,\n      regeneration: 9,\n    },\n    mobility: {\n      speed: 130,\n      turnRate: 3,\n      acceleration: 65,\n    },\n    abilities: [\n      {\n        name: 'Threat Neutralization',\n        description: 'Unleashes a devastating attack',\n        cooldown: 42,\n        duration: 12,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  balancekeepersWrath: {\n    health: 1600,\n    maxHealth: 1600,\n    shield: 1400,\n    maxShield: 1400,\n    energy: 900,\n    maxEnergy: 900,\n    speed: 70,\n    turnRate: 3,\n    cargo: 400,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'rail-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['railGun'],\n        currentWeapon: {\n          config: {\n            id: 'heavy-railgun',\n            name: 'Heavy Railgun',\n            category: 'railGun',\n            tier: 3,\n            baseStats: {\n              damage: 350,\n              range: 1800,\n              accuracy: 0.96,\n              rateOfFire: 2,\n              energyCost: 25,\n              cooldown: 4,\n              effects: [GAUSS_EFFECT],\n            },\n            visualAsset: 'weapons/railgun/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 50,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 350,\n              range: 1800,\n              accuracy: 0.96,\n              rateOfFire: 2,\n              energyCost: 25,\n              cooldown: 4,\n              effects: [GAUSS_EFFECT],\n            },\n            effects: [GAUSS_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 600,\n      shield: 1400,\n      evasion: 0.2,\n      regeneration: 12,\n    },\n    mobility: {\n      speed: 70,\n      turnRate: 3,\n      acceleration: 35,\n    },\n    abilities: [\n      {\n        name: 'Wrath of Balance',\n        description: 'Unleashes devastating area damage',\n        cooldown: 60,\n        duration: 20,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  eclipticWatcher: {\n    health: 800,\n    maxHealth: 800,\n    shield: 1000,\n    maxShield: 1000,\n    energy: 600,\n    maxEnergy: 600,\n    speed: 180,\n    turnRate: 3,\n    cargo: 200,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'mgss-1',\n        size: 'medium' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['mgss'],\n        currentWeapon: {\n          config: {\n            id: 'mgss-cannon',\n            name: 'MGSS Cannon',\n            category: 'mgss',\n            tier: 3,\n            baseStats: {\n              damage: 100,\n              range: 1000,\n              accuracy: 0.92,\n              rateOfFire: 6,\n              energyCost: 10,\n              cooldown: 3,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/mgss/advanced',\n            mountRequirements: {\n              size: 'medium' as WeaponMountSize,\n              power: 25,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 100,\n              range: 1000,\n              accuracy: 0.92,\n              rateOfFire: 6,\n              energyCost: 10,\n              cooldown: 3,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 250,\n      shield: 1000,\n      evasion: 0.5,\n      regeneration: 8,\n    },\n    mobility: {\n      speed: 180,\n      turnRate: 3,\n      acceleration: 90,\n    },\n    abilities: [\n      {\n        name: 'Perfect Stealth',\n        description: 'Activates perfect stealth technology',\n        cooldown: 38,\n        duration: 10,\n        active: false,\n        effect: STEALTH_EFFECT,\n      },\n    ],\n  },\n  harmonysVanguard: {\n    health: 1300,\n    maxHealth: 1300,\n    shield: 1100,\n    maxShield: 1100,\n    energy: 800,\n    maxEnergy: 800,\n    speed: 140,\n    turnRate: 3,\n    cargo: 300,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'gauss-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['gaussCannon'],\n        currentWeapon: {\n          config: {\n            id: 'gauss-cannon',\n            name: 'Gauss Cannon',\n            category: 'gaussCannon',\n            tier: 3,\n            baseStats: {\n              damage: 240,\n              range: 1500,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 20,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            visualAsset: 'weapons/gauss/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 45,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 240,\n              range: 1500,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 20,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            effects: [GAUSS_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 420,\n      shield: 1100,\n      evasion: 0.35,\n      regeneration: 10,\n    },\n    mobility: {\n      speed: 140,\n      turnRate: 3,\n      acceleration: 70,\n    },\n    abilities: [\n      {\n        name: 'Order from Chaos',\n        description: 'Creates a powerful shield field',\n        cooldown: 48,\n        duration: 15,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/lostNovaShips.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/shipStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/spaceRatsShips.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/GameContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ModuleContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'module' is assigned a value but never used.","line":38,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cost' is defined but never used.","line":189,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, ReactNode, useContext, useEffect, useReducer } from 'react';\nimport { useGame } from '../contexts/GameContext';\nimport { moduleManager } from '../managers/module/ModuleManager';\nimport { BaseModule, ModularBuilding, ModuleType } from '../types/buildings/ModuleTypes';\nimport { Position } from '../types/core/GameTypes';\n\n// State interface\ninterface ModuleState {\n  activeModules: BaseModule[];\n  buildings: ModularBuilding[];\n  selectedModuleId?: string;\n  selectedBuildingId?: string;\n}\n\n// Action types\ntype ModuleAction =\n  | { type: 'CREATE_MODULE'; moduleType: ModuleType; position: Position }\n  | { type: 'ATTACH_MODULE'; moduleId: string; buildingId: string; attachmentPointId: string }\n  | { type: 'UPGRADE_MODULE'; moduleId: string }\n  | { type: 'SET_MODULE_ACTIVE'; moduleId: string; active: boolean }\n  | { type: 'SELECT_MODULE'; moduleId: string }\n  | { type: 'SELECT_BUILDING'; buildingId: string }\n  | { type: 'REGISTER_BUILDING'; building: ModularBuilding }\n  | { type: 'UPDATE_ACTIVE_MODULES'; modules: BaseModule[] };\n\n// Initial state\nconst initialState: ModuleState = {\n  activeModules: [],\n  buildings: [],\n  selectedModuleId: undefined,\n  selectedBuildingId: undefined,\n};\n\n// Reducer\nfunction moduleReducer(state: ModuleState, action: ModuleAction): ModuleState {\n  switch (action.type) {\n    case 'CREATE_MODULE': {\n      const module = moduleManager.createModule(action.moduleType, action.position);\n      return {\n        ...state,\n        activeModules: moduleManager.getActiveModules(),\n      };\n    }\n\n    case 'ATTACH_MODULE': {\n      moduleManager.attachModule(action.moduleId, action.buildingId, action.attachmentPointId);\n      return {\n        ...state,\n        buildings: Array.from(state.buildings),\n      };\n    }\n\n    case 'UPGRADE_MODULE': {\n      moduleManager.upgradeModule(action.moduleId);\n      return {\n        ...state,\n        activeModules: moduleManager.getActiveModules(),\n      };\n    }\n\n    case 'SET_MODULE_ACTIVE': {\n      moduleManager.setModuleActive(action.moduleId, action.active);\n      return {\n        ...state,\n        activeModules: moduleManager.getActiveModules(),\n      };\n    }\n\n    case 'SELECT_MODULE':\n      return {\n        ...state,\n        selectedModuleId: action.moduleId,\n      };\n\n    case 'SELECT_BUILDING':\n      return {\n        ...state,\n        selectedBuildingId: action.buildingId,\n      };\n\n    case 'REGISTER_BUILDING': {\n      moduleManager.registerBuilding(action.building);\n      return {\n        ...state,\n        buildings: [...state.buildings, action.building],\n      };\n    }\n\n    case 'UPDATE_ACTIVE_MODULES':\n      return {\n        ...state,\n        activeModules: action.modules,\n      };\n\n    default:\n      return state;\n  }\n}\n\n// Context\ninterface ModuleContextType {\n  state: ModuleState;\n  dispatch: React.Dispatch<ModuleAction>;\n}\n\nconst ModuleContext = createContext<ModuleContextType | undefined>(undefined);\n\n// Provider\ninterface ModuleProviderProps {\n  children: ReactNode;\n}\n\nexport function ModuleProvider({ children }: ModuleProviderProps) {\n  const [state, dispatch] = useReducer(moduleReducer, initialState);\n\n  // Initialize state with default buildings\n  useEffect(() => {\n    const buildings = moduleManager.getBuildings();\n    if (buildings.length > 0) {\n      buildings.forEach(building => {\n        dispatch({\n          type: 'REGISTER_BUILDING',\n          building,\n        });\n      });\n    }\n  }, []);\n\n  return <ModuleContext.Provider value={{ state, dispatch }}>{children}</ModuleContext.Provider>;\n}\n\n// Hook\nexport function useModules() {\n  const context = useContext(ModuleContext);\n  if (context === undefined) {\n    throw new Error('useModules must be used within a ModuleProvider');\n  }\n  return context;\n}\n\n// Helper hooks\nexport function useSelectedModule() {\n  const { state } = useModules();\n  return state.selectedModuleId ? moduleManager.getModule(state.selectedModuleId) : undefined;\n}\n\nexport function useSelectedBuilding() {\n  const { state } = useModules();\n  return state.selectedBuildingId ? moduleManager.getBuilding(state.selectedBuildingId) : undefined;\n}\n\nexport function useModulesByType(type: ModuleType) {\n  return moduleManager.getModulesByType(type);\n}\n\nexport function useBuildingModules(buildingId: string) {\n  return moduleManager.getBuildingModules(buildingId);\n}\n\n// Helper functions\nexport function canBuildModule(\n  moduleType: ModuleType,\n  cost: { minerals?: number; energy?: number }\n) {\n  const { state } = useGame();\n  const { state: moduleState } = useModules();\n\n  // Check resources\n  const hasResources =\n    (cost.minerals || 0) <= state.resources.minerals &&\n    (cost.energy || 0) <= state.resources.energy;\n\n  if (!hasResources) {\n    return false;\n  }\n\n  // Find a suitable building and attachment point\n  for (const building of moduleState.buildings) {\n    for (const point of building.attachmentPoints) {\n      if (point.allowedTypes.includes(moduleType) && !point.currentModule) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function buildModule(moduleType: ModuleType, cost: { minerals?: number; energy?: number }) {\n  const { dispatch, state } = useModules();\n\n  // Find a suitable building and attachment point\n  let targetBuilding: ModularBuilding | undefined;\n  let targetPoint: string | undefined;\n\n  for (const building of state.buildings) {\n    for (const point of building.attachmentPoints) {\n      if (point.allowedTypes.includes(moduleType) && !point.currentModule) {\n        targetBuilding = building;\n        targetPoint = point.id;\n        break;\n      }\n    }\n    if (targetBuilding) {\n      break;\n    }\n  }\n\n  if (!targetBuilding || !targetPoint) {\n    console.error('No suitable attachment point found for module:', moduleType);\n    return;\n  }\n\n  // Create and attach the module\n  const position = targetBuilding.attachmentPoints.find(p => p.id === targetPoint)?.position || {\n    x: 0,\n    y: 0,\n  };\n\n  dispatch({\n    type: 'CREATE_MODULE',\n    moduleType,\n    position,\n  });\n\n  // Get the newly created module's ID (it will be the last one created)\n  const newModule = moduleManager.getModulesByType(moduleType).pop();\n  if (!newModule) {\n    console.error('Failed to create module:', moduleType);\n    return;\n  }\n\n  // Attach the module\n  dispatch({\n    type: 'ATTACH_MODULE',\n    moduleId: newModule.id,\n    buildingId: targetBuilding.id,\n    attachmentPointId: targetPoint,\n  });\n\n  // Activate the module\n  dispatch({\n    type: 'SET_MODULE_ACTIVE',\n    moduleId: newModule.id,\n    active: true,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ShipContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ThresholdContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ThresholdTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/BackgroundEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/BuildingUpgradeEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/CapitalShipEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/CentralMothership.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ColonyStarStation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/CombatAutomationEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/EngineTrailEffect.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[927,1011],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is defined but never used.","line":40,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1371,1418],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\nimport { VisualEffect, VisualEffectConfig } from './VisualEffect';\n\ninterface EngineTrailConfig extends VisualEffectConfig {\n  engineSize: number;\n  enginePower: number;\n  velocity: Position;\n}\n\n/**\n * Visual effect for ship engine trails\n */\nexport class EngineTrailEffect extends VisualEffect {\n  protected override config: EngineTrailConfig;\n  private trailPoints: Array<{\n    position: Position;\n    size: number;\n    opacity: number;\n    rotation: number;\n    time: number;\n  }> = [];\n  private lastEmitTime: number = 0;\n  private emitInterval: number = 50; // ms\n\n  constructor(config: EngineTrailConfig) {\n    super(config);\n    this.config = config;\n  }\n\n  protected getEffectType(): string {\n    return 'engine-trail';\n  }\n\n  protected onStart(): void {\n    this.lastEmitTime = Date.now();\n    console.debug(`[EngineTrailEffect] Started with power: ${this.config.enginePower}`);\n  }\n\n  protected onUpdate(progress: number): void {\n    const now = Date.now();\n\n    // Emit new particles\n    if (now - this.lastEmitTime >= this.emitInterval) {\n      this.emitParticles();\n      this.lastEmitTime = now;\n    }\n\n    // Update existing particles\n    this.updateParticles();\n  }\n\n  protected onComplete(): void {\n    this.trailPoints = [];\n    console.debug('[EngineTrailEffect] Completed');\n  }\n\n  protected onReset(): void {\n    this.trailPoints = [];\n    this.lastEmitTime = 0;\n  }\n\n  protected updateRendering(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      return;\n    }\n\n    // Render core engine glow\n    this.renderEngineCore(batcher);\n\n    // Render trail particles\n    this.renderTrail(batcher);\n  }\n\n  private emitParticles(): void {\n    const baseSize = this.config.engineSize;\n    const particleCount = Math.ceil(this.config.enginePower * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const spread = this.config.engineSize * 0.3;\n      const offset = {\n        x: Math.cos(angle) * spread,\n        y: Math.sin(angle) * spread,\n      };\n\n      this.trailPoints.push({\n        position: {\n          x: this.config.position.x + offset.x,\n          y: this.config.position.y + offset.y,\n        },\n        size: baseSize * (0.5 + Math.random() * 0.5),\n        opacity: 0.8 + Math.random() * 0.2,\n        rotation: angle,\n        time: Date.now(),\n      });\n    }\n\n    // Limit total particles\n    while (this.trailPoints.length > 100) {\n      this.trailPoints.shift();\n    }\n  }\n\n  private updateParticles(): void {\n    const now = Date.now();\n    const deltaTime = 1 / 60; // Assume 60fps for physics\n\n    this.trailPoints = this.trailPoints.filter(point => {\n      // Update position based on velocity\n      point.position.x -= this.config.velocity.x * deltaTime;\n      point.position.y -= this.config.velocity.y * deltaTime;\n\n      // Add some turbulence\n      const age = (now - point.time) / 1000;\n      const turbulence = Math.sin(age * 10 + point.rotation) * 2;\n      point.position.x += Math.cos(point.rotation) * turbulence * deltaTime;\n      point.position.y += Math.sin(point.rotation) * turbulence * deltaTime;\n\n      // Fade out based on age\n      point.opacity = Math.max(0, point.opacity - deltaTime);\n\n      // Keep particle if still visible\n      return point.opacity > 0;\n    });\n  }\n\n  private renderEngineCore(batcher: RenderBatcher): void {\n    const time = Date.now() / 1000;\n    const pulse = Math.sin(time * 10) * 0.2 + 0.8;\n    const coreSize = this.config.engineSize * this.config.enginePower;\n\n    // Core glow\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-core`,\n      position: this.config.position,\n      size: { width: coreSize * 2, height: coreSize * 2 },\n      rotation: 0,\n      opacity: 0.8 * pulse,\n      color: this.config.color || '#00ffff',\n      shader: 'additive',\n    });\n\n    // Inner core\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-inner`,\n      position: this.config.position,\n      size: { width: coreSize, height: coreSize },\n      rotation: time * 2,\n      opacity: 1,\n      color: '#ffffff',\n      shader: 'additive',\n    });\n  }\n\n  private renderTrail(batcher: RenderBatcher): void {\n    this.trailPoints.forEach((point, index) => {\n      const time = Date.now() / 1000;\n      const flicker = Math.sin(time * 20 + index) * 0.2 + 0.8;\n\n      // Trail particle\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: point.position,\n        size: { width: point.size, height: point.size },\n        rotation: point.rotation + time,\n        opacity: point.opacity * flicker,\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n\n      // Particle glow\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-glow-${index}`,\n        position: point.position,\n        size: { width: point.size * 2, height: point.size * 2 },\n        rotation: -point.rotation + time,\n        opacity: point.opacity * 0.5 * flicker,\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ExplorationHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ExplosionEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/FormationTransitionEffect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'particleCount' is assigned a value but never used.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentX' is assigned a value but never used.","line":85,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentY' is assigned a value but never used.","line":86,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Position } from '../../types/core/GameTypes';\n\ninterface FormationTransitionEffectProps {\n  sourcePositions: Position[];\n  targetPositions: Position[];\n  duration: number;\n  easingFunction: 'linear' | 'easeInOut' | 'easeIn' | 'easeOut';\n  quality: 'low' | 'medium' | 'high';\n  pattern: 'offensive' | 'defensive' | 'balanced';\n  onComplete?: () => void;\n}\n\ninterface ParticleProps {\n  x: number;\n  y: number;\n  size: number;\n  opacity: number;\n  color: string;\n}\n\nexport function FormationTransitionEffect({\n  sourcePositions,\n  targetPositions,\n  duration,\n  easingFunction,\n  quality,\n  pattern,\n  onComplete,\n}: FormationTransitionEffectProps) {\n  const [progress, setProgress] = useState(0);\n  const [particles, setParticles] = useState<ParticleProps[]>([]);\n\n  // Quality-based settings\n  const particleCount = quality === 'high' ? 16 : quality === 'medium' ? 8 : 4;\n  const trailLength = quality === 'high' ? 8 : quality === 'medium' ? 4 : 2;\n  const glowIntensity = quality === 'high' ? '12px' : quality === 'medium' ? '8px' : '4px';\n\n  // Pattern-based colors\n  const getPatternColor = () => {\n    switch (pattern) {\n      case 'offensive':\n        return 'rgb(239, 68, 68)'; // red-500\n      case 'defensive':\n        return 'rgb(59, 130, 246)'; // blue-500\n      case 'balanced':\n        return 'rgb(168, 85, 247)'; // purple-500\n    }\n  };\n\n  // Easing functions\n  const getEasedProgress = (p: number) => {\n    switch (easingFunction) {\n      case 'easeIn':\n        return p * p;\n      case 'easeOut':\n        return 1 - (1 - p) * (1 - p);\n      case 'easeInOut':\n        return p < 0.5 ? 2 * p * p : 1 - Math.pow(-2 * p + 2, 2) / 2;\n      default:\n        return p;\n    }\n  };\n\n  useEffect(() => {\n    const startTime = Date.now();\n    const color = getPatternColor();\n\n    const updateFrame = () => {\n      const elapsed = Date.now() - startTime;\n      const rawProgress = Math.min(1, elapsed / duration);\n      const easedProgress = getEasedProgress(rawProgress);\n      setProgress(easedProgress);\n\n      // Update particle effects\n      const newParticles: ParticleProps[] = [];\n\n      sourcePositions.forEach((source, index) => {\n        const target = targetPositions[index];\n        if (!target) {\n          return;\n        }\n\n        // Calculate current position\n        const currentX = source.x + (target.x - source.x) * easedProgress;\n        const currentY = source.y + (target.y - source.y) * easedProgress;\n\n        // Add trail particles\n        for (let i = 0; i < trailLength; i++) {\n          const trailProgress = Math.max(0, easedProgress - (i / trailLength) * 0.2);\n          const trailX = source.x + (target.x - source.x) * trailProgress;\n          const trailY = source.y + (target.y - source.y) * trailProgress;\n\n          newParticles.push({\n            x: trailX,\n            y: trailY,\n            size: 4 * (1 - i / trailLength),\n            opacity: 0.3 * (1 - i / trailLength),\n            color,\n          });\n        }\n      });\n\n      setParticles(newParticles);\n\n      if (rawProgress < 1) {\n        requestAnimationFrame(updateFrame);\n      } else {\n        onComplete?.();\n      }\n    };\n\n    const frameId = requestAnimationFrame(updateFrame);\n    return () => cancelAnimationFrame(frameId);\n  }, [sourcePositions, targetPositions, duration, easingFunction, quality, pattern, onComplete]);\n\n  return (\n    <div className=\"pointer-events-none absolute inset-0\">\n      {/* Formation Lines */}\n      <svg className=\"absolute inset-0\">\n        {sourcePositions.map((source, index) => {\n          const target = targetPositions[index];\n          if (!target) {\n            return null;\n          }\n\n          const currentX = source.x + (target.x - source.x) * progress;\n          const currentY = source.y + (target.y - source.y) * progress;\n\n          return (\n            <line\n              key={index}\n              x1={source.x}\n              y1={source.y}\n              x2={currentX}\n              y2={currentY}\n              stroke={getPatternColor()}\n              strokeWidth=\"2\"\n              strokeDasharray=\"4 4\"\n              className=\"opacity-30\"\n            />\n          );\n        })}\n      </svg>\n\n      {/* Particles */}\n      {particles.map((particle, index) => (\n        <div\n          key={`particle-${index}`}\n          className=\"absolute rounded-full transition-all duration-100\"\n          style={{\n            left: particle.x,\n            top: particle.y,\n            width: particle.size,\n            height: particle.size,\n            backgroundColor: particle.color,\n            opacity: particle.opacity,\n            transform: 'translate(-50%, -50%)',\n            filter: `blur(${glowIntensity})`,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/HabitableWorld.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/MineralProcessing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ModuleUpgradeTransition.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/PopulationIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ProgressionEffects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ShieldEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ShieldImpactEffect.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[930,1018],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is defined but never used.","line":39,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1276,1331],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\nimport { VisualEffect, VisualEffectConfig } from './VisualEffect';\n\ninterface ShieldImpactConfig extends VisualEffectConfig {\n  radius: number;\n  damage: number;\n  shieldStrength: number;\n}\n\n/**\n * Visual effect for shield impacts\n */\nexport class ShieldImpactEffect extends VisualEffect {\n  protected override config: ShieldImpactConfig;\n  private ripplePoints: Position[] = [];\n  private hexagonPoints: Position[] = [];\n  private crackPoints: Position[] = [];\n\n  constructor(config: ShieldImpactConfig) {\n    super(config);\n    this.config = config;\n  }\n\n  protected getEffectType(): string {\n    return 'shield-impact';\n  }\n\n  protected onStart(): void {\n    // Create initial points\n    this.createRipplePoints();\n    this.createHexagonPoints();\n    this.createCrackPoints();\n\n    // Debug logging\n    console.debug(`[ShieldImpactEffect] Started effect with damage: ${this.config.damage}`);\n  }\n\n  protected onUpdate(progress: number): void {\n    // No additional update needed as points are transformed during rendering\n  }\n\n  protected onComplete(): void {\n    this.ripplePoints = [];\n    this.hexagonPoints = [];\n    this.crackPoints = [];\n\n    console.debug('[ShieldImpactEffect] Completed effect');\n  }\n\n  protected onReset(): void {\n    this.ripplePoints = [];\n    this.hexagonPoints = [];\n    this.crackPoints = [];\n  }\n\n  protected updateRendering(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      return;\n    }\n\n    // Render shield components\n    this.renderRipple(batcher);\n    this.renderHexGrid(batcher);\n    this.renderCracks(batcher);\n  }\n\n  private createRipplePoints(): void {\n    const segments = 32;\n    for (let i = 0; i < segments; i++) {\n      const angle = (i / segments) * Math.PI * 2;\n      this.ripplePoints.push({\n        x: Math.cos(angle) * this.config.radius,\n        y: Math.sin(angle) * this.config.radius,\n      });\n    }\n  }\n\n  private createHexagonPoints(): void {\n    // Create hexagonal grid pattern\n    const hexRadius = 20;\n    const rows = Math.ceil(this.config.radius / (hexRadius * 1.5));\n    const cols = Math.ceil(this.config.radius / (hexRadius * Math.sqrt(3)));\n\n    for (let row = -rows; row <= rows; row++) {\n      for (let col = -cols; col <= cols; col++) {\n        const x = col * hexRadius * Math.sqrt(3);\n        const y = row * hexRadius * 1.5 + (col % 2) * hexRadius * 0.75;\n\n        // Only add points within shield radius\n        if (Math.sqrt(x * x + y * y) <= this.config.radius) {\n          this.hexagonPoints.push({ x, y });\n        }\n      }\n    }\n  }\n\n  private createCrackPoints(): void {\n    if (this.config.damage <= 0) {\n      return;\n    }\n\n    // Create crack pattern based on damage\n    const crackCount = Math.ceil((this.config.damage / this.config.shieldStrength) * 5);\n    const angleStep = (Math.PI * 2) / crackCount;\n\n    for (let i = 0; i < crackCount; i++) {\n      const baseAngle = angleStep * i;\n      let currentPoint = {\n        x: Math.cos(baseAngle) * this.config.radius * 0.2,\n        y: Math.sin(baseAngle) * this.config.radius * 0.2,\n      };\n\n      // Create branching cracks\n      for (let j = 0; j < 5; j++) {\n        const angle = baseAngle + ((Math.random() - 0.5) * Math.PI) / 4;\n        const length = Math.random() * this.config.radius * 0.3;\n\n        const endPoint = {\n          x: currentPoint.x + Math.cos(angle) * length,\n          y: currentPoint.y + Math.sin(angle) * length,\n        };\n\n        this.crackPoints.push(currentPoint, endPoint);\n        currentPoint = endPoint;\n      }\n    }\n  }\n\n  private renderRipple(batcher: RenderBatcher): void {\n    const time = Date.now() / 1000;\n    const baseRadius = this.config.radius;\n    const rippleStrength = Math.max(0, 1 - this.progress * 2);\n\n    // Render expanding ripple\n    this.ripplePoints.forEach((point, index) => {\n      const angle = (index / this.ripplePoints.length) * Math.PI * 2;\n      const rippleOffset = Math.sin(time * 5 + angle * 3) * 10 * rippleStrength;\n      const radius = baseRadius + rippleOffset;\n\n      const position = {\n        x: this.config.position.x + Math.cos(angle) * radius,\n        y: this.config.position.y + Math.sin(angle) * radius,\n      };\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-ripple-${index}`,\n        position,\n        size: { width: 4, height: 4 },\n        rotation: angle,\n        opacity: rippleStrength * 0.5,\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderHexGrid(batcher: RenderBatcher): void {\n    const time = Date.now() / 1000;\n    const hexOpacity = Math.max(0, 1 - this.progress * 3);\n\n    this.hexagonPoints.forEach((point, index) => {\n      const distance = Math.sqrt(point.x * point.x + point.y * point.y);\n      const distanceRatio = distance / this.config.radius;\n      const pulse = Math.sin(time * 3 + distanceRatio * 5) * 0.3 + 0.7;\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-hex-${index}`,\n        position: {\n          x: this.config.position.x + point.x,\n          y: this.config.position.y + point.y,\n        },\n        size: { width: 30, height: 30 },\n        rotation: time + index,\n        opacity: hexOpacity * pulse * (1 - distanceRatio),\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderCracks(batcher: RenderBatcher): void {\n    if (this.crackPoints.length === 0) {\n      return;\n    }\n\n    const crackOpacity = Math.max(0, 1 - this.progress * 4);\n    const time = Date.now() / 1000;\n\n    for (let i = 0; i < this.crackPoints.length; i += 2) {\n      const start = this.crackPoints[i];\n      const end = this.crackPoints[i + 1];\n\n      const centerX = (start.x + end.x) / 2;\n      const centerY = (start.y + end.y) / 2;\n      const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n      const angle = Math.atan2(end.y - start.y, end.x - start.x);\n\n      // Render crack line\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-crack-${i}`,\n        position: {\n          x: this.config.position.x + centerX,\n          y: this.config.position.y + centerY,\n        },\n        size: { width: length, height: 2 },\n        rotation: angle,\n        opacity: crackOpacity * (0.8 + Math.sin(time * 10 + i) * 0.2),\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n\n      // Render glow\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-crack-glow-${i}`,\n        position: {\n          x: this.config.position.x + centerX,\n          y: this.config.position.y + centerY,\n        },\n        size: { width: length, height: 6 },\n        rotation: angle,\n        opacity: crackOpacity * 0.5 * (0.8 + Math.sin(time * 10 + i) * 0.2),\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ShipPathEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/SmokeTrailEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/StarSystemBackdrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ThrusterEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/TradeRouteEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/VisualEffect.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":27,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":27,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[718,787],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1405,1476],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\n\nexport interface VisualEffectConfig {\n  id?: string;\n  position: Position;\n  color?: string;\n  duration?: number;\n}\n\nexport abstract class VisualEffect {\n  protected id: string;\n  protected config: VisualEffectConfig;\n  protected progress: number = 0;\n  protected batchId: string | null = null;\n  protected startTime: number;\n  protected isComplete: boolean = false;\n\n  constructor(config: VisualEffectConfig) {\n    this.id = config.id || Math.random().toString(36).substring(7);\n    this.config = config;\n    this.startTime = Date.now();\n  }\n\n  public start(): void {\n    this.onStart();\n    console.debug(`[${this.getEffectType()}] Started effect ${this.id}`);\n  }\n\n  public update(): void {\n    if (this.isComplete) return;\n\n    const elapsed = Date.now() - this.startTime;\n    const duration = this.config.duration || 1000;\n    this.progress = Math.min(elapsed / duration, 1);\n\n    this.onUpdate(this.progress);\n\n    if (this.progress >= 1) {\n      this.complete();\n    }\n  }\n\n  public render(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      this.batchId = batcher.createBatch(this.getEffectType());\n    }\n    this.updateRendering(batcher);\n  }\n\n  public complete(): void {\n    if (this.isComplete) return;\n    this.isComplete = true;\n    this.onComplete();\n    console.debug(`[${this.getEffectType()}] Completed effect ${this.id}`);\n  }\n\n  public reset(): void {\n    this.progress = 0;\n    this.startTime = Date.now();\n    this.isComplete = false;\n    this.onReset();\n  }\n\n  public isFinished(): boolean {\n    return this.isComplete;\n  }\n\n  protected abstract getEffectType(): string;\n  protected abstract onStart(): void;\n  protected abstract onUpdate(progress: number): void;\n  protected abstract updateRendering(batcher: RenderBatcher): void;\n  protected abstract onComplete(): void;\n  protected abstract onReset(): void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/WeaponEffect.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":304,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10393,10460],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":335,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":335,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[11298,11367],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useSpring } from '@react-spring/three';\nimport { Trail } from '@react-three/drei';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { useRef } from 'react';\nimport * as THREE from 'three';\nimport { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\nimport { WeaponCategory } from '../../types/weapons/WeaponTypes';\nimport { VisualEffect, VisualEffectConfig } from './VisualEffect';\n\n// Props and Config Types\ninterface WeaponEffectProps {\n  type:\n    | 'machineGun'\n    | 'railGun'\n    | 'gaussCannon'\n    | 'rockets'\n    | 'mgss'\n    | 'pointDefense'\n    | 'plasmaCannon'\n    | 'beamWeapon'\n    | 'pulseWeapon'\n    | 'disruptor'\n    | 'ionCannon';\n  color: string;\n  position: { x: number; y: number };\n  rotation: number;\n  firing: boolean;\n}\n\ninterface WeaponEffectConfig extends VisualEffectConfig {\n  type: WeaponCategory;\n  target?: Position;\n  damage?: number;\n  impactSize?: number;\n  opacity?: number;\n  color?: string;\n  duration?: number;\n}\n\n// React Components\nfunction WeaponBeam({ type, color, firing }: Omit<WeaponEffectProps, 'position' | 'rotation'>) {\n  const materialRef = useRef<THREE.ShaderMaterial>(null);\n  const timeRef = useRef(0);\n\n  const { intensity } = useSpring({\n    intensity: firing ? 1 : 0,\n    config: { tension: 280, friction: 60 },\n  });\n\n  // Create shader material directly\n  const shader = {\n    uniforms: {\n      time: { value: 0 },\n      color: { value: new THREE.Color(color) },\n      intensity: { value: 0 },\n      weaponType: { value: 0 },\n    },\n    vertexShader: `\n      varying vec2 vUv;\n      varying vec3 vPosition;\n      varying vec3 vNormal;\n      \n      void main() {\n        vUv = uv;\n        vPosition = position;\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform float time;\n      uniform vec3 color;\n      uniform float intensity;\n      uniform int weaponType;\n      \n      varying vec2 vUv;\n      varying vec3 vPosition;\n      varying vec3 vNormal;\n      \n      float noise(vec2 p) {\n        return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);\n      }\n      \n      float fbm(vec2 p) {\n        float v = 0.0;\n        float a = 0.5;\n        vec2 shift = vec2(100.0);\n        mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n        for (int i = 0; i < 5; ++i) {\n          v += a * noise(p);\n          p = rot * p * 2.0 + shift;\n          a *= 0.5;\n        }\n        return v;\n      }\n\n      void main() {\n        vec2 uv = vUv;\n        float alpha = 0.0;\n        vec3 finalColor = color;\n        \n        // Edge glow\n        float fresnel = pow(1.0 - abs(dot(vNormal, vec3(0.0, 0.0, 1.0))), 3.0);\n        \n        if (weaponType == 0) { // Machine Gun\n          float bulletPattern = smoothstep(0.48, 0.52, abs(uv.x - 0.5));\n          float trailFade = smoothstep(0.0, 1.0, uv.y);\n          float energyPulse = sin(uv.y * 30.0 - time * 15.0) * 0.5 + 0.5;\n          alpha = (1.0 - bulletPattern) * (1.0 - trailFade) * intensity;\n          alpha *= mix(0.8, 1.0, energyPulse);\n          finalColor = mix(color, vec3(1.0), fresnel * 0.5);\n        }\n        else if (weaponType == 1) { // Rail Gun\n          float beam = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float energyPulse = sin(uv.y * 20.0 - time * 10.0) * 0.5 + 0.5;\n          float distortion = fbm(uv * 5.0 + time * 0.5);\n          alpha = (1.0 - beam) * (energyPulse + distortion * 0.5) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.7 + energyPulse * 0.3);\n        }\n        else if (weaponType == 2) { // Gauss Cannon\n          float core = smoothstep(0.4, 0.6, abs(uv.x - 0.5));\n          float plasma = fbm(uv * 8.0 + time * 2.0);\n          float rings = sin(uv.y * 50.0 + time * 5.0) * 0.5 + 0.5;\n          alpha = (1.0 - core) * (plasma + rings * 0.3) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.8 + plasma * 0.4);\n        }\n        else if (weaponType == 3) { // Rockets\n          float rocketCore = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float exhaust = fbm(vec2(uv.x * 5.0, uv.y * 2.0 - time * 3.0));\n          float sparkles = noise(uv * 20.0 + time * 4.0);\n          alpha = (1.0 - rocketCore) * (exhaust + sparkles * 0.2) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.6 + exhaust * 0.3);\n        }\n        else if (weaponType == 4) { // MGSS\n          float beamCore = smoothstep(0.47, 0.53, abs(uv.x - 0.5));\n          float swirl = sin(uv.y * 40.0 + time * 8.0 + uv.x * 5.0) * 0.5 + 0.5;\n          float energyField = fbm(uv * 6.0 + time * 1.5);\n          alpha = (1.0 - beamCore) * (swirl + energyField * 0.4) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.9 + swirl * 0.3);\n        }\n        else if (weaponType == 5) { // Point Defense\n          float pointDefense = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float energyPulse = sin(uv.y * 30.0 - time * 15.0) * 0.5 + 0.5;\n          alpha = (1.0 - pointDefense) * (energyPulse + 0.5) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.5);\n        }\n        else if (weaponType == 6) { // Plasma Cannon\n          float plasmaCore = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float plasmaField = fbm(uv * 10.0 + time * 3.0);\n          float energyRings = sin(uv.y * 60.0 + time * 8.0) * 0.5 + 0.5;\n          alpha = (1.0 - plasmaCore) * (plasmaField + energyRings * 0.4) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.9 + plasmaField * 0.5);\n        }\n        else if (weaponType == 7) { // Beam Weapon\n          float beamCore = smoothstep(0.48, 0.52, abs(uv.x - 0.5));\n          float energyField = fbm(uv * 12.0 + time * 4.0);\n          float beamPulse = sin(uv.y * 80.0 - time * 20.0) * 0.5 + 0.5;\n          alpha = (1.0 - beamCore) * (energyField + beamPulse * 0.6) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.95 + beamPulse * 0.4);\n        }\n        else if (weaponType == 8) { // Pulse Weapon\n          float pulseCore = smoothstep(0.46, 0.54, abs(uv.x - 0.5));\n          float pulseWave = sin(uv.y * 40.0 - time * 12.0) * 0.5 + 0.5;\n          float energyField = fbm(uv * 8.0 + time * 2.0);\n          alpha = (1.0 - pulseCore) * (pulseWave + energyField * 0.3) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.8 + pulseWave * 0.5);\n        }\n        else if (weaponType == 9) { // Disruptor\n          float disruptorCore = smoothstep(0.47, 0.53, abs(uv.x - 0.5));\n          float disruption = fbm(uv * 15.0 + time * 5.0);\n          float chaosField = noise(uv * 25.0 + time * 6.0);\n          alpha = (1.0 - disruptorCore) * (disruption + chaosField * 0.4) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.7 + disruption * 0.6);\n        }\n        else if (weaponType == 10) { // Ion Cannon\n          float ionCore = smoothstep(0.46, 0.54, abs(uv.x - 0.5));\n          float ionField = fbm(uv * 10.0 + time * 3.5);\n          float ionPulse = sin(uv.y * 70.0 - time * 15.0) * 0.5 + 0.5;\n          alpha = (1.0 - ionCore) * (ionField + ionPulse * 0.5) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.85 + ionPulse * 0.45);\n        }\n        \n        // Add global glow\n        alpha += fresnel * 0.3 * intensity;\n        \n        gl_FragColor = vec4(finalColor, alpha);\n      }\n    `,\n  };\n\n  useFrame((_state, delta) => {\n    if (materialRef.current) {\n      timeRef.current += delta;\n      materialRef.current.uniforms.time.value = timeRef.current;\n      materialRef.current.uniforms.intensity.value = intensity.get();\n      materialRef.current.uniforms.weaponType.value = typeMap[type];\n    }\n  });\n\n  const typeMap = {\n    machineGun: 0,\n    railGun: 1,\n    gaussCannon: 2,\n    rockets: 3,\n    mgss: 4,\n    pointDefense: 5,\n    plasmaCannon: 6,\n    beamWeapon: 7,\n    pulseWeapon: 8,\n    disruptor: 9,\n    ionCannon: 10,\n  };\n\n  return (\n    <mesh>\n      <planeGeometry args={[0.2, 1, 32, 32]} />\n      <shaderMaterial\n        ref={materialRef}\n        transparent\n        depthWrite={false}\n        blending={THREE.AdditiveBlending}\n        uniforms={shader.uniforms}\n        vertexShader={shader.vertexShader}\n        fragmentShader={shader.fragmentShader}\n      />\n      {type !== 'machineGun' && (\n        <Trail width={0.2} length={5} color={color} attenuation={(t: number) => t * t} />\n      )}\n    </mesh>\n  );\n}\n\nexport function WeaponEffectComponent({\n  type,\n  color,\n  position,\n  rotation,\n  firing,\n}: WeaponEffectProps) {\n  return (\n    <div\n      className=\"absolute\"\n      style={{\n        left: position.x,\n        top: position.y,\n        width: '100px',\n        height: '200px',\n        transform: `rotate(${rotation}deg)`,\n      }}\n    >\n      <Canvas camera={{ position: [0, 0, 2], fov: 75 }} style={{ background: 'transparent' }}>\n        <WeaponBeam type={type} color={color} firing={firing} />\n      </Canvas>\n\n      {/* Enhanced Glow Effect */}\n      {firing && (\n        <>\n          <div\n            className=\"pointer-events-none absolute inset-0\"\n            style={{\n              background: `radial-gradient(circle at 50% 0%, ${color}66 0%, ${color}00 70%)`,\n              filter: 'blur(8px)',\n              opacity: 0.8,\n              animation: 'pulse 1.5s ease-in-out infinite',\n            }}\n          />\n          <div\n            className=\"pointer-events-none absolute inset-0\"\n            style={{\n              background: `radial-gradient(circle at 50% 0%, ${color}33 0%, ${color}00 100%)`,\n              filter: 'blur(16px)',\n              opacity: 0.6,\n              animation: 'pulse 2s ease-in-out infinite reverse',\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\n// Visual Effect Class\nexport class WeaponEffectVisual extends VisualEffect {\n  protected override config: WeaponEffectConfig;\n  private trailPoints: Position[] = [];\n  private impactParticles: Position[] = [];\n  private impactStartTime: number = 0;\n\n  constructor(config: WeaponEffectConfig) {\n    super(config);\n    this.config = config;\n  }\n\n  protected getEffectType(): string {\n    return `weapon-${this.config.type}`;\n  }\n\n  protected onStart(): void {\n    // Initialize trail points\n    this.trailPoints = [this.config.position];\n\n    // Debug logging\n    console.debug(`[WeaponEffect] Started ${this.config.type} effect`);\n  }\n\n  protected onUpdate(progress: number): void {\n    // Update trail points\n    if (this.config.target) {\n      const currentPoint = {\n        x: this.config.position.x + (this.config.target.x - this.config.position.x) * progress,\n        y: this.config.position.y + (this.config.target.y - this.config.position.y) * progress,\n      };\n\n      this.trailPoints.push(currentPoint);\n\n      // Keep only recent points\n      while (this.trailPoints.length > 10) {\n        this.trailPoints.shift();\n      }\n\n      // Create impact when projectile reaches target\n      if (progress >= 1 && !this.impactStartTime) {\n        this.impactStartTime = Date.now();\n        this.createImpactParticles();\n      }\n    }\n  }\n\n  protected onComplete(): void {\n    this.trailPoints = [];\n    this.impactParticles = [];\n    this.impactStartTime = 0;\n\n    console.debug(`[WeaponEffect] Completed ${this.config.type} effect`);\n  }\n\n  protected onReset(): void {\n    this.trailPoints = [];\n    this.impactParticles = [];\n    this.impactStartTime = 0;\n  }\n\n  protected updateRendering(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      return;\n    }\n\n    // Render trail\n    this.renderTrail(batcher);\n\n    // Render impact\n    if (this.impactStartTime) {\n      this.renderImpact(batcher);\n    }\n  }\n\n  private renderTrail(batcher: RenderBatcher): void {\n    // Different trail rendering based on weapon type\n    switch (this.config.type) {\n      case 'machineGun':\n        this.renderProjectileTrail(batcher);\n        break;\n      case 'gaussCannon':\n      case 'railGun':\n        this.renderBeamTrail(batcher);\n        break;\n      case 'mgss':\n        this.renderEnergyTrail(batcher);\n        break;\n      case 'rockets':\n        this.renderRocketTrail(batcher);\n        break;\n      case 'harmonicCannon':\n        this.renderHarmonicTrail(batcher);\n        break;\n      case 'temporalCannon':\n        this.renderTemporalTrail(batcher);\n        break;\n      case 'quantumCannon':\n        this.renderQuantumTrail(batcher);\n        break;\n    }\n  }\n\n  private renderProjectileTrail(batcher: RenderBatcher): void {\n    // Simple projectile with small trail\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: point,\n        size: { width: 4, height: 4 },\n        rotation: 0,\n        opacity,\n        color: this.config.color || '#ffff00',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderBeamTrail(batcher: RenderBatcher): void {\n    // Solid beam with glow\n    if (this.trailPoints.length < 2) {\n      return;\n    }\n\n    const start = this.trailPoints[0];\n    const end = this.trailPoints[this.trailPoints.length - 1];\n    const angle = Math.atan2(end.y - start.y, end.x - start.x);\n    const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n\n    // Core beam\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-beam`,\n      position: {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2,\n      },\n      size: { width: length, height: 4 },\n      rotation: angle,\n      opacity: this.config.opacity || 1,\n      color: this.config.color || '#00ffff',\n      shader: 'additive',\n    });\n\n    // Glow effect\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-glow`,\n      position: {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2,\n      },\n      size: { width: length, height: 12 },\n      rotation: angle,\n      opacity: (this.config.opacity || 1) * 0.5,\n      color: this.config.color || '#00ffff',\n      shader: 'additive',\n    });\n  }\n\n  private renderEnergyTrail(batcher: RenderBatcher): void {\n    // Pulsing energy trail\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const pulse = Math.sin(Date.now() / 100 + index) * 0.3 + 0.7;\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: point,\n        size: { width: 6, height: 6 },\n        rotation: 0,\n        opacity: opacity * pulse,\n        color: this.config.color || '#ff00ff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderRocketTrail(batcher: RenderBatcher): void {\n    // Rocket with smoke trail\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n\n      // Smoke\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-smoke-${index}`,\n        position: point,\n        size: { width: 8, height: 8 },\n        rotation: Math.random() * Math.PI * 2,\n        opacity: opacity * 0.3,\n        color: '#888888',\n        shader: 'normal',\n      });\n\n      // Fire\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-fire-${index}`,\n        position: point,\n        size: { width: 6, height: 6 },\n        rotation: 0,\n        opacity: opacity,\n        color: this.config.color || '#ff4400',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderHarmonicTrail(batcher: RenderBatcher): void {\n    // Harmonic wave pattern\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const wave = Math.sin(Date.now() / 200 + index);\n      const offset = wave * 10;\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: {\n          x: point.x + offset,\n          y: point.y + offset,\n        },\n        size: { width: 8, height: 8 },\n        rotation: wave * Math.PI,\n        opacity: opacity,\n        color: this.config.color || '#00ff88',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderTemporalTrail(batcher: RenderBatcher): void {\n    // Time distortion effect\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const time = Date.now() / 1000;\n      const distortion = Math.sin(time * 2 + index);\n\n      for (let i = 0; i < 3; i++) {\n        const offset = distortion * (i + 1) * 5;\n        batcher.addItem(this.batchId!, {\n          id: `${this.id}-trail-${index}-${i}`,\n          position: {\n            x: point.x + offset,\n            y: point.y + offset,\n          },\n          size: { width: 6 - i * 2, height: 6 - i * 2 },\n          rotation: time + (i * Math.PI) / 3,\n          opacity: opacity * (1 - i * 0.2),\n          color: this.config.color || '#8800ff',\n          shader: 'additive',\n        });\n      }\n    });\n  }\n\n  private renderQuantumTrail(batcher: RenderBatcher): void {\n    // Quantum tunneling effect\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const time = Date.now() / 1000;\n\n      // Phase shift effect\n      for (let i = 0; i < 4; i++) {\n        const phase = (time + (i * Math.PI) / 2) % (Math.PI * 2);\n        const shift = Math.sin(phase) * 10;\n\n        batcher.addItem(this.batchId!, {\n          id: `${this.id}-trail-${index}-${i}`,\n          position: {\n            x: point.x + Math.cos(phase) * shift,\n            y: point.y + Math.sin(phase) * shift,\n          },\n          size: { width: 5, height: 5 },\n          rotation: phase,\n          opacity: opacity * Math.abs(Math.sin(phase)),\n          color: this.config.color || '#0088ff',\n          shader: 'additive',\n        });\n      }\n    });\n  }\n\n  private renderImpact(batcher: RenderBatcher): void {\n    const impactProgress = Math.min(\n      1,\n      (Date.now() - this.impactStartTime) / (this.config.duration || 1000)\n    );\n\n    // Update impact particles\n    this.impactParticles.forEach((particle, index) => {\n      const particleProgress = impactProgress * (1 + index * 0.1);\n      if (particleProgress >= 1) {\n        return;\n      }\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-impact-${index}`,\n        position: particle,\n        size: {\n          width: (this.config.impactSize || 20) * (1 - particleProgress),\n          height: (this.config.impactSize || 20) * (1 - particleProgress),\n        },\n        rotation: (index * Math.PI) / 4,\n        opacity: 1 - particleProgress,\n        color: this.config.color || '#ffffff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private createImpactParticles(): void {\n    if (!this.config.target) {\n      return;\n    }\n\n    // Create particles in a circular pattern\n    const particleCount = 8;\n    for (let i = 0; i < particleCount; i++) {\n      const angle = (i / particleCount) * Math.PI * 2;\n      const distance = (this.config.impactSize || 20) / 2;\n\n      this.impactParticles.push({\n        x: this.config.target.x + Math.cos(angle) * distance,\n        y: this.config.target.y + Math.sin(angle) * distance,\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/types_effects/EffectTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/types_effects/WeaponEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/types_effects/shipEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/util_effects/effectUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/factories/ships/ShipClassFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/automation/useAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/automation/useGlobalAutomation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1432,1435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1432,1435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport {\n  globalAutomationManager,\n  GlobalRoutine,\n  GlobalRoutineType,\n} from '../../managers/automation/GlobalAutomationManager';\nimport { AutomationAction, AutomationCondition } from '../../managers/game/AutomationManager';\nimport { MessagePriority, SystemId } from '../../utils/events/EventCommunication';\n\n/**\n * Hook for using the global automation system\n */\nexport function useGlobalAutomation() {\n  const [routines, setRoutines] = useState<GlobalRoutine[]>([]);\n  const [activeRoutines, setActiveRoutines] = useState<GlobalRoutine[]>([]);\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const [lastUpdate, setLastUpdate] = useState<number>(Date.now());\n\n  // Initialize and load routines\n  useEffect(() => {\n    // Initialize the global automation manager if not already initialized\n    if (!isInitialized) {\n      globalAutomationManager.initialize();\n      setIsInitialized(true);\n    }\n\n    // Load all routines\n    const allRoutines = globalAutomationManager.getAllRoutines();\n    setRoutines(allRoutines);\n\n    // Load active routines\n    const active = globalAutomationManager.getActiveRoutines();\n    setActiveRoutines(active);\n  }, [isInitialized]);\n\n  // Subscribe to automation events\n  useEffect(() => {\n    const handleAutomationEvent = (event: any) => {\n      if (\n        event.type === 'AUTOMATION_STARTED' ||\n        event.type === 'AUTOMATION_STOPPED' ||\n        event.type === 'AUTOMATION_CYCLE_COMPLETE'\n      ) {\n        // Refresh routines\n        const allRoutines = globalAutomationManager.getAllRoutines();\n        setRoutines(allRoutines);\n\n        // Refresh active routines\n        const active = globalAutomationManager.getActiveRoutines();\n        setActiveRoutines(active);\n\n        // Update timestamp\n        setLastUpdate(Date.now());\n      }\n    };\n\n    // Subscribe to automation events\n    const unsubscribeStarted = moduleEventBus.subscribe(\n      'AUTOMATION_STARTED' as ModuleEventType,\n      handleAutomationEvent\n    );\n    const unsubscribeStopped = moduleEventBus.subscribe(\n      'AUTOMATION_STOPPED' as ModuleEventType,\n      handleAutomationEvent\n    );\n    const unsubscribeComplete = moduleEventBus.subscribe(\n      'AUTOMATION_CYCLE_COMPLETE' as ModuleEventType,\n      handleAutomationEvent\n    );\n\n    // Cleanup subscriptions\n    return () => {\n      if (typeof unsubscribeStarted === 'function') {\n        unsubscribeStarted();\n      }\n      if (typeof unsubscribeStopped === 'function') {\n        unsubscribeStopped();\n      }\n      if (typeof unsubscribeComplete === 'function') {\n        unsubscribeComplete();\n      }\n    };\n  }, []);\n\n  /**\n   * Create a new global routine\n   */\n  const createRoutine = useCallback(\n    (\n      name: string,\n      type: GlobalRoutineType,\n      description: string,\n      conditions: AutomationCondition[],\n      actions: AutomationAction[],\n      systems: SystemId[],\n      options?: {\n        priority?: MessagePriority;\n        interval?: number;\n        enabled?: boolean;\n        tags?: string[];\n      }\n    ): string => {\n      const routine: GlobalRoutine = {\n        id: `routine-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        name,\n        type,\n        description,\n        conditions,\n        actions,\n        systems,\n        priority: options?.priority || MessagePriority.NORMAL,\n        interval: options?.interval || 60000, // Default to 1 minute\n        enabled: options?.enabled !== undefined ? options.enabled : true,\n        tags: options?.tags || [],\n      };\n\n      const routineId = globalAutomationManager.registerRoutine(routine);\n\n      // Refresh routines\n      const allRoutines = globalAutomationManager.getAllRoutines();\n      setRoutines(allRoutines);\n\n      // Refresh active routines\n      const active = globalAutomationManager.getActiveRoutines();\n      setActiveRoutines(active);\n\n      return routineId;\n    },\n    []\n  );\n\n  /**\n   * Enable a routine\n   */\n  const enableRoutine = useCallback((routineId: string): boolean => {\n    const result = globalAutomationManager.enableRoutine(routineId);\n\n    if (result) {\n      // Refresh routines\n      const allRoutines = globalAutomationManager.getAllRoutines();\n      setRoutines(allRoutines);\n\n      // Refresh active routines\n      const active = globalAutomationManager.getActiveRoutines();\n      setActiveRoutines(active);\n    }\n\n    return result;\n  }, []);\n\n  /**\n   * Disable a routine\n   */\n  const disableRoutine = useCallback((routineId: string): boolean => {\n    const result = globalAutomationManager.disableRoutine(routineId);\n\n    if (result) {\n      // Refresh routines\n      const allRoutines = globalAutomationManager.getAllRoutines();\n      setRoutines(allRoutines);\n\n      // Refresh active routines\n      const active = globalAutomationManager.getActiveRoutines();\n      setActiveRoutines(active);\n    }\n\n    return result;\n  }, []);\n\n  /**\n   * Remove a routine\n   */\n  const removeRoutine = useCallback((routineId: string): boolean => {\n    const result = globalAutomationManager.unregisterRoutine(routineId);\n\n    if (result) {\n      // Refresh routines\n      const allRoutines = globalAutomationManager.getAllRoutines();\n      setRoutines(allRoutines);\n\n      // Refresh active routines\n      const active = globalAutomationManager.getActiveRoutines();\n      setActiveRoutines(active);\n    }\n\n    return result;\n  }, []);\n\n  /**\n   * Get routines by type\n   */\n  const getRoutinesByType = useCallback((type: GlobalRoutineType): GlobalRoutine[] => {\n    return globalAutomationManager.getRoutinesByType(type);\n  }, []);\n\n  /**\n   * Get routines by system\n   */\n  const getRoutinesBySystem = useCallback((systemId: SystemId): GlobalRoutine[] => {\n    return globalAutomationManager.getRoutinesBySystem(systemId);\n  }, []);\n\n  /**\n   * Get routines by tag\n   */\n  const getRoutinesByTag = useCallback((tag: string): GlobalRoutine[] => {\n    return globalAutomationManager.getRoutinesByTag(tag);\n  }, []);\n\n  /**\n   * Create a system maintenance routine\n   */\n  const createMaintenanceRoutine = useCallback(\n    (\n      name: string,\n      description: string,\n      systems: SystemId[],\n      actions: AutomationAction[],\n      options?: {\n        conditions?: AutomationCondition[];\n        interval?: number;\n        priority?: MessagePriority;\n        enabled?: boolean;\n        tags?: string[];\n      }\n    ): string => {\n      return createRoutine(\n        name,\n        'system-maintenance',\n        description,\n        options?.conditions || [],\n        actions,\n        systems,\n        {\n          interval: options?.interval || 3600000, // Default to 1 hour\n          priority: options?.priority || MessagePriority.LOW,\n          enabled: options?.enabled,\n          tags: options?.tags || ['maintenance'],\n        }\n      );\n    },\n    [createRoutine]\n  );\n\n  /**\n   * Create a resource balancing routine\n   */\n  const createResourceBalancingRoutine = useCallback(\n    (\n      name: string,\n      description: string,\n      systems: SystemId[],\n      conditions: AutomationCondition[],\n      actions: AutomationAction[],\n      options?: {\n        interval?: number;\n        priority?: MessagePriority;\n        enabled?: boolean;\n        tags?: string[];\n      }\n    ): string => {\n      return createRoutine(name, 'resource-balancing', description, conditions, actions, systems, {\n        interval: options?.interval || 300000, // Default to 5 minutes\n        priority: options?.priority || MessagePriority.NORMAL,\n        enabled: options?.enabled,\n        tags: options?.tags || ['resource'],\n      });\n    },\n    [createRoutine]\n  );\n\n  /**\n   * Create a performance optimization routine\n   */\n  const createPerformanceOptimizationRoutine = useCallback(\n    (\n      name: string,\n      description: string,\n      systems: SystemId[],\n      actions: AutomationAction[],\n      options?: {\n        conditions?: AutomationCondition[];\n        interval?: number;\n        priority?: MessagePriority;\n        enabled?: boolean;\n        tags?: string[];\n      }\n    ): string => {\n      return createRoutine(\n        name,\n        'performance-optimization',\n        description,\n        options?.conditions || [],\n        actions,\n        systems,\n        {\n          interval: options?.interval || 1800000, // Default to 30 minutes\n          priority: options?.priority || MessagePriority.LOW,\n          enabled: options?.enabled,\n          tags: options?.tags || ['performance'],\n        }\n      );\n    },\n    [createRoutine]\n  );\n\n  /**\n   * Create an emergency response routine\n   */\n  const createEmergencyResponseRoutine = useCallback(\n    (\n      name: string,\n      description: string,\n      systems: SystemId[],\n      conditions: AutomationCondition[],\n      actions: AutomationAction[],\n      options?: {\n        priority?: MessagePriority;\n        enabled?: boolean;\n        tags?: string[];\n      }\n    ): string => {\n      return createRoutine(name, 'emergency-response', description, conditions, actions, systems, {\n        interval: 0, // Emergency routines are triggered by events, not time\n        priority: options?.priority || MessagePriority.CRITICAL,\n        enabled: options?.enabled !== undefined ? options.enabled : true,\n        tags: options?.tags || ['emergency'],\n      });\n    },\n    [createRoutine]\n  );\n\n  /**\n   * Create a scheduled task routine\n   */\n  const createScheduledTaskRoutine = useCallback(\n    (\n      name: string,\n      description: string,\n      systems: SystemId[],\n      actions: AutomationAction[],\n      interval: number,\n      options?: {\n        conditions?: AutomationCondition[];\n        priority?: MessagePriority;\n        enabled?: boolean;\n        tags?: string[];\n      }\n    ): string => {\n      return createRoutine(\n        name,\n        'scheduled-task',\n        description,\n        options?.conditions || [],\n        actions,\n        systems,\n        {\n          interval,\n          priority: options?.priority || MessagePriority.NORMAL,\n          enabled: options?.enabled,\n          tags: options?.tags || ['scheduled'],\n        }\n      );\n    },\n    [createRoutine]\n  );\n\n  return {\n    // State\n    routines,\n    activeRoutines,\n    isInitialized,\n    lastUpdate,\n\n    // Basic operations\n    createRoutine,\n    enableRoutine,\n    disableRoutine,\n    removeRoutine,\n\n    // Queries\n    getRoutinesByType,\n    getRoutinesBySystem,\n    getRoutinesByTag,\n\n    // Specialized routine creators\n    createMaintenanceRoutine,\n    createResourceBalancingRoutine,\n    createPerformanceOptimizationRoutine,\n    createEmergencyResponseRoutine,\n    createScheduledTaskRoutine,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/combat/useCombatAI.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nodeId' is defined but never used.","line":38,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2475,2478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2475,2478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2561,2564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2561,2564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3023,3026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3023,3026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { behaviorTreeManager } from '../../managers/ai/BehaviorTreeManager';\nimport { combatManager } from '../../managers/combat/combatManager';\nimport { CombatUnit } from '../../types/combat/CombatTypes';\nimport { FactionId } from '../../types/ships/FactionTypes';\nimport { convertToCombatTypesUnit } from '../../utils/typeConversions';\n\ninterface CombatAIState {\n  isActive: boolean;\n  currentBehavior: string;\n  lastAction: string;\n  performance: {\n    successRate: number;\n    actionsPerMinute: number;\n    damageDealt: number;\n    damageTaken: number;\n  };\n}\n\nexport function useCombatAI(unitId: string, factionId: FactionId) {\n  const [state, setState] = useState<CombatAIState>({\n    isActive: false,\n    currentBehavior: 'idle',\n    lastAction: '',\n    performance: {\n      successRate: 0,\n      actionsPerMinute: 0,\n      damageDealt: 0,\n      damageTaken: 0,\n    },\n  });\n\n  useEffect(() => {\n    let actionCount = 0;\n    let successCount = 0;\n    const startTime = Date.now();\n\n    const handleNodeExecuted = ({ nodeId, success }: { nodeId: string; success: boolean }) => {\n      successCount += success ? 1 : 0;\n      const totalExecutions = successCount + (actionCount - successCount);\n      const successRate = totalExecutions > 0 ? successCount / totalExecutions : 0;\n\n      setState(prev => ({\n        ...prev,\n        performance: {\n          ...prev.performance,\n          successRate,\n        },\n      }));\n    };\n\n    const handleActionStarted = ({ actionType }: { actionType: string }) => {\n      actionCount++;\n      const elapsedMinutes = (Date.now() - startTime) / 60000;\n\n      setState(prev => ({\n        ...prev,\n        lastAction: actionType,\n        performance: {\n          ...prev.performance,\n          actionsPerMinute: actionCount / elapsedMinutes,\n        },\n      }));\n    };\n\n    behaviorTreeManager.on('nodeExecuted', handleNodeExecuted);\n    behaviorTreeManager.on('actionStarted', handleActionStarted);\n\n    // Update AI context periodically\n    const updateInterval = setInterval(() => {\n      const managerUnit = combatManager.getUnitStatus(unitId);\n      if (!managerUnit) {\n        return;\n      }\n\n      // Convert to CombatTypes.CombatUnit\n      const unit = convertToCombatTypesUnit(managerUnit);\n\n      const nearbyUnits = combatManager\n        .getUnitsInRange(unit.position, 500)\n        .map(convertToCombatTypesUnit);\n      const nearbyEnemies = nearbyUnits.filter(u => (u as any).faction !== factionId);\n      const nearbyAllies = nearbyUnits.filter(u => (u as any).faction === factionId);\n\n      // Calculate fleet strength and threat level\n      const fleetStrength = calculateFleetStrength(unit, nearbyAllies);\n      const threatLevel = calculateThreatLevel(nearbyEnemies);\n\n      // Update behavior tree context\n      behaviorTreeManager.updateContext(unitId, {\n        unit,\n        factionId,\n        fleetStrength,\n        threatLevel,\n        nearbyEnemies,\n        nearbyAllies,\n        currentFormation: (unit as any).formation || {\n          type: 'balanced',\n          spacing: 100,\n          facing: 0,\n        },\n        cooldowns: {},\n      });\n\n      // Evaluate behavior tree\n      const treeId = `${factionId}-combat`;\n      const success = behaviorTreeManager.evaluateTree(unitId, treeId);\n\n      setState(prev => ({\n        ...prev,\n        isActive: true,\n        currentBehavior: success ? 'executing' : 'idle',\n      }));\n    }, 250); // Fast updates for combat\n\n    return () => {\n      clearInterval(updateInterval);\n      behaviorTreeManager.off('nodeExecuted', handleNodeExecuted);\n      behaviorTreeManager.off('actionStarted', handleActionStarted);\n    };\n  }, [unitId, factionId]);\n\n  return state;\n}\n\nfunction calculateFleetStrength(unit: CombatUnit, allies: CombatUnit[]): number {\n  const unitStrength =\n    (unit.stats.health / unit.stats.maxHealth) * (unit.stats.shield / unit.stats.maxShield);\n  const allyStrength = allies.reduce((sum, ally) => {\n    return (\n      sum + (ally.stats.health / ally.stats.maxHealth) * (ally.stats.shield / ally.stats.maxShield)\n    );\n  }, 0);\n\n  return (unitStrength + allyStrength) / (1 + allies.length);\n}\n\nfunction calculateThreatLevel(enemies: CombatUnit[]): number {\n  if (enemies.length === 0) {\n    return 0;\n  }\n\n  return (\n    enemies.reduce((sum, enemy) => {\n      const baseStrength =\n        (enemy.stats.health / enemy.stats.maxHealth) * (enemy.stats.shield / enemy.stats.maxShield);\n      const weaponStrength = enemy.weapons.reduce((total, w) => total + w.damage, 0) / 100;\n      return sum + baseStrength * (1 + weaponStrength);\n    }, 0) / enemies.length\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/combat/useCombatSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useAdaptiveAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useDiplomacy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useEnemyAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useFactionAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useFactionBehavior.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'convertToWeaponInstance' is defined but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'convertToWeaponMounts' is defined but never used.","line":79,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasStatus' is defined but never used.","line":143,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseStats' is assigned a value but never used.","line":166,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":1032,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":1032,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[26443,26570],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":1074,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":1074,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[27715,27862],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":1093,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":1093,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[28329,28466],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":1105,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":1105,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[28753,29090],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateDistance' is defined but never used.","line":1308,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1308,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'determineShipClass' is defined but never used.","line":1512,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1512,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'determineShipStatus' is defined but never used.","line":1538,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1538,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'determineFormation' is defined but never used.","line":1550,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1550,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'normalizeShipClass' is defined but never used.","line":1691,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1691,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":1813,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1813,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":1826,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1826,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateFleet' is defined but never used.","line":1942,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1942,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { SHIP_STATS as CONFIG_SHIP_STATS } from '../../config/ships';\nimport { ModuleEvent, moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { EventEmitter } from '../../lib/utils/EventEmitter';\nimport { AsteroidFieldManager } from '../../managers/game/AsteroidFieldManager';\nimport { CombatUnit, CombatUnitStatus } from '../../types/combat/CombatTypes';\nimport { Position } from '../../types/core/GameTypes';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\nimport { CommonShipStats, ShipStatus as CommonShipStatus } from '../../types/ships/CommonShipTypes';\nimport { FactionFleet, FactionShip, FactionShipClass } from '../../types/ships/FactionShipTypes';\nimport { FactionBehaviorType, FactionId, FactionState } from '../../types/ships/FactionTypes';\nimport {\n  WeaponCategory,\n  WeaponConfig,\n  WeaponInstance,\n  WeaponMount,\n  WeaponMountPosition,\n  WeaponMountSize,\n  WeaponSystem,\n} from '../../types/weapons/WeaponTypes';\nimport { getDistance } from '../../utils/geometry';\nimport {\n  convertToFactionCombatUnit,\n  convertWeaponSystemToMount,\n  isFactionCombatUnit,\n} from '../../utils/typeConversions';\n\n// Define weapon system interface for faction combat\nexport interface FactionWeaponSystem extends WeaponSystem {\n  mountInfo?: {\n    size: WeaponMountSize;\n    position: WeaponMountPosition;\n    rotation: number;\n    allowedCategories: WeaponCategory[];\n  };\n}\n\n// Convert weapon system to weapon instance\nfunction convertToWeaponInstance(weapon: WeaponSystem): WeaponInstance {\n  const config: WeaponConfig = {\n    id: weapon.id,\n    name: weapon.type,\n    category: weapon.type,\n    tier: 1,\n    baseStats: {\n      damage: weapon.damage,\n      range: weapon.range,\n      accuracy: 0.8,\n      rateOfFire: 1,\n      energyCost: 10,\n      cooldown: weapon.cooldown,\n      effects: [],\n    },\n    visualAsset: 'default_weapon',\n    mountRequirements: {\n      size: 'medium' as WeaponMountSize,\n      power: 100,\n    },\n  };\n\n  const state = {\n    status: weapon.status,\n    currentStats: {\n      damage: weapon.damage,\n      range: weapon.range,\n      accuracy: 0.8,\n      rateOfFire: 1,\n      energyCost: 10,\n      cooldown: weapon.cooldown,\n      effects: [],\n    },\n    effects: [],\n  };\n\n  return { config, state };\n}\n\n// Convert combat unit weapons to weapon mounts\nfunction convertToWeaponMounts(weapons: WeaponSystem[]): WeaponMount[] {\n  return weapons.map((weapon, index) => convertWeaponSystemToMount(weapon, index));\n}\n\n// Define FactionCombatWeapon interface\nexport interface FactionCombatWeapon extends WeaponSystem {\n  upgrades?: {\n    name: string;\n    description: string;\n    unlocked: boolean;\n  }[];\n}\n\n// Create FactionCombatUnit interface extending CombatUnit\nexport interface FactionCombatUnit\n  extends Omit<CombatUnit, 'status' | 'faction' | 'weapons' | 'stats'> {\n  faction: FactionId;\n  class: FactionShipClass;\n  tactics: FactionBehaviorType;\n  specialAbility?: {\n    name: string;\n    description: string;\n    cooldown: number;\n    active: boolean;\n  };\n  weaponMounts: WeaponMount[];\n  weapons: FactionCombatWeapon[];\n  formation: {\n    type: 'offensive' | 'defensive' | 'balanced';\n    spacing: number;\n    facing: number;\n    position: number;\n  };\n  stats: {\n    health: number;\n    maxHealth: number;\n    shield: number;\n    maxShield: number;\n    armor: number;\n    speed: number;\n    turnRate: number;\n    accuracy: number;\n    evasion: number;\n    criticalChance: number;\n    criticalDamage: number;\n    armorPenetration: number;\n    shieldPenetration: number;\n    experience: number;\n    level: number;\n  };\n  status: {\n    main: 'active' | 'disabled' | 'destroyed';\n    secondary?: 'charging' | 'cooling' | 'repairing' | 'boosting';\n    effects: string[];\n  };\n  experience: {\n    current: number;\n    total: number;\n    level: number;\n    skills: string[];\n  };\n}\n\n// Keep only one implementation of hasStatus\nfunction hasStatus(\n  unit: CombatUnit | FactionCombatUnit,\n  status: CombatUnitStatus['main'] | CombatUnitStatus['secondary'] | string\n): boolean {\n  if (typeof status === 'string') {\n    return unit.status.effects.includes(status);\n  }\n  return unit.status.main === status || unit.status.secondary === status;\n}\n\n// Helper function to check if array is FactionCombatUnit[]\nfunction isFactionCombatUnitArray(\n  units: CombatUnit[] | FactionCombatUnit[]\n): units is FactionCombatUnit[] {\n  return units.length > 0 && isFactionCombatUnit(units[0]);\n}\n\n// Helper function to convert CombatUnit to FactionCombatUnit\nfunction convertUnitsToFaction(\n  units: CombatUnit[],\n  defaultFaction: FactionId\n): FactionCombatUnit[] {\n  return units.map(unit => {\n    const baseStats = getShipBehaviorStats(unit.type as unknown as ShipClass);\n\n    const factionUnit: FactionCombatUnit = {\n      id: unit.id,\n      type: unit.type,\n      position: unit.position,\n      rotation: unit.rotation,\n      velocity: unit.velocity,\n      faction: defaultFaction,\n      class: unit.type as FactionShipClass,\n      tactics: {\n        formation: 'balanced',\n        behavior: 'aggressive',\n        target: undefined,\n      },\n      weaponMounts: unit.weapons.map((weapon, index) => ({\n        id: `mount-${index}`,\n        size: 'medium' as const,\n        position: index % 2 === 0 ? ('front' as const) : ('side' as const),\n        rotation: 0,\n        allowedCategories: [weapon.type as WeaponCategory],\n      })),\n      weapons: unit.weapons.map(w => ({\n        ...w,\n        upgrades: [],\n      })),\n      formation: {\n        type: 'balanced',\n        spacing: 100,\n        facing: 0,\n        position: 0,\n      },\n      stats: {\n        ...unit.stats,\n        accuracy: 0.8,\n        evasion: 0.2,\n        criticalChance: 0.1,\n        criticalDamage: 1.5,\n        armorPenetration: 0,\n        shieldPenetration: 0,\n        experience: 0,\n        level: 1,\n      },\n      status: unit.status,\n      experience: {\n        current: 0,\n        total: 0,\n        level: 1,\n        skills: [],\n      },\n    };\n\n    return factionUnit;\n  });\n}\n\n// Update calculateFleetStrength to handle type conversion\nfunction calculateFleetStrength(units: CombatUnit[] | FactionCombatUnit[]): number {\n  const factionUnits = isFactionCombatUnitArray(units)\n    ? units\n    : convertUnitsToFaction(units, 'neutral');\n  return factionUnits.reduce((total, unit) => {\n    const weaponDamage = unit.weapons.reduce((sum, weapon) => sum + weapon.damage, 0);\n    return total + weaponDamage;\n  }, 0);\n}\n\n// Add FACTION_SHIPS constant\nconst FACTION_SHIPS: Record<FactionId, ShipClass[]> = {\n  player: ['spitflare', 'starSchooner', 'orionFrigate'] as ShipClass[],\n  enemy: ['harbringerGalleon', 'midwayCarrier', 'motherEarthRevenge'] as ShipClass[],\n  neutral: ['starSchooner', 'orionFrigate'] as ShipClass[],\n  ally: ['spitflare', 'orionFrigate'] as ShipClass[],\n  'space-rats': [\n    'rat-king',\n    'asteroid-marauder',\n    'rogue-nebula',\n    'rats-revenge',\n    'dark-sector-corsair',\n    'wailing-wreck',\n    'galactic-scourge',\n    'plasma-fang',\n    'vermin-vanguard',\n    'black-void-buccaneer',\n  ] as ShipClass[],\n  'lost-nova': [\n    'eclipse-scythe',\n    'nulls-revenge',\n    'dark-matter-reaper',\n    'quantum-pariah',\n    'entropy-scale',\n    'void-revenant',\n    'scythe-of-andromeda',\n    'nebular-persistence',\n    'oblivions-wake',\n    'forbidden-vanguard',\n  ] as ShipClass[],\n  'equator-horizon': [\n    'celestial-arbiter',\n    'ethereal-galleon',\n    'stellar-equinox',\n    'chronos-sentinel',\n    'nebulas-judgement',\n    'aetherial-horizon',\n    'cosmic-crusader',\n    'balancekeepers-wrath',\n    'ecliptic-watcher',\n    'harmonys-vanguard',\n  ] as ShipClass[],\n};\n\n// Define faction behavior events\nexport interface FactionBehaviorEvents {\n  behaviorChanged: {\n    factionId: FactionId;\n    oldBehavior: FactionBehaviorType;\n    newBehavior: FactionBehaviorType;\n  };\n  fleetUpdated: {\n    factionId: FactionId;\n    fleets: FactionFleet[];\n  };\n  territoryChanged: {\n    factionId: FactionId;\n    territory: FactionTerritory;\n  };\n  relationshipChanged: {\n    factionId: FactionId;\n    targetFaction: FactionId;\n    oldValue: number;\n    newValue: number;\n  };\n  resourcesUpdated: {\n    factionId: FactionId;\n    resourceType: ResourceType;\n    oldAmount: number;\n    newAmount: number;\n  };\n  combatTacticsChanged: {\n    factionId: FactionId;\n    oldTactics: FactionBehaviorState['combatTactics'];\n    newTactics: FactionBehaviorState['combatTactics'];\n  };\n}\n\n// Define resource node interfaces\nexport interface ResourceNode {\n  position: Position;\n  value: number;\n}\n\nexport interface AsteroidFieldNode {\n  fieldId: string;\n  type: ResourceType;\n  amount: number;\n}\n\n// Define faction territory interface\nexport interface FactionTerritory {\n  center: Position;\n  radius: number;\n  controlPoints: Position[];\n  resources: {\n    minerals: number;\n    gas: number;\n    exotic: number;\n  };\n  threatLevel: number;\n  factionId: FactionId;\n}\n\n// Define faction behavior state interface\nexport interface FactionBehaviorState {\n  id: FactionId;\n  name: string;\n  fleets: FactionFleet[];\n  territory: FactionTerritory;\n  relationships: Record<FactionId, number>;\n  specialRules: {\n    alwaysHostile?: boolean;\n    requiresProvocation?: boolean;\n    powerThreshold?: number;\n  };\n  behaviorState: {\n    aggression: number;\n    expansion: number;\n    trading: number;\n    currentTactic: 'raid' | 'defend' | 'expand' | 'trade';\n    lastAction: string;\n    nextAction: string;\n  };\n  stats: {\n    totalShips: number;\n    activeFleets: number;\n    territorySystems: number;\n    resourceIncome: {\n      minerals: number;\n      energy: number;\n      plasma: number;\n      exotic: number;\n      gas: number;\n      population: number;\n      research: number;\n    };\n  };\n  stateMachine: {\n    current: FactionStateType;\n    history: FactionStateType[];\n    triggers: Set<FactionEvent>;\n  };\n  combatTactics: {\n    preferredRange: 'close' | 'medium' | 'long';\n    formationStyle: 'aggressive' | 'defensive' | 'balanced';\n    targetPriority: 'ships' | 'stations' | 'resources';\n    retreatThreshold: number;\n    reinforcementThreshold: number;\n  };\n  resourceManagement: {\n    gatheringPriority: ResourceType[];\n    stockpileThresholds: Record<ResourceType, number>;\n    tradePreferences: {\n      resourceType: ResourceType;\n      minPrice: number;\n      maxQuantity: number;\n    }[];\n  };\n  expansionStrategy: {\n    expansionDirection: Position;\n    systemPriority: 'resources' | 'strategic' | 'population';\n    colonizationThreshold: number;\n    maxTerritory: number;\n    consolidationThreshold: number;\n  };\n}\n\n// Create faction behavior event emitter\nclass FactionBehaviorEventEmitter extends EventEmitter<FactionBehaviorEvents> {}\nconst factionBehaviorEvents = new FactionBehaviorEventEmitter();\n\nexport type ShipClass =\n  // Base Ships\n  | 'spitflare'\n  | 'starSchooner'\n  | 'orionFrigate'\n  | 'harbringerGalleon'\n  | 'midwayCarrier'\n  | 'motherEarthRevenge'\n  // Space Rats Ships\n  | 'rat-king'\n  | 'asteroid-marauder'\n  | 'rogue-nebula'\n  | 'rats-revenge'\n  | 'dark-sector-corsair'\n  | 'wailing-wreck'\n  | 'galactic-scourge'\n  | 'plasma-fang'\n  | 'vermin-vanguard'\n  | 'black-void-buccaneer'\n  // Lost Nova Ships\n  | 'eclipse-scythe'\n  | 'nulls-revenge'\n  | 'dark-matter-reaper'\n  | 'quantum-pariah'\n  | 'entropy-scale'\n  | 'void-revenant'\n  | 'scythe-of-andromeda'\n  | 'nebular-persistence'\n  | 'oblivions-wake'\n  | 'forbidden-vanguard'\n  // Equator Horizon Ships\n  | 'celestial-arbiter'\n  | 'ethereal-galleon'\n  | 'stellar-equinox'\n  | 'chronos-sentinel'\n  | 'nebulas-judgement'\n  | 'aetherial-horizon'\n  | 'cosmic-crusader'\n  | 'balancekeepers-wrath'\n  | 'ecliptic-watcher'\n  | 'harmonys-vanguard';\n\n// Define state machine types\nexport type FactionStateType =\n  // Base States\n  | 'active'\n  | 'aggressive'\n  | 'retreating'\n  | 'pursuing'\n  | 'attacking'\n  // Space Rats States\n  | 'patrolling'\n  | 'pursuing'\n  | 'attacking'\n  | 'aggressive'\n  | 'retreating'\n  // Lost Nova States\n  | 'hiding'\n  | 'preparing'\n  | 'ambushing'\n  | 'retaliating'\n  | 'withdrawing'\n  // Equator Horizon States\n  | 'dormant'\n  | 'awakening'\n  | 'enforcing'\n  | 'overwhelming'\n  | 'withdrawing';\n\nexport type FactionEvent =\n  | 'DETECT_TARGET'\n  | 'TAKE_DAMAGE'\n  | 'ENGAGE_RANGE'\n  | 'LOSE_TARGET'\n  | 'TARGET_DESTROYED'\n  | 'HEAVY_DAMAGE'\n  | 'SAFE_DISTANCE'\n  | 'REINFORCEMENTS_ARRIVED'\n  | 'DETECT_OPPORTUNITY'\n  | 'PROVOKED'\n  | 'AMBUSH_READY'\n  | 'DETECTED'\n  | 'AMBUSH_SUCCESS'\n  | 'AMBUSH_FAILED'\n  | 'THREAT_ELIMINATED'\n  | 'OVERWHELMING_FORCE'\n  | 'POWER_THRESHOLD_EXCEEDED'\n  | 'BALANCE_DISRUPTED'\n  | 'FLEET_READY'\n  | 'THREAT_DISAPPEARED'\n  | 'BALANCE_RESTORED'\n  | 'RESISTANCE_ENCOUNTERED'\n  | 'DOMINANCE_ACHIEVED'\n  | 'OBJECTIVE_COMPLETE'\n  | 'WITHDRAWAL_COMPLETE'\n  | 'NO_TARGETS';\n\nexport interface StateMachineTransition {\n  currentState: FactionStateType;\n  event: FactionEvent;\n  nextState: FactionStateType;\n}\n\n// Update FACTION_CONFIGS to include all factions\nexport const FACTION_CONFIGS: Record<\n  FactionId,\n  {\n    baseAggression: number;\n    expansionRate: number;\n    tradingPreference: number;\n    maxShips: number;\n    spawnRules: {\n      minTier: 1 | 2 | 3;\n      requiresCondition?: string;\n      spawnInterval: number;\n    };\n    specialRules: {\n      alwaysHostile?: boolean;\n      requiresProvocation?: boolean;\n      powerThreshold?: number;\n    };\n  }\n> = {\n  player: {\n    baseAggression: 0.5,\n    expansionRate: 0.5,\n    tradingPreference: 0.5,\n    maxShips: 20,\n    spawnRules: {\n      minTier: 1,\n      spawnInterval: 300,\n    },\n    specialRules: {},\n  },\n  enemy: {\n    baseAggression: 0.7,\n    expansionRate: 0.6,\n    tradingPreference: 0.3,\n    maxShips: 25,\n    spawnRules: {\n      minTier: 1,\n      spawnInterval: 300,\n    },\n    specialRules: {\n      alwaysHostile: true,\n    },\n  },\n  neutral: {\n    baseAggression: 0.2,\n    expansionRate: 0.3,\n    tradingPreference: 0.8,\n    maxShips: 15,\n    spawnRules: {\n      minTier: 1,\n      spawnInterval: 600,\n    },\n    specialRules: {},\n  },\n  ally: {\n    baseAggression: 0.4,\n    expansionRate: 0.4,\n    tradingPreference: 0.6,\n    maxShips: 20,\n    spawnRules: {\n      minTier: 1,\n      spawnInterval: 450,\n    },\n    specialRules: {},\n  },\n  'space-rats': {\n    baseAggression: 0.8,\n    expansionRate: 0.6,\n    tradingPreference: 0.2,\n    maxShips: 30,\n    spawnRules: {\n      minTier: 1,\n      spawnInterval: 300,\n    },\n    specialRules: {\n      alwaysHostile: true,\n    },\n  },\n  'lost-nova': {\n    baseAggression: 0.4,\n    expansionRate: 0.3,\n    tradingPreference: 0.5,\n    maxShips: 25,\n    spawnRules: {\n      minTier: 2,\n      requiresCondition: 'player-expansion',\n      spawnInterval: 600,\n    },\n    specialRules: {\n      requiresProvocation: true,\n    },\n  },\n  'equator-horizon': {\n    baseAggression: 0.6,\n    expansionRate: 0.4,\n    tradingPreference: 0.3,\n    maxShips: 20,\n    spawnRules: {\n      minTier: 3,\n      requiresCondition: 'power-threshold',\n      spawnInterval: 900,\n    },\n    specialRules: {\n      powerThreshold: 0.8,\n    },\n  },\n};\n\ninterface CombatManager {\n  getUnitsInRange: (position: { x: number; y: number }, range: number) => CombatUnit[];\n  getThreatsInTerritory: (territory: {\n    center: { x: number; y: number };\n    radius: number;\n  }) => Threat[];\n  engageTarget: (unitId: string, targetId: string) => void;\n  moveUnit: (unitId: string, position: { x: number; y: number }) => void;\n}\n\ninterface Threat {\n  id: string;\n  position: { x: number; y: number };\n}\n\ndeclare const combatManager: CombatManager;\n\ninterface FactionConfig {\n  id: string;\n  behavior: {\n    baseAggression: number;\n    expansionRate: number;\n    tradingPreference: number;\n  };\n  spawnConditions: {\n    maxShips: number;\n  };\n  specialRules: {\n    alwaysHostile?: boolean;\n    requiresProvocation?: boolean;\n    powerThreshold?: number;\n  };\n}\n\ninterface FactionManager {\n  getFactionState: (factionId: string) => FactionState | undefined;\n  getFactionConfig: (factionId: string) => FactionConfig | undefined;\n  spawnShip: (factionId: string, position: { x: number; y: number }) => void;\n  expandTerritory: (factionId: string, position: { x: number; y: number }) => void;\n}\n\ndeclare const factionManager: FactionManager;\n\n// Define initial states for each faction\nconst INITIAL_STATES: Record<FactionId, FactionStateType> = {\n  player: 'active',\n  enemy: 'aggressive',\n  neutral: 'patrolling',\n  ally: 'patrolling',\n  'space-rats': 'patrolling',\n  'lost-nova': 'hiding',\n  'equator-horizon': 'dormant',\n};\n\n// Define state transitions for each faction\nconst STATE_TRANSITIONS: Record<FactionId, StateMachineTransition[]> = {\n  player: [\n    { currentState: 'active', event: 'TAKE_DAMAGE', nextState: 'aggressive' },\n    { currentState: 'aggressive', event: 'HEAVY_DAMAGE', nextState: 'retreating' },\n    { currentState: 'retreating', event: 'SAFE_DISTANCE', nextState: 'active' },\n  ],\n  enemy: [\n    { currentState: 'aggressive', event: 'DETECT_TARGET', nextState: 'pursuing' },\n    { currentState: 'pursuing', event: 'ENGAGE_RANGE', nextState: 'attacking' },\n    { currentState: 'attacking', event: 'HEAVY_DAMAGE', nextState: 'retreating' },\n    { currentState: 'retreating', event: 'SAFE_DISTANCE', nextState: 'aggressive' },\n  ],\n  neutral: [\n    { currentState: 'patrolling', event: 'TAKE_DAMAGE', nextState: 'retreating' },\n    { currentState: 'retreating', event: 'SAFE_DISTANCE', nextState: 'patrolling' },\n  ],\n  ally: [\n    { currentState: 'patrolling', event: 'DETECT_TARGET', nextState: 'pursuing' },\n    { currentState: 'pursuing', event: 'ENGAGE_RANGE', nextState: 'attacking' },\n    { currentState: 'attacking', event: 'HEAVY_DAMAGE', nextState: 'retreating' },\n    { currentState: 'retreating', event: 'SAFE_DISTANCE', nextState: 'patrolling' },\n  ],\n  'space-rats': [\n    {\n      currentState: 'patrolling',\n      event: 'DETECT_TARGET',\n      nextState: 'pursuing',\n    },\n    {\n      currentState: 'patrolling',\n      event: 'TAKE_DAMAGE',\n      nextState: 'aggressive',\n    },\n    { currentState: 'pursuing', event: 'ENGAGE_RANGE', nextState: 'attacking' },\n    { currentState: 'pursuing', event: 'LOSE_TARGET', nextState: 'patrolling' },\n    { currentState: 'pursuing', event: 'TAKE_DAMAGE', nextState: 'aggressive' },\n    {\n      currentState: 'attacking',\n      event: 'TARGET_DESTROYED',\n      nextState: 'patrolling',\n    },\n    {\n      currentState: 'attacking',\n      event: 'HEAVY_DAMAGE',\n      nextState: 'retreating',\n    },\n    { currentState: 'attacking', event: 'LOSE_TARGET', nextState: 'pursuing' },\n    {\n      currentState: 'aggressive',\n      event: 'NO_TARGETS',\n      nextState: 'patrolling',\n    },\n    {\n      currentState: 'aggressive',\n      event: 'HEAVY_DAMAGE',\n      nextState: 'retreating',\n    },\n    {\n      currentState: 'retreating',\n      event: 'SAFE_DISTANCE',\n      nextState: 'patrolling',\n    },\n    {\n      currentState: 'retreating',\n      event: 'REINFORCEMENTS_ARRIVED',\n      nextState: 'aggressive',\n    },\n  ],\n  'lost-nova': [\n    {\n      currentState: 'hiding',\n      event: 'DETECT_OPPORTUNITY',\n      nextState: 'preparing',\n    },\n    { currentState: 'hiding', event: 'PROVOKED', nextState: 'retaliating' },\n    {\n      currentState: 'preparing',\n      event: 'AMBUSH_READY',\n      nextState: 'ambushing',\n    },\n    { currentState: 'preparing', event: 'DETECTED', nextState: 'hiding' },\n    { currentState: 'ambushing', event: 'AMBUSH_SUCCESS', nextState: 'hiding' },\n    {\n      currentState: 'ambushing',\n      event: 'AMBUSH_FAILED',\n      nextState: 'withdrawing',\n    },\n    {\n      currentState: 'ambushing',\n      event: 'HEAVY_DAMAGE',\n      nextState: 'withdrawing',\n    },\n    {\n      currentState: 'retaliating',\n      event: 'THREAT_ELIMINATED',\n      nextState: 'hiding',\n    },\n    {\n      currentState: 'retaliating',\n      event: 'OVERWHELMING_FORCE',\n      nextState: 'withdrawing',\n    },\n    {\n      currentState: 'withdrawing',\n      event: 'SAFE_DISTANCE',\n      nextState: 'hiding',\n    },\n  ],\n  'equator-horizon': [\n    {\n      currentState: 'dormant',\n      event: 'POWER_THRESHOLD_EXCEEDED',\n      nextState: 'awakening',\n    },\n    {\n      currentState: 'dormant',\n      event: 'BALANCE_DISRUPTED',\n      nextState: 'awakening',\n    },\n    { currentState: 'awakening', event: 'FLEET_READY', nextState: 'enforcing' },\n    {\n      currentState: 'awakening',\n      event: 'THREAT_DISAPPEARED',\n      nextState: 'dormant',\n    },\n    {\n      currentState: 'enforcing',\n      event: 'BALANCE_RESTORED',\n      nextState: 'withdrawing',\n    },\n    {\n      currentState: 'enforcing',\n      event: 'RESISTANCE_ENCOUNTERED',\n      nextState: 'overwhelming',\n    },\n    {\n      currentState: 'overwhelming',\n      event: 'DOMINANCE_ACHIEVED',\n      nextState: 'enforcing',\n    },\n    {\n      currentState: 'overwhelming',\n      event: 'OBJECTIVE_COMPLETE',\n      nextState: 'withdrawing',\n    },\n    {\n      currentState: 'withdrawing',\n      event: 'WITHDRAWAL_COMPLETE',\n      nextState: 'dormant',\n    },\n    {\n      currentState: 'withdrawing',\n      event: 'BALANCE_DISRUPTED',\n      nextState: 'enforcing',\n    },\n  ],\n};\n\nfunction getInitialState(factionId: FactionId): FactionStateType {\n  return INITIAL_STATES[factionId];\n}\n\nfunction getTransitions(factionId: FactionId): StateMachineTransition[] {\n  return STATE_TRANSITIONS[factionId];\n}\n\nfunction handleStateMachineTransition(\n  currentState: FactionStateType,\n  event: FactionEvent,\n  factionId: FactionId\n): FactionStateType {\n  const transitions = getTransitions(factionId);\n  const transition = transitions.find(t => t.currentState === currentState && t.event === event);\n  return transition ? transition.nextState : currentState;\n}\n\nfunction handleStateMachineTriggers(state: FactionBehaviorState): void {\n  const triggers = new Set<FactionEvent>();\n\n  // Check threat level\n  if (state.territory.threatLevel > 0.7) {\n    triggers.add('TAKE_DAMAGE');\n    triggers.add('HEAVY_DAMAGE');\n  }\n\n  // Check for targets\n  const nearbyEnemies = findNearbyEnemies(state);\n\n  if (nearbyEnemies.length > 0) {\n    triggers.add('DETECT_TARGET');\n  } else {\n    triggers.add('NO_TARGETS');\n  }\n\n  // Faction-specific triggers\n  switch (state.id) {\n    case 'equator-horizon':\n      if (calculatePlayerPower() > FACTION_CONFIGS[state.id].specialRules.powerThreshold!) {\n        triggers.add('POWER_THRESHOLD_EXCEEDED');\n      }\n      break;\n    case 'lost-nova':\n      if (isAmbushOpportunity(state)) {\n        triggers.add('DETECT_OPPORTUNITY');\n      }\n      break;\n  }\n\n  // Update state machine triggers\n  state.stateMachine.triggers = triggers;\n\n  // Process triggers and update state\n  triggers.forEach(trigger => {\n    const nextState = handleStateMachineTransition(state.stateMachine.current, trigger, state.id);\n    if (nextState !== state.stateMachine.current) {\n      state.stateMachine.history.push(state.stateMachine.current);\n      state.stateMachine.current = nextState;\n    }\n  });\n}\n\n// Create AsteroidFieldManager instance\nconst asteroidFieldManager = new AsteroidFieldManager();\n\n// Add resource value multiplier function\nfunction getResourceValueMultiplier(type: ResourceType): number {\n  switch (type) {\n    case 'exotic':\n      return 3.0;\n    case 'gas':\n      return 2.0;\n    case 'minerals':\n      return 1.0;\n    default:\n      return 1.0;\n  }\n}\n\nexport function useFactionBehavior(factionId: FactionId) {\n  const [behavior, setBehavior] = useState<FactionBehaviorState>({\n    id: factionId,\n    name: factionId\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' '),\n    fleets: [],\n    territory: {\n      center: { x: 0, y: 0 },\n      radius: 100,\n      controlPoints: [],\n      resources: {\n        minerals: 0,\n        gas: 0,\n        exotic: 0,\n      },\n      threatLevel: 0,\n      factionId,\n    },\n    relationships: {\n      player: 0,\n      enemy: -0.8,\n      neutral: 0,\n      ally: 0.8,\n      'space-rats': 0,\n      'lost-nova': 0,\n      'equator-horizon': 0,\n    },\n    specialRules: FACTION_CONFIGS[factionId].specialRules,\n    behaviorState: {\n      aggression: FACTION_CONFIGS[factionId].baseAggression,\n      expansion: FACTION_CONFIGS[factionId].expansionRate,\n      trading: FACTION_CONFIGS[factionId].tradingPreference,\n      currentTactic: 'defend',\n      lastAction: 'initialized',\n      nextAction: 'patrol',\n    },\n    stats: {\n      totalShips: 0,\n      activeFleets: 0,\n      territorySystems: 0,\n      resourceIncome: {\n        minerals: 0,\n        energy: 0,\n        plasma: 0,\n        exotic: 0,\n        gas: 0,\n        population: 0,\n        research: 0,\n      },\n    },\n    stateMachine: {\n      current: getInitialState(factionId),\n      history: [],\n      triggers: new Set(),\n    },\n    combatTactics: {\n      preferredRange: 'medium',\n      formationStyle: 'balanced',\n      targetPriority: 'ships',\n      retreatThreshold: 0.3,\n      reinforcementThreshold: 0.7,\n    },\n    resourceManagement: {\n      gatheringPriority: [],\n      stockpileThresholds: {\n        minerals: 0,\n        energy: 0,\n        plasma: 0,\n        exotic: 0,\n        gas: 0,\n        population: 0,\n        research: 0,\n      },\n      tradePreferences: [],\n    },\n    expansionStrategy: {\n      expansionDirection: { x: 0, y: 0 },\n      systemPriority: 'resources',\n      colonizationThreshold: 0,\n      maxTerritory: 0,\n      consolidationThreshold: 0,\n    },\n  });\n\n  const handleModuleEvent = useCallback(\n    (event: ModuleEvent) => {\n      switch (event.type) {\n        case 'STATUS_CHANGED':\n          if (event.data?.type === 'tactics') {\n            const oldTactics = behavior.combatTactics;\n            const newTactics = {\n              ...oldTactics,\n              ...event.data,\n            };\n\n            setBehavior(prev => ({\n              ...prev,\n              combatTactics: newTactics,\n            }));\n\n            factionBehaviorEvents.emit('combatTacticsChanged', {\n              factionId,\n              oldTactics,\n              newTactics,\n            });\n          }\n          break;\n      }\n    },\n    [behavior.combatTactics, factionId]\n  );\n\n  const handleBehaviorEvent = useCallback(\n    (\n      eventType: keyof FactionBehaviorEvents,\n      event: FactionBehaviorEvents[keyof FactionBehaviorEvents]\n    ) => {\n      switch (eventType) {\n        case 'behaviorChanged': {\n          const { oldBehavior, newBehavior } = event as FactionBehaviorEvents['behaviorChanged'];\n          console.debug(\n            `[FactionBehavior] ${factionId} behavior changed from ${oldBehavior} to ${newBehavior}`\n          );\n          break;\n        }\n\n        case 'fleetUpdated': {\n          const { fleets } = event as FactionBehaviorEvents['fleetUpdated'];\n          setBehavior(prev => ({\n            ...prev,\n            fleets,\n            stats: {\n              ...prev.stats,\n              totalShips: fleets.reduce((total, fleet) => total + fleet.ships.length, 0),\n            },\n          }));\n          break;\n        }\n\n        case 'territoryChanged': {\n          const { territory } = event as FactionBehaviorEvents['territoryChanged'];\n          setBehavior(prev => ({\n            ...prev,\n            territory,\n            stats: {\n              ...prev.stats,\n              territorySystems: calculateTerritorySystems(territory),\n            },\n          }));\n          break;\n        }\n\n        case 'relationshipChanged': {\n          const { targetFaction, oldValue, newValue } =\n            event as FactionBehaviorEvents['relationshipChanged'];\n          setBehavior(prev => ({\n            ...prev,\n            relationships: {\n              ...prev.relationships,\n              [targetFaction]: newValue,\n            },\n          }));\n          console.debug(\n            `[FactionBehavior] ${factionId} relationship with ${targetFaction} changed from ${oldValue} to ${newValue}`\n          );\n          break;\n        }\n\n        case 'resourcesUpdated': {\n          const { resourceType, oldAmount, newAmount } =\n            event as FactionBehaviorEvents['resourcesUpdated'];\n          setBehavior(prev => ({\n            ...prev,\n            stats: {\n              ...prev.stats,\n              resourceIncome: {\n                ...prev.stats.resourceIncome,\n                [resourceType]: newAmount,\n              },\n            },\n          }));\n          console.debug(\n            `[FactionBehavior] ${factionId} ${resourceType} income changed from ${oldAmount} to ${newAmount}`\n          );\n          break;\n        }\n\n        case 'combatTacticsChanged': {\n          const { oldTactics, newTactics } = event as FactionBehaviorEvents['combatTacticsChanged'];\n          setBehavior(prev => ({\n            ...prev,\n            combatTactics: newTactics,\n          }));\n          console.debug(\n            `[FactionBehavior] ${factionId} combat tactics updated:\n          Range: ${oldTactics.preferredRange} -> ${newTactics.preferredRange}\n          Formation: ${oldTactics.formationStyle} -> ${newTactics.formationStyle}\n          Priority: ${oldTactics.targetPriority} -> ${newTactics.targetPriority}`\n          );\n          break;\n        }\n      }\n    },\n    [factionId]\n  );\n\n  const updateFactionBehavior = useCallback(() => {\n    const nearbyUnits = Array.from(\n      combatManager.getUnitsInRange(behavior.territory.center, behavior.territory.radius)\n    );\n\n    // Update fleets based on nearby units\n    const updatedFleets = updateFleets(nearbyUnits);\n    if (updatedFleets.length !== behavior.fleets.length) {\n      factionBehaviorEvents.emit('fleetUpdated', {\n        factionId,\n        fleets: updatedFleets,\n      });\n    }\n\n    // Update territory based on unit positions\n    const updatedTerritory = calculateTerritory(nearbyUnits, behavior.territory);\n    if (updatedTerritory.radius !== behavior.territory.radius) {\n      factionBehaviorEvents.emit('territoryChanged', {\n        factionId,\n        territory: updatedTerritory,\n      });\n    }\n\n    // Update resource income\n    const newResourceIncome = calculateResourceIncome(behavior.territory);\n    Object.entries(newResourceIncome).forEach(([resourceType, newAmount]) => {\n      const oldAmount =\n        behavior.stats.resourceIncome[resourceType as keyof typeof newResourceIncome];\n      if (oldAmount !== newAmount) {\n        factionBehaviorEvents.emit('resourcesUpdated', {\n          factionId,\n          resourceType: resourceType as ResourceType,\n          oldAmount,\n          newAmount,\n        });\n      }\n    });\n\n    // Update relationships with other factions\n    const updatedRelationships = calculateRelationships(factionId, behavior.relationships);\n    Object.entries(updatedRelationships).forEach(([targetFaction, newValue]) => {\n      const oldValue = behavior.relationships[targetFaction as FactionId];\n      if (oldValue !== newValue) {\n        factionBehaviorEvents.emit('relationshipChanged', {\n          factionId,\n          targetFaction: targetFaction as FactionId,\n          oldValue,\n          newValue,\n        });\n      }\n    });\n\n    handleStateMachineTriggers(behavior);\n    const newBehaviorState = calculateBehaviorState(\n      behavior.behaviorState,\n      behavior.fleets,\n      behavior.territory,\n      behavior.relationships\n    );\n    setBehavior(prev => ({ ...prev, behaviorState: newBehaviorState }));\n    updateCombatTactics(behavior);\n    manageResources(behavior);\n    planExpansion(behavior);\n\n    switch (behavior.id) {\n      case 'space-rats':\n        executeSpaceRatsBehavior(behavior);\n        break;\n      case 'lost-nova':\n        executeLostNovaBehavior(behavior);\n        break;\n      case 'equator-horizon':\n        executeEquatorHorizonBehavior(behavior);\n        break;\n    }\n\n    if (shouldSpawnNewShip(behavior, FACTION_CONFIGS[behavior.id])) {\n      const spawnPoint = selectSpawnPoint(behavior.territory);\n      factionManager.spawnShip(behavior.id, spawnPoint);\n    }\n  }, [behavior, factionId]);\n\n  useEffect(() => {\n    const unsubscribeModuleEvents = moduleEventBus.subscribe('STATUS_CHANGED', handleModuleEvent);\n\n    const unsubscribeCallbacks = [\n      'behaviorChanged',\n      'fleetUpdated',\n      'territoryChanged',\n      'relationshipChanged',\n      'resourcesUpdated',\n      'combatTacticsChanged',\n    ].map(eventType => {\n      const callback = (event: FactionBehaviorEvents[keyof FactionBehaviorEvents]) => {\n        if ('factionId' in event && event.factionId === factionId) {\n          handleBehaviorEvent(eventType as keyof FactionBehaviorEvents, event);\n        }\n      };\n      factionBehaviorEvents.subscribe(eventType as keyof FactionBehaviorEvents, callback);\n      return () =>\n        factionBehaviorEvents.unsubscribe(eventType as keyof FactionBehaviorEvents, callback);\n    });\n\n    const updateInterval = setInterval(updateFactionBehavior, 1000);\n\n    return () => {\n      unsubscribeModuleEvents();\n      unsubscribeCallbacks.forEach(callback => callback());\n      clearInterval(updateInterval);\n    };\n  }, [factionId, handleModuleEvent, handleBehaviorEvent, updateFactionBehavior]);\n\n  return behavior;\n}\n\n// Map kebab-case ship classes to camelCase\nfunction mapShipClass(shipClass: ShipClass): FactionShipClass {\n  const camelCase = shipClass.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n  return camelCase as FactionShipClass;\n}\n\nfunction calculateTerritory(\n  units: CombatUnit[],\n  currentTerritory: FactionTerritory\n): FactionTerritory {\n  const positions = units.map(u => u.position);\n  const center = {\n    x: positions.reduce((sum, pos) => sum + pos.x, 0) / positions.length,\n    y: positions.reduce((sum, pos) => sum + pos.y, 0) / positions.length,\n  };\n\n  const maxRadius = Math.max(\n    currentTerritory.radius,\n    ...positions.map(pos => getDistance(center, pos))\n  );\n\n  return {\n    ...currentTerritory,\n    center,\n    radius: maxRadius,\n    controlPoints: generateControlPoints(center, maxRadius),\n    threatLevel: calculateThreatLevel(center, maxRadius, currentTerritory),\n  };\n}\n\nfunction calculateRelationships(\n  factionId: FactionId,\n  currentRelationships: Record<FactionId, number>\n): Record<FactionId, number> {\n  const updatedRelationships = { ...currentRelationships };\n\n  Object.keys(currentRelationships).forEach(otherFactionId => {\n    const otherFaction = FACTION_CONFIGS[otherFactionId as FactionId];\n    if (!otherFaction) {\n      return;\n    }\n    // ... rest of the function ...\n  });\n\n  return updatedRelationships;\n}\n\nfunction calculateBehaviorState(\n  current: FactionBehaviorState['behaviorState'],\n  fleets: FactionFleet[],\n  territory: FactionTerritory,\n  relationships: Record<FactionId, number>\n): FactionBehaviorState['behaviorState'] {\n  // Determine next action based on current state and conditions\n  let nextTactic: 'raid' | 'defend' | 'expand' | 'trade' = current.currentTactic;\n\n  if (territory.threatLevel > 0.7) {\n    nextTactic = 'defend';\n  } else if (fleets.length > 3 && current.aggression > 0.6) {\n    nextTactic = 'raid';\n  } else if (Object.values(relationships).some(r => r > 0.5)) {\n    nextTactic = 'trade';\n  } else if (current.expansion > 0.5) {\n    nextTactic = 'expand';\n  }\n\n  return {\n    ...current,\n    currentTactic: nextTactic,\n    lastAction: current.nextAction,\n    nextAction: determineNextAction(nextTactic),\n  };\n}\n\n// Helper functions\nfunction calculateDistance(a: { x: number; y: number }, b: { x: number; y: number }): number {\n  const dx = b.x - a.x;\n  const dy = b.y - a.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n// Ship class configurations\ninterface FactionWeaponMount {\n  id: string;\n  type: 'machineGun' | 'gaussCannon' | 'railGun' | 'MGSS' | 'rockets';\n  damage: number;\n  range: number;\n  cooldown: number;\n  accuracy: number;\n  effects: FactionWeaponEffect[];\n}\n\ninterface ShipStats {\n  health: number;\n  shield: number;\n  armor: number;\n  speed: number;\n  turnRate: number;\n  weapons: FactionWeaponMount[];\n  abilities: SpecialAbility[];\n}\n\ninterface FactionWeaponEffect {\n  type: 'plasma' | 'spark' | 'gauss' | 'explosive';\n  damage: number;\n  duration: number;\n  radius?: number;\n}\n\ninterface SpecialAbility {\n  name: string;\n  cooldown: number;\n  duration: number;\n  effect: AbilityEffect;\n}\n\ninterface AbilityEffect {\n  type: 'stealth' | 'shield' | 'speed' | 'damage';\n  magnitude: number;\n  radius?: number;\n}\n\n// Default stats for unknown ship classes\nconst DEFAULT_SHIP_STATS: ShipStats = {\n  health: 500,\n  shield: 200,\n  armor: 100,\n  speed: 100,\n  turnRate: 2,\n  weapons: [],\n  abilities: [],\n};\n\n// Get ship stats for behavior\nfunction getShipBehaviorStats(shipClass: ShipClass): CommonShipStats {\n  const configStats = CONFIG_SHIP_STATS[mapShipClass(shipClass)];\n  if (!configStats) {\n    return {\n      health: DEFAULT_SHIP_STATS.health,\n      maxHealth: DEFAULT_SHIP_STATS.health,\n      shield: DEFAULT_SHIP_STATS.shield,\n      maxShield: DEFAULT_SHIP_STATS.shield,\n      energy: 100,\n      maxEnergy: 100,\n      cargo: 100,\n      speed: DEFAULT_SHIP_STATS.speed,\n      turnRate: DEFAULT_SHIP_STATS.turnRate,\n      defense: {\n        armor: DEFAULT_SHIP_STATS.armor,\n        shield: DEFAULT_SHIP_STATS.shield,\n        evasion: 0.3,\n        regeneration: 1,\n      },\n      mobility: {\n        speed: DEFAULT_SHIP_STATS.speed,\n        turnRate: DEFAULT_SHIP_STATS.turnRate,\n        acceleration: 50,\n      },\n      weapons: [],\n      abilities: [],\n    };\n  }\n  return {\n    health: configStats.health,\n    maxHealth: configStats.maxHealth,\n    shield: configStats.shield,\n    maxShield: configStats.maxShield,\n    energy: configStats.energy,\n    maxEnergy: configStats.maxEnergy,\n    cargo: configStats.cargo,\n    speed: configStats.speed,\n    turnRate: configStats.turnRate,\n    defense: configStats.defense,\n    mobility: configStats.mobility,\n    weapons: configStats.weapons,\n    abilities: configStats.abilities,\n  };\n}\n\n// Ship class configurations\nconst SHIP_STATS: Partial<Record<ShipClass, ShipStats>> = {\n  // Space Rats Ships\n  'rat-king': {\n    health: 1000,\n    shield: 500,\n    armor: 300,\n    speed: 100,\n    turnRate: 2,\n    weapons: [\n      {\n        id: 'mgss',\n        type: 'MGSS',\n        damage: 50,\n        range: 800,\n        cooldown: 0.1,\n        accuracy: 0.7,\n        effects: [{ type: 'plasma', damage: 10, duration: 3 }],\n      },\n      {\n        id: 'rockets',\n        type: 'rockets',\n        damage: 200,\n        range: 1200,\n        cooldown: 5,\n        accuracy: 0.8,\n        effects: [{ type: 'explosive', damage: 100, duration: 1, radius: 50 }],\n      },\n    ],\n    abilities: [\n      {\n        name: \"Pirate's Fury\",\n        cooldown: 30,\n        duration: 10,\n        effect: { type: 'damage', magnitude: 2 },\n      },\n    ],\n  },\n  // ... similar configurations for other Space Rats ships\n\n  // Lost Nova Ships\n  'eclipse-scythe': {\n    health: 800,\n    shield: 800,\n    armor: 200,\n    speed: 150,\n    turnRate: 3,\n    weapons: [\n      {\n        id: 'gaussCannon',\n        type: 'gaussCannon',\n        damage: 150,\n        range: 1000,\n        cooldown: 2,\n        accuracy: 0.9,\n        effects: [{ type: 'gauss', damage: 50, duration: 2 }],\n      },\n    ],\n    abilities: [\n      {\n        name: 'Phase Shift',\n        cooldown: 20,\n        duration: 5,\n        effect: { type: 'stealth', magnitude: 1 },\n      },\n    ],\n  },\n  // ... similar configurations for other Lost Nova ships\n\n  // Equator Horizon Ships\n  'celestial-arbiter': {\n    health: 1500,\n    shield: 1000,\n    armor: 500,\n    speed: 80,\n    turnRate: 1,\n    weapons: [\n      {\n        id: 'railGun',\n        type: 'railGun',\n        damage: 300,\n        range: 1500,\n        cooldown: 3,\n        accuracy: 0.95,\n        effects: [{ type: 'gauss', damage: 100, duration: 3 }],\n      },\n    ],\n    abilities: [\n      {\n        name: 'Balance Restoration',\n        cooldown: 45,\n        duration: 15,\n        effect: { type: 'shield', magnitude: 2, radius: 500 },\n      },\n    ],\n  },\n  // ... similar configurations for other Equator Horizon ships\n};\n\n// Helper function to determine ship class based on unit status\nfunction determineShipClass(unit: FactionCombatUnit): ShipClass {\n  const status = unit.status;\n  const factionShips = FACTION_SHIPS[unit.faction] || [];\n\n  if (status.effects.includes('flagship')) {\n    return (\n      factionShips.find(s => (SHIP_STATS[s] || DEFAULT_SHIP_STATS).health > 1000) || factionShips[0]\n    );\n  }\n  if (status.effects.includes('stealth')) {\n    return (\n      factionShips.find(s =>\n        (SHIP_STATS[s] || DEFAULT_SHIP_STATS).abilities.some(a => a.effect.type === 'stealth')\n      ) || factionShips[0]\n    );\n  }\n  if (status.effects.includes('heavy')) {\n    return (\n      factionShips.find(s => (SHIP_STATS[s] || DEFAULT_SHIP_STATS).armor > 300) || factionShips[0]\n    );\n  }\n\n  return factionShips[0];\n}\n\n// Update determineShipStatus function to handle complex status\nfunction determineShipStatus(unit: FactionCombatUnit): CommonShipStatus {\n  const status = unit.status.main;\n  if (status === 'active') {\n    return 'ready' as CommonShipStatus;\n  }\n  if (status === 'disabled') {\n    return 'disabled' as CommonShipStatus;\n  }\n  return 'destroyed' as CommonShipStatus;\n}\n\n// Helper function to determine formation\nfunction determineFormation(units: FactionCombatUnit[]): FactionFleet['formation'] {\n  return {\n    type: 'defensive',\n    spacing: 50,\n    facing: Math.atan2(units[0].position.y, units[0].position.x),\n  };\n}\n\n// Helper function to calculate territory systems\nfunction calculateTerritorySystems(territory: FactionTerritory): number {\n  return Math.floor(territory.radius / 1000);\n}\n\n// Helper function to calculate resource income\nfunction calculateResourceIncome(territory: FactionTerritory): {\n  minerals: number;\n  energy: number;\n  plasma: number;\n  exotic: number;\n  gas: number;\n  population: number;\n  research: number;\n} {\n  return {\n    minerals: territory.resources.minerals * 0.1,\n    energy: 0,\n    plasma: 0,\n    exotic: territory.resources.exotic * 0.1,\n    gas: territory.resources.gas * 0.1,\n    population: 0,\n    research: 0,\n  };\n}\n\n// Helper function to find nearby enemies\nfunction findNearbyEnemies(state: FactionBehaviorState): FactionCombatUnit[] {\n  return Array.from(\n    combatManager.getUnitsInRange(state.territory.center, state.territory.radius)\n  ).filter(unit => isFactionCombatUnit(unit) && unit.faction !== state.id) as FactionCombatUnit[];\n}\n\n// Helper function to calculate player power\nfunction calculatePlayerPower(): number {\n  // TODO: Implement actual player power calculation based on fleet strength and territory\n  return 0.5; // Default value for now\n}\n\n// Helper function to check for ambush opportunities\nfunction isAmbushOpportunity(state: FactionBehaviorState): boolean {\n  // Check if we have enough stealth ships and the enemy is vulnerable\n  const stealthShips = state.fleets\n    .flatMap(fleet => fleet.ships)\n    .filter(ship => ship.class.toLowerCase().includes('stealth')).length;\n\n  const hasEnoughStealthForces = stealthShips >= 3;\n  const enemyIsVulnerable = state.territory.threatLevel < 0.3;\n\n  return hasEnoughStealthForces && enemyIsVulnerable;\n}\n\n// Helper function to determine next action\nfunction determineNextAction(\n  tactic: FactionBehaviorState['behaviorState']['currentTactic']\n): string {\n  switch (tactic) {\n    case 'raid':\n      return 'prepare_raid_fleet';\n    case 'defend':\n      return 'fortify_positions';\n    case 'expand':\n      return 'scout_territory';\n    case 'trade':\n      return 'establish_trade_route';\n    default:\n      return 'patrol';\n  }\n}\n\n// Helper function to select spawn point\nfunction selectSpawnPoint(territory: FactionTerritory): Position {\n  const angle = Math.random() * Math.PI * 2;\n  const distance = Math.random() * territory.radius * 0.8;\n\n  return {\n    x: territory.center.x + Math.cos(angle) * distance,\n    y: territory.center.y + Math.sin(angle) * distance,\n  };\n}\n\n// Helper function to check if should spawn new ship\nfunction shouldSpawnNewShip(\n  state: FactionBehaviorState,\n  config: (typeof FACTION_CONFIGS)[FactionId]\n): boolean {\n  if (state.stats.totalShips >= config.maxShips) {\n    return false;\n  }\n\n  // Faction-specific spawn conditions\n  switch (state.id) {\n    case 'space-rats':\n      return Math.random() < 0.1; // Regular spawning\n    case 'lost-nova':\n      return state.behaviorState.aggression > 0.5 && Math.random() < 0.05;\n    case 'equator-horizon':\n      return state.stateMachine.current !== 'dormant' && Math.random() < 0.03;\n    default:\n      return false;\n  }\n}\n\n// Helper function to generate control points\nfunction generateControlPoints(center: Position, radius: number): Position[] {\n  const points: Position[] = [];\n  const count = 8;\n\n  for (let i = 0; i < count; i++) {\n    const angle = (i / count) * Math.PI * 2;\n    points.push({\n      x: center.x + Math.cos(angle) * radius,\n      y: center.y + Math.sin(angle) * radius,\n    });\n  }\n\n  return points;\n}\n\n// Update calculateThreatLevel function with proper type handling\nfunction calculateThreatLevel(\n  center: Position,\n  radius: number,\n  territory: FactionTerritory\n): number {\n  const threats = Array.from(combatManager.getUnitsInRange(center, radius)).filter(\n    unit => isFactionCombatUnit(unit) && unit.faction !== territory.factionId\n  );\n\n  return Math.min(1, threats.length / 10);\n}\n\n// Helper function to normalize ship class\nfunction normalizeShipClass(shipClass: string): FactionShipClass {\n  const camelCase = shipClass.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n  return camelCase as FactionShipClass;\n}\n\n// Combat tactics update function\nfunction updateCombatTactics(state: FactionBehaviorState): void {\n  // Calculate fleet strength directly from combat units\n  const fleetStrength = state.fleets.reduce((total, fleet) => {\n    return total + fleet.strength;\n  }, 0);\n\n  const { threatLevel } = state.territory;\n\n  // Adjust combat tactics based on situation\n  if (fleetStrength < state.combatTactics.retreatThreshold) {\n    state.combatTactics.formationStyle = 'defensive';\n    state.combatTactics.preferredRange = 'long';\n  } else if (fleetStrength > 0.8) {\n    state.combatTactics.formationStyle = 'aggressive';\n    state.combatTactics.preferredRange = 'close';\n  }\n\n  // Update target priorities based on needs\n  if (state.stats.resourceIncome.minerals < 100) {\n    state.combatTactics.targetPriority = 'resources';\n  } else if (threatLevel > 0.7) {\n    state.combatTactics.targetPriority = 'ships';\n  }\n}\n\n// Resource management function\nfunction manageResources(state: FactionBehaviorState): void {\n  // Update resource priorities based on current needs\n  const resourceLevels = Object.entries(state.stats.resourceIncome);\n  state.resourceManagement.gatheringPriority = resourceLevels\n    .sort(([, a], [, b]) => (a < b ? -1 : 1))\n    .map(([type]) => type as ResourceType);\n\n  // Adjust stockpile thresholds based on expansion plans\n  if (state.expansionStrategy.systemPriority === 'resources') {\n    state.resourceManagement.stockpileThresholds = {\n      minerals: 2000,\n      energy: 1500,\n      plasma: 1000,\n      exotic: 500,\n      gas: 1000,\n      population: 500,\n      research: 1000,\n    };\n  }\n}\n\n// Expansion planning function\nfunction planExpansion(state: FactionBehaviorState): void {\n  // Calculate optimal expansion direction\n  const newDirection = calculateOptimalExpansionDirection(state);\n  state.expansionStrategy.expansionDirection = newDirection;\n\n  // Adjust system priority based on needs\n  if (state.stats.resourceIncome.minerals < 100 || state.stats.resourceIncome.energy < 100) {\n    state.expansionStrategy.systemPriority = 'resources';\n  } else if (state.stats.territorySystems < 5) {\n    state.expansionStrategy.systemPriority = 'strategic';\n  }\n}\n\n// Faction-specific behavior functions\nfunction executeSpaceRatsBehavior(state: FactionBehaviorState): void {\n  switch (state.stateMachine.current) {\n    case 'patrolling':\n      // Execute patrol pattern\n      break;\n    case 'aggressive':\n      // Execute aggressive raids\n      break;\n    case 'pursuing':\n      // Execute pursuit\n      break;\n  }\n}\n\nfunction executeLostNovaBehavior(state: FactionBehaviorState): void {\n  switch (state.stateMachine.current) {\n    case 'hiding':\n      // Execute stealth mode\n      break;\n    case 'preparing':\n      // Prepare ambush\n      break;\n    case 'ambushing':\n      // Execute ambush\n      break;\n  }\n}\n\nfunction executeEquatorHorizonBehavior(state: FactionBehaviorState): void {\n  switch (state.stateMachine.current) {\n    case 'enforcing':\n      // Execute balance enforcement\n      break;\n    case 'overwhelming':\n      // Execute overwhelming force\n      break;\n    case 'withdrawing':\n      // Execute strategic withdrawal\n      break;\n  }\n}\n\n// Helper function to calculate optimal expansion direction\nfunction calculateOptimalExpansionDirection(state: FactionBehaviorState): Position {\n  interface WeightedResource {\n    position: Position;\n    value: number;\n  }\n\n  type ResourceNodeEntry = [string, { fieldId: string; type: ResourceType; amount: number }];\n\n  // Find direction with most resources or strategic value based on priority\n  const nearbyResources = Array.from(asteroidFieldManager.getResourceNodes().entries())\n    .filter((entry: ResourceNodeEntry) => {\n      const [_, node] = entry;\n      const field = asteroidFieldManager.getField(node.fieldId);\n      if (!field) {\n        return false;\n      }\n\n      const dx = field.position.x - state.territory.center.x;\n      const dy = field.position.y - state.territory.center.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      return distance <= state.territory.radius;\n    })\n    .map((entry: ResourceNodeEntry): WeightedResource | null => {\n      const [_, node] = entry;\n      const field = asteroidFieldManager.getField(node.fieldId);\n      if (!field) {\n        return null;\n      }\n\n      return {\n        position: field.position,\n        value: node.amount * getResourceValueMultiplier(node.type),\n      };\n    })\n    .filter((resource): resource is WeightedResource => resource !== null);\n\n  if (nearbyResources.length === 0) {\n    return state.expansionStrategy.expansionDirection;\n  }\n\n  // Calculate weighted center of resources\n  const center = nearbyResources.reduce(\n    (acc: Position, resource: WeightedResource) => ({\n      x: acc.x + resource.position.x * resource.value,\n      y: acc.y + resource.position.y * resource.value,\n    }),\n    { x: 0, y: 0 }\n  );\n\n  const totalValue = nearbyResources.reduce(\n    (sum: number, resource: WeightedResource) => sum + resource.value,\n    0\n  );\n  return {\n    x: center.x / (totalValue || 1),\n    y: center.y / (totalValue || 1),\n  };\n}\n\n// Update updateFleets function with proper type handling\nfunction updateFleets(units: CombatUnit[]): FactionFleet[] {\n  const fleets: FactionFleet[] = [];\n  const assignedUnits = new Set<string>();\n\n  units.forEach(unit => {\n    if (assignedUnits.has(unit.id)) {\n      return;\n    }\n\n    const nearbyUnits = units.filter(\n      other => !assignedUnits.has(other.id) && getDistance(unit.position, other.position) < 500\n    );\n\n    if (nearbyUnits.length >= 3) {\n      const factionUnits = nearbyUnits.map(u =>\n        convertToFactionCombatUnit(u, 'neutral', unit.type as FactionShipClass)\n      );\n      const factionShips: FactionShip[] = factionUnits.map(u => ({\n        id: u.id,\n        name: `${u.type}`,\n        category: 'war',\n        status: 'ready' as CommonShipStatus,\n        faction: u.faction,\n        class: u.class,\n        health: u.stats.health,\n        maxHealth: u.stats.maxHealth,\n        shield: u.stats.shield,\n        maxShield: u.stats.maxShield,\n        position: u.position,\n        rotation: u.rotation,\n        tactics: {\n          formation: 'defensive',\n          behavior: 'defensive',\n        },\n        stats: {\n          health: u.stats.health,\n          maxHealth: u.stats.maxHealth,\n          shield: u.stats.shield,\n          maxShield: u.stats.maxShield,\n          energy: 100,\n          maxEnergy: 100,\n          cargo: 100,\n          speed: u.stats.speed,\n          turnRate: u.stats.turnRate,\n          defense: {\n            armor: 100,\n            shield: u.stats.shield,\n            evasion: 0.3,\n            regeneration: 1,\n          },\n          mobility: {\n            speed: u.stats.speed,\n            turnRate: u.stats.turnRate,\n            acceleration: 50,\n          },\n          weapons: [],\n          abilities: [],\n        },\n        abilities: [],\n      }));\n\n      fleets.push({\n        ships: factionShips,\n        formation: {\n          type: 'defensive',\n          spacing: 100,\n          facing: 0,\n        },\n        strength: calculateFleetStrength(nearbyUnits),\n      });\n\n      nearbyUnits.forEach(u => assignedUnits.add(u.id));\n    }\n  });\n\n  return fleets;\n}\n\n// Update updateFleet function with proper type handling\nfunction updateFleet(fleet: FactionFleet, units: CombatUnit[]): FactionFleet {\n  const factionUnits = units.map(u =>\n    convertToFactionCombatUnit(u, 'neutral', u.type as FactionShipClass)\n  );\n  const factionShips: FactionShip[] = factionUnits.map(u => ({\n    id: u.id,\n    name: `${u.type}`,\n    category: 'war',\n    status: 'ready' as CommonShipStatus,\n    faction: u.faction,\n    class: u.class,\n    health: u.stats.health,\n    maxHealth: u.stats.maxHealth,\n    shield: u.stats.shield,\n    maxShield: u.stats.maxShield,\n    position: u.position,\n    rotation: u.rotation,\n    tactics: {\n      formation: 'defensive',\n      behavior: 'defensive',\n    },\n    stats: {\n      health: u.stats.health,\n      maxHealth: u.stats.maxHealth,\n      shield: u.stats.shield,\n      maxShield: u.stats.maxShield,\n      energy: 100,\n      maxEnergy: 100,\n      cargo: 100,\n      speed: u.stats.speed,\n      turnRate: u.stats.turnRate,\n      defense: {\n        armor: 100,\n        shield: u.stats.shield,\n        evasion: 0.3,\n        regeneration: 1,\n      },\n      mobility: {\n        speed: u.stats.speed,\n        turnRate: u.stats.turnRate,\n        acceleration: 50,\n      },\n      weapons: [],\n      abilities: [],\n    },\n    abilities: [],\n  }));\n\n  return {\n    ...fleet,\n    ships: factionShips,\n    strength: calculateFleetStrength(units),\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useFleetAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useAssets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useGameState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useGlobalEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useScalingSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1664,1667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1664,1667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport {\n  ExtendedModuleStatus,\n  ModuleStatusDetails,\n  moduleStatusManager,\n} from '../../managers/module/ModuleStatusManager';\n\n/**\n * Hook for tracking and managing module status\n */\nexport function useModuleStatus(moduleId?: string) {\n  const [statusDetails, setStatusDetails] = useState<ModuleStatusDetails | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load status details\n  useEffect(() => {\n    if (!moduleId) {\n      setStatusDetails(null);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const details = moduleStatusManager.getModuleStatusDetails(moduleId);\n\n      if (details) {\n        setStatusDetails(details);\n      } else {\n        // Initialize status tracking if not already done\n        moduleStatusManager.initializeModuleStatus(moduleId);\n        const newDetails = moduleStatusManager.getModuleStatusDetails(moduleId);\n        setStatusDetails(newDetails || null);\n      }\n\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading module status: ${err}`);\n      setIsLoading(false);\n    }\n  }, [moduleId]);\n\n  // Subscribe to status events\n  useEffect(() => {\n    if (!moduleId) {\n      return;\n    }\n\n    const handleStatusChanged = (event: any) => {\n      if (event.moduleId === moduleId) {\n        const details = moduleStatusManager.getModuleStatusDetails(moduleId);\n        setStatusDetails(details || null);\n      }\n    };\n\n    const handleErrorOccurred = (event: any) => {\n      if (event.moduleId === moduleId) {\n        const details = moduleStatusManager.getModuleStatusDetails(moduleId);\n        setStatusDetails(details || null);\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeStatus = moduleEventBus.subscribe(\n      'STATUS_CHANGED' as ModuleEventType,\n      handleStatusChanged\n    );\n    const unsubscribeError = moduleEventBus.subscribe(\n      'ERROR_OCCURRED' as ModuleEventType,\n      handleErrorOccurred\n    );\n\n    return () => {\n      if (typeof unsubscribeStatus === 'function') {\n        unsubscribeStatus();\n      }\n      if (typeof unsubscribeError === 'function') {\n        unsubscribeError();\n      }\n    };\n  }, [moduleId]);\n\n  // Update module status\n  const updateStatus = useCallback(\n    (status: ExtendedModuleStatus, reason?: string) => {\n      if (!moduleId) {\n        return false;\n      }\n      return moduleStatusManager.updateModuleStatus(moduleId, status, reason);\n    },\n    [moduleId]\n  );\n\n  // Add an alert\n  const addAlert = useCallback(\n    (level: 'info' | 'warning' | 'error' | 'critical', message: string) => {\n      if (!moduleId) {\n        return;\n      }\n      moduleStatusManager.addAlert(moduleId, level, message);\n    },\n    [moduleId]\n  );\n\n  // Acknowledge an alert\n  const acknowledgeAlert = useCallback(\n    (alertIndex: number) => {\n      if (!moduleId) {\n        return false;\n      }\n      return moduleStatusManager.acknowledgeAlert(moduleId, alertIndex);\n    },\n    [moduleId]\n  );\n\n  // Get status color\n  const getStatusColor = useCallback((status?: ExtendedModuleStatus): string => {\n    if (!status) {\n      return 'gray';\n    }\n\n    switch (status) {\n      case 'active':\n        return 'green';\n      case 'constructing':\n        return 'yellow';\n      case 'inactive':\n        return 'gray';\n      case 'optimized':\n        return 'blue';\n      case 'boost':\n        return 'purple';\n      case 'degraded':\n        return 'orange';\n      case 'overloaded':\n        return 'orange';\n      case 'maintenance':\n      case 'upgrading':\n      case 'repairing':\n        return 'yellow';\n      case 'error':\n        return 'red';\n      case 'critical':\n        return 'darkred';\n      case 'offline':\n        return 'black';\n      case 'standby':\n        return 'lightblue';\n      case 'powersave':\n        return 'teal';\n      default:\n        return 'gray';\n    }\n  }, []);\n\n  // Get alert color\n  const getAlertColor = useCallback((level: 'info' | 'warning' | 'error' | 'critical'): string => {\n    switch (level) {\n      case 'info':\n        return 'blue';\n      case 'warning':\n        return 'orange';\n      case 'error':\n        return 'red';\n      case 'critical':\n        return 'darkred';\n      default:\n        return 'gray';\n    }\n  }, []);\n\n  // Format uptime\n  const formatUptime = useCallback((uptime: number): string => {\n    const seconds = Math.floor(uptime / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) {\n      return `${days}d ${hours % 24}h`;\n    }\n\n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    }\n\n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n\n    return `${seconds}s`;\n  }, []);\n\n  return {\n    // State\n    statusDetails,\n    isLoading,\n    error,\n\n    // Current status\n    currentStatus: statusDetails?.currentStatus,\n    previousStatus: statusDetails?.previousStatus,\n    history: statusDetails?.history || [],\n    metrics: statusDetails?.metrics,\n    alerts: statusDetails?.alerts || [],\n\n    // Actions\n    updateStatus,\n    addAlert,\n    acknowledgeAlert,\n\n    // Utilities\n    getStatusColor,\n    getAlertColor,\n    formatUptime,\n  };\n}\n\n/**\n * Hook for tracking modules with specific status or alerts\n */\nexport function useModulesWithStatus(\n  status?: ExtendedModuleStatus,\n  alertLevel?: 'info' | 'warning' | 'error' | 'critical'\n) {\n  const [moduleIds, setModuleIds] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load modules with status or alerts\n  useEffect(() => {\n    try {\n      let ids: string[] = [];\n\n      if (status) {\n        ids = moduleStatusManager.getModulesByStatus(status);\n      } else if (alertLevel) {\n        ids = moduleStatusManager.getModulesWithAlerts(alertLevel);\n      } else {\n        // Get all modules with any alerts\n        ids = moduleStatusManager.getModulesWithAlerts();\n      }\n\n      setModuleIds(ids);\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading modules: ${err}`);\n      setIsLoading(false);\n    }\n  }, [status, alertLevel]);\n\n  // Subscribe to status events\n  useEffect(() => {\n    const handleStatusChanged = () => {\n      try {\n        let ids: string[] = [];\n\n        if (status) {\n          ids = moduleStatusManager.getModulesByStatus(status);\n        } else if (alertLevel) {\n          ids = moduleStatusManager.getModulesWithAlerts(alertLevel);\n        } else {\n          // Get all modules with any alerts\n          ids = moduleStatusManager.getModulesWithAlerts();\n        }\n\n        setModuleIds(ids);\n      } catch (err) {\n        setError(`Error updating modules: ${err}`);\n      }\n    };\n\n    const handleErrorOccurred = () => {\n      if (alertLevel || !status) {\n        try {\n          const ids = alertLevel\n            ? moduleStatusManager.getModulesWithAlerts(alertLevel)\n            : moduleStatusManager.getModulesWithAlerts();\n\n          setModuleIds(ids);\n        } catch (err) {\n          setError(`Error updating modules: ${err}`);\n        }\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeStatus = moduleEventBus.subscribe(\n      'STATUS_CHANGED' as ModuleEventType,\n      handleStatusChanged\n    );\n    const unsubscribeError = moduleEventBus.subscribe(\n      'ERROR_OCCURRED' as ModuleEventType,\n      handleErrorOccurred\n    );\n\n    return () => {\n      if (typeof unsubscribeStatus === 'function') {\n        unsubscribeStatus();\n      }\n      if (typeof unsubscribeError === 'function') {\n        unsubscribeError();\n      }\n    };\n  }, [status, alertLevel]);\n\n  return {\n    moduleIds,\n    isLoading,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleUpgrade.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1267,1270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1267,1270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1939,1942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1939,1942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":96,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { moduleManager } from '../../managers/module/ModuleManager';\nimport {\n  ModuleUpgradeEffect,\n  moduleUpgradeManager,\n  ModuleUpgradeStatus,\n} from '../../managers/module/ModuleUpgradeManager';\n\n/**\n * Hook for managing module upgrades\n * @param moduleId The ID of the module to manage upgrades for\n */\nexport function useModuleUpgrade(moduleId?: string) {\n  const [upgradeStatus, setUpgradeStatus] = useState<ModuleUpgradeStatus | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load upgrade status\n  useEffect(() => {\n    if (!moduleId) {\n      setUpgradeStatus(null);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n      setUpgradeStatus(status || null);\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading upgrade status: ${err}`);\n      setIsLoading(false);\n    }\n  }, [moduleId]);\n\n  // Subscribe to module events\n  useEffect(() => {\n    if (!moduleId) {\n      return;\n    }\n\n    const handleModuleUpgraded = (event: any) => {\n      if (event.moduleId === moduleId) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          setError(`Error updating upgrade status: ${err}`);\n        }\n      }\n    };\n\n    const handleUpgradeStarted = (event: any) => {\n      if (event.moduleId === moduleId) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          setError(`Error updating upgrade status: ${err}`);\n        }\n      }\n    };\n\n    const handleUpgradeCancelled = (event: any) => {\n      if (event.moduleId === moduleId) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          setError(`Error updating upgrade status: ${err}`);\n        }\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'MODULE_UPGRADED' as ModuleEventType,\n      handleModuleUpgraded\n    );\n    const unsubscribeStarted = moduleEventBus.subscribe(\n      'MODULE_UPGRADE_STARTED' as ModuleEventType,\n      handleUpgradeStarted\n    );\n    const unsubscribeCancelled = moduleEventBus.subscribe(\n      'MODULE_UPGRADE_CANCELLED' as ModuleEventType,\n      handleUpgradeCancelled\n    );\n\n    // Set up progress update interval for active upgrades\n    const progressInterval = setInterval(() => {\n      if (upgradeStatus?.upgradeProgress !== undefined) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          // Silently ignore errors during progress updates\n        }\n      }\n    }, 1000); // Update every second\n\n    return () => {\n      // Unsubscribe from events\n      if (typeof unsubscribeUpgraded === 'function') {\n        unsubscribeUpgraded();\n      }\n      if (typeof unsubscribeStarted === 'function') {\n        unsubscribeStarted();\n      }\n      if (typeof unsubscribeCancelled === 'function') {\n        unsubscribeCancelled();\n      }\n\n      // Clear interval\n      clearInterval(progressInterval);\n    };\n  }, [moduleId, upgradeStatus?.upgradeProgress]);\n\n  // Start upgrade\n  const startUpgrade = useCallback(() => {\n    if (!moduleId) {\n      return false;\n    }\n    return moduleUpgradeManager.startUpgrade(moduleId);\n  }, [moduleId]);\n\n  // Cancel upgrade\n  const cancelUpgrade = useCallback(() => {\n    if (!moduleId) {\n      return false;\n    }\n    return moduleUpgradeManager.cancelUpgrade(moduleId);\n  }, [moduleId]);\n\n  // Format time remaining\n  const formatTimeRemaining = useCallback((milliseconds: number): string => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    }\n\n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n\n    return `${seconds}s`;\n  }, []);\n\n  // Get effect description\n  const getEffectDescription = useCallback((effect: ModuleUpgradeEffect): string => {\n    const sign = effect.value >= 0 ? '+' : '';\n    const valueStr = effect.isPercentage ? `${sign}${effect.value}%` : `${sign}${effect.value}`;\n\n    return `${effect.description} (${valueStr})`;\n  }, []);\n\n  return {\n    // State\n    upgradeStatus,\n    isLoading,\n    error,\n\n    // Current status\n    currentLevel: upgradeStatus?.currentLevel,\n    maxLevel: upgradeStatus?.maxLevel,\n    nextLevel: upgradeStatus?.nextLevel,\n    upgradeAvailable: upgradeStatus?.upgradeAvailable,\n    requirementsMet: upgradeStatus?.requirementsMet,\n    missingRequirements: upgradeStatus?.missingRequirements,\n    upgradeProgress: upgradeStatus?.upgradeProgress,\n    estimatedTimeRemaining: upgradeStatus?.estimatedTimeRemaining,\n    effects: upgradeStatus?.effects,\n\n    // Actions\n    startUpgrade,\n    cancelUpgrade,\n\n    // Utilities\n    formatTimeRemaining,\n    getEffectDescription,\n  };\n}\n\n/**\n * Hook for tracking modules with available upgrades\n */\nexport function useModulesWithAvailableUpgrades() {\n  const [moduleIds, setModuleIds] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load modules with available upgrades\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Get all modules\n      const modules = moduleManager.getActiveModules();\n\n      // Filter modules with available upgrades\n      const availableUpgrades = modules.filter(module => {\n        const status = moduleUpgradeManager.getUpgradeStatus(module.id);\n        return status?.upgradeAvailable && status?.requirementsMet;\n      });\n\n      setModuleIds(availableUpgrades.map(module => module.id));\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading modules with available upgrades: ${err}`);\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Subscribe to module events\n  useEffect(() => {\n    const handleModuleUpgraded = () => {\n      try {\n        // Get all modules\n        const modules = moduleManager.getActiveModules();\n\n        // Filter modules with available upgrades\n        const availableUpgrades = modules.filter(module => {\n          const status = moduleUpgradeManager.getUpgradeStatus(module.id);\n          return status?.upgradeAvailable && status?.requirementsMet;\n        });\n\n        setModuleIds(availableUpgrades.map(module => module.id));\n      } catch (err) {\n        setError(`Error updating modules with available upgrades: ${err}`);\n      }\n    };\n\n    const handleResourceChanged = () => {\n      // Resource changes might affect upgrade availability\n      handleModuleUpgraded();\n    };\n\n    // Subscribe to events\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'MODULE_UPGRADED' as ModuleEventType,\n      handleModuleUpgraded\n    );\n    const unsubscribeResourceChanged = moduleEventBus.subscribe(\n      'RESOURCE_CHANGED' as ModuleEventType,\n      handleResourceChanged\n    );\n\n    return () => {\n      // Unsubscribe from events\n      if (typeof unsubscribeUpgraded === 'function') {\n        unsubscribeUpgraded();\n      }\n      if (typeof unsubscribeResourceChanged === 'function') {\n        unsubscribeResourceChanged();\n      }\n    };\n  }, []);\n\n  return {\n    moduleIds,\n    isLoading,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useSubModules.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1254,1257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1254,1257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1515,1518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1515,1518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1776,1779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1776,1779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2037,2040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2037,2040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2299,2302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2299,2302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2563,2566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2563,2566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7549,7552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7549,7552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { subModuleManager } from '../../managers/module/SubModuleManager';\nimport {\n  SubModule,\n  SubModuleConfig,\n  SubModuleEffect,\n  SubModuleType,\n} from '../../types/buildings/ModuleTypes';\n\n/**\n * Hook for managing sub-modules\n * Provides an interface to the SubModuleManager\n */\nexport function useSubModules(parentModuleId?: string) {\n  const [subModules, setSubModules] = useState<SubModule[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load sub-modules for parent module\n  useEffect(() => {\n    if (!parentModuleId) {\n      setSubModules([]);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n      setSubModules(modules);\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading sub-modules: ${err}`);\n      setIsLoading(false);\n    }\n  }, [parentModuleId]);\n\n  // Subscribe to sub-module events\n  useEffect(() => {\n    if (!parentModuleId) {\n      return;\n    }\n\n    const handleSubModuleCreated = (event: any) => {\n      if (event.moduleId === parentModuleId) {\n        // Refresh sub-modules\n        const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n        setSubModules(modules);\n      }\n    };\n\n    const handleSubModuleAttached = (event: any) => {\n      if (event.moduleId === parentModuleId) {\n        // Refresh sub-modules\n        const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n        setSubModules(modules);\n      }\n    };\n\n    const handleSubModuleDetached = (event: any) => {\n      if (event.moduleId === parentModuleId) {\n        // Refresh sub-modules\n        const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n        setSubModules(modules);\n      }\n    };\n\n    const handleSubModuleUpgraded = (event: any) => {\n      if (event.moduleId === parentModuleId) {\n        // Refresh sub-modules\n        const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n        setSubModules(modules);\n      }\n    };\n\n    const handleSubModuleActivated = (event: any) => {\n      if (event.moduleId === parentModuleId) {\n        // Refresh sub-modules\n        const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n        setSubModules(modules);\n      }\n    };\n\n    const handleSubModuleDeactivated = (event: any) => {\n      if (event.moduleId === parentModuleId) {\n        // Refresh sub-modules\n        const modules = subModuleManager.getSubModulesForParent(parentModuleId);\n        setSubModules(modules);\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeCreated = moduleEventBus.subscribe(\n      'SUB_MODULE_CREATED' as ModuleEventType,\n      handleSubModuleCreated\n    );\n    const unsubscribeAttached = moduleEventBus.subscribe(\n      'SUB_MODULE_ATTACHED' as ModuleEventType,\n      handleSubModuleAttached\n    );\n    const unsubscribeDetached = moduleEventBus.subscribe(\n      'SUB_MODULE_DETACHED' as ModuleEventType,\n      handleSubModuleDetached\n    );\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'SUB_MODULE_UPGRADED' as ModuleEventType,\n      handleSubModuleUpgraded\n    );\n    const unsubscribeActivated = moduleEventBus.subscribe(\n      'SUB_MODULE_ACTIVATED' as ModuleEventType,\n      handleSubModuleActivated\n    );\n    const unsubscribeDeactivated = moduleEventBus.subscribe(\n      'SUB_MODULE_DEACTIVATED' as ModuleEventType,\n      handleSubModuleDeactivated\n    );\n\n    // Cleanup function\n    return () => {\n      if (typeof unsubscribeCreated === 'function') {\n        unsubscribeCreated();\n      }\n      if (typeof unsubscribeAttached === 'function') {\n        unsubscribeAttached();\n      }\n      if (typeof unsubscribeDetached === 'function') {\n        unsubscribeDetached();\n      }\n      if (typeof unsubscribeUpgraded === 'function') {\n        unsubscribeUpgraded();\n      }\n      if (typeof unsubscribeActivated === 'function') {\n        unsubscribeActivated();\n      }\n      if (typeof unsubscribeDeactivated === 'function') {\n        unsubscribeDeactivated();\n      }\n    };\n  }, [parentModuleId]);\n\n  // Create a sub-module\n  const createSubModule = useCallback((type: SubModuleType, parentId: string) => {\n    if (!parentId) {\n      setError('Parent module ID is required');\n      return null;\n    }\n\n    const subModule = subModuleManager.createSubModule(type, parentId);\n    if (subModule) {\n      // Update local state\n      setSubModules(prev => [...prev, subModule]);\n    }\n    return subModule;\n  }, []);\n\n  // Attach a sub-module\n  const attachSubModule = useCallback((subModuleId: string, parentId: string) => {\n    if (!parentId) {\n      setError('Parent module ID is required');\n      return false;\n    }\n\n    const result = subModuleManager.attachSubModule(subModuleId, parentId);\n    return result.success;\n  }, []);\n\n  // Detach a sub-module\n  const detachSubModule = useCallback((subModuleId: string) => {\n    const result = subModuleManager.detachSubModule(subModuleId);\n    if (result.success) {\n      // Update local state\n      setSubModules(prev => prev.filter(sm => sm.id !== subModuleId));\n    }\n    return result.success;\n  }, []);\n\n  // Activate a sub-module\n  const activateSubModule = useCallback((subModuleId: string) => {\n    const success = subModuleManager.activateSubModule(subModuleId);\n    if (success) {\n      // Update local state\n      setSubModules(prev =>\n        prev.map(sm => (sm.id === subModuleId ? { ...sm, isActive: true, status: 'active' } : sm))\n      );\n    }\n    return success;\n  }, []);\n\n  // Deactivate a sub-module\n  const deactivateSubModule = useCallback((subModuleId: string) => {\n    const success = subModuleManager.deactivateSubModule(subModuleId);\n    if (success) {\n      // Update local state\n      setSubModules(prev =>\n        prev.map(sm =>\n          sm.id === subModuleId ? { ...sm, isActive: false, status: 'inactive' } : sm\n        )\n      );\n    }\n    return success;\n  }, []);\n\n  // Upgrade a sub-module\n  const upgradeSubModule = useCallback((subModuleId: string) => {\n    const success = subModuleManager.upgradeSubModule(subModuleId);\n    if (success) {\n      // Update local state\n      setSubModules(prev =>\n        prev.map(sm => (sm.id === subModuleId ? { ...sm, level: sm.level + 1 } : sm))\n      );\n    }\n    return success;\n  }, []);\n\n  // Get a sub-module by ID\n  const getSubModule = useCallback((subModuleId: string) => {\n    return subModuleManager.getSubModule(subModuleId);\n  }, []);\n\n  // Get all sub-modules for a parent module\n  const getSubModulesForParent = useCallback((parentId: string) => {\n    return subModuleManager.getSubModulesForParent(parentId);\n  }, []);\n\n  // Get all sub-modules of a specific type\n  const getSubModulesByType = useCallback((type: SubModuleType) => {\n    return subModuleManager.getSubModulesByType(type);\n  }, []);\n\n  // Get all active sub-modules\n  const getActiveSubModules = useCallback(() => {\n    return subModuleManager.getActiveSubModules();\n  }, []);\n\n  // Register a sub-module configuration\n  const registerSubModuleConfig = useCallback((config: SubModuleConfig) => {\n    subModuleManager.registerSubModuleConfig(config);\n  }, []);\n\n  // Register a custom effect handler\n  const registerEffectHandler = useCallback(\n    (effectType: string, handler: (effect: SubModuleEffect, moduleId: string) => any) => {\n      subModuleManager.registerEffectHandler(effectType, handler);\n    },\n    []\n  );\n\n  return {\n    // State\n    subModules,\n    isLoading,\n    error,\n\n    // Actions\n    createSubModule,\n    attachSubModule,\n    detachSubModule,\n    activateSubModule,\n    deactivateSubModule,\n    upgradeSubModule,\n\n    // Queries\n    getSubModule,\n    getSubModulesForParent,\n    getSubModulesByType,\n    getActiveSubModules,\n\n    // Registration\n    registerSubModuleConfig,\n    registerEffectHandler,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/resources/useResourceManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'time' is defined but never used.","line":61,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { resourceManager } from '../../managers/game/ResourceManager';\nimport {\n  ResourceIntegration,\n  createResourceIntegration,\n} from '../../managers/resource/ResourceIntegration';\nimport { ResourceState, ResourceType } from '../../types/resources/ResourceTypes';\n\n// Singleton instance of the resource integration\nlet resourceIntegrationInstance: ResourceIntegration | null = null;\n\n/**\n * Initialize the resource integration if it hasn't been initialized yet\n */\nfunction getResourceIntegration(): ResourceIntegration {\n  if (!resourceIntegrationInstance) {\n    resourceIntegrationInstance = createResourceIntegration(resourceManager);\n  }\n\n  if (!resourceIntegrationInstance) {\n    throw new Error('Failed to create resource integration instance');\n  }\n\n  return resourceIntegrationInstance;\n}\n\n/**\n * Hook for accessing the resource management system\n */\nexport function useResourceManagement() {\n  const [resourceStates, setResourceStates] = useState<Map<ResourceType, ResourceState>>(new Map());\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Get or create the resource integration\n  const integration = useMemo(() => getResourceIntegration(), []);\n\n  // Initialize the resource states\n  useEffect(() => {\n    // Get all resource types\n    const resourceTypes = Array.from(resourceManager['resources'].keys()) as ResourceType[];\n\n    // Create a map of resource states\n    const states = new Map<ResourceType, ResourceState>();\n    resourceTypes.forEach(type => {\n      const state = resourceManager.getResourceState(type);\n      if (state) {\n        states.set(type, state);\n      }\n    });\n\n    setResourceStates(states);\n    setIsInitialized(true);\n  }, []);\n\n  // Update the resource integration on each frame\n  useEffect(() => {\n    if (!isInitialized) {\n      return;\n    }\n\n    const frameId = requestAnimationFrame(time => {\n      integration.update(1000 / 60); // Assume 60 FPS\n    });\n\n    return () => {\n      cancelAnimationFrame(frameId);\n    };\n  }, [integration, isInitialized]);\n\n  // Clean up the resource integration when the component unmounts\n  useEffect(() => {\n    return () => {\n      if (resourceIntegrationInstance) {\n        resourceIntegrationInstance.cleanup();\n        resourceIntegrationInstance = null;\n      }\n    };\n  }, []);\n\n  // Get a resource state\n  const getResourceState = useCallback(\n    (type: ResourceType): ResourceState | undefined => {\n      return resourceStates.get(type);\n    },\n    [resourceStates]\n  );\n\n  // Get all resource states\n  const getAllResourceStates = useCallback((): Map<ResourceType, ResourceState> => {\n    return resourceStates;\n  }, [resourceStates]);\n\n  // Get resource amount\n  const getResourceAmount = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.current || 0;\n    },\n    [resourceStates]\n  );\n\n  // Check if a resource is available\n  const hasResource = useCallback(\n    (type: ResourceType, amount: number): boolean => {\n      const state = resourceStates.get(type);\n      return state ? state.current >= amount : false;\n    },\n    [resourceStates]\n  );\n\n  // Check if multiple resources are available\n  const hasResources = useCallback(\n    (resources: Array<{ type: ResourceType; amount: number }>): boolean => {\n      return resources.every(({ type, amount }) => hasResource(type, amount));\n    },\n    [hasResource]\n  );\n\n  // Consume a resource\n  const consumeResource = useCallback(\n    (type: ResourceType, amount: number): boolean => {\n      if (!hasResource(type, amount)) {\n        return false;\n      }\n\n      resourceManager.removeResource(type, amount);\n      return true;\n    },\n    [hasResource]\n  );\n\n  // Consume multiple resources\n  const consumeResources = useCallback(\n    (resources: Array<{ type: ResourceType; amount: number }>): boolean => {\n      if (!hasResources(resources)) {\n        return false;\n      }\n\n      resources.forEach(({ type, amount }) => {\n        resourceManager.removeResource(type, amount);\n      });\n\n      return true;\n    },\n    [hasResources]\n  );\n\n  // Add a resource\n  const addResource = useCallback((type: ResourceType, amount: number): void => {\n    resourceManager.addResource(type, amount);\n  }, []);\n\n  // Add multiple resources\n  const addResources = useCallback(\n    (resources: Array<{ type: ResourceType; amount: number }>): void => {\n      resources.forEach(({ type, amount }) => {\n        resourceManager.addResource(type, amount);\n      });\n    },\n    []\n  );\n\n  // Get resource production rate\n  const getProductionRate = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.production || 0;\n    },\n    [resourceStates]\n  );\n\n  // Get resource consumption rate\n  const getConsumptionRate = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.consumption || 0;\n    },\n    [resourceStates]\n  );\n\n  // Set resource production rate\n  const setProductionRate = useCallback((type: ResourceType, rate: number): void => {\n    resourceManager.setResourceProduction(type, rate);\n  }, []);\n\n  // Set resource consumption rate\n  const setConsumptionRate = useCallback((type: ResourceType, rate: number): void => {\n    resourceManager.setResourceConsumption(type, rate);\n  }, []);\n\n  // Get resource capacity\n  const getResourceCapacity = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.max || 0;\n    },\n    [resourceStates]\n  );\n\n  // Get resource percentage\n  const getResourcePercentage = useCallback(\n    (type: ResourceType): number => {\n      const state = resourceStates.get(type);\n      if (!state || state.max === 0) {\n        return 0;\n      }\n      return (state.current / state.max) * 100;\n    },\n    [resourceStates]\n  );\n\n  return {\n    // Resource state\n    getResourceState,\n    getAllResourceStates,\n    getResourceAmount,\n    hasResource,\n    hasResources,\n\n    // Resource modification\n    consumeResource,\n    consumeResources,\n    addResource,\n    addResources,\n\n    // Resource rates\n    getProductionRate,\n    getConsumptionRate,\n    setProductionRate,\n    setConsumptionRate,\n\n    // Resource capacity\n    getResourceCapacity,\n    getResourcePercentage,\n\n    // Initialization state\n    isInitialized,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/resources/useResourceTracking.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'enableAlerts' is assigned a value but never used.","line":92,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateTotals' is assigned a value but never used.","line":594,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":594,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculatePercentages' is assigned a value but never used.","line":631,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":631,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  ResourceTotals,\n  SerializedResource,\n  SerializedResourceState,\n  SerializedThreshold,\n  isSerializedResourceState,\n  serializeResourceMap,\n  validateResourceState,\n} from '../../types/resources/ResourceSerializationTypes';\nimport {\n  ResourceAlert,\n  ResourceState,\n  ResourceThreshold,\n  ResourceTransfer,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\n\n/**\n * Resource tracking options\n */\nexport interface ResourceTrackingOptions {\n  types?: ResourceType[];\n  updateInterval?: number;\n  historyLimit?: number;\n  enableAlerts?: boolean;\n  enableThresholds?: boolean;\n}\n\n/**\n * Resource tracking state\n */\nexport interface ResourceTrackingState {\n  resources: Map<ResourceType, ResourceState>;\n  history: ResourceTransfer[];\n  alerts: ResourceAlert[];\n  lastUpdated: number;\n  thresholds: Map<ResourceType, ResourceThreshold[]>;\n}\n\n/**\n * Resource tracking result\n */\nexport interface ResourceTrackingResult {\n  // Resource states\n  resources: Map<ResourceType, ResourceState>;\n  resourceList: Array<{ type: ResourceType; state: ResourceState }>;\n  getResource: (type: ResourceType) => ResourceState | undefined;\n\n  // Resource history\n  history: ResourceTransfer[];\n  getHistoryByType: (type: ResourceType) => ResourceTransfer[];\n  clearHistory: () => void;\n\n  // Resource alerts\n  alerts: ResourceAlert[];\n  getAlertsByType: (type: ResourceType) => ResourceAlert[];\n  clearAlerts: () => void;\n  dismissAlert: (id: string) => void;\n\n  // Resource thresholds\n  setThreshold: (type: ResourceType, threshold: ResourceThreshold) => void;\n  removeThreshold: (type: ResourceType) => void;\n\n  // Resource updates\n  updateResource: (type: ResourceType, update: Partial<ResourceState>) => void;\n  incrementResource: (type: ResourceType, amount: number) => void;\n  decrementResource: (type: ResourceType, amount: number) => void;\n  transferResource: (transfer: ResourceTransfer) => boolean;\n\n  // Utility functions\n  getTotalResources: () => number;\n  getResourcePercentage: (type: ResourceType) => number;\n  getResourcesAboveThreshold: (percentage: number) => ResourceType[];\n  getResourcesBelowThreshold: (percentage: number) => ResourceType[];\n\n  // Metadata\n  lastUpdated: number;\n  isLoading: boolean;\n  error: Error | null;\n}\n\n/**\n * Hook for tracking resources globally\n */\nexport function useResourceTracking(options: ResourceTrackingOptions = {}): ResourceTrackingResult {\n  // Default options\n  const {\n    types = ['minerals', 'energy', 'population', 'research', 'plasma', 'gas', 'exotic'],\n    updateInterval = 1000,\n    historyLimit = 100,\n    enableAlerts = true,\n    enableThresholds = true,\n  } = options;\n\n  // State\n  const [state, setState] = useState<ResourceTrackingState>({\n    resources: new Map(),\n    history: [],\n    alerts: [],\n    lastUpdated: Date.now(),\n    thresholds: new Map(),\n  });\n\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Initialize resources\n  useEffect(() => {\n    const initialResources = new Map<ResourceType, ResourceState>();\n    const initialThresholds = new Map<ResourceType, ResourceThreshold[]>();\n\n    // Initialize with default values\n    for (const type of types) {\n      initialResources.set(type, {\n        current: 0,\n        min: 0,\n        max: 100,\n        production: 0,\n        consumption: 0,\n      });\n      initialThresholds.set(type, []);\n    }\n\n    // Try to load from storage\n    try {\n      const savedResources = localStorage.getItem('resources');\n      if (savedResources) {\n        const parsed = JSON.parse(savedResources);\n\n        // Validate the parsed data\n        if (isSerializedResourceState(parsed) && validateResourceState(parsed)) {\n          // Convert serialized resources to Map with proper type conversion\n          const resourceMap = new Map<ResourceType, ResourceState>();\n\n          // Process each resource entry with proper conversion\n          for (const [key, value] of Object.entries(parsed.resources)) {\n            if (types.includes(key as ResourceType)) {\n              const serializedResource = value as SerializedResource;\n              resourceMap.set(key as ResourceType, {\n                current: serializedResource.current,\n                min: 0, // Default value\n                max: serializedResource.capacity || 100, // Use capacity or default\n                production: serializedResource.production,\n                consumption: serializedResource.consumption,\n              });\n            }\n          }\n\n          // Convert serialized thresholds to Map\n          const thresholdMap = new Map<ResourceType, ResourceThreshold[]>();\n          for (const [key, thresholds] of Object.entries(parsed.thresholds)) {\n            if (types.includes(key as ResourceType)) {\n              thresholdMap.set(key as ResourceType, thresholds as ResourceThreshold[]);\n            }\n          }\n\n          setState(prev => ({\n            ...prev,\n            resources: resourceMap,\n            thresholds: thresholdMap,\n            alerts: parsed.alerts || [],\n            lastUpdated: parsed.timestamp || Date.now(),\n          }));\n        } else {\n          console.warn('Invalid resource data in localStorage, using defaults');\n          setState(prev => ({\n            ...prev,\n            resources: initialResources,\n            thresholds: initialThresholds,\n            lastUpdated: Date.now(),\n          }));\n        }\n      } else {\n        setState(prev => ({\n          ...prev,\n          resources: initialResources,\n          thresholds: initialThresholds,\n          lastUpdated: Date.now(),\n        }));\n      }\n\n      setIsLoading(false);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to load resources'));\n      setIsLoading(false);\n    }\n  }, [types]);\n\n  // Save resources to storage\n  useEffect(() => {\n    if (isLoading) {\n      return;\n    }\n\n    try {\n      // Serialize the state\n      const serializedState: SerializedResourceState = {\n        resources: serializeResourceMap(state.resources) as Record<\n          ResourceType,\n          SerializedResource\n        >,\n        thresholds: serializeResourceMap(state.thresholds) as Record<string, SerializedThreshold[]>,\n        alerts: state.alerts,\n        timestamp: Date.now(),\n      };\n\n      localStorage.setItem('resources', JSON.stringify(serializedState));\n    } catch (err) {\n      console.error('Failed to save resources:', err);\n    }\n  }, [state, isLoading]);\n\n  // Check thresholds\n  useEffect(() => {\n    if (!enableThresholds || isLoading) {\n      return;\n    }\n\n    const checkThresholds = () => {\n      const newAlerts: ResourceAlert[] = [];\n\n      // Convert Map entries to array to avoid MapIterator error\n      const thresholdEntries = Array.from(state.thresholds.entries());\n      for (const [type, thresholdList] of thresholdEntries) {\n        const resourceState = state.resources.get(type);\n        if (!resourceState) {\n          continue;\n        }\n\n        for (const threshold of thresholdList) {\n          // Check min threshold\n          if (threshold.min !== undefined && resourceState.current < threshold.min) {\n            newAlerts.push({\n              id: `${type}-min-${Date.now()}`,\n              type,\n              threshold,\n              message: `${type} is below minimum threshold (${resourceState.current} < ${threshold.min})`,\n              severity: 'critical',\n            });\n          }\n\n          // Check max threshold\n          if (threshold.max !== undefined && resourceState.current > threshold.max) {\n            newAlerts.push({\n              id: `${type}-max-${Date.now()}`,\n              type,\n              threshold,\n              message: `${type} is above maximum threshold (${resourceState.current} > ${threshold.max})`,\n              severity: 'medium',\n            });\n          }\n\n          // Check target threshold\n          if (threshold.target !== undefined) {\n            const deviation = Math.abs(resourceState.current - threshold.target);\n            const maxDeviation = threshold.target * 0.2; // 20% deviation\n\n            if (deviation > maxDeviation) {\n              newAlerts.push({\n                id: `${type}-target-${Date.now()}`,\n                type,\n                threshold,\n                message: `${type} is deviating from target (${resourceState.current} vs ${threshold.target})`,\n                severity: 'low',\n              });\n            }\n          }\n        }\n      }\n\n      if (newAlerts.length > 0) {\n        setState(prev => ({\n          ...prev,\n          alerts: [...prev.alerts, ...newAlerts],\n        }));\n      }\n    };\n\n    // Check thresholds initially\n    checkThresholds();\n\n    // Set up interval for checking thresholds\n    const intervalId = setInterval(checkThresholds, updateInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [enableThresholds, isLoading, state.resources, state.thresholds, updateInterval]);\n\n  // Update resource\n  const updateResource = useCallback((type: ResourceType, update: Partial<ResourceState>) => {\n    setState(prev => {\n      const resources = new Map(prev.resources);\n      const current = resources.get(type) || {\n        current: 0,\n        min: 0,\n        max: 100,\n        production: 0,\n        consumption: 0,\n      };\n\n      resources.set(type, {\n        ...current,\n        ...update,\n      });\n\n      return {\n        ...prev,\n        resources,\n        lastUpdated: Date.now(),\n      };\n    });\n  }, []);\n\n  // Increment resource\n  const incrementResource = useCallback(\n    (type: ResourceType, amount: number) => {\n      if (amount <= 0) {\n        return;\n      }\n\n      setState(prev => {\n        const resources = new Map(prev.resources);\n        const current = resources.get(type) || {\n          current: 0,\n          min: 0,\n          max: 100,\n          production: 0,\n          consumption: 0,\n        };\n\n        const newValue = Math.min(current.current + amount, current.max);\n\n        resources.set(type, {\n          ...current,\n          current: newValue,\n        });\n\n        // Add to history\n        const transfer: ResourceTransfer = {\n          type,\n          source: 'production',\n          target: 'storage',\n          amount,\n          timestamp: Date.now(),\n        };\n\n        const history = [transfer, ...prev.history].slice(0, historyLimit);\n\n        return {\n          ...prev,\n          resources,\n          history,\n          lastUpdated: Date.now(),\n        };\n      });\n    },\n    [historyLimit]\n  );\n\n  // Decrement resource\n  const decrementResource = useCallback(\n    (type: ResourceType, amount: number) => {\n      if (amount <= 0) {\n        return;\n      }\n\n      setState(prev => {\n        const resources = new Map(prev.resources);\n        const current = resources.get(type) || {\n          current: 0,\n          min: 0,\n          max: 100,\n          production: 0,\n          consumption: 0,\n        };\n\n        const newValue = Math.max(current.current - amount, current.min);\n\n        resources.set(type, {\n          ...current,\n          current: newValue,\n        });\n\n        // Add to history\n        const transfer: ResourceTransfer = {\n          type,\n          source: 'storage',\n          target: 'consumption',\n          amount,\n          timestamp: Date.now(),\n        };\n\n        const history = [transfer, ...prev.history].slice(0, historyLimit);\n\n        return {\n          ...prev,\n          resources,\n          history,\n          lastUpdated: Date.now(),\n        };\n      });\n    },\n    [historyLimit]\n  );\n\n  // Transfer resource\n  const transferResource = useCallback(\n    (transfer: ResourceTransfer): boolean => {\n      if (transfer.amount <= 0) {\n        return false;\n      }\n\n      let success = false;\n\n      setState(prev => {\n        const resources = new Map(prev.resources);\n\n        // Get source resource\n        const sourceResource = resources.get(transfer.type);\n        if (!sourceResource || sourceResource.current < transfer.amount) {\n          return prev; // Not enough resources\n        }\n\n        // Update source\n        resources.set(transfer.type, {\n          ...sourceResource,\n          current: sourceResource.current - transfer.amount,\n        });\n\n        // Add to history\n        const history = [transfer, ...prev.history].slice(0, historyLimit);\n\n        success = true;\n\n        return {\n          ...prev,\n          resources,\n          history,\n          lastUpdated: Date.now(),\n        };\n      });\n\n      return success;\n    },\n    [historyLimit]\n  );\n\n  // Set threshold\n  const setThreshold = useCallback(\n    (type: ResourceType, threshold: ResourceThreshold) => {\n      const thresholds = new Map(state.thresholds);\n      const currentThresholds = thresholds.get(type) || [];\n      thresholds.set(type, [...currentThresholds, threshold]);\n      setState(prev => ({ ...prev, thresholds }));\n    },\n    [state.thresholds]\n  );\n\n  // Remove threshold\n  const removeThreshold = useCallback(\n    (type: ResourceType) => {\n      const thresholds = new Map(state.thresholds);\n      thresholds.set(type, []);\n      setState(prev => ({ ...prev, thresholds }));\n    },\n    [state.thresholds]\n  );\n\n  // Get resource\n  const getResource = useCallback(\n    (type: ResourceType) => {\n      return state.resources.get(type);\n    },\n    [state.resources]\n  );\n\n  // Get history by type\n  const getHistoryByType = useCallback(\n    (type: ResourceType) => {\n      return state.history.filter(item => item.type === type);\n    },\n    [state.history]\n  );\n\n  // Clear history\n  const clearHistory = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      history: [],\n    }));\n  }, []);\n\n  // Get alerts by type\n  const getAlertsByType = useCallback(\n    (type: ResourceType) => {\n      return state.alerts.filter(alert => alert.type === type);\n    },\n    [state.alerts]\n  );\n\n  // Clear alerts\n  const clearAlerts = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      alerts: [],\n    }));\n  }, []);\n\n  // Dismiss alert\n  const dismissAlert = useCallback((id: string) => {\n    setState(prev => ({\n      ...prev,\n      alerts: prev.alerts.filter(alert => alert.id !== id),\n    }));\n  }, []);\n\n  // Get total resources\n  const getTotalResources = useCallback(() => {\n    let total = 0;\n\n    // Convert Map entries to array to avoid MapIterator error\n    const resourceValues = Array.from(state.resources.values());\n    for (const resource of resourceValues) {\n      total += resource.current;\n    }\n\n    return total;\n  }, [state.resources]);\n\n  // Get resource percentage\n  const getResourcePercentage = useCallback(\n    (type: ResourceType) => {\n      const resource = state.resources.get(type);\n      if (!resource) {\n        return 0;\n      }\n\n      return (resource.current / resource.max) * 100;\n    },\n    [state.resources]\n  );\n\n  // Get resources above threshold\n  const getResourcesAboveThreshold = useCallback(\n    (percentage: number) => {\n      const result: ResourceType[] = [];\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(state.resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        const resourcePercentage = (resource.current / resource.max) * 100;\n\n        if (resourcePercentage >= percentage) {\n          result.push(type);\n        }\n      }\n\n      return result;\n    },\n    [state.resources]\n  );\n\n  // Get resources below threshold\n  const getResourcesBelowThreshold = useCallback(\n    (percentage: number) => {\n      const result: ResourceType[] = [];\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(state.resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        const resourcePercentage = (resource.current / resource.max) * 100;\n\n        if (resourcePercentage <= percentage) {\n          result.push(type);\n        }\n      }\n\n      return result;\n    },\n    [state.resources]\n  );\n\n  // Create resource list\n  const resourceList = useMemo(() => {\n    return Array.from(state.resources.entries()).map(([type, state]) => ({\n      type,\n      state,\n    }));\n  }, [state.resources]);\n\n  // Calculate resource totals\n  const calculateTotals = useCallback(\n    (resources: Map<ResourceType, ResourceState>): ResourceTotals => {\n      const totals: ResourceTotals = {\n        production: 0,\n        consumption: 0,\n        net: 0,\n        amounts: {} as Record<ResourceType, number>,\n        capacities: {} as Record<ResourceType, number>,\n        rates: {} as Record<ResourceType, number>,\n      };\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        totals.production += resource.production;\n        totals.consumption += resource.consumption;\n\n        if (totals.amounts) {\n          totals.amounts[type] = resource.current;\n        }\n\n        if (totals.capacities) {\n          totals.capacities[type] = resource.max;\n        }\n\n        if (totals.rates) {\n          totals.rates[type] = resource.production - resource.consumption;\n        }\n      }\n\n      totals.net = totals.production - totals.consumption;\n      return totals;\n    },\n    []\n  );\n\n  // Calculate resource percentages\n  const calculatePercentages = useCallback(\n    (resources: Map<ResourceType, ResourceState>): Record<ResourceType, number> => {\n      const percentages: Record<ResourceType, number> = {} as Record<ResourceType, number>;\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        if (resource.max > 0) {\n          percentages[type] = (resource.current / resource.max) * 100;\n        } else {\n          percentages[type] = 0;\n        }\n      }\n\n      return percentages;\n    },\n    []\n  );\n\n  return {\n    // Resource states\n    resources: state.resources,\n    resourceList,\n    getResource,\n\n    // Resource history\n    history: state.history,\n    getHistoryByType,\n    clearHistory,\n\n    // Resource alerts\n    alerts: state.alerts,\n    getAlertsByType,\n    clearAlerts,\n    dismissAlert,\n\n    // Resource thresholds\n    setThreshold,\n    removeThreshold,\n\n    // Resource updates\n    updateResource,\n    incrementResource,\n    decrementResource,\n    transferResource,\n\n    // Utility functions\n    getTotalResources,\n    getResourcePercentage,\n    getResourcesAboveThreshold,\n    getResourcesBelowThreshold,\n\n    // Metadata\n    lastUpdated: state.lastUpdated,\n    isLoading,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ships/useShipActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ships/useShipClassManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ships/useShipEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useDebugOverlay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useTooltip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useVPR.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":37,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[977,1031],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface AnimationSet {\n  idle: string;\n  active: string;\n  impact: string;\n}\n\nexport function useVPR() {\n  const getVPRAnimationSet = (type: string, tier: number): AnimationSet => {\n    // Base animations\n    const baseSet: AnimationSet = {\n      idle: 'animate-pulse',\n      active: 'animate-float',\n      impact: 'animate-impact',\n    };\n\n    // Enhance animations based on tier\n    switch (tier) {\n      case 2:\n        return {\n          idle: `${baseSet.idle} opacity-80`,\n          active: `${baseSet.active} scale-110`,\n          impact: `${baseSet.impact} duration-700`,\n        };\n      case 3:\n        return {\n          idle: `${baseSet.idle} opacity-90 scale-110`,\n          active: `${baseSet.active} scale-125`,\n          impact: `${baseSet.impact} duration-500`,\n        };\n      default:\n        return baseSet;\n    }\n  };\n\n  const updateVPR = (elementId: string, newState: any) => {\n    // This would be used to update VPR state in a real implementation\n    console.log('Updating VPR for:', elementId, newState);\n  };\n\n  return {\n    getVPRAnimationSet,\n    updateVPR,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useVPRInteractivity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useVPRSystem.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[842,845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[842,845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { useScalingSystem } from '../game/useScalingSystem';\n\ninterface VPRSystemState {\n  modules: {\n    id: string;\n    type: 'mothership' | 'colony' | 'planet' | 'exploration' | 'mining';\n    tier: 1 | 2 | 3;\n    status: 'active' | 'upgrading' | 'disabled';\n    progress?: number;\n  }[];\n  upgrades: {\n    moduleId: string;\n    fromTier: 1 | 2;\n    toTier: 2 | 3;\n    progress: number;\n  }[];\n  alerts: {\n    moduleId: string;\n    type: 'warning' | 'info';\n    message: string;\n  }[];\n}\n\nexport function useVPRSystem() {\n  const [systemState, setSystemState] = useState<VPRSystemState>({\n    modules: [],\n    upgrades: [],\n    alerts: [],\n  });\n\n  const scaling = useScalingSystem();\n\n  // Memoized update handlers\n  const handleModuleUpdate = useCallback((moduleId: string, data: any) => {\n    setSystemState(prev => ({\n      ...prev,\n      modules: prev.modules.map(mod => (mod.id === moduleId ? { ...mod, ...data } : mod)),\n    }));\n  }, []);\n\n  const handleUpgradeProgress = useCallback((moduleId: string, progress: number) => {\n    setSystemState(prev => ({\n      ...prev,\n      upgrades: prev.upgrades.map(upgrade =>\n        upgrade.moduleId === moduleId ? { ...upgrade, progress } : upgrade\n      ),\n    }));\n  }, []);\n\n  // Alert management\n  const addAlert = useCallback((moduleId: string, type: 'warning' | 'info', message: string) => {\n    setSystemState(prev => ({\n      ...prev,\n      alerts: [...prev.alerts, { moduleId, type, message }],\n    }));\n  }, []);\n\n  const clearAlert = useCallback((moduleId: string) => {\n    setSystemState(prev => ({\n      ...prev,\n      alerts: prev.alerts.filter(alert => alert.moduleId !== moduleId),\n    }));\n  }, []);\n\n  // Performance optimization\n  useEffect(() => {\n    const updateInterval = scaling.performance.fps > 30 ? 16 : 32;\n\n    const interval = setInterval(() => {\n      setSystemState(prev => {\n        // Update upgrade progress\n        const updatedUpgrades = prev.upgrades.map(upgrade => ({\n          ...upgrade,\n          progress: Math.min(1, upgrade.progress + 0.01),\n        }));\n\n        // Remove completed upgrades\n        const completedUpgrades = updatedUpgrades.filter(u => u.progress >= 1);\n        const activeUpgrades = updatedUpgrades.filter(u => u.progress < 1);\n\n        // Update module tiers for completed upgrades\n        const updatedModules = prev.modules.map(mod => {\n          const completedUpgrade = completedUpgrades.find(u => u.moduleId === mod.id);\n          if (completedUpgrade) {\n            return {\n              ...mod,\n              tier: completedUpgrade.toTier,\n              status: 'active' as const,\n            };\n          }\n          return mod;\n        });\n\n        return {\n          ...prev,\n          modules: updatedModules,\n          upgrades: activeUpgrades,\n        };\n      });\n    }, updateInterval);\n\n    return () => clearInterval(interval);\n  }, [scaling.performance.fps]);\n\n  // Error boundary fallback\n  const handleError = useCallback((error: Error, moduleId: string) => {\n    console.error(`VPR System Error in module ${moduleId}:`, error);\n\n    setSystemState(prev => ({\n      ...prev,\n      modules: prev.modules.map(mod =>\n        mod.id === moduleId ? { ...mod, status: 'disabled' } : mod\n      ),\n      alerts: [\n        ...prev.alerts,\n        {\n          moduleId,\n          type: 'warning',\n          message: 'Module encountered an error and has been disabled',\n        },\n      ],\n    }));\n  }, []);\n\n  return {\n    systemState,\n    handleModuleUpdate,\n    handleUpgradeProgress,\n    addAlert,\n    clearAlert,\n    handleError,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/useGameState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/automationSystemInit.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":10,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":10,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[417,466],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[563,566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[563,566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":35,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1134,1182],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2659,2662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2659,2662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3437,3440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3437,3440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4215,4218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4215,4218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":162,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":162,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4551,4605],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../lib/modules/ModuleEvents';\nimport { globalAutomationManager } from '../managers/automation/GlobalAutomationManager';\nimport { automationManager } from '../managers/game/AutomationManager';\nimport { MessagePriority } from '../utils/events/EventCommunication';\n\n/**\n * Initialize the automation system\n */\nexport function initializeAutomationSystem(): () => void {\n  console.log('Initializing Automation System...');\n\n  // Set the automation manager in the global automation manager\n  (globalAutomationManager as any).automationManager = automationManager;\n\n  // Initialize the global automation manager\n  globalAutomationManager.initialize();\n\n  // Register default routines\n  registerDefaultRoutines();\n\n  // Emit initialization event\n  moduleEventBus.emit({\n    type: 'AUTOMATION_STARTED' as ModuleEventType,\n    moduleId: 'automation-system',\n    moduleType: 'resource-manager',\n    timestamp: Date.now(),\n    data: {\n      status: 'initialized',\n      routineCount: globalAutomationManager.getAllRoutines().length,\n    },\n  });\n\n  // Return cleanup function\n  return () => {\n    console.log('Cleaning up Automation System...');\n\n    // Clean up global automation manager\n    globalAutomationManager.cleanup();\n  };\n}\n\n/**\n * Register default automation routines\n */\nfunction registerDefaultRoutines(): void {\n  // Register resource balancing routine\n  globalAutomationManager.registerRoutine({\n    id: 'default-resource-balancing',\n    name: 'Resource Balancing',\n    type: 'resource-balancing',\n    description: 'Automatically balances resources between systems',\n    enabled: true,\n    priority: MessagePriority.NORMAL,\n    interval: 300000, // 5 minutes\n    conditions: [\n      {\n        type: 'RESOURCE_BELOW',\n        target: 'energy',\n        value: 100,\n      },\n    ],\n    actions: [\n      {\n        type: 'TRANSFER_RESOURCES',\n        target: 'resource-system',\n        value: {\n          from: 'global-storage',\n          to: 'energy-system',\n          amount: 50,\n          type: 'energy',\n        },\n      },\n    ],\n    systems: ['resource-system', 'module-system'],\n    tags: ['resource', 'balancing', 'energy'],\n  });\n\n  // Register performance optimization routine\n  globalAutomationManager.registerRoutine({\n    id: 'default-performance-optimization',\n    name: 'Performance Optimization',\n    type: 'performance-optimization',\n    description: 'Optimizes system performance periodically',\n    enabled: true,\n    priority: MessagePriority.LOW,\n    interval: 1800000, // 30 minutes\n    conditions: [],\n    actions: [\n      {\n        type: 'EMIT_EVENT',\n        target: 'STATUS_CHANGED' as any,\n        value: {\n          moduleId: 'performance-optimizer',\n          moduleType: 'resource-manager',\n          data: {\n            status: 'optimizing',\n            target: 'all',\n          },\n        },\n      },\n    ],\n    systems: ['resource-system', 'module-system', 'game-loop'],\n    tags: ['performance', 'optimization'],\n  });\n\n  // Register emergency response routine\n  globalAutomationManager.registerRoutine({\n    id: 'default-emergency-response',\n    name: 'Error Recovery',\n    type: 'emergency-response',\n    description: 'Responds to critical system errors',\n    enabled: true,\n    priority: MessagePriority.CRITICAL,\n    interval: 0, // Event-based\n    conditions: [],\n    actions: [\n      {\n        type: 'EMIT_EVENT',\n        target: 'STATUS_CHANGED' as any,\n        value: {\n          moduleId: 'error-recovery',\n          moduleType: 'resource-manager',\n          data: {\n            status: 'recovering',\n            target: 'all',\n          },\n        },\n      },\n    ],\n    systems: ['resource-system', 'module-system', 'event-system'],\n    tags: ['emergency', 'error', 'recovery'],\n  });\n\n  // Register system maintenance routine\n  globalAutomationManager.registerRoutine({\n    id: 'default-system-maintenance',\n    name: 'System Maintenance',\n    type: 'system-maintenance',\n    description: 'Performs regular system maintenance',\n    enabled: true,\n    priority: MessagePriority.LOW,\n    interval: 3600000, // 1 hour\n    conditions: [],\n    actions: [\n      {\n        type: 'EMIT_EVENT',\n        target: 'STATUS_CHANGED' as any,\n        value: {\n          moduleId: 'system-maintenance',\n          moduleType: 'resource-manager',\n          data: {\n            status: 'maintaining',\n            target: 'all',\n          },\n        },\n      },\n    ],\n    systems: ['resource-system', 'module-system', 'game-loop'],\n    tags: ['maintenance', 'system'],\n  });\n\n  console.log('Registered default automation routines');\n}\n\n/**\n * Initialize the complete automation system\n */\nexport function initializeCompleteAutomationSystem(): () => void {\n  return initializeAutomationSystem();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/eventSystemInit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[666,669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[666,669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":20,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":20,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[769,813],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resourceSystemComm' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'moduleSystemComm' is assigned a value but never used.","line":28,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1281,1359],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is defined but never used.","line":41,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'elapsedTime' is defined but never used.","line":41,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is defined but never used.","line":50,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'elapsedTime' is defined but never used.","line":50,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":74,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2507,2550],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":95,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":95,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3001,3054],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":99,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":99,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3186,3233],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":116,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3630,3682],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus, ModuleEventType } from '../lib/modules/ModuleEvents';\nimport { gameLoopManager, UpdatePriority } from '../managers/game/GameLoopManager';\nimport { getSystemCommunication } from '../utils/events/EventCommunication';\nimport { EventPriorityQueue } from '../utils/events/EventFiltering';\nimport { initializeRxJSIntegration } from '../utils/events/rxjsIntegration';\nimport { initializeAutomationSystem } from './automationSystemInit';\nimport { integrateWithGameSystems } from './gameSystemsIntegration';\n\n// Define an interface for our priority queue events\ninterface PriorityQueueEvent {\n  type: string;\n  priority: number;\n  data: any;\n}\n\n/**\n * Initialize the event system\n */\nexport function initializeEventSystem(): () => void {\n  console.log('Initializing Event System...');\n\n  // Initialize RxJS integration\n  const rxjsCleanup = initializeRxJSIntegration();\n\n  // Initialize system communications\n  const eventSystemComm = getSystemCommunication('event-system');\n  const resourceSystemComm = getSystemCommunication('resource-system');\n  const moduleSystemComm = getSystemCommunication('module-system');\n\n  // Register basic event handlers\n  const unregisterSystemStartup = eventSystemComm.registerHandler('system-startup', message => {\n    console.log(`System startup message received: ${message.payload.systemName}`);\n  });\n\n  // Start the game loop\n  gameLoopManager.start();\n\n  // Register a critical update with the game loop\n  gameLoopManager.registerUpdate(\n    'event-system-critical',\n    (deltaTime: number, elapsedTime: number) => {\n      // Process critical events\n    },\n    UpdatePriority.CRITICAL\n  );\n\n  // Register a normal update with the game loop\n  gameLoopManager.registerUpdate(\n    'event-system-normal',\n    (deltaTime: number, elapsedTime: number) => {\n      // Process normal events\n    },\n    UpdatePriority.NORMAL\n  );\n\n  // Create a test event to verify the system is working\n  setTimeout(() => {\n    moduleEventBus.emit({\n      type: 'MODULE_CREATED' as ModuleEventType, // Use a valid ModuleEventType\n      moduleId: 'event-system',\n      moduleType: 'resource-manager', // Use a valid ModuleType\n      timestamp: Date.now(),\n      data: { system: 'event-system', status: 'initialized' },\n    });\n\n    // Send a test message through system communication\n    eventSystemComm.sendMessage('resource-system', 'test-message', {\n      message: 'Hello from Event System!',\n    });\n  }, 100);\n\n  // Return cleanup function\n  return () => {\n    console.log('Cleaning up Event System...');\n\n    // Unregister game loop updates\n    gameLoopManager.unregisterUpdate('event-system-critical');\n    gameLoopManager.unregisterUpdate('event-system-normal');\n\n    // Unregister event handlers\n    unregisterSystemStartup();\n\n    // Stop the game loop\n    gameLoopManager.stop();\n\n    // Clean up RxJS integration\n    rxjsCleanup();\n  };\n}\n\n/**\n * Initialize global event handlers\n */\nexport function initializeGlobalEventHandlers(): () => void {\n  console.log('Initializing Global Event Handlers...');\n\n  // Create a priority queue for processing events\n  const eventQueue = new EventPriorityQueue<PriorityQueueEvent>(event => {\n    console.log(`Processing event: ${event.type}`);\n    // Process the event based on its type\n    return Promise.resolve();\n  });\n\n  // Subscribe to all module events\n  const unsubscribe = subscribeToAllEvents(event => {\n    // Enqueue the event for processing\n    eventQueue.enqueue({\n      type: event.type,\n      priority: getPriorityForEventType(event.type),\n      data: event,\n    });\n  });\n\n  // Return cleanup function\n  return () => {\n    console.log('Cleaning up Global Event Handlers...');\n\n    // Unsubscribe from all events\n    unsubscribe();\n\n    // Clear the event queue\n    eventQueue.clear();\n  };\n}\n\n/**\n * Helper function to subscribe to all event types\n */\nfunction subscribeToAllEvents(callback: (event: ModuleEvent) => void): () => void {\n  // List of all event types we want to subscribe to\n  const eventTypes: ModuleEventType[] = [\n    'MODULE_CREATED',\n    'MODULE_UPDATED',\n    'MODULE_ATTACHED',\n    'MODULE_DETACHED',\n    'RESOURCE_PRODUCED',\n    'RESOURCE_CONSUMED',\n    'RESOURCE_TRANSFERRED',\n    'STATUS_CHANGED',\n    'ERROR_OCCURRED',\n  ] as ModuleEventType[];\n\n  // Subscribe to each event type\n  const unsubscribers = eventTypes.map(type => moduleEventBus.subscribe(type, callback));\n\n  // Return a function that unsubscribes from all\n  return () => {\n    unsubscribers.forEach(unsubscribe => unsubscribe());\n  };\n}\n\n/**\n * Get priority for an event type\n */\nfunction getPriorityForEventType(type: string): number {\n  // Define priorities for different event types\n  switch (type) {\n    case 'ERROR_OCCURRED':\n      return 0; // CRITICAL\n\n    case 'RESOURCE_SHORTAGE':\n    case 'MODULE_DETACHED':\n      return 1; // HIGH\n\n    case 'MODULE_CREATED':\n    case 'MODULE_ATTACHED':\n    case 'RESOURCE_PRODUCED':\n    case 'RESOURCE_CONSUMED':\n      return 2; // NORMAL\n\n    case 'STATUS_CHANGED':\n    case 'AUTOMATION_CYCLE_COMPLETE':\n      return 3; // LOW\n\n    case 'MISSION_PROGRESS_UPDATED':\n      return 4; // BACKGROUND\n\n    default:\n      return 2; // Default to NORMAL priority\n  }\n}\n\n/**\n * Initialize the entire event system\n */\nexport function initializeCompleteEventSystem(): () => void {\n  // Initialize all components\n  const eventSystemCleanup = initializeEventSystem();\n  const globalHandlersCleanup = initializeGlobalEventHandlers();\n  const automationSystemCleanup = initializeAutomationSystem();\n  const gameSystemsIntegrationCleanup = integrateWithGameSystems();\n\n  // Return combined cleanup function\n  return () => {\n    gameSystemsIntegrationCleanup();\n    automationSystemCleanup();\n    globalHandlersCleanup();\n    eventSystemCleanup();\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/gameSystemsIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":231,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../lib/modules/ModuleEvents';\nimport { CombatManager } from '../managers/combat/combatManager';\nimport { gameLoopManager, UpdatePriority } from '../managers/game/GameLoopManager';\nimport { ResourceManager } from '../managers/game/ResourceManager';\nimport { techTreeManager } from '../managers/game/techTreeManager';\nimport { MiningResourceIntegration } from '../managers/mining/MiningResourceIntegration';\nimport { MiningShipManagerImpl } from '../managers/mining/MiningShipManagerImpl';\nimport { ResourceCostManager } from '../managers/resource/ResourceCostManager';\nimport { ResourceExchangeManager } from '../managers/resource/ResourceExchangeManager';\nimport { ResourceFlowManager } from '../managers/resource/ResourceFlowManager';\nimport { ResourceIntegration } from '../managers/resource/ResourceIntegration';\nimport { ResourcePoolManager } from '../managers/resource/ResourcePoolManager';\nimport { ResourceStorageManager } from '../managers/resource/ResourceStorageManager';\nimport { ResourceThresholdManager } from '../managers/resource/ResourceThresholdManager';\nimport { ModuleType } from '../types/buildings/ModuleTypes';\nimport { getSystemCommunication } from '../utils/events/EventCommunication';\nimport { EventPriorityQueue } from '../utils/events/EventFiltering';\n\n// Define types for message payloads\ninterface ResourceUpdatePayload {\n  resourceType: string;\n  [key: string]: unknown;\n}\n\ninterface MiningUpdatePayload {\n  shipId: string;\n  [key: string]: unknown;\n}\n\ninterface CombatUpdatePayload {\n  type: string;\n  [key: string]: unknown;\n}\n\ninterface TechUpdatePayload {\n  nodeId: string;\n  node?: {\n    category: string;\n    [key: string]: unknown;\n  };\n  [key: string]: unknown;\n}\n\n/**\n * Integrates the event system with existing game systems\n */\nexport function integrateWithGameSystems(): () => void {\n  console.warn('Integrating Event System with Game Systems...');\n\n  // Get system communications\n  const resourceSystemComm = getSystemCommunication('resource-system');\n  const miningSystemComm = getSystemCommunication('mining-system');\n  const combatSystemComm = getSystemCommunication('combat-system');\n  const techSystemComm = getSystemCommunication('tech-system');\n\n  // Initialize cleanup functions array\n  const cleanupFunctions: Array<() => void> = [];\n\n  // ===== Resource System Integration =====\n\n  // Get resource system instances\n  const resourceManager = (window as unknown as { resourceManager?: ResourceManager })\n    .resourceManager;\n  const thresholdManager = (window as unknown as { thresholdManager?: ResourceThresholdManager })\n    .thresholdManager;\n  const flowManager = (window as unknown as { flowManager?: ResourceFlowManager }).flowManager;\n  const storageManager = (window as unknown as { storageManager?: ResourceStorageManager })\n    .storageManager;\n  const costManager = (window as unknown as { costManager?: ResourceCostManager }).costManager;\n  const exchangeManager = (window as unknown as { exchangeManager?: ResourceExchangeManager })\n    .exchangeManager;\n  const poolManager = (window as unknown as { poolManager?: ResourcePoolManager }).poolManager;\n\n  if (resourceManager) {\n    // Make sure all required managers are available\n    if (\n      thresholdManager &&\n      flowManager &&\n      storageManager &&\n      costManager &&\n      exchangeManager &&\n      poolManager\n    ) {\n      // Create resource integration\n      const resourceIntegration = new ResourceIntegration(\n        resourceManager,\n        thresholdManager,\n        flowManager,\n        storageManager,\n        costManager,\n        exchangeManager,\n        poolManager\n      );\n\n      // Initialize resource integration\n      resourceIntegration.initialize();\n\n      // Register resource system event handlers\n      const unregisterResourceHandler = resourceSystemComm.registerHandler(\n        'resource-update',\n        (message: { payload: ResourceUpdatePayload }) => {\n          try {\n            console.warn(`Resource update message received: ${message.payload.resourceType}`);\n\n            // Emit resource event\n            moduleEventBus.emit({\n              type: 'RESOURCE_UPDATED' as ModuleEventType,\n              moduleId: 'resource-system',\n              moduleType: 'resource-manager' as ModuleType,\n              timestamp: Date.now(),\n              data: message.payload,\n            });\n          } catch (error) {\n            console.error('Error handling resource update:', error);\n          }\n        }\n      );\n\n      // Add cleanup function\n      cleanupFunctions.push(() => {\n        unregisterResourceHandler();\n        // Additional resource system cleanup if needed\n      });\n\n      console.warn('Resource System integrated with Event System');\n    } else {\n      console.warn('Some resource managers are missing, skipping resource integration');\n    }\n  }\n\n  // ===== Mining System Integration =====\n\n  // Get mining system instance\n  const miningManager = (window as unknown as { miningManager?: MiningShipManagerImpl })\n    .miningManager;\n\n  if (miningManager && thresholdManager && flowManager) {\n    // Create mining resource integration\n    const miningResourceIntegration = new MiningResourceIntegration(\n      miningManager,\n      thresholdManager,\n      flowManager\n    );\n\n    // Initialize mining resource integration\n    miningResourceIntegration.initialize();\n\n    // Register mining system event handlers\n    const unregisterMiningHandler = miningSystemComm.registerHandler(\n      'mining-update',\n      (message: { payload: MiningUpdatePayload }) => {\n        try {\n          console.warn(`Mining update message received: ${message.payload.shipId}`);\n\n          // Emit mining event\n          moduleEventBus.emit({\n            type: 'MODULE_UPDATED' as ModuleEventType,\n            moduleId: message.payload.shipId,\n            moduleType: 'mineral' as ModuleType, // Using a valid ModuleType for mining\n            timestamp: Date.now(),\n            data: message.payload,\n          });\n        } catch (error) {\n          console.error('Error handling mining update:', error);\n        }\n      }\n    );\n\n    // Add cleanup function\n    cleanupFunctions.push(() => {\n      unregisterMiningHandler();\n      // Additional mining system cleanup if needed\n    });\n\n    console.warn('Mining System integrated with Event System');\n  }\n\n  // ===== Combat System Integration =====\n\n  // Get combat system instance\n  const combatManager = (window as unknown as { combatManager?: CombatManager }).combatManager;\n\n  if (combatManager) {\n    // Create a priority queue for combat events\n    const combatEventQueue = new EventPriorityQueue<{\n      type: string;\n      priority: number;\n      data: unknown;\n    }>(event => {\n      try {\n        console.warn(`Processing combat event: ${event.type}`);\n        // Process the combat event\n        return Promise.resolve();\n      } catch (error) {\n        console.error('Error processing combat event:', error);\n        return Promise.resolve();\n      }\n    });\n\n    // Register combat system event handlers\n    const unregisterCombatHandler = combatSystemComm.registerHandler(\n      'combat-update',\n      (message: { payload: CombatUpdatePayload }) => {\n        try {\n          console.warn(`Combat update message received: ${message.payload.type}`);\n\n          // Enqueue combat event with appropriate priority\n          combatEventQueue.enqueue({\n            type: message.payload.type,\n            priority: getCombatEventPriority(message.payload.type),\n            data: message.payload,\n          });\n\n          // Emit combat event\n          moduleEventBus.emit({\n            type: 'COMBAT_UPDATED' as ModuleEventType,\n            moduleId: 'combat-system',\n            moduleType: 'defense' as ModuleType, // Using a valid ModuleType for combat\n            timestamp: Date.now(),\n            data: message.payload,\n          });\n        } catch (error) {\n          console.error('Error handling combat update:', error);\n        }\n      }\n    );\n\n    // Register game loop update for combat event processing\n    gameLoopManager.registerUpdate(\n      'combat-event-processing',\n      (_: number) => {\n        try {\n          // Process combat events based on priority\n          // We can't directly access the private methods, so we'll just let the queue\n          // process events on its own (it does this automatically when events are enqueued)\n          // The queue will use the processor function we provided in the constructor\n        } catch (error) {\n          console.error('Error in combat event processing:', error);\n        }\n      },\n      UpdatePriority.HIGH\n    );\n\n    // Add cleanup function\n    cleanupFunctions.push(() => {\n      unregisterCombatHandler();\n      gameLoopManager.unregisterUpdate('combat-event-processing');\n      combatEventQueue.clear();\n      // Additional combat system cleanup if needed\n    });\n\n    console.warn('Combat System integrated with Event System');\n  }\n\n  // ===== Tech Tree System Integration =====\n\n  if (techTreeManager) {\n    // Subscribe to tech tree events\n    const techUnlockedListener = (data: TechUpdatePayload) => {\n      try {\n        console.warn(`Tech node unlocked: ${data.nodeId}`);\n\n        // Emit tech unlocked event\n        moduleEventBus.emit({\n          type: 'TECH_UNLOCKED' as ModuleEventType,\n          moduleId: 'tech-system',\n          moduleType: 'research' as ModuleType, // Using a valid ModuleType for tech\n          timestamp: Date.now(),\n          data: {\n            nodeId: data.nodeId,\n            node: data.node,\n          },\n        });\n\n        // Send message to other systems\n        techSystemComm.sendMessage('resource-system', 'tech-unlocked', {\n          nodeId: data.nodeId,\n          category: data.node?.category,\n        });\n\n        // If it's a combat tech, notify combat system\n        if (\n          data.node?.category &&\n          ['warFleet', 'weapons', 'defense'].includes(data.node.category)\n        ) {\n          techSystemComm.sendMessage('combat-system', 'tech-unlocked', {\n            nodeId: data.nodeId,\n            category: data.node.category,\n          });\n        }\n\n        // If it's a mining tech, notify mining system\n        if (data.node?.category && ['miningFleet'].includes(data.node.category)) {\n          techSystemComm.sendMessage('mining-system', 'tech-unlocked', {\n            nodeId: data.nodeId,\n            category: data.node.category,\n          });\n        }\n      } catch (error) {\n        console.error('Error handling tech unlocked event:', error);\n      }\n    };\n\n    // Register the listener\n    techTreeManager.on('nodeUnlocked', techUnlockedListener);\n\n    // Register tech system event handlers\n    const unregisterTechHandler = techSystemComm.registerHandler(\n      'tech-update',\n      (message: { payload: TechUpdatePayload }) => {\n        try {\n          console.warn(`Tech update message received: ${message.payload.nodeId}`);\n\n          // Emit tech event\n          moduleEventBus.emit({\n            type: 'TECH_UPDATED' as ModuleEventType,\n            moduleId: 'tech-system',\n            moduleType: 'research' as ModuleType, // Using a valid ModuleType for tech\n            timestamp: Date.now(),\n            data: message.payload,\n          });\n        } catch (error) {\n          console.error('Error handling tech update:', error);\n        }\n      }\n    );\n\n    // Add cleanup function\n    cleanupFunctions.push(() => {\n      techTreeManager.off('nodeUnlocked', techUnlockedListener);\n      unregisterTechHandler();\n      // Additional tech system cleanup if needed\n    });\n\n    console.warn('Tech Tree System integrated with Event System');\n  }\n\n  // Return combined cleanup function\n  return () => {\n    console.warn('Cleaning up Game Systems Integration...');\n\n    // Execute all cleanup functions\n    cleanupFunctions.forEach(cleanup => {\n      try {\n        cleanup();\n      } catch (error) {\n        console.error('Error during cleanup:', error);\n      }\n    });\n  };\n}\n\n/**\n * Get priority for a combat event type\n */\nfunction getCombatEventPriority(type: string): number {\n  // Define priorities for different combat event types\n  switch (type) {\n    case 'unit-destroyed':\n    case 'critical-damage':\n      return 0; // CRITICAL\n\n    case 'unit-under-attack':\n    case 'zone-under-attack':\n      return 1; // HIGH\n\n    case 'unit-moved':\n    case 'weapon-fired':\n      return 2; // NORMAL\n\n    case 'unit-status-changed':\n    case 'zone-status-changed':\n      return 3; // LOW\n\n    case 'combat-stats-updated':\n      return 4; // BACKGROUND\n\n    default:\n      return 2; // Default to NORMAL priority\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/moduleFrameworkInit.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":13,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[626,689],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":27,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":27,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1010,1085],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1839,1842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1839,1842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2952,2955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2952,2955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5521,5524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5521,5524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6191,6194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6191,6194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7492,7495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7492,7495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeModuleUpgradePaths } from '../config/modules/upgradePathsConfig';\nimport { moduleEventBus, ModuleEventType } from '../lib/modules/ModuleEvents';\nimport { resourceManager } from '../managers/game/ResourceManager';\nimport { moduleManager } from '../managers/module/ModuleManager';\nimport { moduleStatusManager } from '../managers/module/ModuleStatusManager';\nimport { moduleUpgradeManager } from '../managers/module/ModuleUpgradeManager';\nimport { subModuleManager } from '../managers/module/SubModuleManager';\n\n/**\n * Initialize the module framework\n */\nexport function initializeModuleFramework(): void {\n  console.log('[Initialization] Setting up module framework...');\n\n  // Register event handlers for resource integration\n  registerResourceIntegration();\n\n  // Initialize module upgrade system\n  initializeModuleUpgradePaths(moduleUpgradeManager);\n\n  // Initialize module status tracking\n  initializeStatusTracking();\n\n  // Initialize sub-module system\n  initializeSubModuleSystem();\n\n  console.log('[Initialization] Module framework initialized successfully.');\n}\n\n/**\n * Register event handlers for resource integration\n */\nfunction registerResourceIntegration(): void {\n  // Handle module activation/deactivation for resource consumption\n  moduleEventBus.subscribe('MODULE_ACTIVATED' as ModuleEventType, event => {\n    const module = moduleManager.getModule(event.moduleId);\n    if (!module) {\n      return;\n    }\n\n    // Get module config\n    const configs = getModuleConfigs();\n    const config = configs[module.type];\n    if (!config || !config.resourceConsumption) {\n      return;\n    }\n\n    // Register resource consumption\n    for (const [resourceType, amount] of Object.entries(config.resourceConsumption)) {\n      resourceManager.registerConsumption(`module-${module.id}`, {\n        type: resourceType as any,\n        amount: amount as number,\n        interval: 60000, // 1 minute\n        required: false,\n      });\n    }\n  });\n\n  moduleEventBus.subscribe('MODULE_DEACTIVATED' as ModuleEventType, event => {\n    // Remove resource consumption\n    resourceManager.unregisterConsumption(`module-${event.moduleId}`);\n  });\n\n  // Handle module upgrades for resource production boosts\n  moduleEventBus.subscribe('MODULE_UPGRADED' as ModuleEventType, event => {\n    const module = moduleManager.getModule(event.moduleId);\n    if (!module) {\n      return;\n    }\n\n    // Get module config\n    const configs = getModuleConfigs();\n    const config = configs[module.type];\n    if (!config || !config.resourceProduction) {\n      return;\n    }\n\n    // Update resource production based on level\n    for (const [resourceType, baseAmount] of Object.entries(config.resourceProduction)) {\n      const levelMultiplier = 1 + (module.level - 1) * 0.25; // 25% increase per level\n      const amount = (baseAmount as number) * levelMultiplier;\n\n      resourceManager.registerProduction(`module-${module.id}`, {\n        type: resourceType as any,\n        amount: amount,\n        interval: 60000, // 1 minute\n      });\n    }\n  });\n}\n\n/**\n * Initialize module status tracking\n */\nfunction initializeStatusTracking(): void {\n  // Set up periodic status updates\n  setInterval(() => {\n    // Get all modules\n    const modules = Array.from(moduleManager.getActiveModules());\n\n    // Update metrics for each module\n    for (const module of modules) {\n      // Use updateModuleStatus instead of updateMetrics\n      moduleStatusManager.updateModuleStatus(module.id, module.status, 'Periodic update');\n    }\n  }, 60000); // Update every minute\n\n  // Handle resource threshold events for module status\n  moduleEventBus.subscribe('RESOURCE_THRESHOLD_TRIGGERED' as ModuleEventType, event => {\n    if (event.data.thresholdType !== 'min') {\n      return;\n    }\n\n    // Get modules that consume this resource\n    const modules = Array.from(moduleManager.getActiveModules());\n    const affectedModules = modules.filter(module => {\n      const configs = getModuleConfigs();\n      const config = configs[module.type];\n      return (\n        config && config.resourceConsumption && config.resourceConsumption[event.data.resourceType]\n      );\n    });\n\n    // Update status for affected modules\n    for (const module of affectedModules) {\n      moduleStatusManager.updateModuleStatus(\n        module.id,\n        'degraded',\n        `Low ${event.data.resourceType} supply`\n      );\n    }\n  });\n\n  // Handle resource threshold resolution\n  moduleEventBus.subscribe('RESOURCE_THRESHOLD_RESOLVED' as ModuleEventType, event => {\n    if (event.data.thresholdType !== 'min') {\n      return;\n    }\n\n    // Get modules that consume this resource\n    const modules = Array.from(moduleManager.getActiveModules());\n    const affectedModules = modules.filter(module => {\n      const configs = getModuleConfigs();\n      const config = configs[module.type];\n      return (\n        config && config.resourceConsumption && config.resourceConsumption[event.data.resourceType]\n      );\n    });\n\n    // Update status for affected modules\n    for (const module of affectedModules) {\n      moduleStatusManager.updateModuleStatus(\n        module.id,\n        'active',\n        `${event.data.resourceType} supply restored`\n      );\n    }\n  });\n}\n\n/**\n * Initialize sub-module system\n */\nfunction initializeSubModuleSystem(): void {\n  // Register sub-module configurations\n  const subModuleConfigs = getSubModuleConfigs();\n\n  for (const [type, config] of Object.entries(subModuleConfigs)) {\n    subModuleManager.registerSubModuleConfig({\n      type: type as any,\n      name: config.name,\n      description: config.description,\n      requirements: {\n        parentModuleLevel: 1,\n        parentModuleTypes: config.allowedParentTypes || [],\n        resourceCosts: config.resourceCost\n          ? Object.entries(config.resourceCost).map(([type, amount]) => ({\n              type,\n              amount: amount as number,\n            }))\n          : [],\n      },\n      effects: config.effects,\n      baseStats: {\n        power: 10,\n        space: 5,\n        complexity: 3,\n      },\n    });\n  }\n}\n\n/**\n * Get module configurations\n * This would typically come from a configuration file\n */\nfunction getModuleConfigs(): Record<string, any> {\n  return {\n    radar: {\n      resourceConsumption: {\n        energy: 5,\n      },\n    },\n    mineral: {\n      resourceConsumption: {\n        energy: 10,\n      },\n      resourceProduction: {\n        minerals: 20,\n      },\n    },\n    hangar: {\n      resourceConsumption: {\n        energy: 15,\n        minerals: 2,\n      },\n    },\n    academy: {\n      resourceConsumption: {\n        energy: 8,\n        food: 5,\n      },\n    },\n    exploration: {\n      resourceConsumption: {\n        energy: 12,\n      },\n    },\n    trading: {\n      resourceConsumption: {\n        energy: 7,\n      },\n      resourceProduction: {\n        credits: 15,\n      },\n    },\n    population: {\n      resourceConsumption: {\n        energy: 10,\n        food: 15,\n      },\n    },\n    infrastructure: {\n      resourceConsumption: {\n        energy: 20,\n      },\n    },\n    research: {\n      resourceConsumption: {\n        energy: 25,\n      },\n    },\n    food: {\n      resourceConsumption: {\n        energy: 8,\n        water: 10,\n      },\n      resourceProduction: {\n        food: 25,\n      },\n    },\n    defense: {\n      resourceConsumption: {\n        energy: 30,\n      },\n    },\n  };\n}\n\n/**\n * Get sub-module configurations\n * This would typically come from a configuration file\n */\nfunction getSubModuleConfigs(): Record<string, any> {\n  return {\n    efficiency: {\n      name: 'Efficiency Module',\n      description: 'Improves resource efficiency',\n      resourceCost: {\n        energy: 50,\n        minerals: 30,\n      },\n      effects: [\n        {\n          type: 'stat',\n          target: 'efficiency',\n          value: 15,\n          isPercentage: true,\n          description: 'Increases efficiency',\n        },\n      ],\n      allowedParentTypes: ['mineral', 'hangar', 'food', 'trading'],\n      maxPerModule: 2,\n    },\n    booster: {\n      name: 'Booster Module',\n      description: 'Boosts production output',\n      resourceCost: {\n        energy: 75,\n        minerals: 50,\n      },\n      effects: [\n        {\n          type: 'resource',\n          target: 'output',\n          value: 25,\n          isPercentage: true,\n          description: 'Increases production output',\n        },\n      ],\n      allowedParentTypes: ['mineral', 'food', 'trading'],\n      maxPerModule: 1,\n    },\n    range: {\n      name: 'Range Extender',\n      description: 'Extends operational range',\n      resourceCost: {\n        energy: 60,\n        minerals: 40,\n      },\n      effects: [\n        {\n          type: 'stat',\n          target: 'range',\n          value: 30,\n          isPercentage: true,\n          description: 'Increases operational range',\n        },\n      ],\n      allowedParentTypes: ['radar', 'exploration'],\n      maxPerModule: 2,\n    },\n    capacity: {\n      name: 'Capacity Expander',\n      description: 'Expands storage capacity',\n      resourceCost: {\n        energy: 40,\n        minerals: 80,\n      },\n      effects: [\n        {\n          type: 'stat',\n          target: 'capacity',\n          value: 50,\n          isPercentage: true,\n          description: 'Increases storage capacity',\n        },\n      ],\n      allowedParentTypes: ['hangar', 'population', 'infrastructure'],\n      maxPerModule: 3,\n    },\n    automation: {\n      name: 'Automation System',\n      description: 'Automates routine operations',\n      resourceCost: {\n        energy: 100,\n        minerals: 60,\n      },\n      effects: [\n        {\n          type: 'ability',\n          target: 'automation',\n          value: 1,\n          isPercentage: false,\n          description: 'Enables automation',\n        },\n      ],\n      allowedParentTypes: ['mineral', 'hangar', 'food', 'trading', 'infrastructure'],\n      maxPerModule: 1,\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/moduleUpgradeInit.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":8,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[272,340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":13,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[427,507],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeModuleUpgradePaths } from '../config/modules/upgradePathsConfig';\nimport { moduleUpgradeManager } from '../managers/module/ModuleUpgradeManager';\n\n/**\n * Initialize the module upgrade system\n */\nexport function initializeModuleUpgradeSystem(): void {\n  console.log('[Initialization] Setting up module upgrade system...');\n\n  // Register upgrade paths\n  initializeModuleUpgradePaths(moduleUpgradeManager);\n\n  console.log('[Initialization] Module upgrade system initialized successfully.');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/ai/behaviorTree.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/ai/shipBehavior.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/ai/shipMovement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/automation/ConditionChecker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RuntimeCondition' is defined but never used.","line":17,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'condition' is defined but never used.","line":141,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4524,4527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4524,4527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Subject } from 'rxjs';\nimport { thresholdEvents } from '../../contexts/ThresholdTypes';\nimport { AutomationCondition } from '../../managers/game/AutomationManager';\nimport { MiningShipManagerImpl } from '../../managers/mining/MiningShipManagerImpl';\nimport { moduleManager } from '../../managers/module/ModuleManager';\n\n// Create a subject to handle condition state\nconst conditionState = new Subject<{\n  resourceId: string;\n  currentAmount: number;\n  thresholds: { min: number; max: number };\n}>();\n\n/**\n * Extended condition type with runtime state\n */\ninterface RuntimeCondition extends AutomationCondition {\n  lastChecked?: number;\n}\n\nexport class ConditionChecker {\n  private lastCheckedTimes: Map<string, number> = new Map();\n  private miningManager?: MiningShipManagerImpl;\n\n  constructor(miningManager?: MiningShipManagerImpl) {\n    this.miningManager = miningManager;\n\n    // Subscribe to threshold events\n    thresholdEvents.subscribe(event => {\n      if (event.type === 'THRESHOLD_VIOLATED' || event.type === 'STORAGE_FULL') {\n        conditionState.next({\n          resourceId: event.resourceId,\n          currentAmount: event.details.current,\n          thresholds: {\n            min: event.details.min || 0,\n            max: event.details.max || Infinity,\n          },\n        });\n      }\n    });\n  }\n\n  private getConditionKey(condition: AutomationCondition): string {\n    return `${condition.type}-${condition.target || ''}-${condition.value || ''}-${condition.operator || ''}`;\n  }\n\n  /**\n   * Checks if a condition is met\n   */\n  public async checkCondition(condition: AutomationCondition): Promise<boolean> {\n    switch (condition.type) {\n      case 'RESOURCE_ABOVE':\n      case 'RESOURCE_BELOW':\n        return new Promise(resolve => {\n          const subscription = conditionState.subscribe(state => {\n            if (state.resourceId === condition.target) {\n              const threshold = Number(condition.value);\n              const result =\n                condition.type === 'RESOURCE_ABOVE'\n                  ? state.currentAmount > threshold\n                  : state.currentAmount < threshold;\n              subscription.unsubscribe();\n              resolve(result);\n            }\n          });\n\n          // Timeout after 1 second\n          setTimeout(() => {\n            subscription.unsubscribe();\n            resolve(false);\n          }, 1000);\n        });\n\n      case 'MODULE_ACTIVE':\n      case 'MODULE_INACTIVE':\n        return this.checkModuleCondition(condition);\n\n      case 'TIME_ELAPSED':\n        return this.checkTimeCondition(condition);\n\n      case 'EVENT_OCCURRED':\n        return this.checkEventCondition(condition);\n\n      case 'STATUS_EQUALS':\n        return this.checkStatusCondition(condition);\n\n      default:\n        console.warn(`Unknown condition type: ${condition.type}`);\n        return false;\n    }\n  }\n\n  /**\n   * Checks a module-based condition\n   */\n  private checkModuleCondition(condition: AutomationCondition): boolean {\n    if (!condition.target) {\n      return false;\n    }\n\n    const module = moduleManager.getModule(condition.target);\n    if (!module) {\n      return false;\n    }\n\n    if (condition.type === 'MODULE_ACTIVE') {\n      return module.isActive;\n    } else {\n      return !module.isActive;\n    }\n  }\n\n  /**\n   * Checks a time-based condition\n   */\n  private checkTimeCondition(condition: AutomationCondition): boolean {\n    if (!condition.value) {\n      return false;\n    }\n\n    const now = Date.now();\n    const key = this.getConditionKey(condition);\n    const lastChecked = this.lastCheckedTimes.get(key) || 0;\n    const elapsed = now - lastChecked;\n\n    // Update last checked time\n    this.lastCheckedTimes.set(key, now);\n\n    if (condition.operator === 'greater') {\n      return elapsed > condition.value;\n    } else if (condition.operator === 'less') {\n      return elapsed < condition.value;\n    }\n\n    return elapsed >= Number(condition.value);\n  }\n\n  /**\n   * Checks an event-based condition\n   */\n  private checkEventCondition(condition: AutomationCondition): boolean {\n    // TODO: Implement event checking using moduleEventBus\n    return false;\n  }\n\n  /**\n   * Checks a status-based condition\n   */\n  private checkStatusCondition(condition: AutomationCondition): boolean {\n    if (!condition.target || !condition.value) {\n      return false;\n    }\n\n    const module = moduleManager.getModule(condition.target);\n    if (!module) {\n      return false;\n    }\n\n    // Get module status from metadata\n    const status = (module as any).metadata?.status;\n    if (!status) {\n      return false;\n    }\n\n    switch (condition.operator) {\n      case 'equals':\n        return status === condition.value;\n      case 'not_equals':\n        return status !== condition.value;\n      case 'contains':\n        return status.includes(String(condition.value));\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Checks if all conditions in a set are met\n   */\n  public async checkConditions(conditions: AutomationCondition[]): Promise<boolean> {\n    try {\n      const results = await Promise.all(\n        conditions.map(condition => this.checkCondition(condition))\n      );\n      return results.every(result => result);\n    } catch (error) {\n      console.error('Error checking conditions:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Resets a condition's last checked time\n   */\n  public resetCondition(condition: AutomationCondition): void {\n    const key = this.getConditionKey(condition);\n    this.lastCheckedTimes.delete(key);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/modules/ModuleEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleType } from '../../types/buildings/ModuleTypes';\n\n/**\n * Module event types\n */\nexport type ModuleEventType =\n  // Lifecycle events\n  | 'MODULE_CREATED'\n  | 'MODULE_ATTACHED'\n  | 'MODULE_DETACHED'\n  | 'MODULE_UPGRADED'\n  | 'MODULE_ACTIVATED'\n  | 'MODULE_DEACTIVATED'\n  | 'MODULE_UPDATED'\n  // Attachment events\n  | 'ATTACHMENT_STARTED'\n  | 'ATTACHMENT_CANCELLED'\n  | 'ATTACHMENT_COMPLETED'\n  | 'ATTACHMENT_PREVIEW_SHOWN'\n  // Resource events\n  | 'RESOURCE_PRODUCED'\n  | 'RESOURCE_CONSUMED'\n  | 'RESOURCE_TRANSFERRED'\n  | 'RESOURCE_PRODUCTION_REGISTERED'\n  | 'RESOURCE_PRODUCTION_UNREGISTERED'\n  | 'RESOURCE_CONSUMPTION_REGISTERED'\n  | 'RESOURCE_CONSUMPTION_UNREGISTERED'\n  | 'RESOURCE_FLOW_REGISTERED'\n  | 'RESOURCE_FLOW_UNREGISTERED'\n  | 'RESOURCE_SHORTAGE'\n  | 'RESOURCE_UPDATED'\n  // Automation events\n  | 'AUTOMATION_STARTED'\n  | 'AUTOMATION_STOPPED'\n  | 'AUTOMATION_CYCLE_COMPLETE'\n  // Status events\n  | 'STATUS_CHANGED'\n  | 'ERROR_OCCURRED'\n  // Mission events\n  | 'MISSION_STARTED'\n  | 'MISSION_COMPLETED'\n  | 'MISSION_FAILED'\n  | 'MISSION_PROGRESS_UPDATED'\n  | 'MISSION_REWARD_CLAIMED'\n  // Sub-module events\n  | 'SUB_MODULE_CREATED'\n  | 'SUB_MODULE_ATTACHED'\n  | 'SUB_MODULE_DETACHED'\n  | 'SUB_MODULE_UPGRADED'\n  | 'SUB_MODULE_ACTIVATED'\n  | 'SUB_MODULE_DEACTIVATED'\n  | 'SUB_MODULE_EFFECT_APPLIED'\n  | 'SUB_MODULE_EFFECT_REMOVED'\n  // Combat events\n  | 'COMBAT_UPDATED'\n  // Tech events\n  | 'TECH_UNLOCKED'\n  | 'TECH_UPDATED';\n\n/**\n * Module event interface\n */\nexport interface ModuleEvent {\n  type: ModuleEventType;\n  moduleId: string;\n  moduleType: ModuleType;\n  timestamp: number;\n  data?: any;\n}\n\n/**\n * Event listener type\n */\ntype ModuleEventListener = (event: ModuleEvent) => void;\n\n/**\n * Module event bus for handling module communication\n */\nexport class ModuleEventBus {\n  private listeners: Map<ModuleEventType, Set<ModuleEventListener>>;\n  private history: ModuleEvent[];\n  private maxHistorySize: number;\n\n  constructor(maxHistorySize = 1000) {\n    this.listeners = new Map();\n    this.history = [];\n    this.maxHistorySize = maxHistorySize;\n  }\n\n  /**\n   * Subscribe to module events\n   */\n  subscribe(type: ModuleEventType, listener: ModuleEventListener): () => void {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, new Set());\n    }\n\n    this.listeners.get(type)!.add(listener);\n\n    // Return unsubscribe function\n    return () => {\n      const typeListeners = this.listeners.get(type);\n      if (typeListeners) {\n        typeListeners.delete(listener);\n        if (typeListeners.size === 0) {\n          this.listeners.delete(type);\n        }\n      }\n    };\n  }\n\n  /**\n   * Emit a module event\n   */\n  emit(event: ModuleEvent): void {\n    // Add to history\n    this.history.push(event);\n    if (this.history.length > this.maxHistorySize) {\n      this.history.shift();\n    }\n\n    // Notify listeners\n    const typeListeners = this.listeners.get(event.type);\n    if (typeListeners) {\n      typeListeners.forEach(listener => {\n        try {\n          listener(event);\n        } catch (error) {\n          console.error('Error in module event listener:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get event history\n   */\n  getHistory(): ModuleEvent[] {\n    return [...this.history];\n  }\n\n  /**\n   * Get event history for a specific module\n   */\n  getModuleHistory(moduleId: string): ModuleEvent[] {\n    return this.history.filter(event => event.moduleId === moduleId);\n  }\n\n  /**\n   * Get event history for a specific type\n   */\n  getEventTypeHistory(type: ModuleEventType): ModuleEvent[] {\n    return this.history.filter(event => event.type === type);\n  }\n\n  /**\n   * Clear event history\n   */\n  clearHistory(): void {\n    this.history = [];\n  }\n}\n\n// Export singleton instance\nexport const moduleEventBus = new ModuleEventBus();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/EntityPool.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[973,1062],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":109,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":109,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2373,2416],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from '../utils/EventEmitter';\n\nexport interface PooledEntity {\n  reset(): void;\n}\n\ninterface PoolEvents<T extends PooledEntity> {\n  entityActivated: { entity: T };\n  entityDeactivated: { entity: T };\n  poolExpanded: { newSize: number };\n}\n\n/**\n * Generic entity pool for efficient object reuse\n */\nexport class EntityPool<T extends PooledEntity> extends EventEmitter<PoolEvents<T>> {\n  private available: T[];\n  private inUse: Set<T>;\n  private factory: () => T;\n  private maxSize: number;\n  private expandSize: number;\n\n  constructor(\n    factory: () => T,\n    initialSize: number,\n    maxSize: number = 1000,\n    expandSize: number = 50\n  ) {\n    super();\n    this.factory = factory;\n    this.maxSize = maxSize;\n    this.expandSize = expandSize;\n    this.available = [];\n    this.inUse = new Set();\n\n    // Pre-allocate initial pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(factory());\n    }\n\n    // Debug logging\n    console.debug(`[EntityPool] Initialized with ${initialSize} entities (max: ${maxSize})`);\n  }\n\n  /**\n   * Get an inactive entity from the pool\n   */\n  public acquire(): T | undefined {\n    let entity: T;\n    if (this.available.length > 0) {\n      entity = this.available.pop()!;\n    } else {\n      entity = this.factory();\n    }\n\n    entity.reset();\n    this.inUse.add(entity);\n    this.emit('entityActivated', { entity });\n    return entity;\n  }\n\n  /**\n   * Return an entity to the pool\n   */\n  public release(entity: T): void {\n    if (this.inUse.has(entity)) {\n      this.inUse.delete(entity);\n      entity.reset();\n      this.available.push(entity);\n      this.emit('entityDeactivated', { entity });\n    }\n  }\n\n  /**\n   * Get all active entities\n   */\n  public getActiveEntities(): T[] {\n    return Array.from(this.inUse);\n  }\n\n  /**\n   * Get total number of entities in pool\n   */\n  public getTotalCount(): number {\n    return this.available.length + this.inUse.size;\n  }\n\n  /**\n   * Get number of active entities\n   */\n  public getActiveCount(): number {\n    return this.inUse.size;\n  }\n\n  /**\n   * Get number of available entities\n   */\n  public getAvailableCount(): number {\n    return this.available.length;\n  }\n\n  /**\n   * Clear all entities from pool\n   */\n  public clear(): void {\n    this.available = [];\n    this.inUse.clear();\n    this.emit('entityDeactivated', { entity: null });\n    console.debug('[EntityPool] Pool cleared');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/QuadTree.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/RenderBatcher.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Position } from '../../types/core/Position';\nimport { EventEmitter } from '../utils/EventEmitter';\n\ninterface RenderBatch {\n  id: string;\n  type: string;\n  zIndex: number;\n  items: RenderItem[];\n}\n\ninterface RenderItem {\n  id: string;\n  position: Position;\n  size: { width: number; height: number };\n  rotation: number;\n  opacity: number;\n  color: string;\n  texture?: string;\n  shader?: string;\n  uniforms?: Record<string, any>;\n}\n\ninterface RenderBatcherEvents {\n  batchCreated: { batch: RenderBatch };\n  batchUpdated: { batch: RenderBatch };\n  batchRemoved: { batchId: string };\n  frameStarted: { timestamp: number };\n  frameEnded: { timestamp: number; drawCalls: number };\n}\n\nexport declare class RenderBatcher extends EventEmitter<RenderBatcherEvents> {\n  createBatch(type: string, zIndex?: number): string;\n  addItem(batchId: string, item: RenderItem): void;\n  removeItem(batchId: string, itemId: string): void;\n  removeBatch(batchId: string): void;\n  beginFrame(timestamp: number): void;\n  render(ctx: CanvasRenderingContext2D): void;\n  endFrame(timestamp: number): void;\n  cleanup(): void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/RenderBatcher.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1046,1091],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is defined but never used.","line":138,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Position } from '../../types/core/Position';\nimport { EventEmitter } from '../utils/EventEmitter';\n\nexport interface RenderBatch {\n  id: string;\n  type: string;\n  zIndex: number;\n  items: RenderItem[];\n}\n\nexport interface RenderItem {\n  id: string;\n  position: Position;\n  size: { width: number; height: number };\n  rotation: number;\n  opacity: number;\n  color: string;\n  texture?: string;\n  shader?: string;\n  uniforms?: Record<string, any>;\n}\n\nexport interface RenderBatcherEvents {\n  batchCreated: { batch: RenderBatch };\n  batchUpdated: { batch: RenderBatch };\n  batchRemoved: { batchId: string };\n  frameStarted: { timestamp: number };\n  frameEnded: { timestamp: number; drawCalls: number };\n}\n\n/**\n * Manages render batching for optimized drawing\n */\nexport class RenderBatcher extends EventEmitter<RenderBatcherEvents> {\n  private batches: Map<string, RenderBatch> = new Map();\n  private sortedBatches: RenderBatch[] = [];\n  private needsSort: boolean = false;\n  private drawCalls: number = 0;\n\n  constructor() {\n    super();\n    console.debug('[RenderBatcher] Initialized');\n  }\n\n  /**\n   * Create a new render batch\n   */\n  public createBatch(type: string, zIndex: number = 0): string {\n    const id = `batch-${type}-${Date.now()}`;\n    const batch: RenderBatch = {\n      id,\n      type,\n      zIndex,\n      items: [],\n    };\n\n    this.batches.set(id, batch);\n    this.needsSort = true;\n    this.emit('batchCreated', { batch });\n\n    return id;\n  }\n\n  /**\n   * Add item to a batch\n   */\n  public addItem(batchId: string, item: RenderItem): void {\n    const batch = this.batches.get(batchId);\n    if (batch) {\n      batch.items.push(item);\n      this.emit('batchUpdated', { batch });\n    }\n  }\n\n  /**\n   * Remove item from a batch\n   */\n  public removeItem(batchId: string, itemId: string): void {\n    const batch = this.batches.get(batchId);\n    if (batch) {\n      const index = batch.items.findIndex(item => item.id === itemId);\n      if (index !== -1) {\n        batch.items.splice(index, 1);\n        this.emit('batchUpdated', { batch });\n      }\n    }\n  }\n\n  /**\n   * Remove a batch\n   */\n  public removeBatch(batchId: string): void {\n    if (this.batches.delete(batchId)) {\n      this.needsSort = true;\n      this.emit('batchRemoved', { batchId });\n    }\n  }\n\n  /**\n   * Sort batches by z-index\n   */\n  private sortBatches(): void {\n    if (!this.needsSort) {\n      return;\n    }\n\n    this.sortedBatches = Array.from(this.batches.values()).sort((a, b) => a.zIndex - b.zIndex);\n    this.needsSort = false;\n  }\n\n  /**\n   * Begin frame\n   */\n  public beginFrame(timestamp: number): void {\n    this.drawCalls = 0;\n    this.emit('frameStarted', { timestamp });\n  }\n\n  /**\n   * Render all batches\n   */\n  public render(ctx: CanvasRenderingContext2D): void {\n    this.sortBatches();\n\n    // Group items by shader and texture to minimize state changes\n    this.sortedBatches.forEach(batch => {\n      const byShader = new Map<string, RenderItem[]>();\n\n      batch.items.forEach(item => {\n        const key = `${item.shader || 'default'}-${item.texture || 'none'}`;\n        if (!byShader.has(key)) {\n          byShader.set(key, []);\n        }\n        byShader.get(key)!.push(item);\n      });\n\n      // Render each group\n      byShader.forEach((items, key) => {\n        // Set up shader and texture once for the group\n        this.setupShaderAndTexture(ctx, items[0]);\n        this.drawCalls++;\n\n        // Render all items in the group\n        items.forEach(item => {\n          this.renderItem(ctx, item);\n        });\n      });\n    });\n  }\n\n  /**\n   * Set up shader and texture for a group\n   */\n  private setupShaderAndTexture(ctx: CanvasRenderingContext2D, item: RenderItem): void {\n    // Set global alpha\n    ctx.globalAlpha = item.opacity;\n\n    // Set blend mode based on shader\n    if (item.shader === 'additive') {\n      ctx.globalCompositeOperation = 'lighter';\n    } else {\n      ctx.globalCompositeOperation = 'source-over';\n    }\n\n    // Set color\n    ctx.fillStyle = item.color;\n    ctx.strokeStyle = item.color;\n  }\n\n  /**\n   * Render a single item\n   */\n  private renderItem(ctx: CanvasRenderingContext2D, item: RenderItem): void {\n    ctx.save();\n\n    // Transform\n    ctx.translate(item.position.x, item.position.y);\n    ctx.rotate(item.rotation);\n\n    // Draw\n    if (item.texture) {\n      // Draw textured quad\n      ctx.fillRect(-item.size.width / 2, -item.size.height / 2, item.size.width, item.size.height);\n    } else {\n      // Draw colored quad\n      ctx.fillRect(-item.size.width / 2, -item.size.height / 2, item.size.width, item.size.height);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * End frame\n   */\n  public endFrame(timestamp: number): void {\n    this.emit('frameEnded', {\n      timestamp,\n      drawCalls: this.drawCalls,\n    });\n  }\n\n  /**\n   * Clean up\n   */\n  public cleanup(): void {\n    this.batches.clear();\n    this.sortedBatches = [];\n    this.needsSort = false;\n    this.drawCalls = 0;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/utils/EventEmitter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[99,102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[99,102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[121,124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[121,124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Generic event emitter implementation\n */\nexport class EventEmitter<T extends Record<string, any> = Record<string, any>> {\n  private events: Map<keyof T, Array<(data: T[keyof T]) => void>> = new Map();\n\n  /**\n   * Subscribe to an event\n   */\n  public on<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)?.push(callback as (data: T[keyof T]) => void);\n  }\n\n  /**\n   * Emit an event with data\n   */\n  public emit<K extends keyof T>(event: K, data: T[K]): void {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => callback(data as T[keyof T]));\n    }\n  }\n\n  /**\n   * Unsubscribe from an event\n   */\n  public off<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback as (data: T[keyof T]) => void);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Subscribe to an event (alias for on)\n   */\n  public subscribe<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    this.on(event, callback);\n  }\n\n  /**\n   * Unsubscribe from an event (alias for off)\n   */\n  public unsubscribe<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    this.off(event, callback);\n  }\n\n  /**\n   * Remove all listeners for an event\n   */\n  public removeAllListeners<K extends keyof T>(event?: K): void {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/ai/BehaviorTreeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/automation/GlobalAutomationManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":132,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":132,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3827,3905],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":265,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7122,7188],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":307,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":307,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8903,8966],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resourceType' is defined but never used.","line":388,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":388,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_deltaTime' is defined but never used.","line":483,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_elapsedTime' is defined but never used.","line":483,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":491,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":491,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport {\n  getSystemCommunication,\n  MessagePriority,\n  SystemId,\n} from '../../utils/events/EventCommunication';\nimport { EventPriorityQueue } from '../../utils/events/EventFiltering';\nimport {\n  AutomationAction,\n  AutomationCondition,\n  AutomationManager,\n  ResourceConditionValue,\n} from '../game/AutomationManager';\nimport { gameLoopManager, UpdatePriority } from '../game/GameLoopManager';\n\n/**\n * Global routine type\n */\nexport type GlobalRoutineType =\n  | 'system-maintenance'\n  | 'resource-balancing'\n  | 'performance-optimization'\n  | 'emergency-response'\n  | 'scheduled-task'\n  | 'custom';\n\n/**\n * Global routine interface\n */\nexport interface GlobalRoutine {\n  id: string;\n  name: string;\n  type: GlobalRoutineType;\n  description: string;\n  enabled: boolean;\n  priority: MessagePriority;\n  interval: number;\n  lastRun?: number;\n  conditions: AutomationCondition[];\n  actions: AutomationAction[];\n  systems: SystemId[];\n  tags: string[];\n}\n\n/**\n * Global automation manager\n * Extends the module-specific automation with system-wide routines\n */\nexport class GlobalAutomationManager {\n  private automationManager: AutomationManager;\n  private routines: Map<string, GlobalRoutine>;\n  private activeRoutines: Map<string, boolean>;\n  private routineQueue: EventPriorityQueue<GlobalRoutine & { executionTime: number }>;\n  private systemCommunications: Map<SystemId, ReturnType<typeof getSystemCommunication>>;\n  private isInitialized: boolean = false;\n\n  constructor(automationManager: AutomationManager) {\n    this.automationManager = automationManager;\n    this.routines = new Map();\n    this.activeRoutines = new Map();\n    this.systemCommunications = new Map();\n\n    // Create a priority queue for routine execution\n    this.routineQueue = new EventPriorityQueue(routine => {\n      return this.executeRoutine(routine);\n    });\n  }\n\n  /**\n   * Initialize the global automation manager\n   */\n  public initialize(): void {\n    if (this.isInitialized) {\n      return;\n    }\n\n    console.warn('Initializing Global Automation Manager...');\n\n    // Initialize system communications\n    this.initializeSystemCommunications();\n\n    // Register with game loop for regular updates\n    gameLoopManager.registerUpdate(\n      'global-automation-manager',\n      this.update.bind(this),\n      UpdatePriority.NORMAL\n    );\n\n    // Subscribe to relevant events\n    moduleEventBus.subscribe('ERROR_OCCURRED' as ModuleEventType, this.handleErrorEvent);\n    moduleEventBus.subscribe('RESOURCE_SHORTAGE' as ModuleEventType, this.handleResourceShortage);\n    moduleEventBus.subscribe('STATUS_CHANGED' as ModuleEventType, this.handleStatusChanged);\n\n    this.isInitialized = true;\n\n    // Emit initialization event\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED' as ModuleEventType,\n      moduleId: 'global-automation',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: {\n        routineCount: this.routines.size,\n        systems: Array.from(this.systemCommunications.keys()),\n      },\n    });\n  }\n\n  /**\n   * Initialize system communications\n   */\n  private initializeSystemCommunications(): void {\n    const systems: SystemId[] = [\n      'resource-system',\n      'module-system',\n      'combat-system',\n      'exploration-system',\n      'mining-system',\n      'tech-system',\n      'ui-system',\n      'game-loop',\n      'event-system',\n    ];\n\n    systems.forEach(systemId => {\n      const communication = getSystemCommunication(systemId);\n      this.systemCommunications.set(systemId, communication);\n\n      // Register message handler for automation requests\n      communication.registerHandler('automation-request', message => {\n        console.log(`Received automation request from ${systemId}:`, message.payload);\n\n        if (message.payload.routineId) {\n          const routine = this.routines.get(message.payload.routineId);\n          if (routine && routine.enabled) {\n            this.scheduleRoutine(routine);\n            return;\n          }\n        }\n\n        if (message.payload.createRoutine) {\n          this.registerRoutine(message.payload.createRoutine);\n        }\n      });\n    });\n  }\n\n  /**\n   * Register a global routine\n   */\n  public registerRoutine(routine: GlobalRoutine): string {\n    // Generate ID if not provided\n    if (!routine.id) {\n      routine.id = `routine-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    this.routines.set(routine.id, routine);\n    this.activeRoutines.set(routine.id, routine.enabled);\n\n    // If routine is enabled, schedule it\n    if (routine.enabled) {\n      this.scheduleRoutine(routine);\n    }\n\n    // Notify systems about the new routine\n    routine.systems.forEach(systemId => {\n      const communication = this.systemCommunications.get(systemId);\n      if (communication) {\n        communication.sendMessage('broadcast', 'routine-registered', {\n          routineId: routine.id,\n          name: routine.name,\n          type: routine.type,\n        });\n      }\n    });\n\n    return routine.id;\n  }\n\n  /**\n   * Unregister a global routine\n   */\n  public unregisterRoutine(routineId: string): boolean {\n    const routine = this.routines.get(routineId);\n    if (!routine) {\n      return false;\n    }\n\n    // Notify systems about routine removal\n    routine.systems.forEach(systemId => {\n      const communication = this.systemCommunications.get(systemId);\n      if (communication) {\n        communication.sendMessage(systemId, 'routine-unregistered', {\n          routineId: routine.id,\n        });\n      }\n    });\n\n    this.routines.delete(routineId);\n    this.activeRoutines.delete(routineId);\n    return true;\n  }\n\n  /**\n   * Enable a global routine\n   */\n  public enableRoutine(routineId: string): boolean {\n    const routine = this.routines.get(routineId);\n    if (!routine) {\n      return false;\n    }\n\n    routine.enabled = true;\n    this.activeRoutines.set(routineId, true);\n\n    // Schedule the routine\n    this.scheduleRoutine(routine);\n\n    return true;\n  }\n\n  /**\n   * Disable a global routine\n   */\n  public disableRoutine(routineId: string): boolean {\n    const routine = this.routines.get(routineId);\n    if (!routine) {\n      return false;\n    }\n\n    routine.enabled = false;\n    this.activeRoutines.set(routineId, false);\n    return true;\n  }\n\n  /**\n   * Schedule a routine for execution\n   */\n  private scheduleRoutine(routine: GlobalRoutine): void {\n    // Add to the priority queue\n    this.routineQueue.enqueue({\n      ...routine,\n      executionTime: Date.now() + (routine.interval || 0),\n    });\n  }\n\n  /**\n   * Execute a routine\n   */\n  private async executeRoutine(routine: GlobalRoutine & { executionTime: number }): Promise<void> {\n    try {\n      // Skip if routine is disabled\n      if (!routine.enabled) {\n        return;\n      }\n\n      // Skip if it's not time to run yet\n      if (Date.now() < routine.executionTime) {\n        // Re-queue for later execution\n        this.scheduleRoutine(routine);\n        return;\n      }\n\n      console.log(`Executing routine: ${routine.name} (${routine.id})`);\n\n      // Check conditions\n      let conditionsMet = true;\n      try {\n        // Try to check conditions, but handle if the method is private\n        // We'll implement our own simple condition checking if needed\n        for (const condition of routine.conditions) {\n          if (condition.type === 'RESOURCE_BELOW') {\n            // Simple implementation for resource below condition\n            const { target, value } = condition;\n            if (target && value !== undefined) {\n              const resourceAmount = this.getResourceAmount(target);\n              // Extract numeric value for comparison\n              const threshold =\n                typeof value === 'number' ? value : (value as ResourceConditionValue).amount;\n              if (resourceAmount > threshold) {\n                conditionsMet = false;\n                break;\n              }\n            }\n          } else if (condition.type === 'RESOURCE_ABOVE') {\n            // Simple implementation for resource above condition\n            const { target, value } = condition;\n            if (target && value !== undefined) {\n              const resourceAmount = this.getResourceAmount(target);\n              // Extract numeric value for comparison\n              const threshold =\n                typeof value === 'number' ? value : (value as ResourceConditionValue).amount;\n              if (resourceAmount < threshold) {\n                conditionsMet = false;\n                break;\n              }\n            }\n          }\n          // Add more condition types as needed\n        }\n      } catch (error) {\n        console.warn('Error checking conditions, using simple implementation:', error);\n      }\n\n      if (!conditionsMet) {\n        console.log(`Conditions not met for routine: ${routine.name}`);\n\n        // Re-schedule for next interval\n        this.scheduleRoutine({\n          ...routine,\n          lastRun: Date.now(),\n        });\n        return;\n      }\n\n      // Execute actions\n      try {\n        // Try to execute actions through the automation manager\n        // If that fails, implement our own simple action execution\n        for (const action of routine.actions) {\n          await this.executeAction(action);\n        }\n      } catch (error) {\n        console.warn('Error executing actions, using simple implementation:', error);\n      }\n\n      // Update last run time\n      const updatedRoutine = {\n        ...routine,\n        lastRun: Date.now(),\n      };\n      this.routines.set(routine.id, updatedRoutine);\n\n      // Emit routine completion event\n      moduleEventBus.emit({\n        type: 'AUTOMATION_CYCLE_COMPLETE' as ModuleEventType,\n        moduleId: 'global-automation',\n        moduleType: 'resource-manager',\n        timestamp: Date.now(),\n        data: {\n          routineId: routine.id,\n          routineName: routine.name,\n          routineType: routine.type,\n        },\n      });\n\n      // Notify relevant systems\n      routine.systems.forEach(systemId => {\n        const communication = this.systemCommunications.get(systemId);\n        if (communication) {\n          communication.sendMessage(systemId, 'routine-executed', {\n            routineId: routine.id,\n            success: true,\n            timestamp: Date.now(),\n          });\n        }\n      });\n\n      // Re-schedule for next interval\n      this.scheduleRoutine(updatedRoutine);\n    } catch (error) {\n      console.error(`Error executing routine ${routine.id}:`, error);\n\n      // Emit error event\n      moduleEventBus.emit({\n        type: 'ERROR_OCCURRED' as ModuleEventType,\n        moduleId: 'global-automation',\n        moduleType: 'resource-manager',\n        timestamp: Date.now(),\n        data: {\n          routineId: routine.id,\n          error: error instanceof Error ? error.message : String(error),\n        },\n      });\n\n      // Re-schedule for next interval\n      this.scheduleRoutine({\n        ...routine,\n        lastRun: Date.now(),\n      });\n    }\n  }\n\n  /**\n   * Helper method to get resource amount\n   */\n  private getResourceAmount(resourceType: string): number {\n    try {\n      // Try to access the resource manager through the automation manager\n      // This is a simplified implementation\n      return 100; // Default value for testing\n    } catch (error) {\n      console.warn('Error getting resource amount:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Helper method to execute a single action\n   */\n  private async executeAction(action: AutomationAction): Promise<void> {\n    switch (action.type) {\n      case 'ACTIVATE_MODULE':\n        if (!action.target) {\n          return;\n        }\n        // Emit an event to activate the module\n        moduleEventBus.emit({\n          type: 'MODULE_ACTIVATED' as ModuleEventType,\n          moduleId: action.target,\n          moduleType: 'resource-manager',\n          timestamp: Date.now(),\n          data: { source: 'automation' },\n        });\n        break;\n\n      case 'DEACTIVATE_MODULE':\n        if (!action.target) {\n          return;\n        }\n        // Emit an event to deactivate the module\n        moduleEventBus.emit({\n          type: 'MODULE_DEACTIVATED' as ModuleEventType,\n          moduleId: action.target,\n          moduleType: 'resource-manager',\n          timestamp: Date.now(),\n          data: { source: 'automation' },\n        });\n        break;\n\n      case 'TRANSFER_RESOURCES':\n        if (!action.target || !action.value) {\n          return;\n        }\n        // Emit an event to transfer resources\n        moduleEventBus.emit({\n          type: 'RESOURCE_TRANSFERRED' as ModuleEventType,\n          moduleId: 'automation',\n          moduleType: 'resource-manager',\n          timestamp: Date.now(),\n          data: action.value,\n        });\n        break;\n\n      case 'EMIT_EVENT': {\n        if (!action.target || !action.value) {\n          return;\n        }\n\n        // Define interface for EmitEventValue\n        interface EmitEventValue {\n          moduleId?: string;\n          moduleType?: string;\n          data?: Record<string, unknown>;\n        }\n\n        // Cast to EmitEventValue or use a safe default\n        const emitValue =\n          typeof action.value === 'object'\n            ? (action.value as EmitEventValue)\n            : { moduleId: 'automation', moduleType: 'resource-manager', data: {} };\n\n        // Emit the specified event\n        moduleEventBus.emit({\n          type: action.target as ModuleEventType,\n          moduleId: emitValue.moduleId || 'automation',\n          moduleType: (emitValue.moduleType || 'resource-manager') as ModuleType,\n          timestamp: Date.now(),\n          data: emitValue.data || {},\n        });\n        break;\n      }\n\n      default:\n        console.warn(`Unsupported action type: ${action.type}`);\n    }\n  }\n\n  /**\n   * Update method called by the game loop\n   */\n  private update(_deltaTime: number, _elapsedTime: number): void {\n    // Process any pending routines\n    // The queue itself handles the execution\n  }\n\n  /**\n   * Handle error events\n   */\n  private handleErrorEvent = (event: ModuleEvent): void => {\n    // Find emergency response routines\n    const emergencyRoutines = Array.from(this.routines.values()).filter(\n      routine =>\n        routine.enabled &&\n        routine.type === 'emergency-response' &&\n        routine.tags.includes('error-handling')\n    );\n\n    // Schedule emergency routines immediately\n    emergencyRoutines.forEach(routine => {\n      this.routineQueue.enqueue({\n        ...routine,\n        executionTime: Date.now(), // Execute immediately\n      });\n    });\n  };\n\n  /**\n   * Handle resource shortage events\n   */\n  private handleResourceShortage = (event: ModuleEvent): void => {\n    // Find resource balancing routines\n    const resourceRoutines = Array.from(this.routines.values()).filter(\n      routine =>\n        routine.enabled &&\n        routine.type === 'resource-balancing' &&\n        routine.tags.includes(event.data?.resourceType || 'general')\n    );\n\n    // Schedule resource routines with high priority\n    resourceRoutines.forEach(routine => {\n      this.routineQueue.enqueue({\n        ...routine,\n        executionTime: Date.now(), // Execute immediately\n        priority: MessagePriority.HIGH, // Override with high priority\n      });\n    });\n  };\n\n  /**\n   * Handle status changed events\n   */\n  private handleStatusChanged = (event: ModuleEvent): void => {\n    // Find relevant routines based on status\n    const statusRoutines = Array.from(this.routines.values()).filter(\n      routine =>\n        routine.enabled &&\n        (routine.type === 'system-maintenance' || routine.type === 'performance-optimization') &&\n        routine.tags.includes(event.data?.status || 'general')\n    );\n\n    // Schedule status routines\n    statusRoutines.forEach(routine => {\n      this.routineQueue.enqueue({\n        ...routine,\n        executionTime: Date.now() + 1000, // Small delay to allow system to stabilize\n      });\n    });\n  };\n\n  /**\n   * Get all routines\n   */\n  public getAllRoutines(): GlobalRoutine[] {\n    return Array.from(this.routines.values());\n  }\n\n  /**\n   * Get routines by type\n   */\n  public getRoutinesByType(type: GlobalRoutineType): GlobalRoutine[] {\n    return Array.from(this.routines.values()).filter(routine => routine.type === type);\n  }\n\n  /**\n   * Get routines by system\n   */\n  public getRoutinesBySystem(systemId: SystemId): GlobalRoutine[] {\n    return Array.from(this.routines.values()).filter(routine => routine.systems.includes(systemId));\n  }\n\n  /**\n   * Get routines by tag\n   */\n  public getRoutinesByTag(tag: string): GlobalRoutine[] {\n    return Array.from(this.routines.values()).filter(routine => routine.tags.includes(tag));\n  }\n\n  /**\n   * Get active routines\n   */\n  public getActiveRoutines(): GlobalRoutine[] {\n    return Array.from(this.routines.values()).filter(routine => routine.enabled);\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    // Unregister from game loop\n    gameLoopManager.unregisterUpdate('global-automation-manager');\n\n    // Unsubscribe from events\n    const unsubscribeError = moduleEventBus.subscribe(\n      'ERROR_OCCURRED' as ModuleEventType,\n      this.handleErrorEvent\n    );\n    const unsubscribeShortage = moduleEventBus.subscribe(\n      'RESOURCE_SHORTAGE' as ModuleEventType,\n      this.handleResourceShortage\n    );\n    const unsubscribeStatus = moduleEventBus.subscribe(\n      'STATUS_CHANGED' as ModuleEventType,\n      this.handleStatusChanged\n    );\n\n    if (typeof unsubscribeError === 'function') {\n      unsubscribeError();\n    }\n    if (typeof unsubscribeShortage === 'function') {\n      unsubscribeShortage();\n    }\n    if (typeof unsubscribeStatus === 'function') {\n      unsubscribeStatus();\n    }\n\n    // Clear routines\n    this.routines.clear();\n    this.activeRoutines.clear();\n\n    // Clear system communications\n    this.systemCommunications.clear();\n\n    this.isInitialized = false;\n  }\n}\n\n// Export singleton instance\nexport const globalAutomationManager = new GlobalAutomationManager(\n  // We'll need to import the actual instance in the initialization file\n  null as unknown as AutomationManager\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/colony/ColonyManagerImpl.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3766,3769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3766,3769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4743,4746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4743,4746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5571,5574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5571,5574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7037,7040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7037,7040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { colonyRules } from '../../config/automation/colonyRules';\nimport { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { automationManager } from '../game/AutomationManager';\nimport { resourceManager } from '../game/ResourceManager';\n\ninterface ColonyStats {\n  population: number;\n  happiness: number;\n  infrastructure: number;\n  research: number;\n  foodProduction: number;\n  energyProduction: number;\n}\n\ninterface ColonyEvents {\n  statsUpdated: { colonyId: string; stats: ColonyStats };\n  resourcesDistributed: { colonyId: string; resources: Record<string, number> };\n  infrastructureBuilt: { colonyId: string; type: string; level: number };\n  populationGrew: { colonyId: string; amount: number };\n  tradeRouteEstablished: { colonyId: string; partnerId: string; resources: string[] };\n  defenseActivated: { colonyId: string; threatLevel: number };\n  researchCompleted: { colonyId: string; project: string; benefits: any };\n  emergencyProtocolActivated: { colonyId: string; type: string };\n}\n\nexport class ColonyManagerImpl extends EventEmitter<ColonyEvents> {\n  private colonies: Map<\n    string,\n    {\n      id: string;\n      name: string;\n      level: number;\n      stats: ColonyStats;\n      tradeRoutes: Set<string>;\n      activeResearch: Set<string>;\n      emergencyProtocols: Set<string>;\n    }\n  > = new Map();\n\n  constructor() {\n    super();\n    this.initializeAutomationRules();\n  }\n\n  private initializeAutomationRules(): void {\n    colonyRules.forEach(rule => {\n      automationManager.registerRule(rule);\n    });\n  }\n\n  public registerColony(id: string, name: string, initialStats: Partial<ColonyStats> = {}): void {\n    const defaultStats: ColonyStats = {\n      population: 100,\n      happiness: 100,\n      infrastructure: 1,\n      research: 0,\n      foodProduction: 10,\n      energyProduction: 10,\n    };\n\n    this.colonies.set(id, {\n      id,\n      name,\n      level: 1,\n      stats: { ...defaultStats, ...initialStats },\n      tradeRoutes: new Set(),\n      activeResearch: new Set(),\n      emergencyProtocols: new Set(),\n    });\n\n    // Emit initialization event\n    moduleEventBus.emit({\n      type: 'MODULE_ACTIVATED',\n      moduleId: id,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { name, stats: defaultStats },\n    });\n  }\n\n  public updateStats(colonyId: string, updates: Partial<ColonyStats>): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    colony.stats = { ...colony.stats, ...updates };\n    this.emit('statsUpdated', { colonyId, stats: colony.stats });\n\n    // Check for level up\n    this.checkForLevelUp(colonyId);\n  }\n\n  private checkForLevelUp(colonyId: string): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    const { population, infrastructure } = colony.stats;\n    const newLevel = Math.floor(Math.sqrt(population * infrastructure) / 100);\n\n    if (newLevel > colony.level) {\n      colony.level = newLevel;\n      moduleEventBus.emit({\n        type: 'MODULE_UPGRADED',\n        moduleId: colonyId,\n        moduleType: 'colony' as ModuleType,\n        timestamp: Date.now(),\n        data: { level: newLevel },\n      });\n    }\n  }\n\n  public distributeResources(colonyId: string): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    // Calculate resource needs based on population and infrastructure\n    const resourceNeeds = this.calculateResourceNeeds(colony);\n\n    // Distribute resources\n    Object.entries(resourceNeeds).forEach(([resource, amount]) => {\n      resourceManager.transferResources(resource as any, amount, 'storage', colonyId);\n    });\n\n    this.emit('resourcesDistributed', { colonyId, resources: resourceNeeds });\n  }\n\n  private calculateResourceNeeds(\n    colony: NonNullable<ReturnType<typeof this.colonies.get>>\n  ): Record<string, number> {\n    const { population, infrastructure } = colony.stats;\n\n    return {\n      food: Math.ceil(population * 0.5),\n      energy: Math.ceil(population * 0.3 + infrastructure * 10),\n      minerals: Math.ceil(infrastructure * 5),\n    };\n  }\n\n  public buildInfrastructure(colonyId: string, type: string): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    // Check resource requirements\n    const requirements = this.getInfrastructureRequirements(type, colony.level);\n    if (!this.hasRequiredResources(requirements)) {\n      return;\n    }\n\n    // Consume resources\n    Object.entries(requirements).forEach(([resource, amount]) => {\n      resourceManager.removeResource(resource as any, amount);\n    });\n\n    // Update infrastructure\n    colony.stats.infrastructure += 1;\n    this.emit('infrastructureBuilt', {\n      colonyId,\n      type,\n      level: colony.stats.infrastructure,\n    });\n  }\n\n  private getInfrastructureRequirements(type: string, level: number): Record<string, number> {\n    const baseRequirements = {\n      minerals: 100,\n      energy: 50,\n    };\n\n    // Scale requirements with level\n    return Object.entries(baseRequirements).reduce(\n      (acc, [resource, amount]) => ({\n        ...acc,\n        [resource]: Math.ceil(amount * Math.pow(1.5, level - 1)),\n      }),\n      {}\n    );\n  }\n\n  private hasRequiredResources(requirements: Record<string, number>): boolean {\n    return Object.entries(requirements).every(\n      ([resource, amount]) => resourceManager.getResourceAmount(resource as any) >= amount\n    );\n  }\n\n  public establishTradeRoute(colonyId: string, partnerId: string, resources: string[]): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    colony.tradeRoutes.add(partnerId);\n    this.emit('tradeRouteEstablished', { colonyId, partnerId, resources });\n\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: colonyId,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { type: 'trade', partnerId, resources },\n    });\n  }\n\n  public activateDefense(colonyId: string, threatLevel: number): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    this.emit('defenseActivated', { colonyId, threatLevel });\n\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: colonyId,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { type: 'defense', threatLevel },\n    });\n  }\n\n  public startResearch(colonyId: string, project: string): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    colony.activeResearch.add(project);\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: colonyId,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { type: 'research', project },\n    });\n  }\n\n  public completeResearch(colonyId: string, project: string, benefits: any): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    colony.activeResearch.delete(project);\n    this.emit('researchCompleted', { colonyId, project, benefits });\n\n    moduleEventBus.emit({\n      type: 'AUTOMATION_CYCLE_COMPLETE',\n      moduleId: colonyId,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { type: 'research', project, benefits },\n    });\n  }\n\n  public activateEmergencyProtocol(colonyId: string, type: string): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    colony.emergencyProtocols.add(type);\n    this.emit('emergencyProtocolActivated', { colonyId, type });\n\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: colonyId,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { type: 'emergency', protocol: type },\n    });\n  }\n\n  public deactivateEmergencyProtocol(colonyId: string, type: string): void {\n    const colony = this.colonies.get(colonyId);\n    if (!colony) {\n      return;\n    }\n\n    colony.emergencyProtocols.delete(type);\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STOPPED',\n      moduleId: colonyId,\n      moduleType: 'colony' as ModuleType,\n      timestamp: Date.now(),\n      data: { type: 'emergency', protocol: type },\n    });\n  }\n\n  public getColonyStats(colonyId: string): ColonyStats | undefined {\n    return this.colonies.get(colonyId)?.stats;\n  }\n\n  public getActiveResearch(colonyId: string): string[] {\n    return Array.from(this.colonies.get(colonyId)?.activeResearch || []);\n  }\n\n  public getTradeRoutes(colonyId: string): string[] {\n    return Array.from(this.colonies.get(colonyId)?.tradeRoutes || []);\n  }\n\n  public getActiveEmergencyProtocols(colonyId: string): string[] {\n    return Array.from(this.colonies.get(colonyId)?.emergencyProtocols || []);\n  }\n}\n\n// Export singleton instance\nexport const colonyManager = new ColonyManagerImpl();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/combat/WarShipManagerImpl.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3203,3206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3203,3206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3558,3561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3558,3561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4588,4591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4588,4591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { EventEmitter } from '../../lib/utils/EventEmitter';\nimport { combatManager } from '../../managers/combat/combatManager';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { Position } from '../../types/core/GameTypes';\nimport { CommonShipCapabilities } from '../../types/ships/CommonShipTypes';\nimport { WeaponConfig, WeaponState } from '../../types/weapons/WeaponTypes';\n\ninterface WarShip {\n  id: string;\n  name: string;\n  type:\n    | 'spitflare'\n    | 'starSchooner'\n    | 'orionFrigate'\n    | 'harbringerGalleon'\n    | 'midwayCarrier'\n    | 'motherEarthRevenge';\n  tier: 1 | 2 | 3;\n  status: 'idle' | 'patrolling' | 'engaging' | 'returning' | 'damaged' | 'retreating' | 'disabled';\n  position: Position;\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  energy: number;\n  maxEnergy: number;\n  capabilities: CommonShipCapabilities;\n  weapons: {\n    id: string;\n    config: WeaponConfig;\n    state: WeaponState;\n  }[];\n  specialAbilities?: {\n    name: string;\n    description: string;\n    cooldown: number;\n    active: boolean;\n    effectiveness?: number;\n  }[];\n  techBonuses?: {\n    weaponEfficiency: number;\n    shieldRegeneration: number;\n    energyEfficiency: number;\n  };\n  combatStats: {\n    damageDealt: number;\n    damageReceived: number;\n    killCount: number;\n    assistCount: number;\n  };\n}\n\ninterface CombatTask {\n  id: string;\n  type: 'combat';\n  target: {\n    id: string;\n    position: Position;\n  };\n  priority: number;\n  assignedAt: number;\n  status: 'queued' | 'in-progress' | 'completed' | 'failed';\n  formation?: {\n    type: 'offensive' | 'defensive' | 'balanced';\n    spacing: number;\n    facing: number;\n  };\n}\n\nexport class WarShipManagerImpl extends EventEmitter {\n  private ships: Map<string, WarShip> = new Map();\n  private tasks: Map<string, CombatTask> = new Map();\n  private formations: Map<\n    string,\n    {\n      type: 'offensive' | 'defensive' | 'balanced';\n      ships: string[];\n      leader?: string;\n      spacing: number;\n      facing: number;\n    }\n  > = new Map();\n\n  constructor() {\n    super();\n    this.initializeAutomationHandlers();\n  }\n\n  private initializeAutomationHandlers(): void {\n    moduleEventBus.subscribe('AUTOMATION_STARTED', (event: ModuleEvent) => {\n      if (event.moduleType === 'hangar' && event.data?.type) {\n        const ship = this.ships.get(event.moduleId);\n        if (ship) {\n          switch (event.data.type) {\n            case 'formation':\n              this.handleFormationChange(ship, event.data);\n              break;\n            case 'engagement':\n              this.handleEngagement(ship, event.data);\n              break;\n            case 'repair':\n              this.handleRepair(ship);\n              break;\n            case 'shield':\n              this.handleShieldBoost(ship);\n              break;\n            case 'attack':\n              this.handleAttack(ship, event.data);\n              break;\n            case 'retreat':\n              this.handleRetreat(ship);\n              break;\n          }\n        }\n      }\n    });\n  }\n\n  private handleFormationChange(ship: WarShip, data: any): void {\n    const { formation } = data;\n    if (formation) {\n      const formationId = `formation-${Date.now()}`;\n      this.formations.set(formationId, {\n        type: formation.type,\n        ships: [ship.id],\n        spacing: formation.spacing,\n        facing: formation.facing,\n      });\n    }\n  }\n\n  private handleEngagement(ship: WarShip, data: any): void {\n    const { targetId } = data;\n    if (targetId) {\n      const task: CombatTask = {\n        id: `combat-${targetId}`,\n        type: 'combat',\n        target: {\n          id: targetId,\n          position: { x: 0, y: 0 }, // Position will be updated in the update loop\n        },\n        priority: this.getPriorityForShipType(ship.type),\n        assignedAt: Date.now(),\n        status: 'in-progress',\n      };\n      this.tasks.set(ship.id, task);\n      this.updateShipStatus(ship.id, 'engaging');\n    }\n  }\n\n  private handleRepair(ship: WarShip): void {\n    if (ship.health < ship.maxHealth) {\n      ship.health = Math.min(ship.maxHealth, ship.health + ship.maxHealth * 0.2);\n      if (ship.health > ship.maxHealth * 0.3) {\n        this.updateShipStatus(ship.id, 'idle');\n      }\n    }\n  }\n\n  private handleShieldBoost(ship: WarShip): void {\n    if (ship.shield < ship.maxShield) {\n      ship.shield = Math.min(ship.maxShield, ship.shield + ship.maxShield * 0.3);\n    }\n  }\n\n  private handleAttack(ship: WarShip, data: any): void {\n    const { targetId } = data;\n    if (targetId) {\n      const readyWeapon = ship.weapons.find(w => w.state.status === 'ready');\n      if (readyWeapon) {\n        readyWeapon.state.status = 'cooling';\n        readyWeapon.state.currentStats.cooldown = Date.now();\n        ship.energy -=\n          readyWeapon.config.baseStats.energyCost * (ship.techBonuses?.energyEfficiency || 1);\n\n        // Update combat stats\n        ship.combatStats.damageDealt +=\n          readyWeapon.config.baseStats.damage * (ship.techBonuses?.weaponEfficiency || 1);\n      }\n    }\n  }\n\n  private handleRetreat(ship: WarShip): void {\n    this.updateShipStatus(ship.id, 'retreating');\n    const task = this.tasks.get(ship.id);\n    if (task) {\n      task.status = 'failed';\n      this.tasks.delete(ship.id);\n    }\n  }\n\n  public registerShip(ship: WarShip): void {\n    if (ship.capabilities.canJump) {\n      this.ships.set(ship.id, ship);\n\n      // Emit events\n      this.emit('shipRegistered', { shipId: ship.id });\n      moduleEventBus.emit({\n        type: 'MODULE_ACTIVATED',\n        moduleId: ship.id,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n        data: { ship },\n      });\n    }\n  }\n\n  public unregisterShip(shipId: string): void {\n    if (this.ships.has(shipId)) {\n      // Remove from formations\n      this.formations.forEach(formation => {\n        const index = formation.ships.indexOf(shipId);\n        if (index !== -1) {\n          formation.ships.splice(index, 1);\n          if (formation.leader === shipId) {\n            formation.leader = formation.ships[0];\n          }\n        }\n      });\n\n      this.ships.delete(shipId);\n      this.tasks.delete(shipId);\n\n      // Emit events\n      this.emit('shipUnregistered', { shipId });\n      moduleEventBus.emit({\n        type: 'MODULE_DEACTIVATED',\n        moduleId: shipId,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  public assignCombatTask(\n    shipId: string,\n    targetId: string,\n    position: Position,\n    formation?: {\n      type: 'offensive' | 'defensive' | 'balanced';\n      spacing: number;\n      facing: number;\n    }\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (!ship || ship.status === 'disabled') {\n      return;\n    }\n\n    const task: CombatTask = {\n      id: `combat-${targetId}`,\n      type: 'combat',\n      target: {\n        id: targetId,\n        position,\n      },\n      priority: this.getPriorityForShipType(ship.type),\n      assignedAt: Date.now(),\n      status: 'queued',\n      formation,\n    };\n\n    this.tasks.set(shipId, task);\n    this.updateShipStatus(shipId, 'engaging');\n\n    // Emit events\n    this.emit('taskAssigned', { shipId, task });\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: shipId,\n      moduleType: 'war' as ModuleType,\n      timestamp: Date.now(),\n      data: { task },\n    });\n  }\n\n  public completeTask(shipId: string): void {\n    const task = this.tasks.get(shipId);\n    const ship = this.ships.get(shipId);\n\n    if (task && ship) {\n      this.tasks.delete(shipId);\n      this.updateShipStatus(shipId, 'returning');\n\n      // Emit events\n      this.emit('taskCompleted', { shipId, task });\n      moduleEventBus.emit({\n        type: 'AUTOMATION_CYCLE_COMPLETE',\n        moduleId: shipId,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n        data: { task, combatStats: ship.combatStats },\n      });\n    }\n  }\n\n  public updateShipTechBonuses(\n    shipId: string,\n    bonuses: { weaponEfficiency: number; shieldRegeneration: number; energyEfficiency: number }\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.techBonuses = bonuses;\n      this.emit('techBonusesUpdated', { shipId, bonuses });\n    }\n  }\n\n  public createFormation(\n    type: 'offensive' | 'defensive' | 'balanced',\n    shipIds: string[],\n    spacing: number = 100\n  ): string {\n    const formationId = `formation-${Date.now()}`;\n    const validShips = shipIds.filter(id => this.ships.has(id));\n\n    if (validShips.length > 0) {\n      this.formations.set(formationId, {\n        type,\n        ships: validShips,\n        leader: validShips[0],\n        spacing,\n        facing: 0,\n      });\n\n      // Update tasks with formation info\n      validShips.forEach(shipId => {\n        const task = this.tasks.get(shipId);\n        if (task) {\n          task.formation = {\n            type,\n            spacing,\n            facing: 0,\n          };\n        }\n      });\n\n      this.emit('formationCreated', { formationId, type, ships: validShips });\n    }\n\n    return formationId;\n  }\n\n  private updateShipStatus(shipId: string, status: WarShip['status']): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.status = status;\n\n      // Emit events\n      this.emit('shipStatusUpdated', { shipId, status });\n      moduleEventBus.emit({\n        type: 'STATUS_CHANGED',\n        moduleId: shipId,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n        data: { status },\n      });\n    }\n  }\n\n  private getPriorityForShipType(type: WarShip['type']): number {\n    switch (type) {\n      case 'motherEarthRevenge':\n        return 5;\n      case 'midwayCarrier':\n        return 4;\n      case 'harbringerGalleon':\n        return 3;\n      case 'orionFrigate':\n        return 2;\n      case 'starSchooner':\n      case 'spitflare':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  // Update method for periodic tasks\n  public update(deltaTime: number): void {\n    // Update formations\n    this.formations.forEach(formation => {\n      if (formation.ships.length > 0) {\n        const leader = this.ships.get(formation.leader!);\n        if (leader) {\n          // Update formation facing based on leader's target\n          const task = this.tasks.get(leader.id);\n          if (task?.target) {\n            const dx = task.target.position.x - leader.position.x;\n            const dy = task.target.position.y - leader.position.y;\n            formation.facing = Math.atan2(dy, dx);\n          }\n\n          // Update formation positions\n          formation.ships.forEach((shipId, index) => {\n            if (shipId !== formation.leader) {\n              const ship = this.ships.get(shipId);\n              if (ship) {\n                // Calculate formation position\n                const angle = formation.facing + index * (Math.PI / 4);\n                const targetPos = {\n                  x: leader.position.x + Math.cos(angle) * formation.spacing,\n                  y: leader.position.y + Math.sin(angle) * formation.spacing,\n                };\n\n                // Move ship towards formation position\n                combatManager.moveUnit(shipId, targetPos);\n              }\n            }\n          });\n        }\n      }\n    });\n\n    // Update ships\n    this.ships.forEach(ship => {\n      // Update weapon cooldowns\n      ship.weapons.forEach(weapon => {\n        if (weapon.state.status === 'cooling') {\n          const timeSinceFired = Date.now() - (weapon.state.currentStats.cooldown || 0);\n          if (timeSinceFired >= weapon.config.baseStats.cooldown) {\n            weapon.state.status = 'ready';\n          }\n        }\n      });\n\n      // Handle combat tasks\n      const task = this.tasks.get(ship.id);\n      if (task?.status === 'in-progress') {\n        const target = combatManager\n          .getUnitsInRange(ship.position, ship.weapons[0].config.baseStats.range)\n          .find(unit => unit.id === task.target.id);\n\n        if (target) {\n          // Find ready weapon in range\n          const readyWeapon = ship.weapons.find(weapon => {\n            const distance = Math.sqrt(\n              Math.pow(target.position.x - ship.position.x, 2) +\n                Math.pow(target.position.y - ship.position.y, 2)\n            );\n            return weapon.state.status === 'ready' && distance <= weapon.config.baseStats.range;\n          });\n\n          if (readyWeapon) {\n            // Fire weapon\n            readyWeapon.state.status = 'cooling';\n            readyWeapon.state.currentStats.cooldown = Date.now();\n            ship.energy -=\n              readyWeapon.config.baseStats.energyCost * (ship.techBonuses?.energyEfficiency || 1);\n\n            // Update combat stats\n            ship.combatStats.damageDealt +=\n              readyWeapon.config.baseStats.damage * (ship.techBonuses?.weaponEfficiency || 1);\n          }\n        }\n      }\n\n      // Regenerate shields\n      if (ship.shield < ship.maxShield) {\n        ship.shield = Math.min(\n          ship.maxShield,\n          ship.shield + deltaTime * 0.1 * (ship.techBonuses?.shieldRegeneration || 1)\n        );\n      }\n\n      // Check for critical damage\n      if (ship.health < ship.maxHealth * 0.3 && ship.status !== 'retreating') {\n        this.updateShipStatus(ship.id, 'retreating');\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/combat/combatManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3235,3238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3235,3238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3715,3718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3715,3718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4069,4072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4069,4072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4480,4483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4480,4483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4762,4765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4762,4765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5709,5712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5709,5712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { factionManager } from '../../managers/factions/factionManager';\n\nexport interface Fleet {\n  units: CombatUnit[];\n}\n\nexport interface CombatManager {\n  getFleetStatus: (fleetId: string) => Fleet | undefined;\n  getUnitsInRange: (position: { x: number; y: number }, range: number) => CombatUnit[];\n  getThreatsInRange: (position: { x: number; y: number }, range: number) => Threat[];\n  moveUnit: (unitId: string, position: { x: number; y: number }) => void;\n  removeUnit: (unitId: string) => void;\n}\n\nexport interface Threat {\n  id: string;\n  position: { x: number; y: number };\n  severity: 'low' | 'medium' | 'high';\n  type: string;\n}\n\nexport interface CombatUnit {\n  id: string;\n  faction: string;\n  type:\n    | 'spitflare'\n    | 'starSchooner'\n    | 'orionFrigate'\n    | 'harbringerGalleon'\n    | 'midwayCarrier'\n    | 'motherEarthRevenge';\n  tier: 1 | 2 | 3;\n  position: { x: number; y: number };\n  status: 'idle' | 'patrolling' | 'engaging' | 'returning' | 'damaged' | 'retreating' | 'disabled';\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  target?: string;\n  weapons: {\n    id: string;\n    type: 'machineGun' | 'gaussCannon' | 'railGun' | 'mgss' | 'rockets';\n    range: number;\n    damage: number;\n    cooldown: number;\n    status: 'ready' | 'charging' | 'cooling';\n    lastFired?: number;\n  }[];\n  specialAbilities?: {\n    name: string;\n    description: string;\n    cooldown: number;\n    active: boolean;\n  }[];\n}\n\ninterface CombatZone {\n  id: string;\n  position: { x: number; y: number };\n  radius: number;\n  units: CombatUnit[];\n  threatLevel: number;\n}\n\nclass CombatManagerImpl implements CombatManager {\n  private combatZones: Map<string, CombatZone> = new Map();\n  private units: Map<string, CombatUnit> = new Map();\n  private autoDispatchEnabled: boolean = true;\n  private threats: Map<string, Threat> = new Map();\n\n  // Combat Thresholds\n  private readonly ENGAGEMENT_RANGE = 500; // Units within this range will engage\n  private readonly RETREAT_HEALTH_THRESHOLD = 0.3; // Units retreat at 30% health\n  private readonly REINFORCEMENT_THRESHOLD = 0.5; // Call reinforcements at 50% fleet strength\n  private readonly MAX_UNITS_PER_ZONE = 10; // Maximum units in a combat zone\n\n  constructor() {\n    this.startCombatLoop();\n    this.initializeAutomationHandlers();\n  }\n\n  private initializeAutomationHandlers(): void {\n    moduleEventBus.subscribe('AUTOMATION_STARTED', (event: ModuleEvent) => {\n      if (event.moduleType === 'hangar') {\n        switch (event.data?.type) {\n          case 'formation':\n            this.handleFormationUpdate(event.data);\n            break;\n          case 'engagement':\n            this.handleEngagement(event.data);\n            break;\n          case 'repair':\n            this.handleDamageControl(event.data);\n            break;\n          case 'shield':\n            this.handleShieldBoost(event.data);\n            break;\n          case 'attack':\n            this.handleWeaponFire(event.data);\n            break;\n          case 'retreat':\n            this.handleRetreat(event.data);\n            break;\n        }\n      }\n    });\n  }\n\n  private handleFormationUpdate(data: any): void {\n    const { position, units } = data;\n    if (position && units) {\n      units.forEach((unitId: string) => {\n        const unit = this.units.get(unitId);\n        if (unit) {\n          // Update unit position in formation\n          this.moveUnit(unitId, {\n            x: position.x + (Math.random() - 0.5) * 50, // Add some variation\n            y: position.y + (Math.random() - 0.5) * 50,\n          });\n        }\n      });\n    }\n  }\n\n  private handleEngagement(data: any): void {\n    const { targetId, units } = data;\n    if (targetId && units) {\n      units.forEach((unitId: string) => {\n        const unit = this.units.get(unitId);\n        if (unit && unit.status !== 'disabled') {\n          unit.status = 'engaging';\n          unit.target = targetId;\n        }\n      });\n    }\n  }\n\n  private handleDamageControl(data: any): void {\n    const { unitId } = data;\n    if (unitId) {\n      const unit = this.units.get(unitId);\n      if (unit) {\n        // Apply repair effect\n        unit.health = Math.min(unit.maxHealth, unit.health + unit.maxHealth * 0.2);\n        if (unit.health > unit.maxHealth * this.RETREAT_HEALTH_THRESHOLD) {\n          unit.status = 'engaging';\n        }\n      }\n    }\n  }\n\n  private handleShieldBoost(data: any): void {\n    const { unitId } = data;\n    if (unitId) {\n      const unit = this.units.get(unitId);\n      if (unit) {\n        // Boost shields\n        unit.shield = Math.min(unit.maxShield, unit.shield + unit.maxShield * 0.3);\n      }\n    }\n  }\n\n  private handleWeaponFire(data: any): void {\n    const { unitId, targetId } = data;\n    if (unitId && targetId) {\n      const unit = this.units.get(unitId);\n      const target = this.units.get(targetId);\n      if (unit && target) {\n        // Find ready weapon\n        const weapon = unit.weapons.find(w => w.status === 'ready');\n        if (weapon) {\n          weapon.status = 'cooling';\n          weapon.lastFired = Date.now();\n          // Apply damage\n          if (target.shield > 0) {\n            const shieldDamage = Math.min(target.shield, weapon.damage * 0.7);\n            target.shield -= shieldDamage;\n            target.health -= (weapon.damage - shieldDamage) * 0.3;\n          } else {\n            target.health -= weapon.damage;\n          }\n          // Check for disabled state\n          if (target.health <= 0) {\n            target.status = 'disabled';\n            target.target = undefined;\n          }\n        }\n      }\n    }\n  }\n\n  private handleRetreat(data: any): void {\n    const { unitId } = data;\n    if (unitId) {\n      const unit = this.units.get(unitId);\n      if (unit) {\n        unit.status = 'retreating';\n        unit.target = undefined;\n      }\n    }\n  }\n\n  private startCombatLoop() {\n    setInterval(() => {\n      this.updateCombatZones();\n      this.processAutoDispatch();\n      this.updateUnitBehaviors();\n    }, 1000);\n  }\n\n  private updateCombatZones() {\n    this.combatZones.forEach(zone => {\n      // Update threat level based on hostile units\n      zone.threatLevel = this.calculateZoneThreatLevel(zone);\n\n      // Merge nearby zones if they overlap\n      this.combatZones.forEach(otherZone => {\n        if (zone.id !== otherZone.id && this.zonesOverlap(zone, otherZone)) {\n          this.mergeZones(zone, otherZone);\n        }\n      });\n\n      // Remove empty zones\n      if (zone.units.length === 0) {\n        this.combatZones.delete(zone.id);\n      }\n    });\n  }\n\n  private calculateZoneThreatLevel(zone: CombatZone): number {\n    let threat = 0;\n    const hostileUnits = zone.units.filter(\n      unit => factionManager.getFactionBehavior(unit.faction)?.isHostile\n    );\n\n    hostileUnits.forEach(unit => {\n      threat +=\n        (unit.health / unit.maxHealth) * (unit.weapons.reduce((sum, w) => sum + w.damage, 0) / 100);\n    });\n\n    return Math.min(1, threat / this.MAX_UNITS_PER_ZONE);\n  }\n\n  private zonesOverlap(zone1: CombatZone, zone2: CombatZone): boolean {\n    const dx = zone1.position.x - zone2.position.x;\n    const dy = zone1.position.y - zone2.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < zone1.radius + zone2.radius;\n  }\n\n  private mergeZones(zone1: CombatZone, zone2: CombatZone) {\n    // Create new zone encompassing both\n    const newZone: CombatZone = {\n      id: `merged-${Date.now()}`,\n      position: {\n        x: (zone1.position.x + zone2.position.x) / 2,\n        y: (zone1.position.y + zone2.position.y) / 2,\n      },\n      radius: Math.max(\n        zone1.radius,\n        zone2.radius,\n        this.getDistance(zone1.position, zone2.position) / 2\n      ),\n      units: [...zone1.units, ...zone2.units],\n      threatLevel: Math.max(zone1.threatLevel, zone2.threatLevel),\n    };\n\n    this.combatZones.delete(zone1.id);\n    this.combatZones.delete(zone2.id);\n    this.combatZones.set(newZone.id, newZone);\n  }\n\n  private processAutoDispatch() {\n    if (!this.autoDispatchEnabled) {\n      return;\n    }\n\n    this.combatZones.forEach(zone => {\n      if (zone.threatLevel > this.REINFORCEMENT_THRESHOLD) {\n        const nearbyAllies = this.findNearbyAllies(zone);\n        nearbyAllies.forEach(ally => {\n          if (this.shouldDispatchUnit(ally, zone)) {\n            this.dispatchUnitToZone(ally, zone);\n          }\n        });\n      }\n    });\n  }\n\n  private findNearbyAllies(zone: CombatZone): CombatUnit[] {\n    return Array.from(this.units.values()).filter(unit => {\n      if (unit.status !== 'idle') {\n        return false;\n      }\n      const distance = this.getDistance(unit.position, zone.position);\n      return distance <= this.ENGAGEMENT_RANGE;\n    });\n  }\n\n  private shouldDispatchUnit(unit: CombatUnit, zone: CombatZone): boolean {\n    // Check if unit is available and healthy\n    if (unit.status !== 'idle' || unit.health < unit.maxHealth * 0.8) {\n      return false;\n    }\n\n    // Check if zone needs reinforcements\n    const alliedUnits = zone.units.filter(u => u.faction === unit.faction);\n    if (alliedUnits.length >= this.MAX_UNITS_PER_ZONE / 2) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private dispatchUnitToZone(unit: CombatUnit, zone: CombatZone) {\n    unit.status = 'engaging';\n    zone.units.push(unit);\n\n    // Find suitable target\n    const target = this.findBestTarget(unit, zone);\n    if (target) {\n      unit.target = target.id;\n    }\n  }\n\n  private findBestTarget(unit: CombatUnit, zone: CombatZone): CombatUnit | null {\n    const hostileUnits = zone.units.filter(\n      u => factionManager.getFactionBehavior(u.faction)?.isHostile\n    );\n\n    if (hostileUnits.length === 0) {\n      return null;\n    }\n\n    // Prioritize targets based on threat and distance\n    return hostileUnits.reduce(\n      (best, current) => {\n        if (!best) {\n          return current;\n        }\n\n        const bestScore = this.calculateTargetScore(unit, best);\n        const currentScore = this.calculateTargetScore(unit, current);\n\n        return currentScore > bestScore ? current : best;\n      },\n      null as CombatUnit | null\n    );\n  }\n\n  private calculateTargetScore(unit: CombatUnit, target: CombatUnit): number {\n    const distance = this.getDistance(unit.position, target.position);\n    const healthFactor = target.health / target.maxHealth;\n    const threatFactor = target.weapons.reduce((sum, w) => sum + w.damage, 0) / 100;\n\n    return (threatFactor * 0.4 + (1 - healthFactor) * 0.3) / (distance * 0.3);\n  }\n\n  private updateUnitBehaviors() {\n    this.units.forEach(unit => {\n      if (unit.status === 'disabled') {\n        return;\n      }\n\n      // Check for retreat conditions\n      if (this.shouldRetreat(unit)) {\n        this.initiateRetreat(unit);\n        return;\n      }\n\n      // Update combat behavior\n      if (unit.status === 'engaging' && unit.target) {\n        const target = this.units.get(unit.target);\n        if (target) {\n          this.updateCombat(unit, target);\n        } else {\n          unit.target = undefined;\n        }\n      }\n    });\n  }\n\n  private shouldRetreat(unit: CombatUnit): boolean {\n    // Check health threshold\n    if (unit.health < unit.maxHealth * this.RETREAT_HEALTH_THRESHOLD) {\n      return true;\n    }\n\n    // Check if outnumbered significantly\n    const zone = this.findUnitZone(unit);\n    if (zone) {\n      const allies = zone.units.filter(u => u.faction === unit.faction).length;\n      const enemies = zone.units.filter(u => u.faction !== unit.faction).length;\n      if (enemies > allies * 2) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private initiateRetreat(unit: CombatUnit) {\n    unit.status = 'retreating';\n    unit.target = undefined;\n\n    // Remove from combat zone\n    const zone = this.findUnitZone(unit);\n    if (zone) {\n      zone.units = zone.units.filter(u => u.id !== unit.id);\n    }\n  }\n\n  private updateCombat(unit: CombatUnit, target: CombatUnit) {\n    // Check if weapons are in range and ready\n    unit.weapons.forEach(weapon => {\n      const distance = this.getDistance(unit.position, target.position);\n      if (distance <= weapon.range && this.canFireWeapon(weapon)) {\n        this.fireWeapon(unit, target, weapon);\n      }\n    });\n  }\n\n  private canFireWeapon(weapon: CombatUnit['weapons'][0]): boolean {\n    const now = Date.now();\n    return (\n      weapon.status === 'ready' &&\n      (!weapon.lastFired || now - weapon.lastFired >= weapon.cooldown * 1000)\n    );\n  }\n\n  private updateWeaponStatus(weapon: CombatUnit['weapons'][0]): void {\n    if (this.canFireWeapon(weapon)) {\n      weapon.status = 'charging';\n      weapon.lastFired = Date.now();\n    }\n  }\n\n  private fireWeapon(unit: CombatUnit, target: CombatUnit, weapon: CombatUnit['weapons'][0]) {\n    // Skip if unit is disabled\n    if (unit.status === 'disabled') {\n      return;\n    }\n\n    weapon.lastFired = Date.now();\n    this.updateWeaponStatus(weapon);\n\n    // Calculate damage considering shields\n    let { damage } = weapon;\n    if (target.shield > 0) {\n      const shieldDamage = Math.min(target.shield, damage * 0.7);\n      target.shield -= shieldDamage;\n      damage -= shieldDamage;\n    }\n\n    target.health = Math.max(0, target.health - damage);\n\n    // Check if target is disabled\n    if (target.health === 0) {\n      target.status = 'disabled';\n      target.target = undefined;\n    }\n  }\n\n  private findUnitZone(unit: CombatUnit): CombatZone | null {\n    for (const zone of this.combatZones.values()) {\n      if (zone.units.some(u => u.id === unit.id)) {\n        return zone;\n      }\n    }\n    return null;\n  }\n\n  private getDistance(pos1: { x: number; y: number }, pos2: { x: number; y: number }): number {\n    const dx = pos1.x - pos2.x;\n    const dy = pos1.y - pos2.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // Public API\n  public addUnit(unit: CombatUnit) {\n    this.units.set(unit.id, unit);\n  }\n\n  public removeUnit(unitId: string) {\n    this.units.delete(unitId);\n  }\n\n  public createCombatZone(position: { x: number; y: number }): string {\n    const zone: CombatZone = {\n      id: `zone-${Date.now()}`,\n      position,\n      radius: 100,\n      units: [],\n      threatLevel: 0,\n    };\n    this.combatZones.set(zone.id, zone);\n    return zone.id;\n  }\n\n  public setAutoDispatch(enabled: boolean) {\n    this.autoDispatchEnabled = enabled;\n  }\n\n  public getZoneStatus(zoneId: string) {\n    return this.combatZones.get(zoneId);\n  }\n\n  public getUnitStatus(unitId: string) {\n    return this.units.get(unitId);\n  }\n\n  getFleetStatus(fleetId: string) {\n    const fleetUnits = Array.from(this.units.values()).filter(unit => unit.faction === fleetId);\n    return fleetUnits.length > 0 ? { units: fleetUnits } : undefined;\n  }\n\n  getUnitsInRange(position: { x: number; y: number }, range: number): CombatUnit[] {\n    return Array.from(this.units.values()).filter(unit => {\n      const dx = unit.position.x - position.x;\n      const dy = unit.position.y - position.y;\n      return Math.sqrt(dx * dx + dy * dy) <= range;\n    });\n  }\n\n  getThreatsInRange(position: { x: number; y: number }, range: number): Threat[] {\n    return Array.from(this.threats.values()).filter(threat => {\n      const dx = threat.position.x - position.x;\n      const dy = threat.position.y - position.y;\n      return Math.sqrt(dx * dx + dy * dy) <= range;\n    });\n  }\n\n  moveUnit(unitId: string, position: { x: number; y: number }): void {\n    const unit = this.units.get(unitId);\n    if (unit) {\n      unit.position = position;\n    }\n  }\n}\n\nexport const combatManager = new CombatManagerImpl();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/effects/EffectLifecycleManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/effects/ParticleSystemManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is defined but never used.","line":272,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AdditiveBlending,\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  PerspectiveCamera,\n  Points,\n  Scene,\n  ShaderMaterial,\n  WebGLRenderer,\n} from 'three';\nimport { EntityPool, PooledEntity } from '../../lib/optimization/EntityPool';\nimport { Position } from '../../types/core/GameTypes';\n\ninterface Particle extends PooledEntity {\n  id: string;\n  active: boolean;\n  position: Position;\n  velocity: Position;\n  acceleration: Position;\n  size: number;\n  color: string;\n  opacity: number;\n  life: number;\n  maxLife: number;\n  reset(): void;\n}\n\ninterface ParticleSystemConfig {\n  maxParticles: number;\n  spawnRate: number;\n  position: Position;\n  spread: number;\n  initialVelocity: {\n    min: Position;\n    max: Position;\n  };\n  acceleration: Position;\n  size: {\n    min: number;\n    max: number;\n  };\n  life: {\n    min: number;\n    max: number;\n  };\n  color: string | string[];\n  blendMode?: 'normal' | 'additive';\n  quality: 'low' | 'medium' | 'high';\n}\n\nexport class ParticleSystemManager {\n  private static instance: ParticleSystemManager;\n  private particlePools: Map<string, Map<number, EntityPool<Particle>>>;\n  private systems: Map<string, ParticleSystem>;\n  private renderer: WebGLRenderer;\n  private scene: Scene;\n  private camera: PerspectiveCamera;\n  private frameCount: number = 0;\n  private readonly FRAME_SKIP_THRESHOLD = 2;\n\n  private constructor() {\n    this.particlePools = new Map();\n    this.systems = new Map();\n    this.renderer = new WebGLRenderer({ antialias: true });\n    this.scene = new Scene();\n    this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.camera.position.z = 5;\n    this.initializeRenderer();\n\n    // Start cleanup interval\n    setInterval(() => this.cleanupInactiveSystems(), 5000);\n  }\n\n  public static getInstance(): ParticleSystemManager {\n    if (!ParticleSystemManager.instance) {\n      ParticleSystemManager.instance = new ParticleSystemManager();\n    }\n    return ParticleSystemManager.instance;\n  }\n\n  private initializeRenderer(): void {\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  private getPoolSizeForQuality(quality: 'low' | 'medium' | 'high'): number {\n    switch (quality) {\n      case 'low':\n        return 100;\n      case 'medium':\n        return 500;\n      case 'high':\n        return 1000;\n      default:\n        return 500;\n    }\n  }\n\n  private getOrCreatePool(\n    systemId: string,\n    particleSize: number,\n    quality: 'low' | 'medium' | 'high'\n  ): EntityPool<Particle> {\n    if (!this.particlePools.has(systemId)) {\n      this.particlePools.set(systemId, new Map());\n    }\n\n    const sizePools = this.particlePools.get(systemId)!;\n    if (!sizePools.has(particleSize)) {\n      const poolSize = this.getPoolSizeForQuality(quality);\n      sizePools.set(particleSize, new EntityPool<Particle>(() => this.createParticle(), poolSize));\n    }\n\n    return sizePools.get(particleSize)!;\n  }\n\n  private createParticle(): Particle {\n    return {\n      id: `particle-${Date.now()}-${Math.random()}`,\n      active: false,\n      position: { x: 0, y: 0 },\n      velocity: { x: 0, y: 0 },\n      acceleration: { x: 0, y: 0 },\n      size: 1,\n      color: '#ffffff',\n      opacity: 1,\n      life: 1,\n      maxLife: 1,\n      reset(): void {\n        this.active = false;\n        this.position = { x: 0, y: 0 };\n        this.velocity = { x: 0, y: 0 };\n        this.acceleration = { x: 0, y: 0 };\n        this.opacity = 1;\n        this.life = this.maxLife;\n      },\n    };\n  }\n\n  public createParticleSystem(id: string, config: ParticleSystemConfig): void {\n    const pool = this.getOrCreatePool(id, config.size.max, config.quality);\n    const geometry = new BufferGeometry();\n    const material = this.createParticleMaterial(config);\n    const points = new Points(geometry, material);\n\n    const system = new ParticleSystem(pool, config, points, this.scene);\n    this.systems.set(id, system);\n    this.scene.add(points);\n  }\n\n  private createParticleMaterial(config: ParticleSystemConfig): ShaderMaterial {\n    return new ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        color: { value: new Color(config.color as string) },\n      },\n      vertexShader: `\n        attribute float size;\n        attribute float opacity;\n        attribute vec3 color;\n        varying float vOpacity;\n        varying vec3 vColor;\n        \n        void main() {\n          vOpacity = opacity;\n          vColor = color;\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_PointSize = size * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        varying float vOpacity;\n        varying vec3 vColor;\n        \n        void main() {\n          vec2 xy = gl_PointCoord.xy - vec2(0.5);\n          float r = length(xy);\n          if (r > 0.5) discard;\n          \n          float glow = exp(-r * 3.0);\n          gl_FragColor = vec4(vColor, vOpacity * glow);\n        }\n      `,\n      transparent: true,\n      blending: config.blendMode === 'additive' ? AdditiveBlending : undefined,\n      depthWrite: false,\n    });\n  }\n\n  public update(deltaTime: number): void {\n    this.frameCount++;\n\n    // Skip frames for low priority systems when under performance pressure\n    const shouldUpdate = this.frameCount % this.FRAME_SKIP_THRESHOLD === 0;\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.systems.forEach(system => system.update(deltaTime));\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  private cleanupInactiveSystems(): void {\n    const now = Date.now();\n    this.systems.forEach((system, id) => {\n      if (!system.hasActiveParticles() && now - system.getLastUpdateTime() > 5000) {\n        this.removeSystem(id);\n      }\n    });\n  }\n\n  public removeSystem(id: string): void {\n    const system = this.systems.get(id);\n    if (system) {\n      system.cleanup();\n      this.systems.delete(id);\n\n      // Clean up size-based pools\n      const sizePools = this.particlePools.get(id);\n      if (sizePools) {\n        sizePools.forEach(pool => pool.clear());\n        this.particlePools.delete(id);\n      }\n    }\n  }\n\n  public cleanup(): void {\n    this.systems.forEach(system => system.cleanup());\n    this.systems.clear();\n    this.particlePools.forEach(sizePools => {\n      sizePools.forEach(pool => pool.clear());\n    });\n    this.particlePools.clear();\n    this.renderer.dispose();\n    this.scene.clear();\n  }\n}\n\nclass ParticleSystem {\n  private pool: EntityPool<Particle>;\n  private config: ParticleSystemConfig;\n  private points: Points;\n  private scene: Scene;\n  private particles: Set<Particle>;\n  private lastSpawnTime: number;\n  private lastUpdateTime: number;\n\n  constructor(\n    pool: EntityPool<Particle>,\n    config: ParticleSystemConfig,\n    points: Points,\n    scene: Scene\n  ) {\n    this.pool = pool;\n    this.config = config;\n    this.points = points;\n    this.scene = scene;\n    this.particles = new Set();\n    this.lastSpawnTime = 0;\n    this.lastUpdateTime = Date.now();\n  }\n\n  public update(deltaTime: number): void {\n    this.lastUpdateTime = Date.now();\n    this.spawnParticles(deltaTime);\n    this.updateParticles(deltaTime);\n    this.updateGeometry();\n  }\n\n  private spawnParticles(deltaTime: number): void {\n    const now = performance.now();\n    const spawnInterval = 1000 / this.config.spawnRate;\n\n    while (\n      now - this.lastSpawnTime >= spawnInterval &&\n      this.particles.size < this.config.maxParticles\n    ) {\n      this.spawnParticle();\n      this.lastSpawnTime += spawnInterval;\n    }\n  }\n\n  private spawnParticle(): void {\n    const particle = this.pool.acquire();\n    if (!particle) {\n      return;\n    }\n\n    particle.active = true;\n    particle.position = { ...this.config.position };\n    particle.velocity = {\n      x:\n        this.config.initialVelocity.min.x +\n        Math.random() * (this.config.initialVelocity.max.x - this.config.initialVelocity.min.x),\n      y:\n        this.config.initialVelocity.min.y +\n        Math.random() * (this.config.initialVelocity.max.y - this.config.initialVelocity.min.y),\n    };\n    particle.acceleration = { ...this.config.acceleration };\n    particle.size =\n      this.config.size.min + Math.random() * (this.config.size.max - this.config.size.min);\n    particle.life =\n      this.config.life.min + Math.random() * (this.config.life.max - this.config.life.min);\n    particle.maxLife = particle.life;\n\n    this.particles.add(particle);\n  }\n\n  private updateParticles(deltaTime: number): void {\n    this.particles.forEach(particle => {\n      particle.life -= deltaTime;\n      if (particle.life <= 0) {\n        this.particles.delete(particle);\n        this.pool.release(particle);\n        return;\n      }\n\n      particle.velocity.x += particle.acceleration.x * deltaTime;\n      particle.velocity.y += particle.acceleration.y * deltaTime;\n      particle.position.x += particle.velocity.x * deltaTime;\n      particle.position.y += particle.velocity.y * deltaTime;\n      particle.opacity = particle.life / particle.maxLife;\n    });\n  }\n\n  private updateGeometry(): void {\n    const positions = new Float32Array(this.particles.size * 3);\n    const sizes = new Float32Array(this.particles.size);\n    const opacities = new Float32Array(this.particles.size);\n    const colors = new Float32Array(this.particles.size * 3);\n\n    let i = 0;\n    this.particles.forEach(particle => {\n      positions[i * 3] = particle.position.x;\n      positions[i * 3 + 1] = particle.position.y;\n      positions[i * 3 + 2] = 0;\n\n      sizes[i] = particle.size;\n      opacities[i] = particle.opacity;\n\n      const color = new Color(particle.color);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n\n      i++;\n    });\n\n    const geometry = this.points.geometry as BufferGeometry;\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    geometry.setAttribute('size', new BufferAttribute(sizes, 1));\n    geometry.setAttribute('opacity', new BufferAttribute(opacities, 1));\n    geometry.setAttribute('color', new BufferAttribute(colors, 3));\n  }\n\n  public hasActiveParticles(): boolean {\n    return this.particles.size > 0;\n  }\n\n  public getLastUpdateTime(): number {\n    return this.lastUpdateTime;\n  }\n\n  public cleanup(): void {\n    this.particles.forEach(particle => {\n      this.pool.release(particle);\n    });\n    this.particles.clear();\n    this.scene.remove(this.points);\n    this.points.geometry.dispose();\n    (this.points.material as ShaderMaterial).dispose();\n  }\n}\n\n// Export singleton instance\nexport const particleSystemManager = ParticleSystemManager.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/exploration/ReconShipManagerImpl.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":336,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9979,9982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9979,9982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'severityLevels' is assigned a value but never used.","line":373,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":373,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { Position } from '../../types/core/GameTypes';\nimport { CommonShipCapabilities } from '../../types/ships/CommonShipTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { combatManager } from '../combat/combatManager';\n\ninterface Anomaly {\n  id: string;\n  type: 'artifact' | 'signal' | 'phenomenon';\n  severity: 'low' | 'medium' | 'high';\n  description: string;\n  investigated: boolean;\n}\n\ninterface Threat {\n  id: string;\n  position: Position;\n  severity: number;\n  type: string;\n}\n\ninterface ReconShipEvents {\n  shipRegistered: { shipId: string };\n  shipUnregistered: { shipId: string };\n  taskAssigned: { shipId: string; task: ExplorationTask };\n  taskCompleted: { shipId: string; task: ExplorationTask };\n  techBonusesUpdated: {\n    shipId: string;\n    bonuses: {\n      scanSpeed: number;\n      stealthEfficiency: number;\n      detectionRange: number;\n    };\n  };\n  stealthToggled: { shipId: string; active: boolean };\n  shipStatusUpdated: { shipId: string; status: ReconShip['status'] };\n  threatDetected: { shipId: string; threatLevel: number; position: Position };\n  anomalyDiscovered: { shipId: string; anomaly: Anomaly; position: Position };\n}\n\ninterface ReconShip {\n  id: string;\n  name: string;\n  type: 'AC27G' | 'PathFinder' | 'VoidSeeker';\n  status: 'idle' | 'scanning' | 'investigating' | 'returning';\n  targetSector?: string;\n  experience: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  efficiency: number;\n  position: Position;\n  capabilities: CommonShipCapabilities;\n  stealth: {\n    active: boolean;\n    level: number;\n    cooldown: number;\n  };\n  sensors: {\n    range: number;\n    accuracy: number;\n    anomalyDetection: number;\n  };\n  discoveries: {\n    mappedSectors: number;\n    anomaliesFound: number;\n    resourcesLocated: number;\n  };\n  techBonuses?: {\n    scanSpeed: number;\n    stealthEfficiency: number;\n    detectionRange: number;\n  };\n}\n\ninterface ExplorationTask {\n  id: string;\n  type: 'explore' | 'investigate' | 'evade';\n  target: {\n    id: string;\n    position: Position;\n  };\n  priority: number;\n  assignedAt: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  status: 'queued' | 'in-progress' | 'completed' | 'failed';\n  progress?: number;\n  threatLevel?: number;\n}\n\nexport class ReconShipManagerImpl extends EventEmitter<ReconShipEvents> {\n  private ships: Map<string, ReconShip> = new Map();\n  private tasks: Map<string, ExplorationTask> = new Map();\n  private sectors: Map<\n    string,\n    {\n      id: string;\n      position: Position;\n      explored: boolean;\n      anomalies: Anomaly[];\n      resources: number;\n    }\n  > = new Map();\n\n  public registerShip(ship: ReconShip): void {\n    if (ship.capabilities.canScan) {\n      this.ships.set(ship.id, ship);\n\n      // Emit events\n      this.emit('shipRegistered', { shipId: ship.id });\n      moduleEventBus.emit({\n        type: 'MODULE_ACTIVATED',\n        moduleId: ship.id,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n        data: { ship },\n      });\n    }\n  }\n\n  public unregisterShip(shipId: string): void {\n    if (this.ships.has(shipId)) {\n      this.ships.delete(shipId);\n      this.tasks.delete(shipId);\n\n      // Emit events\n      this.emit('shipUnregistered', { shipId });\n      moduleEventBus.emit({\n        type: 'MODULE_DEACTIVATED',\n        moduleId: shipId,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  public assignExplorationTask(\n    shipId: string,\n    sectorId: string,\n    position: Position,\n    specialization: 'mapping' | 'anomaly' | 'resource'\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (!ship || !ship.capabilities.canScan) {\n      return;\n    }\n\n    // Check for threats before assigning task\n    const threats = this.getNearbyThreats(position, ship.sensors.range);\n    const threatLevel = this.calculateThreatLevel(threats, ship);\n\n    if (threatLevel > 0.7) {\n      // High threat - initiate evasion\n      this.assignEvasionTask(shipId, position, threats);\n      return;\n    }\n\n    const task: ExplorationTask = {\n      id: `explore-${sectorId}`,\n      type: threatLevel > 0.3 ? 'investigate' : 'explore',\n      target: {\n        id: sectorId,\n        position,\n      },\n      priority: this.getPriorityForSpecialization(specialization),\n      assignedAt: Date.now(),\n      specialization,\n      status: 'queued',\n      threatLevel,\n    };\n\n    this.tasks.set(shipId, task);\n    this.updateShipStatus(shipId, 'scanning');\n\n    // Emit events\n    this.emit('taskAssigned', { shipId, task });\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: shipId,\n      moduleType: 'radar' as ModuleType,\n      timestamp: Date.now(),\n      data: { task },\n    });\n  }\n\n  private assignEvasionTask(shipId: string, position: Position, threats: Threat[]): void {\n    const ship = this.ships.get(shipId);\n    if (!ship) return;\n\n    // Calculate safe position away from threats\n    const safePosition = this.calculateSafePosition(position, threats);\n\n    const task: ExplorationTask = {\n      id: `evade-${Date.now()}`,\n      type: 'evade',\n      target: {\n        id: 'safe-zone',\n        position: safePosition,\n      },\n      priority: 10, // Highest priority for evasion\n      assignedAt: Date.now(),\n      specialization: 'mapping',\n      status: 'queued',\n      threatLevel: 1,\n    };\n\n    this.tasks.set(shipId, task);\n    this.updateShipStatus(shipId, 'returning');\n    this.toggleShipStealth(shipId, true);\n\n    this.emit('taskAssigned', { shipId, task });\n  }\n\n  private calculateSafePosition(position: Position, threats: Threat[]): Position {\n    // Calculate vector away from threats\n    const escapeVector = threats.reduce(\n      (vec, threat) => {\n        const dx = position.x - threat.position.x;\n        const dy = position.y - threat.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        return {\n          x: vec.x + (dx / distance) * threat.severity,\n          y: vec.y + (dy / distance) * threat.severity,\n        };\n      },\n      { x: 0, y: 0 }\n    );\n\n    // Normalize and scale\n    const magnitude = Math.sqrt(escapeVector.x * escapeVector.x + escapeVector.y * escapeVector.y);\n    const safeDistance = 500; // Base safe distance\n\n    return {\n      x: position.x + (escapeVector.x / magnitude) * safeDistance,\n      y: position.y + (escapeVector.y / magnitude) * safeDistance,\n    };\n  }\n\n  public completeTask(shipId: string): void {\n    const task = this.tasks.get(shipId);\n    const ship = this.ships.get(shipId);\n\n    if (task && ship) {\n      // Update sector data\n      const sector = this.sectors.get(task.target.id);\n      if (sector) {\n        sector.explored = true;\n        ship.discoveries.mappedSectors++;\n\n        // Enhanced specialization handling\n        if (task.specialization === 'anomaly') {\n          const anomalies = this.generateAnomalies(ship.sensors.anomalyDetection);\n          sector.anomalies = anomalies;\n          ship.discoveries.anomaliesFound += anomalies.length;\n\n          // Emit anomaly discoveries\n          anomalies.forEach(anomaly => {\n            this.emit('anomalyDiscovered', {\n              shipId,\n              anomaly,\n              position: task.target.position,\n            });\n          });\n\n          // Emit mission event\n          moduleEventBus.emit({\n            type: 'MISSION_COMPLETED',\n            moduleId: shipId,\n            moduleType: 'radar' as ModuleType,\n            timestamp: Date.now(),\n            data: {\n              type: 'anomaly',\n              sector: task.target.id,\n              importance: anomalies.some(a => a.severity === 'high')\n                ? 'high'\n                : anomalies.some(a => a.severity === 'medium')\n                  ? 'medium'\n                  : 'low',\n              description: `Discovered ${anomalies.length} anomalies in ${task.target.id}`,\n              xpGained: this.calculateExperienceGain(task, ship),\n              anomalyDetails: anomalies.map(a => ({\n                type: a.type,\n                severity: a.severity,\n                investigated: a.investigated,\n              })),\n            },\n          });\n        } else if (task.specialization === 'resource') {\n          sector.resources = Math.floor(Math.random() * 5) + 1;\n          ship.discoveries.resourcesLocated += sector.resources;\n\n          // Emit mission event\n          moduleEventBus.emit({\n            type: 'MISSION_COMPLETED',\n            moduleId: shipId,\n            moduleType: 'radar' as ModuleType,\n            timestamp: Date.now(),\n            data: {\n              type: 'discovery',\n              sector: task.target.id,\n              importance: sector.resources > 3 ? 'high' : sector.resources > 1 ? 'medium' : 'low',\n              description: `Located ${sector.resources} resource deposits in ${task.target.id}`,\n              xpGained: this.calculateExperienceGain(task, ship),\n              resourcesFound: [{ type: 'Unknown', amount: sector.resources }],\n            },\n          });\n        }\n      }\n\n      // Enhanced experience calculation\n      const experienceGained = this.calculateExperienceGain(task, ship);\n      ship.experience += experienceGained;\n\n      // Apply tech bonuses based on experience\n      this.updateTechBonuses(ship);\n\n      this.tasks.delete(shipId);\n      this.updateShipStatus(shipId, 'returning');\n\n      // Emit events\n      this.emit('taskCompleted', { shipId, task });\n      moduleEventBus.emit({\n        type: 'AUTOMATION_CYCLE_COMPLETE',\n        moduleId: shipId,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n        data: {\n          task,\n          discoveries: ship.discoveries,\n          experienceGained,\n          heatMapValue: this.calculateHeatMapValue(sector),\n        },\n      });\n    }\n  }\n\n  private calculateHeatMapValue(sector: any): number {\n    if (!sector) return 0;\n\n    let heatValue = 0;\n\n    // Resource potential contribution (40%)\n    heatValue += (sector.resources || 0) * 0.4;\n\n    // Anomaly contribution (30%)\n    if (sector.anomalies) {\n      const anomalyHeat = sector.anomalies.reduce((sum: number, anomaly: Anomaly) => {\n        return (\n          sum + (anomaly.severity === 'high' ? 0.3 : anomaly.severity === 'medium' ? 0.2 : 0.1)\n        );\n      }, 0);\n      heatValue += anomalyHeat;\n    }\n\n    // Habitability contribution (30%)\n    if (sector.habitabilityScore) {\n      heatValue += sector.habitabilityScore * 0.3;\n    }\n\n    // Age decay\n    if (sector.lastScanned) {\n      const hoursSinceLastScan = (Date.now() - sector.lastScanned) / (1000 * 60 * 60);\n      const ageFactor = Math.max(0, 1 - hoursSinceLastScan / 168); // 168 hours = 1 week\n      heatValue *= ageFactor;\n    }\n\n    return Math.min(1, heatValue);\n  }\n\n  private generateAnomalies(detectionSkill: number): Anomaly[] {\n    const count = Math.floor(Math.random() * 3 * detectionSkill) + 1;\n    const anomalies: Anomaly[] = [];\n    const anomalyTypes = ['artifact', 'signal', 'phenomenon'] as const;\n    const severityLevels = ['high', 'medium', 'low'] as const;\n\n    for (let i = 0; i < count; i++) {\n      const type = anomalyTypes[Math.floor(Math.random() * anomalyTypes.length)];\n      const severity = Math.random() < 0.2 ? 'high' : Math.random() < 0.5 ? 'medium' : 'low';\n\n      anomalies.push({\n        id: `anomaly-${Date.now()}-${i}`,\n        type,\n        severity,\n        description: this.generateAnomalyDescription(type, severity),\n        investigated: false,\n      });\n    }\n\n    return anomalies;\n  }\n\n  private generateAnomalyDescription(\n    type: 'artifact' | 'signal' | 'phenomenon',\n    severity: 'low' | 'medium' | 'high'\n  ): string {\n    const descriptions = {\n      artifact: {\n        high: 'Ancient technological marvel of immense power',\n        medium: 'Mysterious alien artifacts with unknown purpose',\n        low: 'Scattered remnants of past civilizations',\n      },\n      signal: {\n        high: 'Powerful energy signature of unknown origin',\n        medium: 'Recurring patterns in subspace frequencies',\n        low: 'Faint echoes of distant transmissions',\n      },\n      phenomenon: {\n        high: 'Dangerous spatial anomaly requiring immediate attention',\n        medium: 'Unusual gravitational fluctuations detected',\n        low: 'Minor disturbances in local space-time',\n      },\n    } as const;\n\n    return descriptions[type][severity];\n  }\n\n  private calculateExperienceGain(task: ExplorationTask, ship: ReconShip): number {\n    const baseXP = 100;\n    const timeFactor = (Date.now() - task.assignedAt) / 1000 / 60; // Minutes\n\n    // Specialization bonus\n    const specializationBonus = task.specialization === ship.specialization ? 1.5 : 1.2;\n\n    // Threat bonus\n    const threatBonus = task.threatLevel ? 1 + task.threatLevel : 1;\n\n    // Efficiency bonus\n    const efficiencyBonus = ship.efficiency;\n\n    // Discovery bonus\n    const discoveryBonus =\n      ship.discoveries.anomaliesFound * 0.1 + ship.discoveries.resourcesLocated * 0.05;\n\n    return Math.floor(\n      baseXP *\n        timeFactor *\n        specializationBonus *\n        threatBonus *\n        efficiencyBonus *\n        (1 + discoveryBonus)\n    );\n  }\n\n  private updateTechBonuses(ship: ReconShip): void {\n    const experienceLevel = Math.floor(ship.experience / 1000);\n    const bonuses = {\n      scanSpeed: 1 + experienceLevel * 0.1,\n      stealthEfficiency: 1 + experienceLevel * 0.15,\n      detectionRange: 1 + experienceLevel * 0.05,\n    };\n\n    this.emit('techBonusesUpdated', { shipId: ship.id, bonuses });\n  }\n\n  public updateShipTechBonuses(\n    shipId: string,\n    bonuses: { scanSpeed: number; stealthEfficiency: number; detectionRange: number }\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.techBonuses = bonuses;\n      this.emit('techBonusesUpdated', { shipId, bonuses });\n    }\n  }\n\n  public toggleShipStealth(shipId: string, active: boolean): void {\n    const ship = this.ships.get(shipId);\n    if (ship && ship.stealth.cooldown <= 0) {\n      ship.stealth.active = active;\n      this.emit('stealthToggled', { shipId, active: ship.stealth.active });\n    }\n  }\n\n  private updateShipStatus(\n    shipId: string,\n    status: 'idle' | 'scanning' | 'investigating' | 'returning'\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.status = status;\n\n      // Emit events\n      this.emit('shipStatusUpdated', { shipId, status });\n      moduleEventBus.emit({\n        type: 'STATUS_CHANGED',\n        moduleId: shipId,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n        data: { status },\n      });\n    }\n  }\n\n  private getPriorityForSpecialization(specialization: 'mapping' | 'anomaly' | 'resource'): number {\n    switch (specialization) {\n      case 'anomaly':\n        return 3;\n      case 'resource':\n        return 2;\n      case 'mapping':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  // Add method to get ship efficiency with tech bonuses\n  public getShipEfficiency(shipId: string): number {\n    const ship = this.ships.get(shipId);\n    if (!ship) {\n      return 0;\n    }\n\n    const baseEfficiency = ship.efficiency;\n    const techBonus = ship.techBonuses?.scanSpeed || 1;\n\n    return baseEfficiency * techBonus;\n  }\n\n  // Update method for periodic tasks\n  public update(deltaTime: number): void {\n    this.ships.forEach(ship => {\n      // Update stealth cooldown\n      if (ship.stealth.cooldown > 0) {\n        ship.stealth.cooldown = Math.max(0, ship.stealth.cooldown - deltaTime);\n      }\n\n      // Apply tech bonuses to sensor range\n      if (ship.techBonuses) {\n        ship.sensors.range *= ship.techBonuses.detectionRange;\n      }\n\n      // Handle automatic stealth activation near threats\n      if (this.isNearThreat(ship) && !ship.stealth.active && ship.stealth.cooldown <= 0) {\n        this.toggleShipStealth(ship.id, true);\n      }\n    });\n  }\n\n  private isNearThreat(ship: ReconShip): boolean {\n    // Get threats within ship's sensor range\n    const threats = combatManager.getThreatsInRange(ship.position, ship.sensors.range);\n\n    if (threats.length === 0) {\n      return false;\n    }\n\n    // Calculate threat level based on proximity and severity\n    const threatLevel = threats.reduce((total, threat) => {\n      const distance = Math.sqrt(\n        Math.pow(threat.position.x - ship.position.x, 2) +\n          Math.pow(threat.position.y - ship.position.y, 2)\n      );\n\n      // Scale threat by distance and severity\n      const distanceFactor = 1 - Math.min(distance / ship.sensors.range, 1);\n      const severityFactor =\n        threat.severity === 'high' ? 1 : threat.severity === 'medium' ? 0.6 : 0.3;\n\n      // Apply sensor accuracy to detection reliability\n      const detectionChance = ship.sensors.accuracy * (ship.techBonuses?.detectionRange || 1);\n\n      return total + distanceFactor * severityFactor * detectionChance;\n    }, 0);\n\n    // Return true if threat level exceeds threshold\n    // Scale threshold based on ship's stealth capabilities\n    const stealthFactor = (ship.stealth.level / 100) * (ship.techBonuses?.stealthEfficiency || 1);\n    const baseThreshold = 0.3; // Base threshold for threat response\n\n    return threatLevel > baseThreshold * (1 + stealthFactor);\n  }\n\n  private getNearbyThreats(position: Position, range: number): Threat[] {\n    return combatManager.getThreatsInRange(position, range).map(threat => ({\n      id: threat.id,\n      position: threat.position,\n      severity: threat.severity === 'high' ? 1 : threat.severity === 'medium' ? 0.6 : 0.3,\n      type: threat.type,\n    }));\n  }\n\n  private calculateThreatLevel(threats: Threat[], ship: ReconShip): number {\n    if (threats.length === 0) return 0;\n\n    return threats.reduce((total, threat) => {\n      const distance = Math.sqrt(\n        Math.pow(threat.position.x - ship.position.x, 2) +\n          Math.pow(threat.position.y - ship.position.y, 2)\n      );\n\n      const distanceFactor = 1 - Math.min(distance / ship.sensors.range, 1);\n      const detectionChance = ship.sensors.accuracy * (ship.techBonuses?.detectionRange || 1);\n\n      return total + distanceFactor * threat.severity * detectionChance;\n    }, 0);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/factions/FactionRelationshipManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/factions/factionManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/AsteroidFieldManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":73,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":73,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2187,2239],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":132,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":217,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[6266,6403],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":260,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":260,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7502,7595],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":266,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":266,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7682,7751],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":270,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":270,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7822,7893],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":284,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":284,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[8173,8231],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":327,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":327,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[9141,9264],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":336,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":336,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[9452,9537],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":342,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":342,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[9675,9795],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":350,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":350,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[9911,10045],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":378,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":378,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10552,10704],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":441,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":441,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[12474,12612],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":527,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":527,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[15371,15495],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":561,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":561,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[16478,16742],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { EventEmitter } from '../../lib/utils/EventEmitter';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { Position } from '../../types/core/GameTypes';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\n\ninterface Hazard {\n  id: string;\n  type: 'asteroids' | 'debris' | 'radiation' | 'anomaly';\n  position: Position;\n  radius: number;\n  severity: 'low' | 'medium' | 'high';\n  effect: {\n    type: 'damage' | 'slow' | 'shield' | 'weapon';\n    value: number;\n  };\n  movement?: {\n    speed: number;\n    direction: number;\n  };\n  particles?: number;\n}\n\ninterface AsteroidField {\n  id: string;\n  position: Position;\n  radius: number;\n  density: number;\n  resources: Map<ResourceType, number>;\n  hazards: Array<Hazard>;\n  status: 'active' | 'depleted';\n  createdAt: number;\n  lastUpdated: number;\n}\n\ninterface AsteroidFieldState {\n  fields: Map<string, AsteroidField>;\n  activeHazards: Set<string>;\n  resourceNodes: Map<string, { fieldId: string; type: ResourceType; amount: number }>;\n}\n\ninterface AsteroidFieldEvents {\n  fieldGenerated: { fieldId: string; position: Position };\n  fieldDepleted: { fieldId: string };\n  resourceDiscovered: { fieldId: string; resourceType: ResourceType; amount: number };\n  hazardCreated: { fieldId: string; hazard: Hazard };\n  hazardRemoved: { fieldId: string; hazardId: string };\n  resourceNodeRegistered: {\n    nodeId: string;\n    fieldId: string;\n    type: ResourceType;\n    position: Position;\n  };\n  resourceExtracted: { nodeId: string; type: ResourceType; amount: number; remaining: number };\n  shipHazardCollision: { shipId: string; hazardId: string; effect: Hazard['effect'] };\n  shipPositionUpdated: { shipId: string; position: Position; inField: boolean };\n}\n\nexport class AsteroidFieldManager extends EventEmitter<AsteroidFieldEvents> {\n  private state: AsteroidFieldState = {\n    fields: new Map(),\n    activeHazards: new Set(),\n    resourceNodes: new Map(),\n  };\n  private updateInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.setupEventListeners();\n    this.startUpdateLoop();\n\n    // Debug logging\n    console.debug('[AsteroidFieldManager] Initialized');\n  }\n\n  private setupEventListeners(): void {\n    moduleEventBus.subscribe(\n      'MODULE_ACTIVATED',\n      (event: { moduleType: string; moduleId: string }) => {\n        if (event.moduleType === 'asteroidField') {\n          this.handleModuleActivation(event.moduleId);\n        }\n      }\n    );\n\n    moduleEventBus.subscribe(\n      'MODULE_DEACTIVATED',\n      (event: { moduleType: string; moduleId: string }) => {\n        if (event.moduleType === 'asteroidField') {\n          this.handleModuleDeactivation(event.moduleId);\n        }\n      }\n    );\n  }\n\n  private startUpdateLoop(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n\n    this.updateInterval = setInterval(() => {\n      this.updateFields();\n    }, 1000); // Update every second\n  }\n\n  private updateFields(): void {\n    const now = Date.now();\n    this.state.fields.forEach((field, fieldId) => {\n      if (field.status === 'depleted') {\n        return;\n      }\n\n      // Update hazards\n      field.hazards = field.hazards.filter(hazard => {\n        const isActive = this.state.activeHazards.has(hazard.id);\n        if (!isActive) {\n          this.emit('hazardRemoved', { fieldId, hazardId: hazard.id });\n        }\n        return isActive;\n      });\n\n      // Generate new hazards if needed\n      if (field.hazards.length < Math.ceil(field.density * 5)) {\n        const hazard = this.generateHazard(field);\n        field.hazards.push(hazard);\n        this.state.activeHazards.add(hazard.id);\n        this.emit('hazardCreated', { fieldId, hazard });\n      }\n\n      // Update resources\n      let totalResources = 0;\n      field.resources.forEach((amount, type) => {\n        totalResources += amount;\n      });\n\n      if (totalResources <= 0) {\n        field.status = 'depleted';\n        this.emit('fieldDepleted', { fieldId });\n      }\n\n      field.lastUpdated = now;\n    });\n  }\n\n  private generateHazard(field: AsteroidField): Hazard {\n    const angle = Math.random() * Math.PI * 2;\n    const distance = Math.random() * field.radius;\n    const position = {\n      x: field.position.x + Math.cos(angle) * distance,\n      y: field.position.y + Math.sin(angle) * distance,\n    };\n\n    return {\n      id: `hazard-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type: 'asteroids',\n      position,\n      radius: 20 + Math.random() * 30,\n      severity: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low',\n      effect: {\n        type: 'damage',\n        value: 10 + Math.random() * 20,\n      },\n      movement: {\n        speed: 0.5 + Math.random(),\n        direction: Math.random() * Math.PI * 2,\n      },\n    };\n  }\n\n  public generateField(position: Position, radius: number, density: number): string {\n    const fieldId = `field-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const field: AsteroidField = {\n      id: fieldId,\n      position,\n      radius,\n      density: Math.max(0.1, Math.min(1, density)),\n      resources: new Map(),\n      hazards: [],\n      status: 'active',\n      createdAt: Date.now(),\n      lastUpdated: Date.now(),\n    };\n\n    // Generate initial resources\n    const resourceTypes: ResourceType[] = ['minerals', 'gas', 'exotic'];\n    resourceTypes.forEach(type => {\n      const amount = Math.floor(1000 + Math.random() * 4000 * density);\n      field.resources.set(type, amount);\n\n      const nodeId = `node-${fieldId}-${type}`;\n      this.state.resourceNodes.set(nodeId, {\n        fieldId,\n        type,\n        amount,\n      });\n\n      this.emit('resourceDiscovered', {\n        fieldId,\n        resourceType: type,\n        amount,\n      });\n    });\n\n    // Generate initial hazards\n    for (let i = 0; i < Math.ceil(density * 5); i++) {\n      const hazard = this.generateHazard(field);\n      field.hazards.push(hazard);\n      this.state.activeHazards.add(hazard.id);\n      this.emit('hazardCreated', { fieldId, hazard });\n    }\n\n    this.state.fields.set(fieldId, field);\n    this.emit('fieldGenerated', { fieldId, position });\n\n    // Debug logging\n    console.debug(\n      `[AsteroidFieldManager] Generated field ${fieldId} at (${position.x}, ${position.y}) with density ${density}`\n    );\n\n    return fieldId;\n  }\n\n  public getField(fieldId: string): AsteroidField | undefined {\n    return this.state.fields.get(fieldId);\n  }\n\n  public getAllFields(): AsteroidField[] {\n    return Array.from(this.state.fields.values());\n  }\n\n  public getActiveFields(): AsteroidField[] {\n    return Array.from(this.state.fields.values()).filter(field => field.status === 'active');\n  }\n\n  public getResourceNodes(): Map<string, { fieldId: string; type: ResourceType; amount: number }> {\n    return new Map(this.state.resourceNodes);\n  }\n\n  public extractResource(nodeId: string, amount: number): boolean {\n    const node = this.state.resourceNodes.get(nodeId);\n    if (!node || amount <= 0) {\n      return false;\n    }\n\n    const field = this.state.fields.get(node.fieldId);\n    if (!field || field.status === 'depleted') {\n      return false;\n    }\n\n    const currentAmount = field.resources.get(node.type) || 0;\n    if (currentAmount < amount) {\n      return false;\n    }\n\n    field.resources.set(node.type, currentAmount - amount);\n    node.amount = currentAmount - amount;\n\n    // Debug logging\n    console.debug(`[AsteroidFieldManager] Extracted ${amount} ${node.type} from node ${nodeId}`);\n\n    return true;\n  }\n\n  private handleModuleActivation(moduleId: string): void {\n    console.debug(`[AsteroidFieldManager] Module ${moduleId} activated`);\n  }\n\n  private handleModuleDeactivation(moduleId: string): void {\n    console.debug(`[AsteroidFieldManager] Module ${moduleId} deactivated`);\n  }\n\n  public cleanup(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n\n    this.state.fields.clear();\n    this.state.activeHazards.clear();\n    this.state.resourceNodes.clear();\n\n    // Debug logging\n    console.debug('[AsteroidFieldManager] Cleanup completed');\n  }\n\n  public registerResourceNode(fieldId: string, type: ResourceType): string {\n    const field = this.state.fields.get(fieldId);\n    if (!field) {\n      return '';\n    }\n\n    const nodeId = `node-${fieldId}-${type}-${Date.now()}`;\n    const amount = field.resources.get(type) || 0;\n\n    this.state.resourceNodes.set(nodeId, {\n      fieldId,\n      type,\n      amount,\n    });\n\n    // Register with mining system\n    moduleEventBus.emit({\n      type: 'MODULE_ACTIVATED',\n      moduleId: nodeId,\n      moduleType: 'mineral' as ModuleType,\n      timestamp: Date.now(),\n      data: {\n        id: nodeId,\n        type,\n        position: field.position,\n        amount,\n        thresholds: {\n          min: Math.floor(amount * 0.2),\n          max: amount,\n        },\n      },\n    });\n\n    this.emit('resourceNodeRegistered', {\n      nodeId,\n      fieldId,\n      type,\n      position: field.position,\n    });\n\n    console.debug(\n      `[AsteroidFieldManager] Registered resource node ${nodeId} of type ${type} in field ${fieldId}`\n    );\n    return nodeId;\n  }\n\n  public handleMiningTask(nodeId: string, shipId: string, amount: number): boolean {\n    const node = this.state.resourceNodes.get(nodeId);\n    if (!node) {\n      console.debug(`[AsteroidFieldManager] Mining task failed: Node ${nodeId} not found`);\n      return false;\n    }\n\n    const field = this.state.fields.get(node.fieldId);\n    if (!field || field.status === 'depleted') {\n      console.debug(\n        `[AsteroidFieldManager] Mining task failed: Field ${node.fieldId} not found or depleted`\n      );\n      return false;\n    }\n\n    const extracted = this.extractResource(nodeId, amount);\n    if (!extracted) {\n      console.debug(\n        `[AsteroidFieldManager] Mining task failed: Could not extract ${amount} resources from node ${nodeId}`\n      );\n      return false;\n    }\n\n    const remaining = field.resources.get(node.type) || 0;\n    this.emit('resourceExtracted', {\n      nodeId,\n      type: node.type,\n      amount,\n      remaining,\n    });\n\n    // Update mining system\n    moduleEventBus.emit({\n      type: 'RESOURCE_TRANSFERRED',\n      moduleId: nodeId,\n      moduleType: 'mineral' as ModuleType,\n      timestamp: Date.now(),\n      data: {\n        shipId,\n        amount,\n        remaining,\n        resourceType: node.type,\n      },\n    });\n\n    console.debug(\n      `[AsteroidFieldManager] Mining task completed: Extracted ${amount} ${node.type} from node ${nodeId}, ${remaining} remaining`\n    );\n    return true;\n  }\n\n  public getNodeThresholds(nodeId: string): { min: number; max: number } | null {\n    const node = this.state.resourceNodes.get(nodeId);\n    if (!node) {\n      return null;\n    }\n\n    const field = this.state.fields.get(node.fieldId);\n    if (!field) {\n      return null;\n    }\n\n    const amount = field.resources.get(node.type) || 0;\n    return {\n      min: Math.floor(amount * 0.2),\n      max: amount,\n    };\n  }\n\n  public handleShipMovement(shipId: string, position: Position): void {\n    let inField = false;\n    let nearestHazard: Hazard | null = null;\n    let nearestDistance = Infinity;\n\n    // Convert Map entries to array to avoid MapIterator error\n    const fieldValues = Array.from(this.state.fields.values());\n    for (const field of fieldValues) {\n      // Calculate distance to field center\n      const distanceToField = Math.sqrt(\n        Math.pow(position.x - field.position.x, 2) + Math.pow(position.y - field.position.y, 2)\n      );\n\n      if (distanceToField <= field.radius) {\n        inField = true;\n\n        // Find nearest hazard in field\n        for (const hazard of field.hazards) {\n          const distanceToHazard = Math.sqrt(\n            Math.pow(position.x - hazard.position.x, 2) +\n              Math.pow(position.y - hazard.position.y, 2)\n          );\n\n          if (distanceToHazard < nearestDistance) {\n            nearestDistance = distanceToHazard;\n            nearestHazard = hazard;\n          }\n        }\n      }\n    }\n\n    // Emit position update\n    this.emit('shipPositionUpdated', { shipId, position, inField });\n\n    // Handle hazard collision if ship is near a hazard\n    if (nearestHazard && nearestDistance <= nearestHazard.radius) {\n      this.handleHazardCollision(shipId, nearestHazard);\n    }\n\n    console.debug(\n      `[AsteroidFieldManager] Ship ${shipId} position updated: (${position.x}, ${position.y}), in field: ${inField}`\n    );\n  }\n\n  public calculateAvoidanceVector(shipId: string, position: Position): Position | null {\n    let nearestHazard: Hazard | null = null;\n    let nearestDistance = Infinity;\n\n    // Find nearest hazard across all fields\n    // Convert Map entries to array to avoid MapIterator error\n    const fieldValues = Array.from(this.state.fields.values());\n    for (const field of fieldValues) {\n      for (const hazard of field.hazards) {\n        const distance = Math.sqrt(\n          Math.pow(position.x - hazard.position.x, 2) + Math.pow(position.y - hazard.position.y, 2)\n        );\n\n        if (distance < nearestDistance) {\n          nearestDistance = distance;\n          nearestHazard = hazard;\n        }\n      }\n    }\n\n    // If no hazard is nearby or distance is safe, return null\n    if (!nearestHazard || nearestDistance > nearestHazard.radius * 1.5) {\n      return null;\n    }\n\n    // Calculate avoidance vector\n    const dx = position.x - nearestHazard.position.x;\n    const dy = position.y - nearestHazard.position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    // Return position that moves away from hazard\n    return {\n      x: position.x + (dx / distance) * 50, // Move 50 units away\n      y: position.y + (dy / distance) * 50,\n    };\n  }\n\n  private handleHazardCollision(shipId: string, hazard: Hazard): void {\n    this.emit('shipHazardCollision', {\n      shipId,\n      hazardId: hazard.id,\n      effect: hazard.effect,\n    });\n\n    // Update hazard state if needed\n    if (hazard.type === 'asteroids') {\n      // Asteroids might break apart or move after collision\n      const newPosition = {\n        x: hazard.position.x + (Math.random() - 0.5) * 20,\n        y: hazard.position.y + (Math.random() - 0.5) * 20,\n      };\n\n      hazard.position = newPosition;\n\n      // Sometimes create smaller hazards after collision\n      if (Math.random() < 0.3 && hazard.radius > 20) {\n        const newHazard: Hazard = {\n          id: `${hazard.id}_fragment_${Date.now()}`,\n          type: hazard.type,\n          severity: hazard.severity,\n          radius: hazard.radius * 0.5,\n          position: newPosition,\n          effect: hazard.effect,\n          movement: hazard.movement,\n          particles: hazard.particles,\n        };\n\n        // Add to parent field\n        // Convert Map entries to array to avoid MapIterator error\n        const fieldEntries = Array.from(this.state.fields.entries());\n        for (const [fieldId, field] of fieldEntries) {\n          if (field.hazards.some(h => h.id === hazard.id)) {\n            field.hazards.push(newHazard);\n            this.state.activeHazards.add(newHazard.id);\n            this.emit('hazardCreated', { fieldId, hazard: newHazard });\n            break;\n          }\n        }\n      }\n    }\n\n    console.debug(\n      `[AsteroidFieldManager] Ship ${shipId} collided with hazard ${hazard.id} of type ${hazard.type}`\n    );\n  }\n\n  public getShipBonuses(\n    shipId: string,\n    position: Position\n  ): {\n    speedMultiplier: number;\n    hazardResistance: number;\n    miningEfficiency: number;\n  } {\n    const bonuses = {\n      speedMultiplier: 1.0,\n      hazardResistance: 1.0,\n      miningEfficiency: 1.0,\n    };\n\n    // Check if ship is in any asteroid field\n    // Convert Map entries to array to avoid MapIterator error\n    const fieldValues = Array.from(this.state.fields.values());\n    for (const field of fieldValues) {\n      const distanceToField = Math.sqrt(\n        Math.pow(position.x - field.position.x, 2) + Math.pow(position.y - field.position.y, 2)\n      );\n\n      if (distanceToField <= field.radius) {\n        // Apply field density effects\n        bonuses.speedMultiplier *= Math.max(0.5, 1 - field.density * 0.5);\n        bonuses.hazardResistance *= Math.max(0.6, 1 - field.density * 0.4);\n        bonuses.miningEfficiency *= 1 + field.density * 0.3;\n\n        // Log the bonuses\n        console.debug(`[AsteroidFieldManager] Ship ${shipId} field bonuses:\n          Speed: ${bonuses.speedMultiplier.toFixed(2)}x\n          Hazard Resistance: ${bonuses.hazardResistance.toFixed(2)}x\n          Mining Efficiency: ${bonuses.miningEfficiency.toFixed(2)}x`);\n\n        break; // Only apply bonuses from one field\n      }\n    }\n\n    return bonuses;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/AutomationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/GameLoopManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":404,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":404,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10783,11028],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEventType, moduleEventBus } from '../../lib/modules/ModuleEvents';\n\n/**\n * Update priority levels\n */\nexport enum UpdatePriority {\n  CRITICAL = 0, // Run every frame, no matter what (physics, core game state)\n  HIGH = 1, // Run most frames, can be skipped occasionally (AI, combat)\n  NORMAL = 2, // Run regularly, can be skipped more often (resource updates)\n  LOW = 3, // Run occasionally (visual effects, non-critical updates)\n  BACKGROUND = 4, // Run when there's spare time (analytics, cleanup)\n}\n\n/**\n * Update callback type\n */\nexport type UpdateCallback = (deltaTime: number, elapsedTime: number) => void;\n\n/**\n * Update registration interface\n */\nexport interface UpdateRegistration {\n  id: string;\n  callback: UpdateCallback;\n  priority: UpdatePriority;\n  interval?: number; // Optional interval in ms (for fixed timestep updates)\n  lastUpdate?: number; // Last time this was updated\n}\n\n/**\n * Game loop statistics\n */\nexport interface GameLoopStats {\n  fps: number;\n  frameTime: number;\n  updateTime: number;\n  renderTime: number;\n  idleTime: number;\n  elapsedTime: number;\n  frameCount: number;\n  skippedFrames: number;\n  priorityStats: Record<\n    UpdatePriority,\n    {\n      count: number;\n      totalTime: number;\n      averageTime: number;\n    }\n  >;\n}\n\n/**\n * Game loop manager configuration\n */\nexport interface GameLoopConfig {\n  targetFPS: number;\n  maxDeltaTime: number;\n  priorityThrottling: boolean;\n  fixedTimestep: boolean;\n  throttlePriorities: UpdatePriority[];\n  statsInterval: number;\n  enableStats: boolean;\n}\n\n/**\n * Game loop manager for centralized timing and updates\n */\nexport class GameLoopManager {\n  private updates: Map<string, UpdateRegistration> = new Map();\n  private running: boolean = false;\n  private lastFrameTime: number = 0;\n  private frameCount: number = 0;\n  private skippedFrames: number = 0;\n  private elapsedTime: number = 0;\n  private animationFrameId: number | null = null;\n  private statsInterval: number | null = null;\n  private stats: GameLoopStats;\n  private config: GameLoopConfig;\n\n  constructor(config: Partial<GameLoopConfig> = {}) {\n    // Default configuration\n    this.config = {\n      targetFPS: 60,\n      maxDeltaTime: 1000 / 30, // Cap at 30 FPS equivalent\n      priorityThrottling: true,\n      fixedTimestep: false,\n      throttlePriorities: [UpdatePriority.LOW, UpdatePriority.BACKGROUND],\n      statsInterval: 1000, // 1 second\n      enableStats: true,\n      ...config,\n    };\n\n    // Initialize stats\n    this.stats = {\n      fps: 0,\n      frameTime: 0,\n      updateTime: 0,\n      renderTime: 0,\n      idleTime: 0,\n      elapsedTime: 0,\n      frameCount: 0,\n      skippedFrames: 0,\n      priorityStats: {\n        [UpdatePriority.CRITICAL]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.HIGH]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.NORMAL]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.LOW]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.BACKGROUND]: { count: 0, totalTime: 0, averageTime: 0 },\n      },\n    };\n  }\n\n  /**\n   * Start the game loop\n   */\n  public start(): void {\n    if (this.running) {\n      return;\n    }\n\n    this.running = true;\n    this.lastFrameTime = performance.now();\n    this.frameCount = 0;\n    this.skippedFrames = 0;\n    this.elapsedTime = 0;\n\n    // Start the game loop\n    this.animationFrameId = requestAnimationFrame(this.gameLoop);\n\n    // Start stats reporting if enabled\n    if (this.config.enableStats) {\n      this.statsInterval = window.setInterval(() => {\n        this.reportStats();\n      }, this.config.statsInterval);\n    }\n\n    // Emit game loop started event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_STARTED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { config: this.config },\n    });\n  }\n\n  /**\n   * Stop the game loop\n   */\n  public stop(): void {\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n\n    // Stop the animation frame\n    if (this.animationFrameId !== null) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n\n    // Stop stats reporting\n    if (this.statsInterval !== null) {\n      clearInterval(this.statsInterval);\n      this.statsInterval = null;\n    }\n\n    // Emit game loop stopped event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_STOPPED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { stats: this.stats },\n    });\n  }\n\n  /**\n   * Register an update callback\n   */\n  public registerUpdate(\n    id: string,\n    callback: UpdateCallback,\n    priority: UpdatePriority = UpdatePriority.NORMAL,\n    interval?: number\n  ): void {\n    this.updates.set(id, {\n      id,\n      callback,\n      priority,\n      interval,\n      lastUpdate: performance.now(),\n    });\n\n    // Emit update registered event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_UPDATE_REGISTERED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { id, priority, interval },\n    });\n  }\n\n  /**\n   * Unregister an update callback\n   */\n  public unregisterUpdate(id: string): void {\n    if (this.updates.has(id)) {\n      this.updates.delete(id);\n\n      // Emit update unregistered event\n      moduleEventBus.emit({\n        type: 'GAME_LOOP_UPDATE_UNREGISTERED' as ModuleEventType,\n        moduleId: 'game-loop-manager',\n        moduleType: 'resource-manager',\n        timestamp: Date.now(),\n        data: { id },\n      });\n    }\n  }\n\n  /**\n   * Get the current game loop stats\n   */\n  public getStats(): GameLoopStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Update the game loop configuration\n   */\n  public updateConfig(config: Partial<GameLoopConfig>): void {\n    this.config = {\n      ...this.config,\n      ...config,\n    };\n\n    // Emit config updated event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_CONFIG_UPDATED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { config: this.config },\n    });\n  }\n\n  /**\n   * The main game loop\n   */\n  private gameLoop = (timestamp: number): void => {\n    if (!this.running) {\n      return;\n    }\n\n    // Schedule the next frame\n    this.animationFrameId = requestAnimationFrame(this.gameLoop);\n\n    // Calculate delta time\n    const now = timestamp;\n    let deltaTime = now - this.lastFrameTime;\n    this.lastFrameTime = now;\n\n    // Cap delta time to prevent spiral of death\n    if (deltaTime > this.config.maxDeltaTime) {\n      deltaTime = this.config.maxDeltaTime;\n      this.skippedFrames++;\n    }\n\n    // Update elapsed time\n    this.elapsedTime += deltaTime;\n    this.frameCount++;\n\n    // Update frame time stats\n    this.stats.frameTime = deltaTime;\n\n    // Start update timing\n    const updateStartTime = performance.now();\n\n    // Process updates by priority\n    this.processUpdates(deltaTime, this.elapsedTime);\n\n    // End update timing\n    const updateEndTime = performance.now();\n    this.stats.updateTime = updateEndTime - updateStartTime;\n\n    // Calculate idle time (time left in the frame)\n    const targetFrameTime = 1000 / this.config.targetFPS;\n    const currentFrameTime = performance.now() - now;\n    this.stats.idleTime = Math.max(0, targetFrameTime - currentFrameTime);\n\n    // Update FPS stats\n    this.stats.fps = 1000 / deltaTime;\n    this.stats.elapsedTime = this.elapsedTime;\n    this.stats.frameCount = this.frameCount;\n    this.stats.skippedFrames = this.skippedFrames;\n  };\n\n  /**\n   * Process all registered updates\n   */\n  private processUpdates(deltaTime: number, elapsedTime: number): void {\n    // Group updates by priority\n    const priorityGroups: Map<UpdatePriority, UpdateRegistration[]> = new Map();\n\n    for (const update of this.updates.values()) {\n      if (!priorityGroups.has(update.priority)) {\n        priorityGroups.set(update.priority, []);\n      }\n      priorityGroups.get(update.priority)!.push(update);\n    }\n\n    // Process each priority group\n    for (\n      let priority = UpdatePriority.CRITICAL;\n      priority <= UpdatePriority.BACKGROUND;\n      priority++\n    ) {\n      const updates = priorityGroups.get(priority) || [];\n\n      // Skip throttled priorities if enabled\n      if (\n        this.config.priorityThrottling &&\n        this.config.throttlePriorities.includes(priority) &&\n        this.frameCount % (priority + 1) !== 0\n      ) {\n        continue;\n      }\n\n      // Process all updates in this priority group\n      for (const update of updates) {\n        // Skip if interval is set and not enough time has passed\n        if (update.interval && update.lastUpdate) {\n          const timeSinceLastUpdate = elapsedTime - update.lastUpdate;\n          if (timeSinceLastUpdate < update.interval) {\n            continue;\n          }\n        }\n\n        // Update the last update time\n        update.lastUpdate = elapsedTime;\n\n        // Measure update time\n        const startTime = performance.now();\n\n        try {\n          // Call the update callback\n          update.callback(deltaTime, elapsedTime);\n        } catch (error) {\n          console.error(`Error in update ${update.id}:`, error);\n\n          // Emit error event\n          moduleEventBus.emit({\n            type: 'ERROR_OCCURRED' as ModuleEventType,\n            moduleId: 'game-loop-manager',\n            moduleType: 'resource-manager',\n            timestamp: Date.now(),\n            data: {\n              error,\n              updateId: update.id,\n              priority: update.priority,\n            },\n          });\n        }\n\n        // Update stats\n        const endTime = performance.now();\n        const updateTime = endTime - startTime;\n\n        this.stats.priorityStats[priority].count++;\n        this.stats.priorityStats[priority].totalTime += updateTime;\n        this.stats.priorityStats[priority].averageTime =\n          this.stats.priorityStats[priority].totalTime / this.stats.priorityStats[priority].count;\n      }\n    }\n  }\n\n  /**\n   * Report game loop stats\n   */\n  private reportStats(): void {\n    // Calculate average FPS\n    const avgFps = this.frameCount / (this.config.statsInterval / 1000);\n\n    // Reset frame count for next interval\n    this.frameCount = 0;\n\n    // Emit stats event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_STATS' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: {\n        ...this.stats,\n        avgFps,\n      },\n    });\n\n    // Log stats if in development\n    if (process.env.NODE_ENV === 'development') {\n      console.debug('[GameLoop] Stats:', {\n        fps: avgFps.toFixed(2),\n        updateTime: this.stats.updateTime.toFixed(2) + 'ms',\n        idleTime: this.stats.idleTime.toFixed(2) + 'ms',\n        skippedFrames: this.stats.skippedFrames,\n      });\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.stop();\n    this.updates.clear();\n  }\n}\n\n// Export singleton instance\nexport const gameLoopManager = new GameLoopManager();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/ParticleSystemManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1112,1199],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\nimport { EntityPool } from '../../lib/optimization/EntityPool';\nimport { Position } from '../../types/core/GameTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\ninterface Particle {\n  id: string;\n  active: boolean;\n  position: Position;\n  velocity: Position;\n  acceleration: Position;\n  size: number;\n  color: string;\n  opacity: number;\n  life: number;\n  maxLife: number;\n  reset(): void;\n}\n\ninterface ParticleSystemEvents {\n  particleSpawned: { particle: Particle };\n  particleUpdated: { particle: Particle };\n  particleDied: { particle: Particle };\n  systemUpdated: { activeCount: number };\n}\n\n/**\n * Manages particle systems with efficient pooling\n */\nexport class ParticleSystemManager extends EventEmitter<ParticleSystemEvents> {\n  private particlePool: EntityPool<Particle>;\n  private systems: Map<string, ParticleSystem> = new Map();\n  private lastUpdate: number = 0;\n\n  constructor(initialPoolSize: number = 1000) {\n    super();\n    this.particlePool = new EntityPool<Particle>(() => this.createParticle(), initialPoolSize);\n\n    // Debug logging\n    console.debug(`[ParticleSystemManager] Initialized with pool size ${initialPoolSize}`);\n  }\n\n  /**\n   * Create a new particle\n   */\n  private createParticle(): Particle {\n    return {\n      id: uuidv4(),\n      active: false,\n      position: { x: 0, y: 0 },\n      velocity: { x: 0, y: 0 },\n      acceleration: { x: 0, y: 0 },\n      size: 1,\n      color: '#ffffff',\n      opacity: 1,\n      life: 1,\n      maxLife: 1,\n      reset(): void {\n        this.active = false;\n        this.position = { x: 0, y: 0 };\n        this.velocity = { x: 0, y: 0 };\n        this.acceleration = { x: 0, y: 0 };\n        this.size = 1;\n        this.color = '#ffffff';\n        this.opacity = 1;\n        this.life = 1;\n        this.maxLife = 1;\n      },\n    };\n  }\n\n  /**\n   * Create a new particle system\n   */\n  public createSystem(config: ParticleSystemConfig): string {\n    const id = uuidv4();\n    this.systems.set(id, new ParticleSystem(this.particlePool, config));\n    return id;\n  }\n\n  /**\n   * Remove a particle system\n   */\n  public removeSystem(id: string): void {\n    const system = this.systems.get(id);\n    if (system) {\n      system.cleanup();\n      this.systems.delete(id);\n    }\n  }\n\n  /**\n   * Update all particle systems\n   */\n  public update(timestamp: number): void {\n    const deltaTime = this.lastUpdate ? (timestamp - this.lastUpdate) / 1000 : 0;\n    this.lastUpdate = timestamp;\n\n    let totalActiveParticles = 0;\n\n    this.systems.forEach(system => {\n      system.update(deltaTime);\n      totalActiveParticles += system.getActiveParticleCount();\n    });\n\n    this.emit('systemUpdated', { activeCount: totalActiveParticles });\n  }\n\n  /**\n   * Clean up all systems\n   */\n  public cleanup(): void {\n    this.systems.forEach(system => system.cleanup());\n    this.systems.clear();\n    this.particlePool.clear();\n  }\n}\n\ninterface ParticleSystemConfig {\n  maxParticles: number;\n  spawnRate: number;\n  position: Position;\n  spread: number;\n  initialVelocity: {\n    min: Position;\n    max: Position;\n  };\n  acceleration: Position;\n  size: {\n    min: number;\n    max: number;\n  };\n  life: {\n    min: number;\n    max: number;\n  };\n  color: string | string[];\n  blendMode?: 'normal' | 'additive';\n}\n\n/**\n * Individual particle system instance\n */\nclass ParticleSystem {\n  private pool: EntityPool<Particle>;\n  private config: ParticleSystemConfig;\n  private particles: Set<Particle> = new Set();\n  private timeSinceLastSpawn: number = 0;\n\n  constructor(pool: EntityPool<Particle>, config: ParticleSystemConfig) {\n    this.pool = pool;\n    this.config = config;\n  }\n\n  /**\n   * Spawn a new particle\n   */\n  private spawnParticle(): void {\n    if (this.particles.size >= this.config.maxParticles) {\n      return;\n    }\n\n    const particle = this.pool.acquire();\n    if (!particle) {\n      return;\n    }\n\n    // Initialize particle properties\n    const angle = Math.random() * Math.PI * 2;\n    const distance = Math.random() * this.config.spread;\n\n    particle.position = {\n      x: this.config.position.x + Math.cos(angle) * distance,\n      y: this.config.position.y + Math.sin(angle) * distance,\n    };\n\n    particle.velocity = {\n      x:\n        this.config.initialVelocity.min.x +\n        Math.random() * (this.config.initialVelocity.max.x - this.config.initialVelocity.min.x),\n      y:\n        this.config.initialVelocity.min.y +\n        Math.random() * (this.config.initialVelocity.max.y - this.config.initialVelocity.min.y),\n    };\n\n    particle.acceleration = { ...this.config.acceleration };\n    particle.size =\n      this.config.size.min + Math.random() * (this.config.size.max - this.config.size.min);\n\n    particle.life =\n      this.config.life.min + Math.random() * (this.config.life.max - this.config.life.min);\n    particle.maxLife = particle.life;\n\n    if (Array.isArray(this.config.color)) {\n      const colorIndex = Math.floor(Math.random() * this.config.color.length);\n      particle.color = this.config.color[colorIndex];\n    } else {\n      particle.color = this.config.color;\n    }\n\n    this.particles.add(particle);\n  }\n\n  /**\n   * Update particle system\n   */\n  public update(deltaTime: number): void {\n    // Spawn new particles\n    this.timeSinceLastSpawn += deltaTime;\n    const spawnInterval = 1 / this.config.spawnRate;\n\n    while (this.timeSinceLastSpawn >= spawnInterval) {\n      this.spawnParticle();\n      this.timeSinceLastSpawn -= spawnInterval;\n    }\n\n    // Update existing particles\n    this.particles.forEach(particle => {\n      // Update life\n      particle.life -= deltaTime;\n      if (particle.life <= 0) {\n        this.particles.delete(particle);\n        this.pool.release(particle);\n        return;\n      }\n\n      // Update physics\n      particle.velocity.x += particle.acceleration.x * deltaTime;\n      particle.velocity.y += particle.acceleration.y * deltaTime;\n      particle.position.x += particle.velocity.x * deltaTime;\n      particle.position.y += particle.velocity.y * deltaTime;\n\n      // Update opacity based on life\n      particle.opacity = particle.life / particle.maxLife;\n    });\n  }\n\n  /**\n   * Get number of active particles\n   */\n  public getActiveParticleCount(): number {\n    return this.particles.size;\n  }\n\n  /**\n   * Clean up particle system\n   */\n  public cleanup(): void {\n    this.particles.forEach(particle => {\n      this.pool.release(particle);\n    });\n    this.particles.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/ResourceManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/animationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/assetManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/gameManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/salvageManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_shipId' is defined but never used.","line":111,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\nimport {\n  Salvage,\n  SalvageCapability,\n  SalvageDropConfig,\n  SalvageManager,\n} from '../../types/combat/SalvageTypes';\nimport { ShipType } from '../../types/ships/CommonShipTypes';\n\nconst DEFAULT_DROP_CONFIG: SalvageDropConfig = {\n  baseDropRate: 0.5,\n  rarityWeights: {\n    common: 0.7,\n    rare: 0.25,\n    epic: 0.05,\n  },\n  typeWeights: {\n    resources: 0.6,\n    components: 0.3,\n    technology: 0.1,\n  },\n};\n\nclass SalvageManagerImpl implements SalvageManager {\n  private activeSalvage: Salvage[] = [];\n  private dropConfig: SalvageDropConfig;\n  private techTree: { unlockedNodes: Set<string> };\n\n  constructor(dropConfig = DEFAULT_DROP_CONFIG, techTree: { unlockedNodes: Set<string> }) {\n    this.dropConfig = dropConfig;\n    this.techTree = techTree;\n  }\n\n  checkSalvageCapability(ship: ShipType): SalvageCapability {\n    // Mining ships can always salvage\n    if (ship.type.includes('mining')) {\n      return { canSalvage: true, reason: 'mining-ship' };\n    }\n\n    // Recon ships can always salvage\n    if (ship.type.includes('recon')) {\n      return { canSalvage: true, reason: 'recon-ship' };\n    }\n\n    // War ships can salvage if they have the cutting laser upgrade\n    if (this.techTree.unlockedNodes.has('cutting-laser')) {\n      return { canSalvage: true, reason: 'cutting-laser' };\n    }\n\n    return { canSalvage: false, reason: 'none' };\n  }\n\n  generateSalvageDrops(position: { x: number; y: number }, tier: number): Salvage[] {\n    if (Math.random() > this.dropConfig.baseDropRate) {\n      return [];\n    }\n\n    const numDrops = Math.floor(Math.random() * 3) + 1; // 1-3 drops\n    const drops: Salvage[] = [];\n\n    for (let i = 0; i < numDrops; i++) {\n      // Determine rarity\n      const rarityRoll = Math.random();\n      let rarity: Salvage['rarity'];\n      if (rarityRoll < this.dropConfig.rarityWeights.epic) {\n        rarity = 'epic';\n      } else if (\n        rarityRoll <\n        this.dropConfig.rarityWeights.epic + this.dropConfig.rarityWeights.rare\n      ) {\n        rarity = 'rare';\n      } else {\n        rarity = 'common';\n      }\n\n      // Determine type\n      const typeRoll = Math.random();\n      let type: Salvage['type'];\n      if (typeRoll < this.dropConfig.typeWeights.technology) {\n        type = 'technology';\n      } else if (\n        typeRoll <\n        this.dropConfig.typeWeights.technology + this.dropConfig.typeWeights.components\n      ) {\n        type = 'components';\n      } else {\n        type = 'resources';\n      }\n\n      // Generate salvage item\n      const salvage: Salvage = {\n        id: uuidv4(),\n        type,\n        name: this.generateSalvageName(type, rarity, tier),\n        amount: this.calculateAmount(type, rarity, tier),\n        rarity,\n        position: {\n          x: position.x + (Math.random() - 0.5) * 50, // Spread drops slightly\n          y: position.y + (Math.random() - 0.5) * 50,\n        },\n        collected: false,\n      };\n\n      drops.push(salvage);\n    }\n\n    this.activeSalvage.push(...drops);\n    return drops;\n  }\n\n  collectSalvage(salvageId: string, _shipId: string): void {\n    const salvageIndex = this.activeSalvage.findIndex(s => s.id === salvageId);\n    if (salvageIndex >= 0) {\n      this.activeSalvage[salvageIndex].collected = true;\n    }\n  }\n\n  getActiveSalvage(): Salvage[] {\n    return this.activeSalvage.filter(s => !s.collected);\n  }\n\n  private generateSalvageName(\n    type: Salvage['type'],\n    rarity: Salvage['rarity'],\n    tier: number\n  ): string {\n    const prefix = rarity === 'epic' ? 'Ancient' : rarity === 'rare' ? 'Advanced' : 'Standard';\n\n    switch (type) {\n      case 'resources':\n        return `${prefix} ${tier === 3 ? 'Dark Matter' : tier === 2 ? 'Plasma' : 'Metal'} Crystal`;\n      case 'components':\n        return `${prefix} ${tier === 3 ? 'Quantum' : tier === 2 ? 'Enhanced' : 'Basic'} Components`;\n      case 'technology':\n        return `${prefix} ${tier === 3 ? 'Forbidden' : tier === 2 ? 'Experimental' : 'Prototype'} Tech`;\n    }\n  }\n\n  private calculateAmount(type: Salvage['type'], rarity: Salvage['rarity'], tier: number): number {\n    const baseAmount = type === 'resources' ? 100 : type === 'components' ? 50 : 25;\n    const rarityMultiplier = rarity === 'epic' ? 3 : rarity === 'rare' ? 2 : 1;\n    const tierMultiplier = tier;\n\n    return Math.floor(baseAmount * rarityMultiplier * tierMultiplier);\n  }\n}\n\nexport const salvageManager = new SalvageManagerImpl(DEFAULT_DROP_CONFIG, {\n  unlockedNodes: new Set(),\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/techTreeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/mining/MiningResourceIntegration.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":57,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1705,1790],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":66,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":66,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2009,2093],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2183,2186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2183,2186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":87,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2840,2926],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newAmount' is assigned a value but never used.","line":117,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'oldAmount' is assigned a value but never used.","line":117,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4390,4393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4390,4393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5096,5099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5096,5099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5227,5230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5227,5230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6349,6352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6349,6352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6530,6533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6530,6533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":361,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10290,10293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10290,10293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10336,10339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10336,10339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { Position } from '../../types/core/GameTypes';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\nimport { FlowNodeType, ResourceFlowManager } from '../resource/ResourceFlowManager';\nimport { ResourceThresholdManager, ThresholdConfig } from '../resource/ResourceThresholdManager';\nimport { MiningShipManagerImpl } from './MiningShipManagerImpl';\n\n/**\n * MiningResourceIntegration\n *\n * Integrates the MiningShipManager with the resource management system.\n * Connects mining operations with resource thresholds and flow optimization.\n */\nexport class MiningResourceIntegration {\n  private miningManager: MiningShipManagerImpl;\n  private thresholdManager: ResourceThresholdManager;\n  private flowManager: ResourceFlowManager;\n  private initialized: boolean = false;\n  private miningNodes: Map<\n    string,\n    {\n      id: string;\n      type: ResourceType;\n      position: Position;\n      efficiency: number;\n    }\n  > = new Map();\n\n  constructor(\n    miningManager: MiningShipManagerImpl,\n    thresholdManager: ResourceThresholdManager,\n    flowManager: ResourceFlowManager\n  ) {\n    this.miningManager = miningManager;\n    this.thresholdManager = thresholdManager;\n    this.flowManager = flowManager;\n  }\n\n  /**\n   * Initialize the integration\n   */\n  public initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    // Subscribe to mining events\n    this.subscribeToMiningEvents();\n\n    // Register mining nodes in the flow manager\n    this.registerMiningNodes();\n\n    // Create thresholds for mining operations\n    this.createMiningThresholds();\n\n    this.initialized = true;\n    console.debug('[MiningResourceIntegration] Mining resource integration initialized');\n  }\n\n  /**\n   * Subscribe to mining events\n   */\n  private subscribeToMiningEvents(): void {\n    // Listen for mining ship registration\n    this.miningManager.on('shipRegistered', (data: { shipId: string }) => {\n      console.debug(`[MiningResourceIntegration] Mining ship registered: ${data.shipId}`);\n\n      // Get the ship from the mining manager\n      const ship = (this.miningManager as any).ships.get(data.shipId);\n      if (!ship) {\n        return;\n      }\n\n      // Register the ship as a producer node in the flow manager\n      this.flowManager.registerNode({\n        id: `mining-ship-${data.shipId}`,\n        type: 'producer' as FlowNodeType,\n        resources: ['minerals', 'gas', 'plasma', 'exotic'] as ResourceType[],\n        priority: { type: 'minerals' as ResourceType, priority: 5, consumers: [] },\n        efficiency: ship.efficiency || 1.0,\n        active: ship.status === 'mining',\n      });\n    });\n\n    // Listen for mining ship unregistration\n    this.miningManager.on('shipUnregistered', (data: { shipId: string }) => {\n      console.debug(`[MiningResourceIntegration] Mining ship unregistered: ${data.shipId}`);\n\n      // Unregister the ship from the flow manager\n      this.flowManager.unregisterNode(`mining-ship-${data.shipId}`);\n    });\n\n    // Listen for mining task completion\n    moduleEventBus.subscribe('MODULE_ACTIVATED' as ModuleEventType, event => {\n      if (event.moduleType !== 'mineral') {\n        return;\n      }\n\n      const ship = event.data?.ship;\n      if (!ship) {\n        return;\n      }\n\n      // Update the ship's status in the flow manager\n      const node = this.flowManager.getNode(`mining-ship-${ship.id}`);\n      if (node) {\n        node.active = ship.status === 'mining';\n      }\n    });\n\n    // Listen for resource extraction events\n    moduleEventBus.subscribe('RESOURCE_PRODUCED' as ModuleEventType, event => {\n      if (!event.moduleId.startsWith('mining-ship-')) {\n        return;\n      }\n\n      const { resourceType, newAmount, oldAmount, delta } = event.data;\n      if (!resourceType || !delta) {\n        return;\n      }\n\n      // Record the extraction in the flow manager\n      const shipId = event.moduleId.replace('mining-ship-', '');\n      const transfer = {\n        type: resourceType as ResourceType,\n        source: `mining-ship-${shipId}`,\n        target: `storage-${resourceType}`,\n        amount: delta,\n        timestamp: event.timestamp,\n      };\n\n      // Add to transfer history\n      this.addTransferToHistory(transfer);\n    });\n  }\n\n  /**\n   * Add a transfer to the history\n   */\n  private addTransferToHistory(transfer: any): void {\n    // We can't directly access the private addToTransferHistory method,\n    // so we'll emit an event that the ResourceIntegration will handle\n    moduleEventBus.emit({\n      type: 'RESOURCE_TRANSFERRED' as ModuleEventType,\n      moduleId: transfer.source,\n      moduleType: 'mineral',\n      timestamp: Date.now(),\n      data: {\n        resourceType: transfer.type,\n        amount: transfer.amount,\n        source: transfer.source,\n        target: transfer.target,\n      },\n    });\n  }\n\n  /**\n   * Register mining nodes in the flow manager\n   */\n  private registerMiningNodes(): void {\n    // Get all resource nodes from the mining manager\n    const { resourceNodes } = this.miningManager as any;\n    if (!resourceNodes) {\n      return;\n    }\n\n    // Register each node in the flow manager\n    resourceNodes.forEach((node: any) => {\n      this.miningNodes.set(node.id, {\n        id: node.id,\n        type: node.type,\n        position: node.position,\n        efficiency: 1.0,\n      });\n\n      // Register the node in the flow manager\n      this.flowManager.registerNode({\n        id: `mining-node-${node.id}`,\n        type: 'producer' as FlowNodeType,\n        resources: [node.type],\n        priority: { type: node.type, priority: 3, consumers: [] },\n        efficiency: 1.0,\n        active: true,\n      });\n\n      // Create a connection to the storage\n      this.flowManager.registerConnection({\n        id: `mining-connection-${node.id}`,\n        source: `mining-node-${node.id}`,\n        target: `storage-${node.type}`,\n        resourceType: node.type,\n        maxRate: 10, // Default extraction rate\n        currentRate: 0,\n        priority: { type: node.type, priority: 3, consumers: [] },\n        active: true,\n      });\n    });\n  }\n\n  /**\n   * Create thresholds for mining operations\n   */\n  private createMiningThresholds(): void {\n    // Get all resource nodes from the mining manager\n    const { resourceNodes } = this.miningManager as any;\n    if (!resourceNodes) {\n      return;\n    }\n\n    // Create a set of unique resource types\n    const resourceTypes = new Set<ResourceType>();\n    resourceNodes.forEach((node: any) => {\n      resourceTypes.add(node.type);\n    });\n\n    // Create thresholds for each resource type\n    resourceTypes.forEach(type => {\n      // Create a threshold config\n      const config: ThresholdConfig = {\n        id: `mining-threshold-${type}`,\n        threshold: {\n          type,\n          min: 100, // Default minimum threshold\n          target: 500, // Default target threshold\n        },\n        actions: [\n          {\n            type: 'notification',\n            target: 'mining-manager',\n            message: `Low ${type} levels, prioritizing mining`,\n          },\n        ],\n        enabled: true,\n      };\n\n      this.thresholdManager.registerThreshold(config);\n    });\n  }\n\n  /**\n   * Register a new mining node\n   */\n  public registerMiningNode(\n    id: string,\n    type: ResourceType,\n    position: Position,\n    efficiency: number = 1.0\n  ): void {\n    // Store the node\n    this.miningNodes.set(id, {\n      id,\n      type,\n      position,\n      efficiency,\n    });\n\n    // Register the node in the flow manager\n    this.flowManager.registerNode({\n      id: `mining-node-${id}`,\n      type: 'producer' as FlowNodeType,\n      resources: [type],\n      priority: { type, priority: 3, consumers: [] },\n      efficiency,\n      active: true,\n    });\n\n    // Create a connection to the storage\n    this.flowManager.registerConnection({\n      id: `mining-connection-${id}`,\n      source: `mining-node-${id}`,\n      target: `storage-${type}`,\n      resourceType: type,\n      maxRate: 10 * efficiency, // Extraction rate based on efficiency\n      currentRate: 0,\n      priority: { type, priority: 3, consumers: [] },\n      active: true,\n    });\n\n    // Update thresholds if needed\n    const existingThreshold = this.thresholdManager\n      .getThresholdConfigs()\n      .find(config => config.threshold.type === type);\n\n    if (!existingThreshold) {\n      // Create a new threshold\n      const config: ThresholdConfig = {\n        id: `mining-threshold-${type}`,\n        threshold: {\n          type,\n          min: 100,\n          target: 500,\n        },\n        actions: [\n          {\n            type: 'notification',\n            target: 'mining-manager',\n            message: `Low ${type} levels, prioritizing mining`,\n          },\n        ],\n        enabled: true,\n      };\n\n      this.thresholdManager.registerThreshold(config);\n    }\n  }\n\n  /**\n   * Unregister a mining node\n   */\n  public unregisterMiningNode(id: string): void {\n    // Remove the node\n    this.miningNodes.delete(id);\n\n    // Unregister the node from the flow manager\n    this.flowManager.unregisterNode(`mining-node-${id}`);\n\n    // Unregister the connection\n    this.flowManager.unregisterConnection(`mining-connection-${id}`);\n  }\n\n  /**\n   * Update mining node efficiency\n   */\n  public updateMiningNodeEfficiency(id: string, efficiency: number): void {\n    // Update the node\n    const node = this.miningNodes.get(id);\n    if (!node) {\n      return;\n    }\n\n    node.efficiency = efficiency;\n\n    // Update the node in the flow manager\n    const flowNode = this.flowManager.getNode(`mining-node-${id}`);\n    if (flowNode) {\n      flowNode.efficiency = efficiency;\n    }\n\n    // Update the connection\n    const connection = this.flowManager.getConnection(`mining-connection-${id}`);\n    if (connection) {\n      connection.maxRate = 10 * efficiency;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    // Unregister all mining nodes\n    this.miningNodes.forEach((node, id) => {\n      this.flowManager.unregisterNode(`mining-node-${id}`);\n      this.flowManager.unregisterConnection(`mining-connection-${id}`);\n    });\n\n    // Unregister all mining ships\n    const { ships } = this.miningManager as any;\n    if (ships) {\n      ships.forEach((_: any, shipId: string) => {\n        this.flowManager.unregisterNode(`mining-ship-${shipId}`);\n      });\n    }\n\n    this.initialized = false;\n  }\n}\n\n/**\n * Factory function to create and initialize the mining resource integration\n */\nexport function createMiningResourceIntegration(\n  miningManager: MiningShipManagerImpl,\n  thresholdManager: ResourceThresholdManager,\n  flowManager: ResourceFlowManager\n): MiningResourceIntegration {\n  // Create the integration\n  const integration = new MiningResourceIntegration(miningManager, thresholdManager, flowManager);\n\n  // Initialize the integration\n  integration.initialize();\n\n  return integration;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/mining/MiningShipManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":93,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\nimport { thresholdEvents } from '../../contexts/ThresholdTypes';\nimport { shipBehaviorManager } from '../../lib/ai/shipBehavior';\nimport { shipMovementManager } from '../../lib/ai/shipMovement';\nimport { Position } from '../../types/core/GameTypes';\n\ninterface MiningShip {\n  id: string;\n  name: string;\n  type: 'rockBreaker' | 'voidDredger';\n  status: 'idle' | 'mining' | 'returning' | 'maintenance';\n  capacity: number;\n  currentLoad: number;\n  targetNode?: string;\n  efficiency: number;\n}\n\ninterface MiningTask {\n  id: string;\n  shipId: string;\n  nodeId: string;\n  resourceType: string;\n  priority: number;\n  status: 'queued' | 'in-progress' | 'completed' | 'failed';\n  startTime?: number;\n  endTime?: number;\n}\n\n/**\n * Manages automated mining operations\n */\nclass MiningShipManagerImpl extends EventEmitter {\n  private ships: Map<string, MiningShip>;\n  private tasks: Map<string, MiningTask>;\n  private nodeAssignments: Map<string, string>; // nodeId -> shipId\n\n  constructor() {\n    super();\n    this.ships = new Map();\n    this.tasks = new Map();\n    this.nodeAssignments = new Map();\n\n    // Listen for threshold events\n    thresholdEvents.subscribe(event => {\n      if (event.type === 'THRESHOLD_VIOLATED') {\n        this.handleThresholdViolation(event.resourceId, event.details);\n      }\n    });\n  }\n\n  /**\n   * Registers a mining ship\n   */\n  registerShip(ship: MiningShip): void {\n    this.ships.set(ship.id, ship);\n\n    // Register with behavior system\n    shipBehaviorManager.registerShip({\n      id: ship.id,\n      type: ship.type,\n      category: 'mining',\n      capabilities: {\n        canMine: true,\n        canSalvage: false,\n        canScan: false,\n        canJump: false,\n      },\n      position: { x: 0, y: 0 }, // Initial position\n      stats: {\n        health: 100,\n        shield: 100,\n        speed: 100,\n        maneuverability: 1,\n        cargo: ship.capacity,\n      },\n    });\n  }\n\n  /**\n   * Unregisters a mining ship\n   */\n  unregisterShip(shipId: string): void {\n    this.ships.delete(shipId);\n    shipBehaviorManager.unregisterShip(shipId);\n\n    // Clean up any tasks\n    Array.from(this.tasks.values())\n      .filter(task => task.shipId === shipId)\n      .forEach(task => this.tasks.delete(task.id));\n\n    // Clean up node assignments\n    Array.from(this.nodeAssignments.entries())\n      .filter(([_, assignedShipId]) => assignedShipId === shipId)\n      .forEach(([nodeId]) => this.nodeAssignments.delete(nodeId));\n  }\n\n  /**\n   * Handles threshold violations by dispatching mining ships\n   */\n  private handleThresholdViolation(\n    resourceId: string,\n    details: { type: 'below_minimum' | 'above_maximum'; current: number }\n  ): void {\n    if (details.type === 'below_minimum') {\n      // Find available mining ship\n      const availableShip = Array.from(this.ships.values()).find(\n        ship => ship.status === 'idle' && ship.currentLoad === 0\n      );\n\n      if (availableShip) {\n        this.dispatchShipToResource(availableShip.id, resourceId);\n      }\n    } else if (details.type === 'above_maximum') {\n      // Recall any ships mining this resource\n      const assignedShipId = this.nodeAssignments.get(resourceId);\n      if (assignedShipId) {\n        this.recallShip(assignedShipId);\n      }\n    }\n  }\n\n  /**\n   * Dispatches a ship to mine a resource\n   */\n  private dispatchShipToResource(shipId: string, resourceId: string): void {\n    const ship = this.ships.get(shipId);\n    if (!ship) {\n      return;\n    }\n\n    // Create mining task\n    const task: MiningTask = {\n      id: `mining-${Date.now()}`,\n      shipId,\n      nodeId: resourceId,\n      resourceType: resourceId.split('-')[0], // e.g., \"iron\" from \"iron-belt-1\"\n      priority: 1,\n      status: 'queued',\n    };\n\n    this.tasks.set(task.id, task);\n    this.nodeAssignments.set(resourceId, shipId);\n\n    // Update ship status\n    ship.status = 'mining';\n    ship.targetNode = resourceId;\n\n    // Assign task to behavior system\n    shipBehaviorManager.assignTask({\n      id: task.id,\n      type: 'mine',\n      target: {\n        id: resourceId,\n        position: this.getResourcePosition(resourceId),\n      },\n      priority: task.priority,\n      assignedAt: Date.now(),\n    });\n  }\n\n  /**\n   * Recalls a ship from its current task\n   */\n  private recallShip(shipId: string): void {\n    const ship = this.ships.get(shipId);\n    if (!ship) {\n      return;\n    }\n\n    // Clear current task\n    Array.from(this.tasks.values())\n      .filter(task => task.shipId === shipId && task.status === 'in-progress')\n      .forEach(task => {\n        task.status = 'completed';\n        task.endTime = Date.now();\n        this.nodeAssignments.delete(task.nodeId);\n      });\n\n    // Update ship status\n    ship.status = 'returning';\n    ship.targetNode = undefined;\n\n    // Move ship back to base\n    shipMovementManager.moveToPosition(shipId, { x: 0, y: 0 }); // Base position\n  }\n\n  /**\n   * Gets the position of a resource node\n   */\n  private getResourcePosition(resourceId: string): Position {\n    // Use resourceId to seed the random position for consistency\n    const seed = parseInt(resourceId.split('-').pop() || '0', 10);\n    return {\n      x: (seed * 17) % 1000,\n      y: (seed * 23) % 1000,\n    };\n  }\n\n  /**\n   * Updates mining progress\n   */\n  update(deltaTime: number): void {\n    this.ships.forEach(ship => {\n      if (ship.status === 'mining' && ship.targetNode) {\n        // Update mining progress\n        const task = Array.from(this.tasks.values()).find(\n          t => t.shipId === ship.id && t.status === 'in-progress'\n        );\n\n        if (task) {\n          // Simulate resource collection\n          ship.currentLoad += ship.efficiency * deltaTime;\n\n          // Check if cargo is full\n          if (ship.currentLoad >= ship.capacity) {\n            this.recallShip(ship.id);\n          }\n        }\n      }\n    });\n  }\n}\n\n// Export singleton instance\nexport const miningShipManager = new MiningShipManagerImpl();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/mining/MiningShipManagerImpl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleAttachmentManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1784,1787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1784,1787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1872,2011],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2215,2218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2215,2218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2303,2444],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":233,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":233,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7017,7132],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":236,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":236,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7137,7220],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":239,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":239,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7287,7400],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":250,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":250,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7598,7714],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":277,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[8390,8540],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport {\n  BaseModule,\n  ModularBuilding,\n  ModuleAttachmentPoint,\n  ModuleType,\n} from '../../types/buildings/ModuleTypes';\nimport { moduleManager } from './ModuleManager';\n\n/**\n * Attachment visualization options\n */\nexport interface AttachmentVisualizationOptions {\n  showValidPoints: boolean;\n  highlightIncompatible: boolean;\n  showAttachmentPreview: boolean;\n  animateAttachment: boolean;\n  attachmentAnimationDuration: number;\n}\n\n/**\n * Attachment result\n */\nexport interface AttachmentResult {\n  success: boolean;\n  moduleId?: string;\n  buildingId?: string;\n  attachmentPointId?: string;\n  error?: string;\n}\n\n/**\n * Module Attachment Manager\n * Handles the attachment of modules to buildings, including validation, visualization, and event handling\n */\nexport class ModuleAttachmentManager {\n  private visualizationOptions: AttachmentVisualizationOptions;\n  private previewModule: BaseModule | null = null;\n  private validAttachmentPoints: Map<string, ModuleAttachmentPoint[]> = new Map();\n  private incompatibleAttachmentPoints: Map<string, ModuleAttachmentPoint[]> = new Map();\n\n  constructor(options?: Partial<AttachmentVisualizationOptions>) {\n    this.visualizationOptions = {\n      showValidPoints: true,\n      highlightIncompatible: true,\n      showAttachmentPreview: true,\n      animateAttachment: true,\n      attachmentAnimationDuration: 500,\n      ...options,\n    };\n\n    // Subscribe to module events\n    moduleEventBus.subscribe('MODULE_ATTACHED' as ModuleEventType, this.handleModuleAttached);\n    moduleEventBus.subscribe('MODULE_DETACHED' as ModuleEventType, this.handleModuleDetached);\n  }\n\n  /**\n   * Handle module attached event\n   */\n  private handleModuleAttached = (event: any): void => {\n    const { moduleId, buildingId, attachmentPointId } = event.data;\n    console.debug(\n      `[ModuleAttachmentManager] Module ${moduleId} attached to building ${buildingId} at point ${attachmentPointId}`\n    );\n\n    // Clear any previews or highlights for this building\n    this.clearAttachmentVisualization(buildingId);\n  };\n\n  /**\n   * Handle module detached event\n   */\n  private handleModuleDetached = (event: any): void => {\n    const { moduleId, buildingId, attachmentPointId } = event.data;\n    console.debug(\n      `[ModuleAttachmentManager] Module ${moduleId} detached from building ${buildingId} at point ${attachmentPointId}`\n    );\n  };\n\n  /**\n   * Start attachment process for a module\n   */\n  public startAttachment(moduleType: ModuleType, buildingId: string): void {\n    const building = moduleManager.getBuilding(buildingId);\n    if (!building) {\n      console.error(`[ModuleAttachmentManager] Building ${buildingId} not found`);\n      return;\n    }\n\n    // Create a temporary preview module\n    this.previewModule = {\n      id: `preview-${moduleType}-${Date.now()}`,\n      name: moduleType,\n      type: moduleType,\n      position: { x: 0, y: 0 },\n      isActive: false,\n      level: 1,\n      status: 'inactive',\n    };\n\n    // Find valid attachment points\n    this.findValidAttachmentPoints(this.previewModule, building);\n\n    // Show visualization if enabled\n    if (this.visualizationOptions.showValidPoints) {\n      this.showAttachmentVisualization(buildingId);\n    }\n\n    // Emit event\n    moduleEventBus.emit({\n      type: 'ATTACHMENT_STARTED' as ModuleEventType,\n      moduleId: this.previewModule.id,\n      moduleType: moduleType,\n      timestamp: Date.now(),\n      data: {\n        buildingId,\n        validPoints: this.validAttachmentPoints.get(buildingId)?.map(p => p.id) || [],\n        incompatiblePoints: this.incompatibleAttachmentPoints.get(buildingId)?.map(p => p.id) || [],\n      },\n    });\n  }\n\n  /**\n   * Cancel attachment process\n   */\n  public cancelAttachment(buildingId: string): void {\n    this.previewModule = null;\n    this.clearAttachmentVisualization(buildingId);\n\n    // Emit event\n    moduleEventBus.emit({\n      type: 'ATTACHMENT_CANCELLED' as ModuleEventType,\n      moduleId: 'none',\n      moduleType: 'radar' as ModuleType, // Using a default module type\n      timestamp: Date.now(),\n      data: { buildingId },\n    });\n  }\n\n  /**\n   * Complete attachment process\n   */\n  public completeAttachment(\n    moduleType: ModuleType,\n    buildingId: string,\n    attachmentPointId: string\n  ): AttachmentResult {\n    const building = moduleManager.getBuilding(buildingId);\n    if (!building) {\n      return { success: false, error: `Building ${buildingId} not found` };\n    }\n\n    const attachmentPoint = building.attachmentPoints.find(p => p.id === attachmentPointId);\n    if (!attachmentPoint) {\n      return { success: false, error: `Attachment point ${attachmentPointId} not found` };\n    }\n\n    // Check if attachment point is valid for this module type\n    if (!attachmentPoint.allowedTypes.includes(moduleType)) {\n      return {\n        success: false,\n        error: `Module type ${moduleType} not allowed at attachment point ${attachmentPointId}`,\n      };\n    }\n\n    // Check if attachment point is already occupied\n    if (attachmentPoint.currentModule) {\n      return {\n        success: false,\n        error: `Attachment point ${attachmentPointId} already has a module`,\n      };\n    }\n\n    // Create the actual module\n    const { position } = attachmentPoint;\n    const module = moduleManager.createModule(moduleType, position);\n\n    // Attach the module\n    const attached = moduleManager.attachModule(module.id, buildingId, attachmentPointId);\n    if (!attached) {\n      return {\n        success: false,\n        error: 'Failed to attach module',\n      };\n    }\n\n    // Clear visualization\n    this.previewModule = null;\n    this.clearAttachmentVisualization(buildingId);\n\n    return {\n      success: true,\n      moduleId: module.id,\n      buildingId,\n      attachmentPointId,\n    };\n  }\n\n  /**\n   * Find valid attachment points for a module\n   */\n  private findValidAttachmentPoints(module: BaseModule, building: ModularBuilding): void {\n    const validPoints: ModuleAttachmentPoint[] = [];\n    const incompatiblePoints: ModuleAttachmentPoint[] = [];\n\n    for (const point of building.attachmentPoints) {\n      // Skip points that already have modules\n      if (point.currentModule) {\n        continue;\n      }\n\n      // Check if module type is allowed at this point\n      if (point.allowedTypes.includes(module.type)) {\n        validPoints.push(point);\n      } else {\n        incompatiblePoints.push(point);\n      }\n    }\n\n    this.validAttachmentPoints.set(building.id, validPoints);\n    this.incompatibleAttachmentPoints.set(building.id, incompatiblePoints);\n  }\n\n  /**\n   * Show attachment visualization\n   */\n  private showAttachmentVisualization(buildingId: string): void {\n    // This would be implemented with actual UI visualization code\n    // For now, we'll just log the information\n    const validPoints = this.validAttachmentPoints.get(buildingId) || [];\n    const incompatiblePoints = this.incompatibleAttachmentPoints.get(buildingId) || [];\n\n    console.debug(\n      `[ModuleAttachmentManager] Showing attachment visualization for building ${buildingId}`\n    );\n    console.debug(`Valid attachment points: ${validPoints.map(p => p.id).join(', ')}`);\n\n    if (this.visualizationOptions.highlightIncompatible) {\n      console.debug(\n        `Incompatible attachment points: ${incompatiblePoints.map(p => p.id).join(', ')}`\n      );\n    }\n  }\n\n  /**\n   * Clear attachment visualization\n   */\n  private clearAttachmentVisualization(buildingId: string): void {\n    // This would be implemented with actual UI visualization code\n    console.debug(\n      `[ModuleAttachmentManager] Clearing attachment visualization for building ${buildingId}`\n    );\n\n    this.validAttachmentPoints.delete(buildingId);\n    this.incompatibleAttachmentPoints.delete(buildingId);\n  }\n\n  /**\n   * Show attachment preview at a specific point\n   */\n  public showAttachmentPreview(buildingId: string, attachmentPointId: string): void {\n    if (!this.previewModule || !this.visualizationOptions.showAttachmentPreview) {\n      return;\n    }\n\n    const building = moduleManager.getBuilding(buildingId);\n    if (!building) {\n      return;\n    }\n\n    const attachmentPoint = building.attachmentPoints.find(p => p.id === attachmentPointId);\n    if (!attachmentPoint) {\n      return;\n    }\n\n    // This would be implemented with actual UI preview code\n    console.debug(\n      `[ModuleAttachmentManager] Showing attachment preview for module ${this.previewModule.type} at point ${attachmentPointId}`\n    );\n  }\n\n  /**\n   * Get valid attachment points for a building\n   */\n  public getValidAttachmentPoints(buildingId: string): ModuleAttachmentPoint[] {\n    return this.validAttachmentPoints.get(buildingId) || [];\n  }\n\n  /**\n   * Get incompatible attachment points for a building\n   */\n  public getIncompatibleAttachmentPoints(buildingId: string): ModuleAttachmentPoint[] {\n    return this.incompatibleAttachmentPoints.get(buildingId) || [];\n  }\n\n  /**\n   * Check if a module can be attached to a specific point\n   */\n  public canAttachToPoint(\n    moduleType: ModuleType,\n    buildingId: string,\n    attachmentPointId: string\n  ): boolean {\n    const building = moduleManager.getBuilding(buildingId);\n    if (!building) {\n      return false;\n    }\n\n    const attachmentPoint = building.attachmentPoints.find(p => p.id === attachmentPointId);\n    if (!attachmentPoint) {\n      return false;\n    }\n\n    // Check if attachment point already has a module\n    if (attachmentPoint.currentModule) {\n      return false;\n    }\n\n    // Check if module type is allowed at this point\n    return attachmentPoint.allowedTypes.includes(moduleType);\n  }\n\n  /**\n   * Detach a module from a building\n   */\n  public detachModule(moduleId: string, buildingId: string): AttachmentResult {\n    const building = moduleManager.getBuilding(buildingId);\n    if (!building) {\n      return { success: false, error: `Building ${buildingId} not found` };\n    }\n\n    // Find the attachment point that has this module\n    const attachmentPoint = building.attachmentPoints.find(\n      p => p.currentModule && p.currentModule.id === moduleId\n    );\n\n    if (!attachmentPoint) {\n      return {\n        success: false,\n        error: `Module ${moduleId} not found in building ${buildingId}`,\n      };\n    }\n\n    // Remove the module from the attachment point\n    if (attachmentPoint.currentModule) {\n      const moduleType = attachmentPoint.currentModule.type;\n      attachmentPoint.currentModule = undefined;\n\n      // Remove the module from the building's modules array\n      building.modules = building.modules.filter(m => m.id !== moduleId);\n\n      // Emit detachment event\n      moduleEventBus.emit({\n        type: 'MODULE_DETACHED' as ModuleEventType,\n        moduleId,\n        moduleType,\n        timestamp: Date.now(),\n        data: {\n          buildingId,\n          attachmentPointId: attachmentPoint.id,\n        },\n      });\n\n      return {\n        success: true,\n        moduleId,\n        buildingId,\n        attachmentPointId: attachmentPoint.id,\n      };\n    }\n\n    return {\n      success: false,\n      error: `Module ${moduleId} not found in building ${buildingId}`,\n    };\n  }\n\n  /**\n   * Get visualization options\n   */\n  public getVisualizationOptions(): AttachmentVisualizationOptions {\n    return { ...this.visualizationOptions };\n  }\n\n  /**\n   * Update visualization options\n   */\n  public updateVisualizationOptions(options: Partial<AttachmentVisualizationOptions>): void {\n    this.visualizationOptions = {\n      ...this.visualizationOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    // Unsubscribe from events\n    const unsubscribeAttached = moduleEventBus.subscribe(\n      'MODULE_ATTACHED' as ModuleEventType,\n      this.handleModuleAttached\n    );\n    const unsubscribeDetached = moduleEventBus.subscribe(\n      'MODULE_DETACHED' as ModuleEventType,\n      this.handleModuleDetached\n    );\n\n    // Call the unsubscribe functions\n    if (typeof unsubscribeAttached === 'function') {\n      unsubscribeAttached();\n    }\n\n    if (typeof unsubscribeDetached === 'function') {\n      unsubscribeDetached();\n    }\n\n    // Clear data\n    this.previewModule = null;\n    this.validAttachmentPoints.clear();\n    this.incompatibleAttachmentPoints.clear();\n  }\n}\n\n// Export singleton instance\nexport const moduleAttachmentManager = new ModuleAttachmentManager();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleStatusManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleUpgradeManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":533,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":533,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14244,14362],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":545,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":545,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":545,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14598,14601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14598,14601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":552,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":552,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":552,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":552,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14741,14744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14741,14744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\nimport { resourceManager } from '../game/ResourceManager';\nimport { moduleManager } from './ModuleManager';\nimport { moduleStatusManager } from './ModuleStatusManager';\n\n/**\n * Upgrade path for a module\n * Defines the progression of a module through levels\n */\nexport interface ModuleUpgradePath {\n  moduleType: ModuleType;\n  levels: ModuleUpgradeLevel[];\n}\n\n/**\n * Upgrade level definition\n * Contains requirements and effects for a specific level\n */\nexport interface ModuleUpgradeLevel {\n  level: number;\n  name: string;\n  description: string;\n  requirements: ModuleUpgradeRequirements;\n  effects: ModuleUpgradeEffect[];\n  visualChanges?: ModuleVisualChange[];\n}\n\n/**\n * Requirements for upgrading a module\n */\nexport interface ModuleUpgradeRequirements {\n  minLevel: number;\n  resourceCosts: {\n    type: string;\n    amount: number;\n  }[];\n  techRequirements?: string[];\n  moduleRequirements?: {\n    type: ModuleType;\n    level: number;\n  }[];\n  buildingLevel?: number;\n}\n\n/**\n * Effect of upgrading a module\n */\nexport interface ModuleUpgradeEffect {\n  type: 'stat' | 'resource' | 'ability' | 'special';\n  target: string;\n  value: number;\n  isPercentage: boolean;\n  description: string;\n}\n\n/**\n * Visual change for a module upgrade\n */\nexport interface ModuleVisualChange {\n  type: 'color' | 'size' | 'shape' | 'texture' | 'effect';\n  description: string;\n  value: string;\n}\n\n/**\n * Upgrade status for a module\n */\nexport interface ModuleUpgradeStatus {\n  moduleId: string;\n  moduleType: ModuleType;\n  currentLevel: number;\n  maxLevel: number;\n  nextLevel?: ModuleUpgradeLevel;\n  upgradeAvailable: boolean;\n  requirementsMet: boolean;\n  missingRequirements: string[];\n  upgradeProgress?: number;\n  estimatedTimeRemaining?: number;\n  effects: ModuleUpgradeEffect[];\n}\n\n/**\n * Module upgrade manager\n * Manages upgrade paths, requirements, and effects for modules\n */\nexport class ModuleUpgradeManager {\n  private upgradePaths: Map<ModuleType, ModuleUpgradePath>;\n  private activeUpgrades: Map<\n    string,\n    {\n      startTime: number;\n      duration: number;\n      targetLevel: number;\n      timer: NodeJS.Timeout;\n    }\n  >;\n\n  constructor() {\n    this.upgradePaths = new Map();\n    this.activeUpgrades = new Map();\n\n    // Subscribe to events\n    this.subscribeToEvents();\n  }\n\n  /**\n   * Subscribe to module events\n   */\n  private subscribeToEvents(): void {\n    moduleEventBus.subscribe('MODULE_CREATED' as ModuleEventType, this.handleModuleCreated);\n    moduleEventBus.subscribe('MODULE_UPGRADED' as ModuleEventType, this.handleModuleUpgraded);\n  }\n\n  /**\n   * Register an upgrade path for a module type\n   */\n  public registerUpgradePath(path: ModuleUpgradePath): void {\n    this.upgradePaths.set(path.moduleType, path);\n  }\n\n  /**\n   * Get the upgrade path for a module type\n   */\n  public getUpgradePath(moduleType: ModuleType): ModuleUpgradePath | undefined {\n    return this.upgradePaths.get(moduleType);\n  }\n\n  /**\n   * Get the upgrade level for a module\n   */\n  public getUpgradeLevel(moduleType: ModuleType, level: number): ModuleUpgradeLevel | undefined {\n    const path = this.upgradePaths.get(moduleType);\n    if (!path) {\n      return undefined;\n    }\n\n    return path.levels.find(l => l.level === level);\n  }\n\n  /**\n   * Get the next upgrade level for a module\n   */\n  public getNextUpgradeLevel(moduleId: string): ModuleUpgradeLevel | undefined {\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return undefined;\n    }\n\n    const path = this.upgradePaths.get(module.type);\n    if (!path) {\n      return undefined;\n    }\n\n    return path.levels.find(l => l.level === module.level + 1);\n  }\n\n  /**\n   * Check if a module can be upgraded\n   */\n  public canUpgrade(moduleId: string): boolean {\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return false;\n    }\n\n    // Check if module is already being upgraded\n    if (this.activeUpgrades.has(moduleId)) {\n      return false;\n    }\n\n    // Check if module is active\n    if (!module.isActive) {\n      return false;\n    }\n\n    // Get next upgrade level\n    const nextLevel = this.getNextUpgradeLevel(moduleId);\n    if (!nextLevel) {\n      return false;\n    }\n\n    // Check requirements\n    return this.checkUpgradeRequirements(moduleId, nextLevel);\n  }\n\n  /**\n   * Check if a module meets the requirements for an upgrade\n   */\n  public checkUpgradeRequirements(moduleId: string, upgradeLevel: ModuleUpgradeLevel): boolean {\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return false;\n    }\n\n    const { requirements } = upgradeLevel;\n\n    // Check minimum level requirement\n    if (module.level < requirements.minLevel) {\n      return false;\n    }\n\n    // Check resource costs\n    for (const cost of requirements.resourceCosts) {\n      const available = resourceManager.getResourceAmount(cost.type as ResourceType);\n      if (available < cost.amount) {\n        return false;\n      }\n    }\n\n    // Check tech requirements\n    if (requirements.techRequirements) {\n      // TODO: Implement tech requirement checking\n      // This would require integration with a tech tree system\n    }\n\n    // Check module requirements\n    if (requirements.moduleRequirements) {\n      for (const req of requirements.moduleRequirements) {\n        const modules = moduleManager.getModulesByType(req.type);\n        const hasRequiredModule = modules.some(m => m.level >= req.level);\n        if (!hasRequiredModule) {\n          return false;\n        }\n      }\n    }\n\n    // Check building level\n    if (requirements.buildingLevel) {\n      // Find the building this module is attached to\n      let attachedBuilding = undefined;\n      for (const building of moduleManager.getBuildings()) {\n        if (building.modules.some(m => m.id === moduleId)) {\n          attachedBuilding = building;\n          break;\n        }\n      }\n\n      if (!attachedBuilding || attachedBuilding.level < requirements.buildingLevel) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get missing requirements for a module upgrade\n   */\n  public getMissingRequirements(moduleId: string): string[] {\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return ['Module not found'];\n    }\n\n    const nextLevel = this.getNextUpgradeLevel(moduleId);\n    if (!nextLevel) {\n      return ['No upgrade available'];\n    }\n\n    const { requirements } = nextLevel;\n    const missingRequirements: string[] = [];\n\n    // Check minimum level requirement\n    if (module.level < requirements.minLevel) {\n      missingRequirements.push(\n        `Module level ${module.level} is below required level ${requirements.minLevel}`\n      );\n    }\n\n    // Check resource costs\n    for (const cost of requirements.resourceCosts) {\n      const available = resourceManager.getResourceAmount(cost.type as ResourceType);\n      if (available < cost.amount) {\n        missingRequirements.push(`Insufficient ${cost.type}: ${available}/${cost.amount}`);\n      }\n    }\n\n    // Check tech requirements\n    if (requirements.techRequirements) {\n      // TODO: Implement tech requirement checking\n      // This would require integration with a tech tree system\n    }\n\n    // Check module requirements\n    if (requirements.moduleRequirements) {\n      for (const req of requirements.moduleRequirements) {\n        const modules = moduleManager.getModulesByType(req.type);\n        const hasRequiredModule = modules.some(m => m.level >= req.level);\n        if (!hasRequiredModule) {\n          missingRequirements.push(`Requires ${req.type} module at level ${req.level}`);\n        }\n      }\n    }\n\n    // Check building level\n    if (requirements.buildingLevel) {\n      // Find the building this module is attached to\n      let attachedBuilding = undefined;\n      for (const building of moduleManager.getBuildings()) {\n        if (building.modules.some(m => m.id === moduleId)) {\n          attachedBuilding = building;\n          break;\n        }\n      }\n\n      if (!attachedBuilding) {\n        missingRequirements.push(`Module not attached to a building`);\n      } else if (attachedBuilding.level < requirements.buildingLevel) {\n        missingRequirements.push(\n          `Building level ${attachedBuilding.level} is below required level ${requirements.buildingLevel}`\n        );\n      }\n    }\n\n    return missingRequirements;\n  }\n\n  /**\n   * Get upgrade status for a module\n   */\n  public getUpgradeStatus(moduleId: string): ModuleUpgradeStatus | undefined {\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return undefined;\n    }\n\n    const path = this.upgradePaths.get(module.type);\n    if (!path) {\n      return undefined;\n    }\n\n    const nextLevel = this.getNextUpgradeLevel(moduleId);\n    const maxLevel =\n      path.levels.length > 0 ? path.levels[path.levels.length - 1].level : module.level;\n\n    // Get active upgrade info\n    const activeUpgrade = this.activeUpgrades.get(moduleId);\n    let upgradeProgress: number | undefined;\n    let estimatedTimeRemaining: number | undefined;\n\n    if (activeUpgrade) {\n      const elapsed = Date.now() - activeUpgrade.startTime;\n      upgradeProgress = Math.min(1, elapsed / activeUpgrade.duration);\n      estimatedTimeRemaining = Math.max(0, activeUpgrade.duration - elapsed);\n    }\n\n    // Get upgrade effects\n    const effects: ModuleUpgradeEffect[] = [];\n    if (nextLevel) {\n      effects.push(...nextLevel.effects);\n    }\n\n    // Check requirements\n    const requirementsMet = nextLevel ? this.checkUpgradeRequirements(moduleId, nextLevel) : false;\n    const missingRequirements = nextLevel\n      ? this.getMissingRequirements(moduleId)\n      : ['No upgrade available'];\n\n    return {\n      moduleId,\n      moduleType: module.type,\n      currentLevel: module.level,\n      maxLevel,\n      nextLevel,\n      upgradeAvailable: !!nextLevel && module.level < maxLevel,\n      requirementsMet,\n      missingRequirements,\n      upgradeProgress,\n      estimatedTimeRemaining,\n      effects,\n    };\n  }\n\n  /**\n   * Start upgrading a module\n   */\n  public startUpgrade(moduleId: string): boolean {\n    // Check if module can be upgraded\n    if (!this.canUpgrade(moduleId)) {\n      return false;\n    }\n\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return false;\n    }\n\n    const nextLevel = this.getNextUpgradeLevel(moduleId);\n    if (!nextLevel) {\n      return false;\n    }\n\n    // Consume resources\n    for (const cost of nextLevel.requirements.resourceCosts) {\n      resourceManager.removeResource(cost.type as ResourceType, cost.amount);\n    }\n\n    // Calculate upgrade time (1 minute per level)\n    const baseUpgradeTime = 60000; // 1 minute\n    const upgradeTime = baseUpgradeTime * nextLevel.level;\n\n    // Update module status\n    moduleStatusManager.updateModuleStatus(\n      moduleId,\n      'upgrading',\n      `Upgrading to level ${nextLevel.level}`\n    );\n\n    // Start upgrade timer\n    const timer = setTimeout(() => {\n      this.completeUpgrade(moduleId, nextLevel.level);\n    }, upgradeTime);\n\n    // Store upgrade info\n    this.activeUpgrades.set(moduleId, {\n      startTime: Date.now(),\n      duration: upgradeTime,\n      targetLevel: nextLevel.level,\n      timer,\n    });\n\n    // Emit upgrade started event\n    moduleEventBus.emit({\n      type: 'MODULE_UPGRADE_STARTED' as ModuleEventType,\n      moduleId,\n      moduleType: module.type,\n      timestamp: Date.now(),\n      data: {\n        currentLevel: module.level,\n        targetLevel: nextLevel.level,\n        duration: upgradeTime,\n        requirements: nextLevel.requirements,\n        effects: nextLevel.effects,\n      },\n    });\n\n    return true;\n  }\n\n  /**\n   * Cancel an active module upgrade\n   */\n  public cancelUpgrade(moduleId: string): boolean {\n    const activeUpgrade = this.activeUpgrades.get(moduleId);\n    if (!activeUpgrade) {\n      return false;\n    }\n\n    // Clear timer\n    clearTimeout(activeUpgrade.timer);\n\n    // Remove from active upgrades\n    this.activeUpgrades.delete(moduleId);\n\n    // Update module status\n    moduleStatusManager.updateModuleStatus(moduleId, 'active', 'Upgrade cancelled');\n\n    // Emit upgrade cancelled event\n    const module = moduleManager.getModule(moduleId);\n    if (module) {\n      moduleEventBus.emit({\n        type: 'MODULE_UPGRADE_CANCELLED' as ModuleEventType,\n        moduleId,\n        moduleType: module.type,\n        timestamp: Date.now(),\n        data: {\n          currentLevel: module.level,\n          targetLevel: activeUpgrade.targetLevel,\n        },\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * Complete a module upgrade\n   */\n  private completeUpgrade(moduleId: string, targetLevel: number): void {\n    const activeUpgrade = this.activeUpgrades.get(moduleId);\n    if (!activeUpgrade) {\n      return;\n    }\n\n    // Remove from active upgrades\n    this.activeUpgrades.delete(moduleId);\n\n    // Get module\n    const module = moduleManager.getModule(moduleId);\n    if (!module) {\n      return;\n    }\n\n    // Get upgrade level\n    const upgradeLevel = this.getUpgradeLevel(module.type, targetLevel);\n    if (!upgradeLevel) {\n      return;\n    }\n\n    // Update module level\n    const oldLevel = module.level;\n    module.level = targetLevel;\n\n    // Update module status\n    moduleStatusManager.updateModuleStatus(moduleId, 'active', `Upgraded to level ${targetLevel}`);\n\n    // Apply upgrade effects\n    this.applyUpgradeEffects(moduleId, upgradeLevel);\n\n    // Emit upgrade completed event\n    moduleEventBus.emit({\n      type: 'MODULE_UPGRADED' as ModuleEventType,\n      moduleId,\n      moduleType: module.type,\n      timestamp: Date.now(),\n      data: {\n        oldLevel,\n        newLevel: targetLevel,\n        effects: upgradeLevel.effects,\n        visualChanges: upgradeLevel.visualChanges,\n      },\n    });\n  }\n\n  /**\n   * Apply upgrade effects to a module\n   */\n  private applyUpgradeEffects(moduleId: string, upgradeLevel: ModuleUpgradeLevel): void {\n    // This would apply the effects of the upgrade to the module\n    // For now, we'll just log the effects\n    console.log(\n      `[ModuleUpgradeManager] Applying effects to module ${moduleId}:`,\n      upgradeLevel.effects\n    );\n\n    // In a real implementation, this would modify the module's stats, abilities, etc.\n    // based on the effects defined in the upgrade level\n  }\n\n  /**\n   * Handle module created event\n   */\n  private handleModuleCreated = (event: any): void => {\n    // Nothing to do here for now\n  };\n\n  /**\n   * Handle module upgraded event\n   */\n  private handleModuleUpgraded = (event: any): void => {\n    // Nothing to do here for now\n  };\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    // Clear all active upgrade timers\n    for (const [moduleId, upgrade] of Array.from(this.activeUpgrades.entries())) {\n      clearTimeout(upgrade.timer);\n\n      // Update module status\n      moduleStatusManager.updateModuleStatus(\n        moduleId,\n        'active',\n        'Upgrade cancelled due to cleanup'\n      );\n    }\n\n    // Clear active upgrades\n    this.activeUpgrades.clear();\n\n    // Unsubscribe from events\n    const unsubscribeCreated = moduleEventBus.subscribe(\n      'MODULE_CREATED' as ModuleEventType,\n      this.handleModuleCreated\n    );\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'MODULE_UPGRADED' as ModuleEventType,\n      this.handleModuleUpgraded\n    );\n\n    if (typeof unsubscribeCreated === 'function') {\n      unsubscribeCreated();\n    }\n    if (typeof unsubscribeUpgraded === 'function') {\n      unsubscribeUpgraded();\n    }\n  }\n}\n\n// Export singleton instance\nexport const moduleUpgradeManager = new ModuleUpgradeManager();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/OfficerManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":644,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":644,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17640,17643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17640,17643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\nimport { OFFICER_TRAITS, SQUAD_CONFIG, TRAINING_CONFIG } from '../../config/OfficerConfig';\nimport { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { techTreeManager } from '../../managers/game/techTreeManager';\nimport type { ModuleType } from '../../types/buildings/ModuleTypes';\nimport type {\n  OfficerManager as IOfficerManager,\n  Officer,\n  OfficerEvents,\n  OfficerRole,\n  OfficerSkills,\n  OfficerSpecialization,\n  OfficerTier,\n  Squad,\n  TrainingProgram,\n} from '../../types/officers/OfficerTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\ntype TechNodeUnlockedEvent = {\n  nodeId: string;\n  node: {\n    type: string;\n    tier: number;\n  };\n};\n\n/**\n * Implementation of the Officer Manager\n * Handles officer hiring, training, assignment, squad management, and progression\n */\nexport class OfficerManager extends EventEmitter<OfficerEvents> implements IOfficerManager {\n  private officers: Map<string, Officer> = new Map();\n  private squads: Map<string, Squad> = new Map();\n  private trainingPrograms: Map<string, TrainingProgram> = new Map();\n  private currentTier: OfficerTier = 1;\n  private moduleId: string = 'academy'; // Default module ID for academy\n\n  constructor() {\n    super();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Set up event listeners for tech tree unlocks and other relevant events\n   */\n  private setupEventListeners(): void {\n    techTreeManager.on('nodeUnlocked', (event: TechNodeUnlockedEvent) => {\n      if (event.node.type === 'academy') {\n        this.handleAcademyUpgrade(event.node.tier as OfficerTier);\n      }\n    });\n\n    moduleEventBus.subscribe('MODULE_ACTIVATED', (event: ModuleEvent) => {\n      if (event.moduleType === 'academy') {\n        this.moduleId = event.moduleId;\n        this.emit('academyActivated', { moduleId: event.moduleId });\n      }\n    });\n  }\n\n  /**\n   * Handle academy tier upgrades\n   */\n  private handleAcademyUpgrade(tier: OfficerTier): void {\n    if (tier > this.currentTier) {\n      this.currentTier = tier;\n      this.emit('tierUpgraded', { tier });\n      moduleEventBus.emit({\n        type: 'MODULE_UPGRADED',\n        moduleId: this.moduleId,\n        moduleType: 'academy',\n        timestamp: Date.now(),\n        data: { tier },\n      });\n    }\n  }\n\n  /**\n   * Generate base stats for a new officer based on role and specialization\n   */\n  private generateBaseStats(\n    role: OfficerRole,\n    specialization: OfficerSpecialization\n  ): OfficerSkills {\n    const baseStats: OfficerSkills = {\n      combat: 1,\n      leadership: 1,\n      technical: 1,\n    };\n\n    // Adjust based on role\n    if (role === 'Squad Leader') {\n      baseStats.leadership += 2;\n    }\n\n    // Adjust based on specialization\n    switch (specialization) {\n      case 'War':\n        baseStats.combat += 2;\n        break;\n      case 'Recon':\n        baseStats.technical += 1;\n        baseStats.combat += 1;\n        break;\n      case 'Mining':\n        baseStats.technical += 2;\n        break;\n    }\n\n    return baseStats;\n  }\n\n  /**\n   * Generate random traits for a new officer\n   */\n  private generateTraits(): string[] {\n    const numTraits = Math.floor(Math.random() * 2) + 1; // 1-2 traits\n    const availableTraits = [...OFFICER_TRAITS];\n    const selectedTraits: string[] = [];\n\n    for (let i = 0; i < numTraits; i++) {\n      if (availableTraits.length === 0) {\n        break;\n      }\n      const index = Math.floor(Math.random() * availableTraits.length);\n      selectedTraits.push(availableTraits[index].id);\n      availableTraits.splice(index, 1);\n    }\n\n    return selectedTraits;\n  }\n\n  /**\n   * Apply trait effects to an officer's stats\n   */\n  private applyTraitEffects(officer: Officer): void {\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.skills) {\n        Object.entries(trait.effects.skills).forEach(([skill, value]) => {\n          officer.skills[skill as keyof typeof officer.skills] += value;\n        });\n      }\n    });\n  }\n\n  /**\n   * Calculate training duration based on officer and program\n   */\n  private calculateTrainingDuration(\n    officer: Officer,\n    specialization: OfficerSpecialization\n  ): number {\n    let duration = TRAINING_CONFIG.baseTime;\n\n    // Apply level modifier\n    duration *= 1 - (officer.level - 1) * TRAINING_CONFIG.levelModifier;\n\n    // Apply specialization modifier\n    if (officer.specialization === specialization) {\n      duration *= 1 - TRAINING_CONFIG.specializationModifier;\n    }\n\n    // Apply trait modifiers\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.trainingSpeed) {\n        duration *= 1 - trait.effects.bonuses.trainingSpeed;\n      }\n    });\n\n    return Math.max(duration, TRAINING_CONFIG.baseTime * 0.5); // Minimum 50% of base time\n  }\n\n  /**\n   * Calculate XP multiplier based on officer traits and current activity\n   */\n  private calculateXpMultiplier(officer: Officer, activity?: string): number {\n    let multiplier = TRAINING_CONFIG.xpMultiplier;\n\n    // Apply trait bonuses\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.xpGain) {\n        multiplier *= 1 + trait.effects.bonuses.xpGain;\n      }\n    });\n\n    // Apply activity-specific bonuses\n    if (activity === 'training') {\n      multiplier *= 1.5; // 50% bonus XP during training\n    } else if (activity === 'combat') {\n      multiplier *= 2.0; // 100% bonus XP during combat\n    }\n\n    return multiplier;\n  }\n\n  /**\n   * Calculate next level XP requirement using a progressive scale\n   */\n  private calculateNextLevelXp(currentLevel: number): number {\n    return Math.floor(100 * Math.pow(1.5, currentLevel - 1));\n  }\n\n  /**\n   * Improve officer skills based on level up and specialization\n   */\n  private improveSkills(officer: Officer): void {\n    // Base skill improvements\n    const improvements: OfficerSkills = {\n      combat: 0,\n      leadership: 0,\n      technical: 0,\n    };\n\n    // Specialization-based improvements\n    switch (officer.specialization) {\n      case 'War':\n        improvements.combat += 2;\n        improvements.leadership += 1;\n        break;\n      case 'Recon':\n        improvements.technical += 1;\n        improvements.combat += 1;\n        improvements.leadership += 1;\n        break;\n      case 'Mining':\n        improvements.technical += 2;\n        improvements.leadership += 1;\n        break;\n    }\n\n    // Role-based improvements\n    if (officer.role === 'Squad Leader') {\n      improvements.leadership += 1;\n    }\n\n    // Apply improvements\n    Object.entries(improvements).forEach(([skill, value]) => {\n      officer.skills[skill as keyof OfficerSkills] += value;\n    });\n\n    // Update stats to match skills\n    officer.stats = { ...officer.skills };\n  }\n\n  /**\n   * Hire a new officer\n   */\n  public hireOfficer(role: OfficerRole, specialization: OfficerSpecialization): Officer {\n    const id = uuidv4();\n    const baseStats = this.generateBaseStats(role, specialization);\n    const traits = this.generateTraits();\n\n    const officer: Officer = {\n      id,\n      name: `Officer-${id.substring(0, 4)}`, // Temporary name generation\n      portrait: '', // TODO: Implement portrait generation\n      level: 1,\n      xp: 0,\n      nextLevelXp: 100,\n      role,\n      status: 'available',\n      specialization,\n      skills: { ...baseStats },\n      traits,\n      stats: { ...baseStats },\n    };\n\n    this.applyTraitEffects(officer);\n    this.officers.set(id, officer);\n    this.emit('officerHired', { officer });\n    this.emitModuleEvent('MODULE_CREATED', { officer });\n    return officer;\n  }\n\n  /**\n   * Start training an officer\n   */\n  public startTraining(officerId: string, specialization: OfficerSpecialization): void {\n    const officer = this.officers.get(officerId);\n    if (!officer || officer.status !== 'available') {\n      return;\n    }\n\n    const duration = this.calculateTrainingDuration(officer, specialization);\n    const program: TrainingProgram = {\n      id: uuidv4(),\n      officerId,\n      specialization,\n      progress: 0,\n      startTime: Date.now(),\n      duration,\n      bonuses: {\n        xpMultiplier: this.calculateXpMultiplier(officer, 'training'),\n        skillGainRate: TRAINING_CONFIG.skillGainRate,\n      },\n    };\n\n    officer.status = 'training';\n    officer.trainingProgress = 0;\n    this.trainingPrograms.set(program.id, program);\n    this.officers.set(officerId, officer);\n\n    this.emit('trainingStarted', {\n      officerId,\n      program,\n    });\n    this.emitModuleEvent('AUTOMATION_STARTED', { officerId, program });\n  }\n\n  /**\n   * Assign an officer to a task or location\n   */\n  public assignOfficer(officerId: string, assignmentId: string): void {\n    const officer = this.officers.get(officerId);\n    if (!officer || officer.status !== 'available') {\n      return;\n    }\n\n    officer.status = 'assigned';\n    officer.assignedTo = assignmentId;\n    this.officers.set(officerId, officer);\n\n    this.emit('officerAssigned', {\n      officerId,\n      assignmentId,\n    });\n    this.emitModuleEvent('STATUS_CHANGED', { officerId, assignmentId, status: 'assigned' });\n  }\n\n  /**\n   * Create a new squad\n   */\n  public createSquad(name: string, specialization: OfficerSpecialization): Squad {\n    const squad: Squad = {\n      id: uuidv4(),\n      name,\n      members: [],\n      specialization,\n      bonuses: {\n        combat: 0,\n        efficiency: 0,\n        survival: 0,\n      },\n    };\n\n    this.squads.set(squad.id, squad);\n    this.emit('squadCreated', { squad });\n    this.emitModuleEvent('MODULE_CREATED', { squad });\n    return squad;\n  }\n\n  /**\n   * Assign an officer to a squad\n   */\n  public assignToSquad(officerId: string, squadId: string): void {\n    const officer = this.officers.get(officerId);\n    const squad = this.squads.get(squadId);\n\n    if (!officer || !squad || officer.status !== 'available') {\n      return;\n    }\n\n    // Check squad size limit\n    if (squad.members.length >= SQUAD_CONFIG.maxSize) {\n      return;\n    }\n\n    // If officer is Squad Leader and squad has no leader\n    if (officer.role === 'Squad Leader' && !squad.leader) {\n      squad.leader = officer;\n    }\n\n    squad.members.push(officer);\n    officer.status = 'assigned';\n    officer.assignedTo = squadId;\n\n    this.updateSquadBonuses(squad);\n    this.emit('squadUpdated', { squadId, officer: officerId });\n    this.emitModuleEvent('STATUS_CHANGED', { squadId, officer: officerId });\n  }\n\n  /**\n   * Update squad bonuses based on member skills and traits\n   */\n  private updateSquadBonuses(squad: Squad): void {\n    const baseBonuses = {\n      combat: 0,\n      efficiency: 0,\n      survival: 0,\n    };\n\n    // Add leader bonuses if present\n    if (squad.leader) {\n      const leaderBonus = this.calculateLeaderBonus(squad.leader);\n      baseBonuses.combat += leaderBonus;\n      baseBonuses.efficiency += leaderBonus;\n      baseBonuses.survival += leaderBonus;\n    }\n\n    // Add member bonuses\n    squad.members.forEach(member => {\n      if (member !== squad.leader) {\n        const memberBonus = this.calculateMemberBonus(member);\n        baseBonuses.combat += memberBonus;\n        baseBonuses.efficiency += memberBonus;\n        baseBonuses.survival += memberBonus;\n      }\n    });\n\n    // Apply multipliers\n    squad.bonuses = {\n      combat: baseBonuses.combat * SQUAD_CONFIG.bonusMultipliers.combat,\n      efficiency: baseBonuses.efficiency * SQUAD_CONFIG.bonusMultipliers.efficiency,\n      survival: baseBonuses.survival * SQUAD_CONFIG.bonusMultipliers.survival,\n    };\n\n    // Update squad in storage\n    this.squads.set(squad.id, squad);\n    this.emitModuleEvent('STATUS_CHANGED', { squadId: squad.id, bonuses: squad.bonuses });\n  }\n\n  /**\n   * Calculate leadership bonus for squad leader\n   */\n  private calculateLeaderBonus(officer: Officer): number {\n    let bonus = officer.skills.leadership * SQUAD_CONFIG.leadershipBonus;\n\n    // Apply trait bonuses\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.squadBonus) {\n        bonus *= 1 + trait.effects.bonuses.squadBonus;\n      }\n    });\n\n    return bonus;\n  }\n\n  /**\n   * Calculate bonus contribution from squad member\n   */\n  private calculateMemberBonus(officer: Officer): number {\n    let bonus = 0;\n\n    // Add skill contributions\n    switch (officer.specialization) {\n      case 'War':\n        bonus += officer.skills.combat * 0.5;\n        break;\n      case 'Recon':\n        bonus += (officer.skills.combat + officer.skills.technical) * 0.25;\n        break;\n      case 'Mining':\n        bonus += officer.skills.technical * 0.5;\n        break;\n    }\n\n    // Apply trait bonuses\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.squadBonus) {\n        bonus *= 1 + trait.effects.bonuses.squadBonus;\n      }\n    });\n\n    return bonus;\n  }\n\n  /**\n   * Add experience to an officer and handle level ups\n   */\n  public addExperience(officerId: string, amount: number, activity?: string): void {\n    const officer = this.officers.get(officerId);\n    if (!officer) {\n      return;\n    }\n\n    const multiplier = this.calculateXpMultiplier(officer, activity);\n    const adjustedAmount = Math.floor(amount * multiplier);\n\n    officer.xp += adjustedAmount;\n\n    // Handle level ups\n    while (officer.xp >= officer.nextLevelXp) {\n      officer.xp -= officer.nextLevelXp;\n      officer.level += 1;\n      officer.nextLevelXp = this.calculateNextLevelXp(officer.level);\n      this.improveSkills(officer);\n\n      // Emit level up event\n      this.emit('officerLeveledUp', {\n        officerId,\n        newLevel: officer.level,\n        skills: officer.skills,\n      });\n    }\n\n    // Update officer in storage\n    this.officers.set(officerId, officer);\n\n    // Emit experience gained event\n    this.emit('experienceGained', {\n      officerId,\n      amount: adjustedAmount,\n      newTotal: officer.xp,\n      nextLevel: officer.nextLevelXp,\n    });\n    this.emitModuleEvent('STATUS_CHANGED', {\n      officerId,\n      amount: adjustedAmount,\n      newTotal: officer.xp,\n      nextLevel: officer.nextLevelXp,\n    });\n  }\n\n  /**\n   * Update training programs and apply experience\n   */\n  public update(deltaTime: number): void {\n    // Update training programs\n    this.trainingPrograms.forEach((program, programId) => {\n      const officer = this.officers.get(program.officerId);\n      if (!officer) {\n        this.trainingPrograms.delete(programId);\n        return;\n      }\n\n      program.progress += deltaTime;\n      if (program.progress >= program.duration) {\n        this.completeTraining(programId);\n      } else {\n        // Update training progress\n        officer.trainingProgress = program.progress / program.duration;\n        this.officers.set(officer.id, officer);\n      }\n    });\n\n    // Update squad bonuses\n    this.squads.forEach(squad => {\n      this.updateSquadBonuses(squad);\n    });\n  }\n\n  /**\n   * Complete a training program\n   */\n  private completeTraining(programId: string): void {\n    const program = this.trainingPrograms.get(programId);\n    if (!program) {\n      return;\n    }\n\n    const officer = this.officers.get(program.officerId);\n    if (!officer) {\n      this.trainingPrograms.delete(programId);\n      return;\n    }\n\n    // Apply training results\n    officer.status = 'available';\n    officer.trainingProgress = undefined;\n\n    // Improve skills based on training\n    const skillImprovement = Math.floor(\n      (program.duration * program.bonuses.skillGainRate) / TRAINING_CONFIG.baseTime\n    );\n\n    switch (program.specialization) {\n      case 'War':\n        officer.skills.combat += skillImprovement;\n        break;\n      case 'Recon':\n        officer.skills.combat += Math.floor(skillImprovement / 2);\n        officer.skills.technical += Math.floor(skillImprovement / 2);\n        break;\n      case 'Mining':\n        officer.skills.technical += skillImprovement;\n        break;\n    }\n\n    // Update stats\n    officer.stats = { ...officer.skills };\n\n    // Add experience\n    this.addExperience(officer.id, 100, 'training');\n\n    // Update storage\n    this.officers.set(officer.id, officer);\n    this.trainingPrograms.delete(programId);\n\n    // Emit completion event\n    this.emit('trainingCompleted', {\n      officerId: officer.id,\n      specialization: program.specialization,\n      skills: officer.skills,\n    });\n    this.emitModuleEvent('AUTOMATION_CYCLE_COMPLETE', {\n      officerId: officer.id,\n      specialization: program.specialization,\n      skills: officer.skills,\n    });\n  }\n\n  /**\n   * Get an officer by ID\n   */\n  public getOfficer(id: string): Officer | undefined {\n    return this.officers.get(id);\n  }\n\n  /**\n   * Get a squad by ID\n   */\n  public getSquad(id: string): Squad | undefined {\n    return this.squads.get(id);\n  }\n\n  /**\n   * Get all available officers\n   */\n  public getAvailableOfficers(): Officer[] {\n    return Array.from(this.officers.values()).filter(officer => officer.status === 'available');\n  }\n\n  /**\n   * Get all squads of a specific specialization\n   */\n  public getSquadsBySpecialization(specialization: OfficerSpecialization): Squad[] {\n    return Array.from(this.squads.values()).filter(\n      squad => squad.specialization === specialization\n    );\n  }\n\n  /**\n   * Get current academy tier\n   */\n  public getCurrentTier(): OfficerTier {\n    return this.currentTier;\n  }\n\n  private emitModuleEvent(type: ModuleEventType, data: any): void {\n    moduleEventBus.emit({\n      type,\n      moduleId: 'officer-manager',\n      moduleType: 'academy' as ModuleType,\n      timestamp: Date.now(),\n      data,\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ShipHangarManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4734,4737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4734,4737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":222,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":222,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[5866,5932],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":230,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":230,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[6263,6536],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":239,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":239,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[6651,6719],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":247,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":247,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7029,7302],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":256,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":256,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[7434,7518],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":278,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":278,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[8318,8591],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":2218,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":2218,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\nimport { SHIP_BLUEPRINTS, ShipBlueprint } from '../../config/ShipBlueprints';\nimport { ModuleEvent, moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { EventEmitter } from '../../lib/utils/EventEmitter';\nimport {\n  ShipHangarManager as IShipHangarManager,\n  ShipBuildQueueItem,\n  ShipBuildRequirements,\n  ShipHangarBay,\n  ShipHangarEvents,\n  ShipHangarState,\n  ShipUpgradeInfo,\n  ShipUpgradeRequirement,\n  ShipUpgradeStats,\n  ShipVisualUpgrade,\n} from '../../types/buildings/ShipHangarTypes';\nimport { Effect, Tier } from '../../types/core/GameTypes';\nimport { Officer } from '../../types/officers/OfficerTypes';\nimport { ResourceCost } from '../../types/resources/ResourceTypes';\nimport { CommonShip, CommonShipAbility, CommonShipStats } from '../../types/ships/CommonShipTypes';\nimport { PlayerShipCategory, PlayerShipClass } from '../../types/ships/PlayerShipTypes';\nimport {\n  WeaponCategory,\n  WeaponConfig,\n  WeaponMount,\n  WeaponMountPosition,\n  WeaponMountSize,\n  WeaponStatus,\n} from '../../types/weapons/WeaponTypes';\nimport { ResourceManager } from '../game/ResourceManager';\nimport { techTreeManager } from '../game/techTreeManager';\nimport { OfficerManager } from './OfficerManager';\n\n// Extend CommonShip to include state\ninterface ShipWithState extends CommonShip {\n  state: ShipState;\n}\n\ninterface ShipEffect extends Effect {\n  name: string;\n  description: string;\n  type: 'buff' | 'debuff' | 'status';\n  magnitude: number;\n  duration: number;\n  active: boolean;\n  cooldown: number;\n  source?: {\n    type: 'ability' | 'weapon' | 'module';\n    id: string;\n  };\n}\n\n// Add effect management to ship state\ninterface ShipState {\n  activeEffects: ShipEffect[];\n  effectHistory: {\n    effect: ShipEffect;\n    appliedAt: number;\n    removedAt?: number;\n  }[];\n}\n\n/**\n * Implementation of the Ship Hangar Manager\n * Handles ship production, docking, and hangar bay management\n */\nexport class ShipHangarManager\n  extends EventEmitter<ShipHangarEvents>\n  implements IShipHangarManager\n{\n  private state: ShipHangarState;\n  private resourceManager: ResourceManager;\n  private officerManager: OfficerManager;\n  private activeRepairs: Map<\n    string,\n    {\n      timer: NodeJS.Timeout;\n      resourceCost: ResourceCost[];\n      startTime: number;\n      duration: number;\n    }\n  > = new Map();\n  private activeUpgrades: Map<\n    string,\n    {\n      timer: NodeJS.Timeout;\n      resourceCost: ResourceCost[];\n      startTime: number;\n      duration: number;\n      targetStats: ShipUpgradeStats;\n    }\n  > = new Map();\n  private activeAbilities: Map<\n    string,\n    {\n      timer: NodeJS.Timeout;\n      ability: CommonShipAbility;\n      startTime: number;\n    }\n  > = new Map();\n  private abilityCooldowns: Map<\n    string,\n    {\n      timer: NodeJS.Timeout;\n      endTime: number;\n    }\n  > = new Map();\n  private bayMaintenanceTimers: Map<\n    string,\n    {\n      timer: NodeJS.Timeout;\n      lastMaintenance: number;\n      efficiency: number;\n    }\n  > = new Map();\n  private assignedOfficers: Map<string, string> = new Map(); // shipId -> officerId\n\n  constructor(resourceManager: ResourceManager, officerManager: OfficerManager) {\n    super();\n    this.resourceManager = resourceManager;\n    this.officerManager = officerManager;\n    this.state = this.initializeState();\n    this.setupEventListeners();\n\n    // Subscribe to module events\n    moduleEventBus.subscribe('MODULE_ACTIVATED', (event: ModuleEvent) => {\n      if (event.moduleType === 'hangar') {\n        this.handleModuleActivation(event.moduleId);\n      }\n    });\n\n    moduleEventBus.subscribe('MODULE_DEACTIVATED', (event: ModuleEvent) => {\n      if (event.moduleType === 'hangar') {\n        this.handleModuleDeactivation(event.moduleId);\n      }\n    });\n\n    moduleEventBus.subscribe('STATUS_CHANGED', (event: ModuleEvent) => {\n      if (event.moduleType === 'hangar') {\n        this.handleModuleStatusChange(event.moduleId, event.data.status);\n      }\n    });\n  }\n\n  /**\n   * Initialize hangar state\n   */\n  private initializeState(): ShipHangarState {\n    return {\n      tier: 1,\n      buildQueue: [],\n      bays: [\n        {\n          id: uuidv4(),\n          tier: 1,\n          capacity: 3,\n          ships: [],\n          status: 'available',\n          efficiency: 1.0,\n          lastMaintenance: Date.now(),\n          maintenanceCost: [\n            { type: 'energy', amount: 10 },\n            { type: 'minerals', amount: 5 },\n          ],\n        },\n      ],\n      maxQueueSize: 3,\n      buildSpeedMultiplier: 1.0,\n      resourceEfficiency: 1.0,\n    };\n  }\n\n  /**\n   * Set up event listeners\n   */\n  private setupEventListeners(): void {\n    techTreeManager.on('nodeUnlocked', (event: { nodeId: string; node: any }) => {\n      if (event.node.type === 'hangar') {\n        this.handleTierUpgrade(event.node.tier as Tier);\n      }\n    });\n  }\n\n  /**\n   * Handle tier upgrades\n   */\n  private handleTierUpgrade(tier: Tier): void {\n    if (tier > this.state.tier) {\n      this.state.tier = tier;\n      this.state.maxQueueSize += 2;\n      this.state.buildSpeedMultiplier *= 1.25;\n      this.state.resourceEfficiency *= 0.9;\n\n      // Add new bay with maintenance costs\n      const newBay: ShipHangarBay = {\n        id: uuidv4(),\n        tier,\n        capacity: 3 + (tier - 1) * 2,\n        ships: [],\n        status: 'available',\n        efficiency: 1.0,\n        lastMaintenance: Date.now(),\n        maintenanceCost: [\n          { type: 'energy', amount: 10 * tier },\n          { type: 'minerals', amount: 5 * tier },\n        ],\n      };\n      this.state.bays.push(newBay);\n      this.setupBayMaintenance(newBay);\n\n      this.emit('tierUpgraded', {\n        tier,\n        unlockedShips: this.getUnlockedShipsForTier(tier),\n      });\n    }\n  }\n\n  /**\n   * Handle module activation\n   */\n  private handleModuleActivation(moduleId: string): void {\n    console.debug(`[ShipHangarManager] Module ${moduleId} activated`);\n    const oldEfficiency = this.state.resourceEfficiency;\n    const oldSpeed = this.state.buildSpeedMultiplier;\n\n    // Increase resource efficiency when module is activated\n    this.state.resourceEfficiency *= 0.9; // 10% reduction in resource costs\n    this.state.buildSpeedMultiplier *= 1.1; // 10% increase in build speed\n\n    console.debug(`[ShipHangarManager] Efficiency changes for module ${moduleId}:\n      Resource Efficiency: ${oldEfficiency.toFixed(2)} -> ${this.state.resourceEfficiency.toFixed(2)}\n      Build Speed: ${oldSpeed.toFixed(2)} -> ${this.state.buildSpeedMultiplier.toFixed(2)}`);\n  }\n\n  /**\n   * Handle module deactivation\n   */\n  private handleModuleDeactivation(moduleId: string): void {\n    console.debug(`[ShipHangarManager] Module ${moduleId} deactivated`);\n    const oldEfficiency = this.state.resourceEfficiency;\n    const oldSpeed = this.state.buildSpeedMultiplier;\n\n    // Reset efficiency bonuses when module is deactivated\n    this.state.resourceEfficiency /= 0.9; // Remove 10% reduction\n    this.state.buildSpeedMultiplier /= 1.1; // Remove 10% increase\n\n    console.debug(`[ShipHangarManager] Efficiency changes for module ${moduleId}:\n      Resource Efficiency: ${oldEfficiency.toFixed(2)} -> ${this.state.resourceEfficiency.toFixed(2)}\n      Build Speed: ${oldSpeed.toFixed(2)} -> ${this.state.buildSpeedMultiplier.toFixed(2)}`);\n  }\n\n  /**\n   * Handle module status change\n   */\n  private handleModuleStatusChange(moduleId: string, status: string): void {\n    console.debug(`[ShipHangarManager] Module ${moduleId} status changed to ${status}`);\n    const oldEfficiency = this.state.resourceEfficiency;\n    const oldSpeed = this.state.buildSpeedMultiplier;\n\n    switch (status) {\n      case 'optimized':\n        // Additional efficiency bonus for optimized state\n        this.state.resourceEfficiency *= 0.85; // 15% reduction in resource costs\n        this.state.buildSpeedMultiplier *= 1.15; // 15% increase in build speed\n        break;\n      case 'degraded':\n        // Penalty for degraded state\n        this.state.resourceEfficiency /= 0.85; // Remove optimization bonus\n        this.state.buildSpeedMultiplier /= 1.15; // Remove speed bonus\n        break;\n      default:\n        // Reset to base values for other states\n        this.state.resourceEfficiency = 1.0;\n        this.state.buildSpeedMultiplier = 1.0;\n        break;\n    }\n\n    console.debug(`[ShipHangarManager] Efficiency changes for module ${moduleId}:\n      Resource Efficiency: ${oldEfficiency.toFixed(2)} -> ${this.state.resourceEfficiency.toFixed(2)}\n      Build Speed: ${oldSpeed.toFixed(2)} -> ${this.state.buildSpeedMultiplier.toFixed(2)}`);\n  }\n\n  /**\n   * Get unlocked ships for a tier\n   */\n  private getUnlockedShipsForTier(tier: Tier): PlayerShipClass[] {\n    // This should be moved to a configuration file\n    switch (tier) {\n      case 1:\n        return ['spitflare', 'void-dredger-miner', 'andromeda-cutter'];\n      case 2:\n        return ['star-schooner', 'orion-frigate'];\n      case 3:\n        return ['harbringer-galleon', 'midway-carrier', 'mother-earth-revenge'];\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Start building a ship\n   */\n  public startBuild(shipClass: PlayerShipClass): void {\n    if (this.state.buildQueue.length >= this.state.maxQueueSize) {\n      throw new Error('Build queue is full');\n    }\n\n    const requirements = this.getBuildRequirements(shipClass);\n\n    // Check tier requirement\n    if (requirements.tier > this.state.tier) {\n      throw new Error(\n        `Insufficient hangar tier. Required: ${requirements.tier}, Current: ${this.state.tier}`\n      );\n    }\n\n    // Check tech requirements\n    if (requirements.prerequisites?.technology) {\n      const missingTech = requirements.prerequisites.technology.filter(\n        techId => !techTreeManager.getNode(techId)?.unlocked\n      );\n      if (missingTech.length > 0) {\n        throw new Error(`Missing required technologies: ${missingTech.join(', ')}`);\n      }\n    }\n\n    // Check officer requirements\n    if (requirements.prerequisites?.officers) {\n      const { minLevel, specialization } = requirements.prerequisites.officers;\n\n      // Find an assigned officer that meets the requirements\n      let hasQualifiedOfficer = false;\n      for (const [shipId, officerId] of this.assignedOfficers) {\n        const officer = this.officerManager.getOfficer(officerId);\n        const ship = this.getDockedShips().find(s => s.id === shipId);\n        if (\n          officer &&\n          ship &&\n          officer.level >= minLevel &&\n          officer.specialization === specialization &&\n          ship.status === 'ready'\n        ) {\n          hasQualifiedOfficer = true;\n          break;\n        }\n      }\n\n      if (!hasQualifiedOfficer) {\n        throw new Error(`Requires a level ${minLevel} ${specialization} officer`);\n      }\n    }\n\n    // Check resources\n    const canAfford = requirements.resourceCost.every(\n      cost => this.resourceManager.getResourceAmount(cost.type) >= cost.amount\n    );\n    if (!canAfford) {\n      throw new Error('Insufficient resources');\n    }\n\n    // Consume resources with efficiency bonus\n    requirements.resourceCost.forEach(cost => {\n      const adjustedAmount = Math.floor(cost.amount * this.state.resourceEfficiency);\n      this.resourceManager.removeResource(cost.type, adjustedAmount);\n    });\n\n    // Create queue item with adjusted build time based on speed multiplier\n    const queueItem: ShipBuildQueueItem = {\n      id: uuidv4(),\n      shipClass,\n      progress: 0,\n      startTime: Date.now(),\n      duration: Math.floor(requirements.buildTime / this.state.buildSpeedMultiplier),\n      resourceCost: requirements.resourceCost,\n      tier: requirements.tier,\n      status: 'building',\n      totalPausedTime: 0,\n    };\n\n    this.state.buildQueue.push(queueItem);\n    this.emit('buildStarted', { queueItem });\n  }\n\n  /**\n   * Cancel a build in progress\n   */\n  public cancelBuild(queueItemId: string): void {\n    const index = this.state.buildQueue.findIndex(item => item.id === queueItemId);\n    if (index === -1) {\n      return;\n    }\n\n    const item = this.state.buildQueue[index];\n\n    // Calculate refund based on progress\n    const refundedResources = item.resourceCost.map(cost => ({\n      type: cost.type,\n      amount: Math.floor(cost.amount * (1 - item.progress) * 0.75), // 75% refund of remaining resources\n    }));\n\n    // Return resources\n    refundedResources.forEach(refund => {\n      this.resourceManager.addResource(refund.type, refund.amount);\n    });\n\n    this.state.buildQueue.splice(index, 1);\n    this.emit('buildCancelled', { queueItemId, refundedResources });\n  }\n\n  /**\n   * Pause a build in progress\n   */\n  public pauseBuild(queueItemId: string): void {\n    const item = this.state.buildQueue.find(item => item.id === queueItemId);\n    if (!item || item.status !== 'building') {\n      throw new Error('Cannot pause: Invalid build or already paused');\n    }\n\n    item.status = 'paused';\n    item.pausedAt = Date.now();\n    this.emit('buildPaused', { queueItemId });\n  }\n\n  /**\n   * Resume a paused build\n   */\n  public resumeBuild(queueItemId: string): void {\n    const item = this.state.buildQueue.find(item => item.id === queueItemId);\n    if (!item || item.status !== 'paused') {\n      throw new Error('Cannot resume: Invalid build or not paused');\n    }\n\n    // Calculate total paused time\n    if (item.pausedAt) {\n      item.totalPausedTime = (item.totalPausedTime || 0) + (Date.now() - item.pausedAt);\n    }\n\n    item.status = 'building';\n    item.pausedAt = undefined;\n    this.emit('buildResumed', { queueItemId });\n  }\n\n  /**\n   * Get the current build queue\n   */\n  public getBuildQueue(): ShipBuildQueueItem[] {\n    return [...this.state.buildQueue];\n  }\n\n  /**\n   * Get build requirements for a ship class\n   */\n  public getBuildRequirements(shipClass: PlayerShipClass): ShipBuildRequirements {\n    // Find the ship blueprint\n    const blueprint = SHIP_BLUEPRINTS.find(bp => bp.shipClass === shipClass);\n    if (!blueprint) {\n      throw new Error(`No blueprint found for ship class: ${shipClass}`);\n    }\n\n    // Get base requirements from blueprint\n    const requirements: ShipBuildRequirements = {\n      tier: blueprint.requirements.tier,\n      resourceCost: blueprint.requirements.resourceCost,\n      buildTime: blueprint.requirements.buildTime,\n      prerequisites: blueprint.requirements.prerequisites,\n    };\n\n    // Add tech tree requirements based on tier and category\n    if (!requirements.prerequisites) {\n      requirements.prerequisites = {};\n    }\n\n    if (!requirements.prerequisites.technology) {\n      requirements.prerequisites.technology = [];\n    }\n\n    // Add base tech requirements based on tier\n    switch (blueprint.tier) {\n      case 3:\n        requirements.prerequisites.technology.push('mega-hangar');\n        break;\n      case 2:\n        requirements.prerequisites.technology.push('expanded-hangar');\n        break;\n      case 1:\n        requirements.prerequisites.technology.push('basic-ship-hangar');\n        break;\n    }\n\n    // Add category-specific tech requirements\n    switch (blueprint.category) {\n      case 'war':\n        requirements.prerequisites.technology.push(\n          blueprint.tier === 3\n            ? 'advanced-weapons'\n            : blueprint.tier === 2\n              ? 'enhanced-weapons'\n              : 'basic-weapons'\n        );\n        break;\n      case 'recon':\n        requirements.prerequisites.technology.push(\n          blueprint.tier === 3\n            ? 'quantum-recon'\n            : blueprint.tier === 2\n              ? 'enhanced-sensors'\n              : 'basic-sensors'\n        );\n        break;\n      case 'mining':\n        requirements.prerequisites.technology.push(\n          blueprint.tier === 3\n            ? 'exotic-mining'\n            : blueprint.tier === 2\n              ? 'improved-extraction'\n              : 'mining-lasers'\n        );\n        break;\n    }\n\n    return requirements;\n  }\n\n  /**\n   * Dock a ship in an available bay\n   */\n  public dockShip(ship: CommonShip): void {\n    const availableBay = this.state.bays.find(\n      bay => bay.status === 'available' && bay.ships.length < bay.capacity\n    );\n\n    if (!availableBay) {\n      throw new Error('No available docking bays');\n    }\n\n    availableBay.ships.push(ship);\n    if (availableBay.ships.length === availableBay.capacity) {\n      availableBay.status = 'full';\n    }\n\n    this.emit('shipDocked', { ship, bay: availableBay });\n  }\n\n  /**\n   * Launch a ship from its bay\n   */\n  public launchShip(shipId: string): void {\n    for (const bay of this.state.bays) {\n      const index = bay.ships.findIndex(ship => ship.id === shipId);\n      if (index !== -1) {\n        const ship = bay.ships[index];\n        bay.ships.splice(index, 1);\n        bay.status = 'available';\n        this.emit('shipLaunched', { ship, bay });\n        return;\n      }\n    }\n  }\n\n  /**\n   * Upgrade a hangar bay\n   */\n  public upgradeBay(bayId: string): void {\n    const bay = this.state.bays.find(b => b.id === bayId);\n    if (!bay || bay.tier >= this.state.tier) {\n      return;\n    }\n\n    // Calculate upgrade costs\n    const upgradeCosts: ResourceCost[] = [\n      { type: 'minerals', amount: 100 * bay.tier },\n      { type: 'energy', amount: 50 * bay.tier },\n    ];\n\n    // Add plasma cost for higher tiers\n    if (bay.tier >= 2) {\n      upgradeCosts.push({ type: 'plasma', amount: 25 * bay.tier });\n    }\n\n    // Check if we can afford upgrade\n    const canAfford = upgradeCosts.every(\n      cost => this.resourceManager.getResourceAmount(cost.type) >= cost.amount\n    );\n\n    if (!canAfford) {\n      throw new Error('Insufficient resources for bay upgrade');\n    }\n\n    // Consume resources\n    upgradeCosts.forEach(cost => {\n      this.resourceManager.removeResource(cost.type, cost.amount);\n    });\n\n    const newTier = (bay.tier + 1) as Tier;\n    const newCapacity = bay.capacity + 2;\n\n    // Update bay\n    bay.tier = newTier;\n    bay.capacity = newCapacity;\n    bay.status = bay.ships.length >= newCapacity ? 'full' : 'available';\n    bay.efficiency = Math.min(1.0, bay.efficiency + 0.2); // Bonus efficiency from upgrade\n    bay.maintenanceCost = [\n      { type: 'energy', amount: 10 * newTier },\n      { type: 'minerals', amount: 5 * newTier },\n    ];\n\n    // Reset maintenance timer with new values\n    this.setupBayMaintenance(bay);\n\n    this.emit('bayUpgraded', {\n      bayId,\n      newTier,\n      newCapacity,\n      newEfficiency: bay.efficiency,\n    });\n  }\n\n  /**\n   * Get all hangar bays\n   */\n  public getBays(): ShipHangarBay[] {\n    return [...this.state.bays];\n  }\n\n  /**\n   * Get available hangar bays\n   */\n  public getAvailableBays(): ShipHangarBay[] {\n    return this.state.bays.filter(bay => bay.status === 'available');\n  }\n\n  /**\n   * Get current hangar tier\n   */\n  public getCurrentTier(): Tier {\n    return this.state.tier;\n  }\n\n  /**\n   * Get current hangar state\n   */\n  public getState(): ShipHangarState {\n    return { ...this.state };\n  }\n\n  /**\n   * Update build progress\n   */\n  public update(): void {\n    const now = Date.now();\n    const completedItems: ShipBuildQueueItem[] = [];\n\n    // Update progress for each building item\n    this.state.buildQueue.forEach(item => {\n      if (item.status !== 'building') {\n        return;\n      }\n\n      // Calculate elapsed time considering pauses\n      const elapsedTime = now - item.startTime - (item.totalPausedTime || 0);\n      const newProgress = Math.min(1, elapsedTime / item.duration);\n\n      if (newProgress !== item.progress) {\n        item.progress = newProgress;\n        this.emit('buildProgressed', { queueItemId: item.id, progress: newProgress });\n      }\n\n      // Check for completion\n      if (newProgress >= 1) {\n        item.status = 'completed';\n        completedItems.push(item);\n      }\n    });\n\n    // Handle completed items\n    completedItems.forEach(item => {\n      this.completeBuild(item);\n      const index = this.state.buildQueue.indexOf(item);\n      if (index !== -1) {\n        this.state.buildQueue.splice(index, 1);\n      }\n    });\n  }\n\n  /**\n   * Complete a ship build and assign it to a bay\n   */\n  private completeBuild(item: ShipBuildQueueItem): void {\n    // Get ship blueprint\n    const blueprint = SHIP_BLUEPRINTS.find((bp: ShipBlueprint) => bp.shipClass === item.shipClass);\n    if (!blueprint) {\n      throw new Error(`No blueprint found for ship class: ${item.shipClass}`);\n    }\n\n    // Find an available bay\n    const availableBay = this.state.bays.find(\n      bay => bay.status === 'available' && bay.ships.length < bay.capacity\n    );\n    if (!availableBay) {\n      throw new Error('No available bay to dock the completed ship');\n    }\n\n    // Create the ship instance\n    const ship: CommonShip = {\n      id: uuidv4(),\n      name: blueprint.name,\n      category: blueprint.category,\n      status: 'ready',\n      stats: {\n        health: blueprint.baseStats.hull,\n        maxHealth: blueprint.baseStats.hull,\n        shield: blueprint.baseStats.shield,\n        maxShield: blueprint.baseStats.shield,\n        energy: blueprint.baseStats.energy,\n        maxEnergy: blueprint.baseStats.energy,\n        speed: blueprint.baseStats.speed,\n        turnRate: 2, // Default value, can be adjusted based on ship type\n        cargo: blueprint.baseStats.cargo || 0,\n        weapons:\n          blueprint.weapons?.map(weapon => ({\n            id: uuidv4(),\n            size: 'medium' as WeaponMountSize,\n            position: 'front' as WeaponMountPosition,\n            rotation: 0,\n            allowedCategories: ['machineGun' as WeaponCategory],\n            currentWeapon: {\n              config: {\n                id: weapon.name.toLowerCase().replace(/\\s+/g, '-'),\n                name: weapon.name,\n                category: 'machineGun' as WeaponCategory,\n                tier: blueprint.tier,\n                baseStats: {\n                  damage: weapon.damage,\n                  range: weapon.range,\n                  accuracy: 0.8, // Default value\n                  rateOfFire: 1 / weapon.cooldown,\n                  energyCost: 5, // Default value\n                  cooldown: weapon.cooldown,\n                  effects: [], // Can be configured in blueprint\n                },\n                visualAsset: `weapons/${weapon.name.toLowerCase().replace(/\\s+/g, '-')}`,\n                mountRequirements: {\n                  size: 'medium' as WeaponMountSize,\n                  power: 20,\n                },\n              },\n              state: {\n                status: 'ready' as WeaponStatus,\n                currentStats: {\n                  damage: weapon.damage,\n                  range: weapon.range,\n                  accuracy: 0.8,\n                  rateOfFire: 1 / weapon.cooldown,\n                  energyCost: 5,\n                  cooldown: weapon.cooldown,\n                  effects: [],\n                },\n                effects: [],\n              },\n            },\n          })) || [],\n        abilities:\n          blueprint.abilities?.map(ability => ({\n            name: ability.name,\n            description: ability.description,\n            cooldown: ability.cooldown,\n            duration: ability.duration,\n            active: false,\n            effect: {\n              name: ability.name,\n              description: ability.description,\n              type: 'ability',\n              magnitude: 1,\n              duration: ability.duration,\n              active: false,\n              cooldown: ability.cooldown,\n            },\n          })) || [],\n        defense: {\n          armor: Math.floor(blueprint.baseStats.hull * 0.3), // 30% of hull as armor\n          shield: blueprint.baseStats.shield,\n          evasion: 0.2, // Default value\n          regeneration: Math.floor(blueprint.baseStats.shield * 0.02), // 2% shield regen\n        },\n        mobility: {\n          speed: blueprint.baseStats.speed,\n          turnRate: 2, // Default value\n          acceleration: blueprint.baseStats.speed * 0.5, // 50% of speed as acceleration\n        },\n      },\n      abilities:\n        blueprint.abilities?.map(ability => ({\n          name: ability.name,\n          description: ability.description,\n          cooldown: ability.cooldown,\n          duration: ability.duration,\n          active: false,\n          effect: {\n            name: ability.name,\n            description: ability.description,\n            type: 'ability',\n            magnitude: 1,\n            duration: ability.duration,\n            active: false,\n            cooldown: ability.cooldown,\n          },\n        })) || [],\n    };\n\n    // Add ship to bay\n    availableBay.ships.push(ship);\n    if (availableBay.ships.length >= availableBay.capacity) {\n      availableBay.status = 'full';\n    }\n\n    // Emit completion event\n    this.emit('buildCompleted', { ship, bay: availableBay });\n  }\n\n  /**\n   * Get ship class from ship\n   */\n  private getShipClass(ship: CommonShip): PlayerShipClass {\n    // Map ship names to their corresponding class\n    const classMap: Record<string, PlayerShipClass> = {\n      'Harbringer Galleon': 'harbringer-galleon',\n      'Midway Carrier': 'midway-carrier',\n      \"Mother Earth's Revenge\": 'mother-earth-revenge',\n      'Orion Frigate': 'orion-frigate',\n      Spitflare: 'spitflare',\n      'Star Schooner': 'star-schooner',\n      'Void Dredger Miner': 'void-dredger-miner',\n      'Andromeda Cutter': 'andromeda-cutter',\n    };\n\n    return classMap[ship.name] || 'spitflare'; // Default to spitflare if name not found\n  }\n\n  /**\n   * Get ship category from class\n   */\n  private getShipCategory(shipClass: PlayerShipClass): PlayerShipCategory {\n    if (shipClass.includes('void-dredger')) {\n      return 'mining';\n    }\n    if (shipClass.includes('andromeda') || shipClass.includes('schooner')) {\n      return 'recon';\n    }\n    return 'war';\n  }\n\n  /**\n   * Get base stats for a ship class\n   */\n  private getBaseStats(shipClass: PlayerShipClass): CommonShipStats {\n    const blueprint = SHIP_BLUEPRINTS.find(bp => bp.shipClass === shipClass);\n    if (!blueprint) {\n      // Return default stats if no blueprint found\n      return {\n        health: 100,\n        maxHealth: 100,\n        shield: 50,\n        maxShield: 50,\n        energy: 100,\n        maxEnergy: 100,\n        speed: 10,\n        turnRate: 2,\n        cargo: 100,\n        weapons: [],\n        abilities: [],\n        defense: {\n          armor: 30,\n          shield: 50,\n          evasion: 0.2,\n          regeneration: 1,\n        },\n        mobility: {\n          speed: 10,\n          turnRate: 2,\n          acceleration: 5,\n        },\n      };\n    }\n\n    // Create stats from blueprint\n    return {\n      health: blueprint.baseStats.hull,\n      maxHealth: blueprint.baseStats.hull,\n      shield: blueprint.baseStats.shield,\n      maxShield: blueprint.baseStats.shield,\n      energy: blueprint.baseStats.energy,\n      maxEnergy: blueprint.baseStats.energy,\n      speed: blueprint.baseStats.speed,\n      turnRate: 2, // Default value, can be adjusted based on ship type\n      cargo: blueprint.baseStats.cargo || 0,\n      weapons:\n        blueprint.weapons?.map(weapon => ({\n          id: uuidv4(),\n          size: 'medium' as WeaponMountSize,\n          position: 'front' as WeaponMountPosition,\n          rotation: 0,\n          allowedCategories: ['machineGun' as WeaponCategory],\n          currentWeapon: {\n            config: {\n              id: weapon.name.toLowerCase().replace(/\\s+/g, '-'),\n              name: weapon.name,\n              category: 'machineGun' as WeaponCategory,\n              tier: blueprint.tier,\n              baseStats: {\n                damage: weapon.damage,\n                range: weapon.range,\n                accuracy: 0.8, // Default value\n                rateOfFire: 1 / weapon.cooldown,\n                energyCost: 5, // Default value\n                cooldown: weapon.cooldown,\n                effects: [], // Can be configured in blueprint\n              },\n              visualAsset: `weapons/${weapon.name.toLowerCase().replace(/\\s+/g, '-')}`,\n              mountRequirements: {\n                size: 'medium' as WeaponMountSize,\n                power: 20,\n              },\n            },\n            state: {\n              status: 'ready' as WeaponStatus,\n              currentStats: {\n                damage: weapon.damage,\n                range: weapon.range,\n                accuracy: 0.8,\n                rateOfFire: 1 / weapon.cooldown,\n                energyCost: 5,\n                cooldown: weapon.cooldown,\n                effects: [],\n              },\n              effects: [],\n            },\n          },\n        })) || [],\n      abilities:\n        blueprint.abilities?.map(ability => ({\n          name: ability.name,\n          description: ability.description,\n          cooldown: ability.cooldown,\n          duration: ability.duration,\n          active: false,\n          effect: {\n            name: ability.name,\n            description: ability.description,\n            type: 'ability',\n            magnitude: 1,\n            duration: ability.duration,\n            active: false,\n            cooldown: ability.cooldown,\n          },\n        })) || [],\n      defense: {\n        armor: Math.floor(blueprint.baseStats.hull * 0.3), // 30% of hull as armor\n        shield: blueprint.baseStats.shield,\n        evasion: 0.2, // Default value\n        regeneration: Math.floor(blueprint.baseStats.shield * 0.02), // 2% shield regen\n      },\n      mobility: {\n        speed: blueprint.baseStats.speed,\n        turnRate: 2, // Default value\n        acceleration: blueprint.baseStats.speed * 0.5, // 50% of speed as acceleration\n      },\n    };\n  }\n\n  /**\n   * Get available ships\n   */\n  public getAvailableShips(category?: PlayerShipCategory): CommonShip[] {\n    const ships = this.state.bays.flatMap(bay => bay.ships);\n    if (category) {\n      return ships.filter(ship => ship.category === category);\n    }\n    return ships;\n  }\n\n  /**\n   * Get all docked ships\n   */\n  public getDockedShips(): CommonShip[] {\n    return this.state.bays.flatMap(bay => bay.ships);\n  }\n\n  /**\n   * Get ships by category\n   */\n  public getShipsByCategory(category: PlayerShipCategory): CommonShip[] {\n    return this.getDockedShips().filter(ship => ship.category === category);\n  }\n\n  /**\n   * Start repairing a ship\n   */\n  public startRepair(shipId: string): void {\n    // Find the ship in any bay\n    let targetShip: CommonShip | undefined;\n    let targetBay: ShipHangarBay | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        targetBay = bay;\n        break;\n      }\n    }\n\n    if (!targetShip || !targetBay) {\n      throw new Error('Ship not found in any bay');\n    }\n\n    if (targetShip.status !== 'damaged') {\n      throw new Error('Ship does not need repairs');\n    }\n\n    // Calculate repair costs based on damage\n    const healthDamage = targetShip.stats.maxHealth - targetShip.stats.health;\n    const shieldDamage = targetShip.stats.maxShield - targetShip.stats.shield;\n    const totalDamage = healthDamage + shieldDamage;\n\n    const resourceCost: ResourceCost[] = [\n      { type: 'minerals', amount: Math.ceil(totalDamage * 0.5) }, // Base mineral cost\n      { type: 'energy', amount: Math.ceil(totalDamage * 0.3) }, // Base energy cost\n    ];\n\n    // Add plasma cost for higher tier ships\n    if (targetShip.stats.maxHealth >= 200) {\n      // Higher tier ships have more health\n      resourceCost.push({ type: 'plasma', amount: Math.ceil(totalDamage * 0.2) });\n    }\n\n    // Check if we have enough resources\n    const canAfford = resourceCost.every(\n      cost => this.resourceManager.getResourceAmount(cost.type) >= cost.amount\n    );\n    if (!canAfford) {\n      throw new Error('Insufficient resources for repairs');\n    }\n\n    // Consume resources\n    resourceCost.forEach(cost => {\n      this.resourceManager.removeResource(cost.type, cost.amount);\n    });\n\n    // Calculate repair time based on damage and tier\n    const baseRepairTime = 30000; // 30 seconds base time\n    const damageMultiplier = totalDamage / targetShip.stats.maxHealth;\n    const estimatedTime = Math.ceil(baseRepairTime * damageMultiplier);\n\n    // Update ship status\n    targetShip.status = 'repairing';\n\n    // Start repair timer\n    const repairTimer = setTimeout(() => {\n      this.completeRepair(shipId);\n    }, estimatedTime);\n\n    // Store repair info\n    this.activeRepairs.set(shipId, {\n      timer: repairTimer,\n      resourceCost,\n      startTime: Date.now(),\n      duration: estimatedTime,\n    });\n\n    // Emit event\n    this.emit('repairStarted', {\n      shipId,\n      resourceCost,\n      estimatedTime,\n    });\n  }\n\n  /**\n   * Cancel an ongoing repair\n   */\n  public cancelRepair(shipId: string): void {\n    const repairInfo = this.activeRepairs.get(shipId);\n    if (!repairInfo) {\n      throw new Error('No active repair found for ship');\n    }\n\n    // Clear the timer\n    clearTimeout(repairInfo.timer);\n\n    // Calculate progress and refund resources\n    const progress = Math.min(1, (Date.now() - repairInfo.startTime) / repairInfo.duration);\n    const refundedResources = repairInfo.resourceCost.map(cost => ({\n      type: cost.type,\n      amount: Math.floor(cost.amount * (1 - progress) * 0.75), // 75% refund of remaining resources\n    }));\n\n    // Return resources\n    refundedResources.forEach(refund => {\n      this.resourceManager.addResource(refund.type, refund.amount);\n    });\n\n    // Find and update ship status\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        ship.status = 'damaged';\n        break;\n      }\n    }\n\n    // Clean up\n    this.activeRepairs.delete(shipId);\n\n    // Emit event\n    this.emit('repairCancelled', {\n      shipId,\n      refundedResources,\n    });\n  }\n\n  /**\n   * Complete a ship repair\n   */\n  private completeRepair(shipId: string): void {\n    // Find the ship\n    let repairedShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        repairedShip = ship;\n        break;\n      }\n    }\n\n    if (!repairedShip) {\n      console.error('Ship not found for repair completion');\n      return;\n    }\n\n    // Restore ship to full health\n    repairedShip.stats.health = repairedShip.stats.maxHealth;\n    repairedShip.stats.shield = repairedShip.stats.maxShield;\n    repairedShip.status = 'ready';\n\n    // Clean up\n    this.activeRepairs.delete(shipId);\n\n    // Emit event\n    this.emit('repairCompleted', { shipId });\n  }\n\n  /**\n   * Get upgrade info for a ship\n   */\n  public getUpgradeInfo(shipId: string): ShipUpgradeInfo | undefined {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n    let targetBay: ShipHangarBay | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        targetBay = bay;\n        break;\n      }\n    }\n\n    if (!targetShip || !targetBay) {\n      return undefined;\n    }\n\n    // Find the ship blueprint\n    const blueprint = SHIP_BLUEPRINTS.find(bp => bp.shipClass === this.getShipClass(targetShip));\n    if (!blueprint) {\n      return undefined;\n    }\n\n    // Check if upgrade is available\n    const upgradeAvailable = targetBay.tier < this.state.tier;\n\n    // Calculate upgrade stats\n    const stats: ShipUpgradeStats = {\n      hull: {\n        current: targetShip.stats.health,\n        upgraded: Math.floor(targetShip.stats.health * 1.5),\n      },\n      shield: {\n        current: targetShip.stats.shield,\n        upgraded: Math.floor(targetShip.stats.shield * 1.5),\n      },\n      weapons: {\n        current: 100,\n        upgraded: 150,\n      },\n      speed: {\n        current: targetShip.stats.speed,\n        upgraded: Math.floor(targetShip.stats.speed * 1.2),\n      },\n    };\n\n    // Calculate resource costs\n    const resourceCost: ResourceCost[] = [\n      { type: 'minerals', amount: Math.floor(targetShip.stats.health * 0.5) },\n      { type: 'energy', amount: Math.floor(targetShip.stats.shield * 0.5) },\n    ];\n\n    // Add plasma cost for higher tier upgrades\n    if (targetBay.tier >= 2) {\n      resourceCost.push({\n        type: 'plasma',\n        amount: Math.floor((targetShip.stats.health + targetShip.stats.shield) * 0.2),\n      });\n    }\n\n    // Check tech requirements\n    const requirements: ShipUpgradeRequirement[] = [];\n\n    // Tech tree requirements\n    if (blueprint.requirements.prerequisites?.technology) {\n      blueprint.requirements.prerequisites.technology.forEach(tech => {\n        requirements.push({\n          type: 'tech',\n          name: tech,\n          met: techTreeManager.getNode(tech)?.unlocked || false,\n        });\n      });\n    }\n\n    // Resource requirements\n    resourceCost.forEach(cost => {\n      requirements.push({\n        type: 'resource',\n        name: `${cost.type}: ${cost.amount}`,\n        met: this.resourceManager.getResourceAmount(cost.type) >= cost.amount,\n      });\n    });\n\n    // Facility requirements\n    requirements.push({\n      type: 'facility',\n      name: `Tier ${targetBay.tier + 1} Hangar Bay`,\n      met: this.state.tier > targetBay.tier,\n    });\n\n    // Visual upgrades\n    const visualUpgrades: ShipVisualUpgrade[] = [\n      {\n        name: 'Enhanced Hull Plating',\n        description: 'Reinforced armor panels with improved damage resistance',\n        preview: `ships/${targetShip.category}/tier${targetBay.tier + 1}/hull`,\n      },\n      {\n        name: 'Advanced Shield Matrix',\n        description: 'Upgraded shield emitters with better regeneration',\n        preview: `ships/${targetShip.category}/tier${targetBay.tier + 1}/shield`,\n      },\n    ];\n\n    return {\n      shipId,\n      tier: targetBay.tier as Tier,\n      upgradeAvailable,\n      requirements,\n      stats,\n      resourceCost,\n      visualUpgrades,\n    };\n  }\n\n  /**\n   * Start upgrading a ship\n   */\n  public startUpgrade(shipId: string): void {\n    const upgradeInfo = this.getUpgradeInfo(shipId);\n    if (!upgradeInfo) {\n      throw new Error('Ship not found or upgrade info not available');\n    }\n\n    if (!upgradeInfo.upgradeAvailable) {\n      throw new Error('Ship is not eligible for upgrade');\n    }\n\n    // Check requirements\n    if (!upgradeInfo.requirements.every(req => req.met)) {\n      throw new Error('Not all upgrade requirements are met');\n    }\n\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n    let targetBay: ShipHangarBay | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        targetBay = bay;\n        break;\n      }\n    }\n\n    if (!targetShip || !targetBay) {\n      throw new Error('Ship not found in any bay');\n    }\n\n    // Consume resources\n    upgradeInfo.resourceCost.forEach(cost => {\n      this.resourceManager.removeResource(cost.type, cost.amount);\n    });\n\n    // Calculate upgrade time\n    const baseUpgradeTime = 60000; // 1 minute base time\n    const tierMultiplier = targetBay.tier;\n    const estimatedTime = baseUpgradeTime * tierMultiplier;\n\n    // Update ship status\n    targetShip.status = 'upgrading';\n\n    // Start upgrade timer\n    const upgradeTimer = setTimeout(() => {\n      this.completeUpgrade(shipId, upgradeInfo.stats);\n    }, estimatedTime);\n\n    // Store upgrade info\n    this.activeUpgrades.set(shipId, {\n      timer: upgradeTimer,\n      resourceCost: upgradeInfo.resourceCost,\n      startTime: Date.now(),\n      duration: estimatedTime,\n      targetStats: upgradeInfo.stats,\n    });\n\n    // Emit event\n    this.emit('upgradeStarted', {\n      shipId,\n      resourceCost: upgradeInfo.resourceCost,\n      estimatedTime,\n    });\n  }\n\n  /**\n   * Cancel an ongoing upgrade\n   */\n  public cancelUpgrade(shipId: string): void {\n    const upgradeInfo = this.activeUpgrades.get(shipId);\n    if (!upgradeInfo) {\n      throw new Error('No active upgrade found for ship');\n    }\n\n    // Clear the timer\n    clearTimeout(upgradeInfo.timer);\n\n    // Calculate progress and refund resources\n    const progress = Math.min(1, (Date.now() - upgradeInfo.startTime) / upgradeInfo.duration);\n    const refundedResources = upgradeInfo.resourceCost.map(cost => ({\n      type: cost.type,\n      amount: Math.floor(cost.amount * (1 - progress) * 0.75), // 75% refund of remaining resources\n    }));\n\n    // Return resources\n    refundedResources.forEach(refund => {\n      this.resourceManager.addResource(refund.type, refund.amount);\n    });\n\n    // Find and update ship status\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        ship.status = 'ready';\n        break;\n      }\n    }\n\n    // Clean up\n    this.activeUpgrades.delete(shipId);\n\n    // Emit event\n    this.emit('upgradeCancelled', {\n      shipId,\n      refundedResources,\n    });\n  }\n\n  /**\n   * Complete a ship upgrade\n   */\n  private completeUpgrade(shipId: string, targetStats: ShipUpgradeStats): void {\n    // Find the ship\n    let upgradedShip: CommonShip | undefined;\n    let upgradedBay: ShipHangarBay | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        upgradedShip = ship;\n        upgradedBay = bay;\n        break;\n      }\n    }\n\n    if (!upgradedShip || !upgradedBay) {\n      console.error('Ship not found for upgrade completion');\n      return;\n    }\n\n    // Update ship stats\n    upgradedShip.stats.health = targetStats.hull.upgraded;\n    upgradedShip.stats.maxHealth = targetStats.hull.upgraded;\n    upgradedShip.stats.shield = targetStats.shield.upgraded;\n    upgradedShip.stats.maxShield = targetStats.shield.upgraded;\n    upgradedShip.stats.speed = targetStats.speed.upgraded;\n    upgradedShip.status = 'ready';\n\n    // Update bay tier\n    upgradedBay.tier = (upgradedBay.tier + 1) as Tier;\n\n    // Clean up\n    this.activeUpgrades.delete(shipId);\n\n    // Emit event\n    this.emit('upgradeCompleted', {\n      shipId,\n      newTier: upgradedBay.tier,\n      stats: targetStats,\n    });\n  }\n\n  /**\n   * Activate a ship's ability\n   */\n  public activateAbility(shipId: string, abilityName: string): void {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      throw new Error('Ship not found');\n    }\n\n    // Find the ability\n    const ability = targetShip.abilities.find(a => a.name === abilityName);\n    if (!ability) {\n      throw new Error('Ability not found');\n    }\n\n    // Check if ability is on cooldown\n    const cooldownInfo = this.abilityCooldowns.get(`${shipId}-${abilityName}`);\n    if (cooldownInfo && Date.now() < cooldownInfo.endTime) {\n      throw new Error('Ability is on cooldown');\n    }\n\n    // Check if ability is already active\n    if (ability.active) {\n      throw new Error('Ability is already active');\n    }\n\n    // Activate ability\n    ability.active = true;\n    ability.effect.active = true;\n\n    // Start ability timer\n    const abilityTimer = setTimeout(() => {\n      this.deactivateAbility(shipId, abilityName);\n    }, ability.duration * 1000);\n\n    // Store active ability info\n    this.activeAbilities.set(`${shipId}-${abilityName}`, {\n      timer: abilityTimer,\n      ability,\n      startTime: Date.now(),\n    });\n\n    // Start cooldown timer\n    const cooldownTimer = setTimeout(() => {\n      this.abilityCooldowns.delete(`${shipId}-${abilityName}`);\n    }, ability.cooldown * 1000);\n\n    // Store cooldown info\n    this.abilityCooldowns.set(`${shipId}-${abilityName}`, {\n      timer: cooldownTimer,\n      endTime: Date.now() + ability.cooldown * 1000,\n    });\n\n    // Emit event\n    this.emit('abilityActivated', {\n      shipId,\n      abilityName,\n      duration: ability.duration,\n      effect: ability.effect,\n    });\n  }\n\n  /**\n   * Deactivate a ship's ability\n   */\n  private deactivateAbility(shipId: string, abilityName: string): void {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      console.error('Ship not found for ability deactivation');\n      return;\n    }\n\n    // Find and update the ability\n    const ability = targetShip.abilities.find(a => a.name === abilityName);\n    if (ability) {\n      ability.active = false;\n      ability.effect.active = false;\n    }\n\n    // Clean up active ability\n    const activeKey = `${shipId}-${abilityName}`;\n    const activeInfo = this.activeAbilities.get(activeKey);\n    if (activeInfo) {\n      clearTimeout(activeInfo.timer);\n      this.activeAbilities.delete(activeKey);\n    }\n\n    // Emit event\n    this.emit('abilityDeactivated', {\n      shipId,\n      abilityName,\n    });\n  }\n\n  /**\n   * Get ability cooldown info\n   */\n  public getAbilityCooldown(shipId: string, abilityName: string): number {\n    const cooldownInfo = this.abilityCooldowns.get(`${shipId}-${abilityName}`);\n    if (!cooldownInfo) {\n      return 0;\n    }\n\n    const remainingTime = Math.max(0, cooldownInfo.endTime - Date.now());\n    return Math.ceil(remainingTime / 1000);\n  }\n\n  /**\n   * Get all active abilities for a ship\n   */\n  public getActiveAbilities(shipId: string): string[] {\n    return Array.from(this.activeAbilities.entries())\n      .filter(([key]) => key.startsWith(`${shipId}-`))\n      .map(([key]) => key.split('-')[1]);\n  }\n\n  /**\n   * Cancel all active abilities for a ship\n   */\n  public cancelShipAbilities(shipId: string): void {\n    // Find all active abilities for this ship\n    const shipAbilities = Array.from(this.activeAbilities.entries()).filter(([key]) =>\n      key.startsWith(`${shipId}-`)\n    );\n\n    // Deactivate each ability\n    shipAbilities.forEach(([key]) => {\n      const abilityName = key.split('-')[1];\n      this.deactivateAbility(shipId, abilityName);\n    });\n  }\n\n  /**\n   * Get available weapons for a ship\n   */\n  public getAvailableWeapons(shipId: string): WeaponConfig[] {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      throw new Error('Ship not found');\n    }\n\n    // Get ship blueprint\n    const blueprint = SHIP_BLUEPRINTS.find(bp => bp.shipClass === this.getShipClass(targetShip));\n    if (!blueprint) {\n      return [];\n    }\n\n    // Return available weapons based on ship tier and requirements\n    return (\n      blueprint.weapons?.map(weapon => ({\n        id: weapon.name.toLowerCase().replace(/\\s+/g, '-'),\n        name: weapon.name,\n        category: 'machineGun' as WeaponCategory,\n        tier: blueprint.tier,\n        baseStats: {\n          damage: weapon.damage,\n          range: weapon.range,\n          accuracy: 0.8,\n          rateOfFire: 1 / weapon.cooldown,\n          energyCost: 5,\n          cooldown: weapon.cooldown,\n          effects: [],\n        },\n        visualAsset: `weapons/${weapon.name.toLowerCase().replace(/\\s+/g, '-')}`,\n        mountRequirements: {\n          size: 'medium' as WeaponMountSize,\n          power: 20,\n        },\n      })) || []\n    );\n  }\n\n  /**\n   * Equip a weapon to a ship's mount\n   */\n  public equipWeapon(shipId: string, mountId: string, weaponId: string): void {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      throw new Error('Ship not found');\n    }\n\n    // Find the mount\n    const mount = targetShip.stats.weapons.find(m => m.id === mountId);\n    if (!mount) {\n      throw new Error('Mount not found');\n    }\n\n    // Find the weapon config\n    const availableWeapons = this.getAvailableWeapons(shipId);\n    const weaponConfig = availableWeapons.find(w => w.id === weaponId);\n    if (!weaponConfig) {\n      throw new Error('Weapon not found');\n    }\n\n    // Check mount compatibility\n    if (mount.size !== weaponConfig.mountRequirements.size) {\n      throw new Error('Incompatible mount size');\n    }\n\n    if (!mount.allowedCategories.includes(weaponConfig.category)) {\n      throw new Error('Incompatible weapon category');\n    }\n\n    // Create weapon instance\n    mount.currentWeapon = {\n      config: weaponConfig,\n      state: {\n        status: 'ready',\n        currentStats: { ...weaponConfig.baseStats },\n        effects: [],\n      },\n    };\n\n    // Emit event\n    this.emit('weaponEquipped', {\n      shipId,\n      mountId,\n      weaponId,\n    });\n  }\n\n  /**\n   * Unequip a weapon from a ship's mount\n   */\n  public unequipWeapon(shipId: string, mountId: string): void {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      throw new Error('Ship not found');\n    }\n\n    // Find the mount\n    const mount = targetShip.stats.weapons.find(m => m.id === mountId);\n    if (!mount) {\n      throw new Error('Mount not found');\n    }\n\n    if (!mount.currentWeapon) {\n      throw new Error('No weapon equipped');\n    }\n\n    // Store weapon info for event\n    const weaponId = mount.currentWeapon.config.id;\n\n    // Remove weapon\n    mount.currentWeapon = undefined;\n\n    // Emit event\n    this.emit('weaponUnequipped', {\n      shipId,\n      mountId,\n      weaponId,\n    });\n  }\n\n  /**\n   * Get weapon loadout for a ship\n   */\n  public getWeaponLoadout(shipId: string): WeaponMount[] {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      throw new Error('Ship not found');\n    }\n\n    return targetShip.stats.weapons;\n  }\n\n  /**\n   * Set up maintenance timer for a bay\n   */\n  private setupBayMaintenance(bay: ShipHangarBay): void {\n    // Clear existing timer if any\n    const existingTimer = this.bayMaintenanceTimers.get(bay.id);\n    if (existingTimer) {\n      clearTimeout(existingTimer.timer);\n    }\n\n    // Set up new maintenance timer\n    const maintenanceInterval = 300000; // 5 minutes\n    const timer = setInterval(() => {\n      this.performBayMaintenance(bay.id);\n    }, maintenanceInterval);\n\n    this.bayMaintenanceTimers.set(bay.id, {\n      timer,\n      lastMaintenance: bay.lastMaintenance,\n      efficiency: bay.efficiency,\n    });\n  }\n\n  /**\n   * Perform maintenance on a bay\n   */\n  private performBayMaintenance(bayId: string): void {\n    const bay = this.state.bays.find(b => b.id === bayId);\n    if (!bay) {\n      return;\n    }\n\n    // Calculate maintenance cost based on bay tier and ship count\n    const baseCosts = bay.maintenanceCost;\n    const shipCount = bay.ships.length;\n    const actualCosts = baseCosts.map(cost => ({\n      type: cost.type,\n      amount: Math.ceil(cost.amount * (1 + (shipCount / bay.capacity) * 0.5)),\n    }));\n\n    // Check if we can afford maintenance\n    const canAfford = actualCosts.every(\n      cost => this.resourceManager.getResourceAmount(cost.type) >= cost.amount\n    );\n\n    if (canAfford) {\n      // Consume resources\n      actualCosts.forEach(cost => {\n        this.resourceManager.removeResource(cost.type, cost.amount);\n      });\n\n      // Update bay efficiency\n      bay.efficiency = Math.min(1.0, bay.efficiency + 0.1);\n      bay.lastMaintenance = Date.now();\n\n      // Update timer info\n      const timerInfo = this.bayMaintenanceTimers.get(bayId);\n      if (timerInfo) {\n        timerInfo.lastMaintenance = bay.lastMaintenance;\n        timerInfo.efficiency = bay.efficiency;\n      }\n\n      this.emit('bayMaintained', {\n        bayId,\n        newEfficiency: bay.efficiency,\n        maintenanceCost: actualCosts,\n      });\n    } else {\n      // Decrease efficiency due to missed maintenance\n      bay.efficiency = Math.max(0.5, bay.efficiency - 0.1);\n\n      // Update timer info\n      const timerInfo = this.bayMaintenanceTimers.get(bayId);\n      if (timerInfo) {\n        timerInfo.efficiency = bay.efficiency;\n      }\n\n      this.emit('bayMaintenanceFailed', {\n        bayId,\n        newEfficiency: bay.efficiency,\n        requiredResources: actualCosts,\n      });\n    }\n  }\n\n  /**\n   * Get bay efficiency bonus\n   */\n  private getBayEfficiencyBonus(bay: ShipHangarBay): number {\n    // Base multiplier from tier\n    const tierMultiplier = 1 + (bay.tier - 1) * 0.1; // 10% per tier\n\n    // Efficiency factor\n    const efficiencyFactor = bay.efficiency;\n\n    // Capacity utilization bonus\n    const utilizationBonus =\n      bay.ships.length > 0 ? Math.min(1.2, 1 + (bay.ships.length / bay.capacity) * 0.2) : 1.0;\n\n    return tierMultiplier * efficiencyFactor * utilizationBonus;\n  }\n\n  /**\n   * Assign an officer to a ship\n   */\n  public assignOfficer(shipId: string, officerId: string): void {\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      throw new Error('Ship not found');\n    }\n\n    // Get the officer\n    const officer = this.officerManager.getOfficer(officerId);\n    if (!officer) {\n      throw new Error('Officer not found');\n    }\n\n    // Check if officer is available\n    if (officer.status !== 'available') {\n      throw new Error('Officer is not available');\n    }\n\n    // Calculate bonuses based on officer skills and specialization\n    const bonuses = this.calculateOfficerBonuses(officer, targetShip);\n\n    // Assign officer\n    this.assignedOfficers.set(shipId, officerId);\n    this.officerManager.assignOfficer(officerId, shipId);\n\n    // Apply bonuses to ship\n    this.applyOfficerBonuses(targetShip, bonuses);\n\n    // Emit event\n    this.emit('officerAssigned', {\n      shipId,\n      officerId,\n      bonuses,\n    });\n  }\n\n  /**\n   * Unassign an officer from a ship\n   */\n  public unassignOfficer(shipId: string): void {\n    const officerId = this.assignedOfficers.get(shipId);\n    if (!officerId) {\n      return;\n    }\n\n    // Find the ship\n    let targetShip: CommonShip | undefined;\n\n    for (const bay of this.state.bays) {\n      const ship = bay.ships.find(s => s.id === shipId);\n      if (ship) {\n        targetShip = ship;\n        break;\n      }\n    }\n\n    if (!targetShip) {\n      return;\n    }\n\n    // Remove bonuses\n    this.removeOfficerBonuses(targetShip);\n\n    // Unassign officer\n    this.assignedOfficers.delete(shipId);\n    this.officerManager.assignOfficer(officerId, null as unknown as string);\n\n    // Emit event\n    this.emit('officerUnassigned', {\n      shipId,\n      officerId,\n    });\n  }\n\n  /**\n   * Calculate bonuses provided by an officer\n   */\n  private calculateOfficerBonuses(\n    officer: Officer,\n    ship: CommonShip\n  ): {\n    buildSpeed?: number;\n    resourceEfficiency?: number;\n    combatEffectiveness?: number;\n  } {\n    const bonuses = {\n      buildSpeed: 0,\n      resourceEfficiency: 0,\n      combatEffectiveness: 0,\n    };\n\n    // Base bonuses from level\n    const levelBonus = (officer.level - 1) * 0.05; // 5% per level\n\n    // Specialization bonuses\n    switch (officer.specialization) {\n      case 'War':\n        if (ship.category === 'war') {\n          bonuses.combatEffectiveness = 0.2 + levelBonus; // 20% base + level bonus\n          bonuses.buildSpeed = 0.1 + levelBonus; // 10% base + level bonus\n        }\n        break;\n      case 'Mining':\n        bonuses.resourceEfficiency = 0.2 + levelBonus; // 20% base + level bonus\n        break;\n      case 'Recon':\n        bonuses.buildSpeed = 0.15 + levelBonus; // 15% base + level bonus\n        bonuses.resourceEfficiency = 0.1 + levelBonus; // 10% base + level bonus\n        break;\n    }\n\n    // Skill bonuses\n    bonuses.combatEffectiveness += officer.skills.combat * 0.01; // 1% per combat skill\n    bonuses.resourceEfficiency += officer.skills.technical * 0.01; // 1% per technical skill\n    bonuses.buildSpeed += officer.skills.leadership * 0.01; // 1% per leadership skill\n\n    return bonuses;\n  }\n\n  /**\n   * Apply officer bonuses to a ship\n   */\n  private applyOfficerBonuses(\n    ship: CommonShip,\n    bonuses: {\n      buildSpeed?: number;\n      resourceEfficiency?: number;\n      combatEffectiveness?: number;\n    }\n  ): void {\n    if (bonuses.combatEffectiveness) {\n      // Apply combat bonuses\n      ship.stats.weapons?.forEach(mount => {\n        if (mount.currentWeapon) {\n          const stats = mount.currentWeapon.state.currentStats;\n          stats.damage *= 1 + bonuses.combatEffectiveness!;\n          stats.accuracy *= 1 + bonuses.combatEffectiveness! * 0.5;\n        }\n      });\n    }\n\n    // Store bonuses for build speed and resource efficiency\n    ship.officerBonuses = bonuses;\n  }\n\n  /**\n   * Remove officer bonuses from a ship\n   */\n  private removeOfficerBonuses(ship: CommonShip): void {\n    if (!ship.officerBonuses) {\n      return;\n    }\n\n    if (ship.officerBonuses.combatEffectiveness) {\n      // Remove combat bonuses\n      ship.stats.weapons?.forEach(mount => {\n        if (mount.currentWeapon) {\n          const stats = mount.currentWeapon.state.currentStats;\n          stats.damage /= 1 + ship.officerBonuses!.combatEffectiveness!;\n          stats.accuracy /= 1 + ship.officerBonuses!.combatEffectiveness! * 0.5;\n        }\n      });\n    }\n\n    // Clear stored bonuses\n    delete ship.officerBonuses;\n  }\n\n  // Update cleanup method\n  public cleanup(): void {\n    // Clear all repair timers\n    this.activeRepairs.forEach((repair, shipId) => {\n      clearTimeout(repair.timer);\n      // Update ship status\n      const ship = this.getDockedShips().find(s => s.id === shipId);\n      if (ship) {\n        ship.status = 'damaged'; // Revert to damaged state if repair was interrupted\n      }\n    });\n    this.activeRepairs.clear();\n\n    // Clear all upgrade timers\n    this.activeUpgrades.forEach((upgrade, shipId) => {\n      clearTimeout(upgrade.timer);\n      // Revert ship status and refund resources for interrupted upgrades\n      const ship = this.getDockedShips().find(s => s.id === shipId);\n      if (ship) {\n        ship.status = 'ready';\n        // Refund 75% of remaining upgrade costs\n        const remainingProgress = 1 - (Date.now() - upgrade.startTime) / upgrade.duration;\n        upgrade.resourceCost.forEach(cost => {\n          const refundAmount = Math.floor(cost.amount * remainingProgress * 0.75);\n          this.resourceManager.addResource(cost.type, refundAmount);\n        });\n      }\n    });\n    this.activeUpgrades.clear();\n\n    // Clear all ability timers\n    this.activeAbilities.forEach((active, key) => {\n      clearTimeout(active.timer);\n      // Parse shipId and ability name from compound key\n      const [shipId, abilityName] = key.split('-');\n      const ship = this.getDockedShips().find(s => s.id === shipId);\n      if (ship) {\n        const ability = ship.abilities.find(a => a.name === abilityName);\n        if (ability) {\n          ability.active = false;\n          ability.effect.active = false;\n        }\n      }\n    });\n    this.activeAbilities.clear();\n\n    // Clear all cooldown timers\n    this.abilityCooldowns.forEach((cooldown, key) => {\n      clearTimeout(cooldown.timer);\n      // Parse shipId and ability name from compound key\n      const [shipId, abilityName] = key.split('-');\n      const ship = this.getDockedShips().find(s => s.id === shipId);\n      if (ship) {\n        const ability = ship.abilities.find(a => a.name === abilityName);\n        if (ability) {\n          ability.effect.cooldown = 0; // Reset cooldown\n        }\n      }\n    });\n    this.abilityCooldowns.clear();\n\n    // Clear all weapon states\n    this.state.bays.forEach(bay => {\n      bay.ships.forEach(ship => {\n        ship.stats.weapons.forEach(mount => {\n          if (mount.currentWeapon) {\n            mount.currentWeapon.state.status = 'ready';\n            mount.currentWeapon.state.effects = [];\n          }\n        });\n      });\n    });\n\n    // Clear all bay maintenance timers\n    this.bayMaintenanceTimers.forEach((info, bayId) => {\n      clearTimeout(info.timer);\n      // Update bay maintenance state\n      const bay = this.state.bays.find(b => b.id === bayId);\n      if (bay) {\n        bay.lastMaintenance = info.lastMaintenance;\n        bay.efficiency = info.efficiency;\n        // Emit maintenance failed event since cleanup interrupts maintenance\n        this.emit('bayMaintenanceFailed', {\n          bayId,\n          newEfficiency: bay.efficiency,\n          requiredResources: bay.maintenanceCost,\n        });\n      }\n    });\n    this.bayMaintenanceTimers.clear();\n\n    // Clean up officer assignments and remove bonuses\n    for (const [shipId, officerId] of this.assignedOfficers) {\n      const ship = this.getDockedShips().find(s => s.id === shipId);\n      if (ship) {\n        this.removeOfficerBonuses(ship); // Remove any active bonuses\n        this.officerManager.assignOfficer(officerId, null as unknown as string); // Free up the officer\n      }\n      this.unassignOfficer(shipId);\n    }\n    this.assignedOfficers.clear();\n  }\n\n  // Add effect handling methods\n  private applyShipEffect(ship: ShipWithState, effect: ShipEffect): void {\n    // Initialize ship state if needed\n    if (!ship.state) {\n      ship.state = { activeEffects: [], effectHistory: [] };\n    }\n\n    // Apply effect modifiers\n    switch (effect.type) {\n      case 'buff':\n        if (effect.name.includes('damage')) {\n          ship.stats.weapons?.forEach(mount => {\n            if (mount.currentWeapon) {\n              mount.currentWeapon.state.currentStats.damage *= 1 + effect.magnitude;\n            }\n          });\n        }\n        break;\n      case 'debuff':\n        if (effect.name.includes('shield')) {\n          ship.stats.shield *= 1 - effect.magnitude;\n        }\n        break;\n      case 'status':\n        // Just track status effects\n        break;\n    }\n\n    // Add to active effects\n    ship.state.activeEffects.push(effect);\n    ship.state.effectHistory.push({\n      effect,\n      appliedAt: Date.now(),\n    });\n\n    // Set up effect expiration\n    if (effect.duration > 0) {\n      setTimeout(() => {\n        this.removeShipEffect(ship, effect);\n      }, effect.duration * 1000);\n    }\n  }\n\n  private removeShipEffect(ship: ShipWithState, effect: ShipEffect): void {\n    if (!ship.state) {\n      return;\n    }\n\n    // Remove effect modifiers\n    switch (effect.type) {\n      case 'buff':\n        if (effect.name.includes('damage')) {\n          ship.stats.weapons?.forEach(mount => {\n            if (mount.currentWeapon) {\n              mount.currentWeapon.state.currentStats.damage /= 1 + effect.magnitude;\n            }\n          });\n        }\n        break;\n      case 'debuff':\n        if (effect.name.includes('shield')) {\n          ship.stats.shield /= 1 - effect.magnitude;\n        }\n        break;\n    }\n\n    // Remove from active effects\n    ship.state.activeEffects = ship.state.activeEffects.filter(e => e !== effect);\n\n    // Update history\n    const historyEntry = ship.state.effectHistory.find(h => h.effect === effect && !h.removedAt);\n    if (historyEntry) {\n      historyEntry.removedAt = Date.now();\n    }\n  }\n\n  public hasOfficerMeetingRequirements(minLevel: number, specialization: string): boolean {\n    // Check all assigned officers for one that meets requirements\n    for (const [_, officerId] of this.assignedOfficers) {\n      const officer = this.officerManager.getOfficer(officerId);\n      if (officer && officer.level >= minLevel && officer.specialization === specialization) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/SubModuleManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":80,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2266,2452],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[3037,3227],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":132,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":132,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[3806,3893],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":156,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[4463,4653],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":182,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":182,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[5226,5314],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":206,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":206,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[5885,5977],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7167,7170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7167,7170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10773,10776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10773,10776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":574,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":574,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[16328,16411],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":678,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":678,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19466,19469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19466,19469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newLevel' is assigned a value but never used.","line":679,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":679,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":700,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":700,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20116,20119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20116,20119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":720,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":720,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20683,20686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20683,20686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport {\n  BaseModule,\n  ModuleType,\n  SubModule,\n  SubModuleConfig,\n  SubModuleEffect,\n  SubModuleRequirements,\n  SubModuleType,\n} from '../../types/buildings/ModuleTypes';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\nimport { resourceManager } from '../game/ResourceManager';\nimport { moduleManager } from './ModuleManager';\n\n/**\n * Sub-module attachment result\n */\nexport interface SubModuleAttachmentResult {\n  success: boolean;\n  subModuleId?: string;\n  parentModuleId?: string;\n  error?: string;\n}\n\n/**\n * Sub-module effect application result\n */\nexport interface EffectApplicationResult {\n  success: boolean;\n  effectType: string;\n  target: string;\n  value: number;\n  error?: string;\n}\n\n/**\n * SubModuleManager\n * Manages the creation, attachment, activation, and effects of sub-modules\n */\nexport class SubModuleManager {\n  private subModules: Map<string, SubModule>;\n  private configs: Map<SubModuleType, SubModuleConfig>;\n  private effectHandlers: Map<\n    string,\n    (effect: SubModuleEffect, moduleId: string) => EffectApplicationResult\n  >;\n\n  constructor() {\n    this.subModules = new Map();\n    this.configs = new Map();\n    this.effectHandlers = new Map();\n\n    // Register default effect handlers\n    this.registerDefaultEffectHandlers();\n\n    // Subscribe to module events\n    moduleEventBus.subscribe('MODULE_UPGRADED' as ModuleEventType, this.handleModuleUpgraded);\n    moduleEventBus.subscribe('MODULE_ACTIVATED' as ModuleEventType, this.handleModuleActivated);\n    moduleEventBus.subscribe('MODULE_DEACTIVATED' as ModuleEventType, this.handleModuleDeactivated);\n  }\n\n  /**\n   * Register default effect handlers\n   */\n  private registerDefaultEffectHandlers(): void {\n    // Stat boost effect handler\n    this.registerEffectHandler('stat_boost', (effect, moduleId) => {\n      const module = moduleManager.getModule(moduleId);\n      if (!module) {\n        return {\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `Module ${moduleId} not found`,\n        };\n      }\n\n      // Apply stat boost (this would be implemented in the actual module)\n      console.debug(\n        `[SubModuleManager] Applied stat boost to ${moduleId}: ${effect.target} ${effect.isPercentage ? '+' : ''}${effect.value}${effect.isPercentage ? '%' : ''}`\n      );\n\n      return {\n        success: true,\n        effectType: effect.type,\n        target: effect.target,\n        value: effect.value,\n      };\n    });\n\n    // Resource boost effect handler\n    this.registerEffectHandler('resource_boost', (effect, moduleId) => {\n      const module = moduleManager.getModule(moduleId);\n      if (!module) {\n        return {\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `Module ${moduleId} not found`,\n        };\n      }\n\n      // Apply resource boost\n      console.debug(\n        `[SubModuleManager] Applied resource boost to ${moduleId}: ${effect.target} ${effect.isPercentage ? '+' : ''}${effect.value}${effect.isPercentage ? '%' : ''}`\n      );\n\n      return {\n        success: true,\n        effectType: effect.type,\n        target: effect.target,\n        value: effect.value,\n      };\n    });\n\n    // Unlock ability effect handler\n    this.registerEffectHandler('unlock_ability', (effect, moduleId) => {\n      const module = moduleManager.getModule(moduleId);\n      if (!module) {\n        return {\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `Module ${moduleId} not found`,\n        };\n      }\n\n      // Unlock ability\n      console.debug(`[SubModuleManager] Unlocked ability for ${moduleId}: ${effect.target}`);\n\n      return {\n        success: true,\n        effectType: effect.type,\n        target: effect.target,\n        value: effect.value,\n      };\n    });\n\n    // Reduce cost effect handler\n    this.registerEffectHandler('reduce_cost', (effect, moduleId) => {\n      const module = moduleManager.getModule(moduleId);\n      if (!module) {\n        return {\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `Module ${moduleId} not found`,\n        };\n      }\n\n      // Reduce cost\n      console.debug(\n        `[SubModuleManager] Applied cost reduction to ${moduleId}: ${effect.target} ${effect.isPercentage ? '-' : ''}${effect.value}${effect.isPercentage ? '%' : ''}`\n      );\n\n      return {\n        success: true,\n        effectType: effect.type,\n        target: effect.target,\n        value: effect.value,\n      };\n    });\n\n    // Automation effect handler\n    this.registerEffectHandler('automation', (effect, moduleId) => {\n      const module = moduleManager.getModule(moduleId);\n      if (!module) {\n        return {\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `Module ${moduleId} not found`,\n        };\n      }\n\n      // Apply automation\n      console.debug(`[SubModuleManager] Applied automation to ${moduleId}: ${effect.target}`);\n\n      return {\n        success: true,\n        effectType: effect.type,\n        target: effect.target,\n        value: effect.value,\n      };\n    });\n\n    // Special effect handler\n    this.registerEffectHandler('special', (effect, moduleId) => {\n      const module = moduleManager.getModule(moduleId);\n      if (!module) {\n        return {\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `Module ${moduleId} not found`,\n        };\n      }\n\n      // Apply special effect\n      console.debug(`[SubModuleManager] Applied special effect to ${moduleId}: ${effect.target}`);\n\n      return {\n        success: true,\n        effectType: effect.type,\n        target: effect.target,\n        value: effect.value,\n      };\n    });\n  }\n\n  /**\n   * Register a sub-module configuration\n   */\n  public registerSubModuleConfig(config: SubModuleConfig): void {\n    this.configs.set(config.type, config);\n  }\n\n  /**\n   * Register a custom effect handler\n   */\n  public registerEffectHandler(\n    effectType: string,\n    handler: (effect: SubModuleEffect, moduleId: string) => EffectApplicationResult\n  ): void {\n    this.effectHandlers.set(effectType, handler);\n  }\n\n  /**\n   * Create a new sub-module\n   */\n  public createSubModule(type: SubModuleType, parentModuleId: string): SubModule | null {\n    const config = this.configs.get(type);\n    if (!config) {\n      console.error(`[SubModuleManager] No configuration found for sub-module type: ${type}`);\n      return null;\n    }\n\n    const parentModule = moduleManager.getModule(parentModuleId);\n    if (!parentModule) {\n      console.error(`[SubModuleManager] Parent module not found: ${parentModuleId}`);\n      return null;\n    }\n\n    // Check if parent module supports sub-modules\n    const parentConfig = (moduleManager as any).configs.get(parentModule.type);\n    if (!parentConfig || !parentConfig.subModuleSupport) {\n      console.error(\n        `[SubModuleManager] Parent module does not support sub-modules: ${parentModuleId}`\n      );\n      return null;\n    }\n\n    // Check if parent module allows this sub-module type\n    if (!parentConfig.subModuleSupport.allowedTypes.includes(type)) {\n      console.error(\n        `[SubModuleManager] Sub-module type ${type} not allowed for parent module ${parentModuleId}`\n      );\n      return null;\n    }\n\n    // Check if parent module has reached max sub-modules\n    const currentSubModules = parentModule.subModules || [];\n    if (currentSubModules.length >= parentConfig.subModuleSupport.maxSubModules) {\n      console.error(\n        `[SubModuleManager] Parent module ${parentModuleId} has reached max sub-modules`\n      );\n      return null;\n    }\n\n    // Check requirements\n    if (!this.checkRequirements(config.requirements, parentModule)) {\n      console.error(\n        `[SubModuleManager] Requirements not met for sub-module ${type} on parent module ${parentModuleId}`\n      );\n      return null;\n    }\n\n    // Create the sub-module\n    const subModule: SubModule = {\n      id: `${type}-${Date.now()}`,\n      name: config.name,\n      type,\n      parentModuleId,\n      isActive: false,\n      level: 1,\n      status: 'constructing',\n      progress: 0,\n      effects: [...config.effects],\n      requirements: config.requirements,\n    };\n\n    // Store the sub-module\n    this.subModules.set(subModule.id, subModule);\n\n    // Add the sub-module to the parent module\n    if (!parentModule.subModules) {\n      parentModule.subModules = [];\n    }\n    parentModule.subModules.push(subModule);\n\n    // Emit creation event\n    moduleEventBus.emit({\n      type: 'SUB_MODULE_CREATED' as ModuleEventType,\n      moduleId: parentModuleId,\n      moduleType: parentModule.type,\n      timestamp: Date.now(),\n      data: { subModuleId: subModule.id, subModuleType: subModule.type },\n    });\n\n    return subModule;\n  }\n\n  /**\n   * Check if requirements are met for a sub-module\n   */\n  private checkRequirements(\n    requirements: SubModuleRequirements,\n    parentModule: BaseModule\n  ): boolean {\n    // Check parent module level\n    if (parentModule.level < requirements.parentModuleLevel) {\n      return false;\n    }\n\n    // Check parent module type\n    if (!requirements.parentModuleTypes.includes(parentModule.type)) {\n      return false;\n    }\n\n    // Check resource costs\n    for (const cost of requirements.resourceCosts) {\n      if (resourceManager.getResourceAmount(cost.type as ResourceType) < cost.amount) {\n        return false;\n      }\n    }\n\n    // Check incompatibilities\n    if (requirements.incompatibleWith && parentModule.subModules) {\n      for (const subModule of parentModule.subModules) {\n        if (requirements.incompatibleWith.includes(subModule.type)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Attach a sub-module to a parent module\n   */\n  public attachSubModule(subModuleId: string, parentModuleId: string): SubModuleAttachmentResult {\n    const subModule = this.subModules.get(subModuleId);\n    if (!subModule) {\n      return {\n        success: false,\n        error: `Sub-module ${subModuleId} not found`,\n      };\n    }\n\n    const parentModule = moduleManager.getModule(parentModuleId);\n    if (!parentModule) {\n      return {\n        success: false,\n        error: `Parent module ${parentModuleId} not found`,\n      };\n    }\n\n    // Check if parent module supports sub-modules\n    const parentConfig = (moduleManager as any).configs.get(parentModule.type);\n    if (!parentConfig || !parentConfig.subModuleSupport) {\n      return {\n        success: false,\n        error: `Parent module does not support sub-modules: ${parentModuleId}`,\n      };\n    }\n\n    // Check if parent module allows this sub-module type\n    if (!parentConfig.subModuleSupport.allowedTypes.includes(subModule.type)) {\n      return {\n        success: false,\n        error: `Sub-module type ${subModule.type} not allowed for parent module ${parentModuleId}`,\n      };\n    }\n\n    // Check if parent module has reached max sub-modules\n    const currentSubModules = parentModule.subModules || [];\n    if (currentSubModules.length >= parentConfig.subModuleSupport.maxSubModules) {\n      return {\n        success: false,\n        error: `Parent module ${parentModuleId} has reached max sub-modules`,\n      };\n    }\n\n    // Update sub-module parent\n    subModule.parentModuleId = parentModuleId;\n\n    // Add the sub-module to the parent module\n    if (!parentModule.subModules) {\n      parentModule.subModules = [];\n    }\n    parentModule.subModules.push(subModule);\n\n    // Emit attachment event\n    moduleEventBus.emit({\n      type: 'SUB_MODULE_ATTACHED' as ModuleEventType,\n      moduleId: parentModuleId,\n      moduleType: parentModule.type,\n      timestamp: Date.now(),\n      data: { subModuleId, subModuleType: subModule.type },\n    });\n\n    return {\n      success: true,\n      subModuleId,\n      parentModuleId,\n    };\n  }\n\n  /**\n   * Detach a sub-module from its parent module\n   */\n  public detachSubModule(subModuleId: string): SubModuleAttachmentResult {\n    const subModule = this.subModules.get(subModuleId);\n    if (!subModule) {\n      return {\n        success: false,\n        error: `Sub-module ${subModuleId} not found`,\n      };\n    }\n\n    const { parentModuleId } = subModule;\n    const parentModule = moduleManager.getModule(parentModuleId);\n    if (!parentModule) {\n      return {\n        success: false,\n        error: `Parent module ${parentModuleId} not found`,\n      };\n    }\n\n    // Remove the sub-module from the parent module\n    if (parentModule.subModules) {\n      parentModule.subModules = parentModule.subModules.filter(sm => sm.id !== subModuleId);\n    }\n\n    // Emit detachment event\n    moduleEventBus.emit({\n      type: 'SUB_MODULE_DETACHED' as ModuleEventType,\n      moduleId: parentModuleId,\n      moduleType: parentModule.type,\n      timestamp: Date.now(),\n      data: { subModuleId, subModuleType: subModule.type },\n    });\n\n    return {\n      success: true,\n      subModuleId,\n      parentModuleId,\n    };\n  }\n\n  /**\n   * Activate a sub-module\n   */\n  public activateSubModule(subModuleId: string): boolean {\n    const subModule = this.subModules.get(subModuleId);\n    if (!subModule) {\n      console.error(`[SubModuleManager] Sub-module ${subModuleId} not found`);\n      return false;\n    }\n\n    // Check if parent module is active\n    const parentModule = moduleManager.getModule(subModule.parentModuleId);\n    if (!parentModule || !parentModule.isActive) {\n      console.error(`[SubModuleManager] Parent module ${subModule.parentModuleId} is not active`);\n      return false;\n    }\n\n    // Check if sub-module is already active\n    if (subModule.isActive) {\n      return true;\n    }\n\n    // Activate the sub-module\n    subModule.isActive = true;\n    subModule.status = 'active';\n\n    // Apply effects\n    this.applySubModuleEffects(subModule);\n\n    // Emit activation event\n    moduleEventBus.emit({\n      type: 'SUB_MODULE_ACTIVATED' as ModuleEventType,\n      moduleId: subModule.parentModuleId,\n      moduleType: parentModule.type,\n      timestamp: Date.now(),\n      data: { subModuleId, subModuleType: subModule.type },\n    });\n\n    return true;\n  }\n\n  /**\n   * Deactivate a sub-module\n   */\n  public deactivateSubModule(subModuleId: string): boolean {\n    const subModule = this.subModules.get(subModuleId);\n    if (!subModule) {\n      console.error(`[SubModuleManager] Sub-module ${subModuleId} not found`);\n      return false;\n    }\n\n    // Check if sub-module is already inactive\n    if (!subModule.isActive) {\n      return true;\n    }\n\n    // Deactivate the sub-module\n    subModule.isActive = false;\n    subModule.status = 'inactive';\n\n    // Remove effects\n    this.removeSubModuleEffects(subModule);\n\n    // Emit deactivation event\n    moduleEventBus.emit({\n      type: 'SUB_MODULE_DEACTIVATED' as ModuleEventType,\n      moduleId: subModule.parentModuleId,\n      moduleType: moduleManager.getModule(subModule.parentModuleId)?.type as ModuleType,\n      timestamp: Date.now(),\n      data: { subModuleId, subModuleType: subModule.type },\n    });\n\n    return true;\n  }\n\n  /**\n   * Apply sub-module effects\n   */\n  private applySubModuleEffects(subModule: SubModule): EffectApplicationResult[] {\n    const results: EffectApplicationResult[] = [];\n\n    for (const effect of subModule.effects) {\n      const handler = this.effectHandlers.get(effect.type);\n      if (handler) {\n        const result = handler(effect, subModule.parentModuleId);\n        results.push(result);\n      } else {\n        results.push({\n          success: false,\n          effectType: effect.type,\n          target: effect.target,\n          value: effect.value,\n          error: `No handler found for effect type: ${effect.type}`,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Remove sub-module effects\n   */\n  private removeSubModuleEffects(subModule: SubModule): void {\n    // This would be implemented to reverse the effects\n    // For now, we'll just log the removal\n    console.debug(`[SubModuleManager] Removed effects for sub-module ${subModule.id}`);\n  }\n\n  /**\n   * Upgrade a sub-module\n   */\n  public upgradeSubModule(subModuleId: string): boolean {\n    const subModule = this.subModules.get(subModuleId);\n    if (!subModule) {\n      console.error(`[SubModuleManager] Sub-module ${subModuleId} not found`);\n      return false;\n    }\n\n    // Check if sub-module is active\n    if (!subModule.isActive) {\n      console.error(`[SubModuleManager] Sub-module ${subModuleId} is not active`);\n      return false;\n    }\n\n    // Get the config\n    const config = this.configs.get(subModule.type);\n    if (!config) {\n      console.error(\n        `[SubModuleManager] No configuration found for sub-module type: ${subModule.type}`\n      );\n      return false;\n    }\n\n    // Check resource costs (scaled by level)\n    const levelMultiplier = Math.pow(1.5, subModule.level);\n    for (const cost of config.requirements.resourceCosts) {\n      const scaledAmount = Math.ceil(cost.amount * levelMultiplier);\n      if (resourceManager.getResourceAmount(cost.type as ResourceType) < scaledAmount) {\n        console.error(\n          `[SubModuleManager] Insufficient resources for upgrade: ${cost.type} ${scaledAmount}`\n        );\n        return false;\n      }\n\n      // Consume resources\n      resourceManager.removeResource(cost.type as ResourceType, scaledAmount);\n    }\n\n    // Remove current effects\n    this.removeSubModuleEffects(subModule);\n\n    // Upgrade the sub-module\n    subModule.level++;\n\n    // Scale effects based on level\n    for (const effect of subModule.effects) {\n      if (effect.isPercentage) {\n        effect.value = Math.round(effect.value * (1 + 0.1 * (subModule.level - 1)));\n      } else {\n        effect.value = Math.round(effect.value * (1 + 0.2 * (subModule.level - 1)));\n      }\n    }\n\n    // Apply new effects\n    this.applySubModuleEffects(subModule);\n\n    // Emit upgrade event\n    moduleEventBus.emit({\n      type: 'SUB_MODULE_UPGRADED' as ModuleEventType,\n      moduleId: subModule.parentModuleId,\n      moduleType: moduleManager.getModule(subModule.parentModuleId)?.type as ModuleType,\n      timestamp: Date.now(),\n      data: { subModuleId, subModuleType: subModule.type, newLevel: subModule.level },\n    });\n\n    return true;\n  }\n\n  /**\n   * Get a sub-module by ID\n   */\n  public getSubModule(subModuleId: string): SubModule | undefined {\n    return this.subModules.get(subModuleId);\n  }\n\n  /**\n   * Get all sub-modules for a parent module\n   */\n  public getSubModulesForParent(parentModuleId: string): SubModule[] {\n    return Array.from(this.subModules.values()).filter(sm => sm.parentModuleId === parentModuleId);\n  }\n\n  /**\n   * Get all sub-modules of a specific type\n   */\n  public getSubModulesByType(type: SubModuleType): SubModule[] {\n    return Array.from(this.subModules.values()).filter(sm => sm.type === type);\n  }\n\n  /**\n   * Get all active sub-modules\n   */\n  public getActiveSubModules(): SubModule[] {\n    return Array.from(this.subModules.values()).filter(sm => sm.isActive);\n  }\n\n  /**\n   * Handle module upgraded event\n   */\n  private handleModuleUpgraded = (event: any): void => {\n    const { moduleId, newLevel } = event.data;\n\n    // Check if module has sub-modules\n    const module = moduleManager.getModule(moduleId);\n    if (!module || !module.subModules || module.subModules.length === 0) {\n      return;\n    }\n\n    // Update sub-modules based on parent module upgrade\n    for (const subModule of module.subModules) {\n      if (subModule.isActive) {\n        // Reapply effects with potentially new values\n        this.removeSubModuleEffects(subModule);\n        this.applySubModuleEffects(subModule);\n      }\n    }\n  };\n\n  /**\n   * Handle module activated event\n   */\n  private handleModuleActivated = (event: any): void => {\n    const { moduleId } = event.data;\n\n    // Check if module has sub-modules\n    const module = moduleManager.getModule(moduleId);\n    if (!module || !module.subModules || module.subModules.length === 0) {\n      return;\n    }\n\n    // Activate sub-modules that should be active\n    for (const subModule of module.subModules) {\n      if (subModule.status === 'active' && !subModule.isActive) {\n        this.activateSubModule(subModule.id);\n      }\n    }\n  };\n\n  /**\n   * Handle module deactivated event\n   */\n  private handleModuleDeactivated = (event: any): void => {\n    const { moduleId } = event.data;\n\n    // Check if module has sub-modules\n    const module = moduleManager.getModule(moduleId);\n    if (!module || !module.subModules || module.subModules.length === 0) {\n      return;\n    }\n\n    // Deactivate all sub-modules\n    for (const subModule of module.subModules) {\n      if (subModule.isActive) {\n        this.deactivateSubModule(subModule.id);\n      }\n    }\n  };\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    // Unsubscribe from events\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'MODULE_UPGRADED' as ModuleEventType,\n      this.handleModuleUpgraded\n    );\n    const unsubscribeActivated = moduleEventBus.subscribe(\n      'MODULE_ACTIVATED' as ModuleEventType,\n      this.handleModuleActivated\n    );\n    const unsubscribeDeactivated = moduleEventBus.subscribe(\n      'MODULE_DEACTIVATED' as ModuleEventType,\n      this.handleModuleDeactivated\n    );\n\n    if (typeof unsubscribeUpgraded === 'function') {\n      unsubscribeUpgraded();\n    }\n    if (typeof unsubscribeActivated === 'function') {\n      unsubscribeActivated();\n    }\n    if (typeof unsubscribeDeactivated === 'function') {\n      unsubscribeDeactivated();\n    }\n\n    // Clear data\n    this.subModules.clear();\n    this.configs.clear();\n    this.effectHandlers.clear();\n  }\n}\n\n// Export singleton instance\nexport const subModuleManager = new SubModuleManager();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceCostManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceExchangeManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":444,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":444,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[11403,11499],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rateKey' is assigned a value but never used.","line":546,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":546,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":598,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":598,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rateKey' is assigned a value but never used.","line":670,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":670,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ResourceExchangeRate,\n  ResourceState,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\n\n/**\n * Exchange transaction\n */\nexport interface ExchangeTransaction {\n  id: string;\n  fromType: ResourceType;\n  toType: ResourceType;\n  fromAmount: number;\n  toAmount: number;\n  rate: number;\n  timestamp: number;\n  source?: string;\n  target?: string;\n}\n\n/**\n * Market condition\n */\nexport type MarketCondition = 'stable' | 'volatile' | 'bullish' | 'bearish';\n\n/**\n * Exchange rate modifier\n */\nexport interface ExchangeRateModifier {\n  id: string;\n  description: string;\n  affectedTypes: ResourceType[];\n  multiplier: number;\n  expiresAt?: number;\n  active?: boolean;\n  sourceType?: ResourceType;\n  targetType?: ResourceType;\n}\n\n/**\n * Extended resource exchange rate with additional properties\n */\nexport interface ExtendedRate extends ResourceExchangeRate {\n  sourceType?: ResourceType;\n  targetType?: ResourceType;\n}\n\n/**\n * Exchange path step\n */\nexport interface ExchangePathStep {\n  sourceType: ResourceType;\n  targetType: ResourceType;\n  rate: number;\n  inputAmount: number;\n  outputAmount: number;\n}\n\n/**\n * Exchange path\n */\nexport interface ExchangePath {\n  steps: ExchangePathStep[];\n  totalRate: number;\n  inputAmount: number;\n  outputAmount: number;\n}\n\n/**\n * Resource Exchange Manager\n * Manages resource exchange rates, conversions, and market dynamics\n */\nexport class ResourceExchangeManager {\n  private baseRates: Map<string, ResourceExchangeRate>;\n  private currentRates: Map<string, ResourceExchangeRate>;\n  private modifiers: Map<string, ExchangeRateModifier>;\n  private transactions: ExchangeTransaction[];\n  private resourceStates: Map<ResourceType, ResourceState>;\n  private marketCondition: MarketCondition;\n  private lastMarketUpdate: number;\n  private marketUpdateInterval: number;\n  private maxTransactionHistory: number;\n\n  constructor(marketUpdateInterval = 60000, maxTransactionHistory = 100) {\n    this.baseRates = new Map();\n    this.currentRates = new Map();\n    this.modifiers = new Map();\n    this.transactions = [];\n    this.resourceStates = new Map();\n    this.marketCondition = 'stable';\n    this.lastMarketUpdate = Date.now();\n    this.marketUpdateInterval = marketUpdateInterval;\n    this.maxTransactionHistory = maxTransactionHistory;\n\n    // Initialize with default exchange rates\n    this.initializeDefaultRates();\n  }\n\n  /**\n   * Initialize default exchange rates\n   */\n  private initializeDefaultRates(): void {\n    // Define base exchange rates between resources\n    this.registerExchangeRate({\n      fromType: 'minerals',\n      toType: 'energy',\n      rate: 0.5, // 2 minerals = 1 energy\n      minAmount: 10,\n      maxAmount: 1000,\n      cooldown: 5000,\n    });\n\n    this.registerExchangeRate({\n      fromType: 'energy',\n      toType: 'minerals',\n      rate: 1.8, // 1 energy = 1.8 minerals\n      minAmount: 5,\n      maxAmount: 500,\n      cooldown: 5000,\n    });\n\n    this.registerExchangeRate({\n      fromType: 'minerals',\n      toType: 'research',\n      rate: 0.2, // 5 minerals = 1 research\n      minAmount: 20,\n      maxAmount: 2000,\n      cooldown: 10000,\n    });\n\n    this.registerExchangeRate({\n      fromType: 'energy',\n      toType: 'research',\n      rate: 0.3, // 3.33 energy = 1 research\n      minAmount: 10,\n      maxAmount: 1000,\n      cooldown: 10000,\n    });\n\n    this.registerExchangeRate({\n      fromType: 'gas',\n      toType: 'energy',\n      rate: 2.0, // 1 gas = 2 energy\n      minAmount: 5,\n      maxAmount: 500,\n      cooldown: 5000,\n    });\n\n    this.registerExchangeRate({\n      fromType: 'plasma',\n      toType: 'energy',\n      rate: 3.0, // 1 plasma = 3 energy\n      minAmount: 5,\n      maxAmount: 300,\n      cooldown: 8000,\n    });\n\n    this.registerExchangeRate({\n      fromType: 'exotic',\n      toType: 'research',\n      rate: 5.0, // 1 exotic = 5 research\n      minAmount: 1,\n      maxAmount: 100,\n      cooldown: 15000,\n    });\n  }\n\n  /**\n   * Update resource state\n   */\n  public updateResourceState(type: ResourceType, state: ResourceState): void {\n    this.resourceStates.set(type, state);\n  }\n\n  /**\n   * Register an exchange rate\n   */\n  public registerExchangeRate(rate: ResourceExchangeRate): boolean {\n    if (!rate.fromType || !rate.toType || rate.rate <= 0) {\n      console.error('Invalid exchange rate:', rate);\n      return false;\n    }\n\n    const rateKey = this.getRateKey(rate.fromType, rate.toType);\n    this.baseRates.set(rateKey, { ...rate });\n    this.currentRates.set(rateKey, { ...rate });\n    return true;\n  }\n\n  /**\n   * Unregister an exchange rate\n   */\n  public unregisterExchangeRate(fromType: ResourceType, toType: ResourceType): boolean {\n    const rateKey = this.getRateKey(fromType, toType);\n    if (!this.baseRates.has(rateKey)) {\n      return false;\n    }\n\n    this.baseRates.delete(rateKey);\n    this.currentRates.delete(rateKey);\n    return true;\n  }\n\n  /**\n   * Get exchange rate key\n   */\n  private getRateKey(fromType: ResourceType, toType: ResourceType): string {\n    return `${fromType}-${toType}`;\n  }\n\n  /**\n   * Get current exchange rate\n   */\n  public getExchangeRate(\n    fromType: ResourceType,\n    toType: ResourceType\n  ): ResourceExchangeRate | undefined {\n    const rateKey = this.getRateKey(fromType, toType);\n    return this.currentRates.get(rateKey);\n  }\n\n  /**\n   * Calculate exchange amount\n   */\n  public calculateExchangeAmount(\n    fromType: ResourceType,\n    toType: ResourceType,\n    amount: number\n  ): number {\n    const rate = this.getExchangeRate(fromType, toType);\n    if (!rate) {\n      return 0;\n    }\n\n    // Check if amount is within limits\n    if (rate.minAmount && amount < rate.minAmount) {\n      console.warn(`Exchange amount ${amount} is below minimum ${rate.minAmount}`);\n      return 0;\n    }\n\n    if (rate.maxAmount && amount > rate.maxAmount) {\n      console.warn(`Exchange amount ${amount} is above maximum ${rate.maxAmount}`);\n      amount = rate.maxAmount;\n    }\n\n    return amount * rate.rate;\n  }\n\n  /**\n   * Execute resource exchange\n   */\n  public executeExchange(\n    fromType: ResourceType,\n    toType: ResourceType,\n    amount: number,\n    source?: string,\n    target?: string\n  ): ExchangeTransaction | null {\n    // Get exchange rate\n    const rate = this.getExchangeRate(fromType, toType);\n    if (!rate) {\n      console.error(`No exchange rate defined for ${fromType} to ${toType}`);\n      return null;\n    }\n\n    // Check if amount is within limits\n    if (rate.minAmount && amount < rate.minAmount) {\n      console.error(`Exchange amount ${amount} is below minimum ${rate.minAmount}`);\n      return null;\n    }\n\n    if (rate.maxAmount && amount > rate.maxAmount) {\n      console.warn(\n        `Exchange amount ${amount} is above maximum ${rate.maxAmount}, capping at maximum`\n      );\n      amount = rate.maxAmount;\n    }\n\n    // Check if source has enough resources\n    const sourceState = this.resourceStates.get(fromType);\n    if (!sourceState || sourceState.current < amount) {\n      console.error(`Insufficient ${fromType} resources for exchange`);\n      return null;\n    }\n\n    // Calculate exchange amount\n    const exchangeAmount = this.calculateExchangeAmount(fromType, toType, amount);\n    if (exchangeAmount <= 0) {\n      console.error(`Invalid exchange amount: ${exchangeAmount}`);\n      return null;\n    }\n\n    // Update resource states\n    sourceState.current -= amount;\n    this.resourceStates.set(fromType, sourceState);\n\n    const targetState = this.resourceStates.get(toType);\n    if (targetState) {\n      targetState.current += exchangeAmount;\n      this.resourceStates.set(toType, targetState);\n    }\n\n    // Record transaction\n    const transaction: ExchangeTransaction = {\n      id: `exchange-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      fromType,\n      toType,\n      fromAmount: amount,\n      toAmount: exchangeAmount,\n      rate: rate.rate,\n      timestamp: Date.now(),\n      source,\n      target,\n    };\n\n    this.transactions.push(transaction);\n\n    // Trim transaction history if needed\n    if (this.transactions.length > this.maxTransactionHistory) {\n      this.transactions = this.transactions.slice(-this.maxTransactionHistory);\n    }\n\n    return transaction;\n  }\n\n  /**\n   * Register a rate modifier\n   */\n  public registerRateModifier(modifier: ExchangeRateModifier): boolean {\n    if (!modifier.id || !modifier.affectedTypes || modifier.affectedTypes.length === 0) {\n      console.error('Invalid rate modifier:', modifier);\n      return false;\n    }\n\n    this.modifiers.set(modifier.id, modifier);\n    this.updateCurrentRates();\n    return true;\n  }\n\n  /**\n   * Unregister a rate modifier\n   */\n  public unregisterRateModifier(id: string): boolean {\n    if (!this.modifiers.has(id)) {\n      return false;\n    }\n\n    this.modifiers.delete(id);\n    this.updateCurrentRates();\n    return true;\n  }\n\n  /**\n   * Update current rates based on modifiers and market conditions\n   */\n  private updateCurrentRates(): void {\n    // Reset current rates to base rates\n    this.currentRates = new Map(\n      Array.from(this.baseRates.entries()).map(([key, rate]) => [key, { ...rate }])\n    );\n\n    // Apply market condition modifier\n    const marketModifier = this.getMarketConditionModifier();\n\n    // Apply all active modifiers\n    const now = Date.now();\n    for (const [id, modifier] of this.modifiers.entries()) {\n      // Skip expired modifiers\n      if (modifier.expiresAt && modifier.expiresAt < now) {\n        this.modifiers.delete(id);\n        continue;\n      }\n\n      // Apply modifier to affected rates\n      for (const [rateKey, rate] of this.currentRates.entries()) {\n        const [fromType, toType] = rateKey.split('-') as [ResourceType, ResourceType];\n\n        if (modifier.affectedTypes.includes(fromType) || modifier.affectedTypes.includes(toType)) {\n          rate.rate *= modifier.multiplier;\n        }\n      }\n    }\n\n    // Apply market condition modifier to all rates\n    for (const rate of this.currentRates.values()) {\n      rate.rate *= marketModifier;\n    }\n  }\n\n  /**\n   * Get market condition modifier\n   */\n  private getMarketConditionModifier(): number {\n    switch (this.marketCondition) {\n      case 'stable':\n        return 1.0;\n      case 'volatile':\n        // Random fluctuation between 0.8 and 1.2\n        return 0.8 + Math.random() * 0.4;\n      case 'bullish':\n        // Increased rates (1.1 to 1.3)\n        return 1.1 + Math.random() * 0.2;\n      case 'bearish':\n        // Decreased rates (0.7 to 0.9)\n        return 0.7 + Math.random() * 0.2;\n      default:\n        return 1.0;\n    }\n  }\n\n  /**\n   * Update market conditions\n   */\n  public updateMarketConditions(): void {\n    const now = Date.now();\n\n    // Only update at specified intervals\n    if (now - this.lastMarketUpdate < this.marketUpdateInterval) {\n      return;\n    }\n\n    this.lastMarketUpdate = now;\n\n    // Randomly change market condition\n    const rand = Math.random();\n    if (rand < 0.6) {\n      // 60% chance to remain stable\n      this.marketCondition = 'stable';\n    } else if (rand < 0.75) {\n      // 15% chance to become volatile\n      this.marketCondition = 'volatile';\n    } else if (rand < 0.9) {\n      // 15% chance to become bullish\n      this.marketCondition = 'bullish';\n    } else {\n      // 10% chance to become bearish\n      this.marketCondition = 'bearish';\n    }\n\n    // Update rates based on new market condition\n    this.updateCurrentRates();\n\n    console.debug(`[ResourceExchangeManager] Market condition updated to: ${this.marketCondition}`);\n  }\n\n  /**\n   * Get current market condition\n   */\n  public getMarketCondition(): MarketCondition {\n    return this.marketCondition;\n  }\n\n  /**\n   * Set market condition (for testing or events)\n   */\n  public setMarketCondition(condition: MarketCondition): void {\n    this.marketCondition = condition;\n    this.updateCurrentRates();\n  }\n\n  /**\n   * Get all exchange rates\n   */\n  public getAllExchangeRates(): ResourceExchangeRate[] {\n    return Array.from(this.currentRates.values());\n  }\n\n  /**\n   * Get transaction history\n   */\n  public getTransactionHistory(): ExchangeTransaction[] {\n    return [...this.transactions];\n  }\n\n  /**\n   * Get transaction history for a specific resource type\n   */\n  public getTransactionHistoryByType(type: ResourceType): ExchangeTransaction[] {\n    return this.transactions.filter(\n      transaction => transaction.fromType === type || transaction.toType === type\n    );\n  }\n\n  /**\n   * Calculate optimal exchange path\n   * Uses a simple version of Dijkstra's algorithm to find the best conversion path\n   */\n  public calculateOptimalExchangePath(\n    fromType: ResourceType,\n    toType: ResourceType,\n    amount: number\n  ): { path: ResourceType[]; rate: number; amount: number } | null {\n    // Direct exchange\n    const directRate = this.getExchangeRate(fromType, toType);\n    if (directRate) {\n      return {\n        path: [fromType, toType],\n        rate: directRate.rate,\n        amount: amount * directRate.rate,\n      };\n    }\n\n    // All resource types\n    const allTypes = Array.from(\n      new Set(Array.from(this.currentRates.values()).flatMap(rate => [rate.fromType, rate.toType]))\n    );\n\n    // Initialize distances\n    const distances = new Map<ResourceType, number>();\n    const previous = new Map<ResourceType, ResourceType | null>();\n    const visited = new Set<ResourceType>();\n\n    for (const type of allTypes) {\n      distances.set(type, type === fromType ? 1 : 0);\n      previous.set(type, null);\n    }\n\n    while (visited.size < allTypes.length) {\n      // Find unvisited node with highest distance\n      let current: ResourceType | null = null;\n      let maxDistance = 0;\n\n      for (const type of allTypes) {\n        if (!visited.has(type)) {\n          const distance = distances.get(type) || 0;\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            current = type;\n          }\n        }\n      }\n\n      if (!current || maxDistance === 0) {\n        break;\n      }\n\n      visited.add(current);\n\n      // If we reached the target, we're done\n      if (current === toType) {\n        break;\n      }\n\n      // Check all neighbors\n      for (const [rateKey, rate] of this.currentRates.entries()) {\n        if (rate.fromType === current) {\n          const neighbor = rate.toType;\n          const distance = (distances.get(current) || 0) * rate.rate;\n\n          if (distance > (distances.get(neighbor) || 0)) {\n            distances.set(neighbor, distance);\n            previous.set(neighbor, current);\n          }\n        }\n      }\n    }\n\n    // If we couldn't reach the target, return null\n    if (!(distances.get(toType) || 0)) {\n      return null;\n    }\n\n    // Reconstruct path\n    const path: ResourceType[] = [];\n    let current: ResourceType | null = toType;\n\n    while (current) {\n      path.unshift(current);\n      current = previous.get(current) || null;\n    }\n\n    return {\n      path,\n      rate: distances.get(toType) || 0,\n      amount: amount * (distances.get(toType) || 0),\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.baseRates.clear();\n    this.currentRates.clear();\n    this.modifiers.clear();\n    this.transactions = [];\n    this.resourceStates.clear();\n  }\n\n  /**\n   * Calculate exchange rates based on current modifiers\n   */\n  private calculateRates(): void {\n    // Apply modifiers to base rates\n    // Convert Map entries to array to avoid MapIterator error\n    const modifierEntries = Array.from(this.modifiers.entries());\n    for (const [id, modifier] of modifierEntries) {\n      // Check if modifier has active property and it's false\n      if (modifier.active === false) {\n        continue;\n      }\n\n      // Convert Map entries to array to avoid MapIterator error\n      const rateEntries = Array.from(this.currentRates.entries());\n      for (const [rateKey, rate] of rateEntries) {\n        // Cast to extended type for compatibility\n        const extendedRate = rate as ExtendedRate;\n        const extendedModifier = modifier as ExchangeRateModifier;\n\n        // Check if modifier has sourceType and if it matches the rate's sourceType\n        if (\n          extendedModifier.sourceType &&\n          extendedRate.sourceType !== extendedModifier.sourceType\n        ) {\n          continue;\n        }\n\n        // Check if modifier has targetType and if it matches the rate's targetType\n        if (\n          extendedModifier.targetType &&\n          extendedRate.targetType !== extendedModifier.targetType\n        ) {\n          continue;\n        }\n\n        // Apply modifier\n        const newRate = { ...rate };\n        newRate.rate *= modifier.multiplier;\n        this.currentRates.set(rateKey, newRate);\n      }\n    }\n  }\n\n  /**\n   * Find optimal exchange path\n   */\n  private findOptimalPath(\n    sourceType: ResourceType,\n    targetType: ResourceType,\n    amount: number\n  ): ExchangePath | null {\n    // Direct exchange\n    const directKey = this.getRateKey(sourceType, targetType);\n    const directRate = this.currentRates.get(directKey);\n\n    if (directRate) {\n      return {\n        steps: [\n          {\n            sourceType,\n            targetType,\n            rate: directRate.rate,\n            inputAmount: amount,\n            outputAmount: amount * directRate.rate,\n          },\n        ],\n        totalRate: directRate.rate,\n        inputAmount: amount,\n        outputAmount: amount * directRate.rate,\n      };\n    }\n\n    // Try to find a path with one intermediate step\n    let bestPath: ExchangePath | null = null;\n    let bestRate = 0;\n\n    // Convert Map entries to array to avoid MapIterator error\n    const rateEntries = Array.from(this.currentRates.entries());\n    for (const [rateKey, rate] of rateEntries) {\n      // Cast to extended type for compatibility\n      const extendedRate = rate as ExtendedRate;\n\n      if (extendedRate.sourceType !== sourceType) {\n        continue;\n      }\n\n      const intermediateType = extendedRate.targetType;\n      if (!intermediateType) {\n        continue;\n      }\n\n      const secondKey = this.getRateKey(intermediateType, targetType);\n      const secondRate = this.currentRates.get(secondKey);\n\n      if (!secondRate) {\n        continue;\n      }\n\n      const totalRate = extendedRate.rate * secondRate.rate;\n      if (totalRate > bestRate) {\n        bestRate = totalRate;\n        const intermediateAmount = amount * extendedRate.rate;\n        bestPath = {\n          steps: [\n            {\n              sourceType,\n              targetType: intermediateType,\n              rate: extendedRate.rate,\n              inputAmount: amount,\n              outputAmount: intermediateAmount,\n            },\n            {\n              sourceType: intermediateType,\n              targetType,\n              rate: secondRate.rate,\n              inputAmount: intermediateAmount,\n              outputAmount: intermediateAmount * secondRate.rate,\n            },\n          ],\n          totalRate,\n          inputAmount: amount,\n          outputAmount: amount * totalRate,\n        };\n      }\n    }\n\n    return bestPath;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceFlowManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'converters' is assigned a value but never used.","line":208,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is assigned a value but never used.","line":217,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'interval' is assigned a value but never used.","line":424,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ResourceFlow,\n  ResourcePriority,\n  ResourceState,\n  ResourceTransfer,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport {\n  validateResourceFlow,\n  validateResourceTransfer,\n} from '../../utils/resources/resourceValidation';\n\n/**\n * Flow node type\n */\nexport type FlowNodeType = 'producer' | 'consumer' | 'storage' | 'converter';\n\n/**\n * Flow node interface\n */\nexport interface FlowNode {\n  id: string;\n  type: FlowNodeType;\n  resources: ResourceType[];\n  priority: ResourcePriority;\n  capacity?: number;\n  efficiency?: number;\n  active: boolean;\n}\n\n/**\n * Flow connection interface\n */\nexport interface FlowConnection {\n  id: string;\n  source: string;\n  target: string;\n  resourceType: ResourceType;\n  maxRate: number;\n  currentRate: number;\n  priority: ResourcePriority;\n  active: boolean;\n}\n\n/**\n * Flow network interface\n */\nexport interface FlowNetwork {\n  nodes: Map<string, FlowNode>;\n  connections: Map<string, FlowConnection>;\n  resourceStates: Map<ResourceType, ResourceState>;\n}\n\n/**\n * Flow optimization result\n */\nexport interface FlowOptimizationResult {\n  transfers: ResourceTransfer[];\n  updatedConnections: FlowConnection[];\n  bottlenecks: string[];\n  underutilized: string[];\n}\n\n/**\n * Resource Flow Manager\n * Manages and optimizes resource flows between producers, consumers, and storage\n */\nexport class ResourceFlowManager {\n  private network: FlowNetwork;\n  private lastOptimization: number;\n  private optimizationInterval: number;\n  private transferHistory: ResourceTransfer[];\n  private maxHistorySize: number;\n\n  constructor(optimizationInterval = 5000) {\n    this.network = {\n      nodes: new Map<string, FlowNode>(),\n      connections: new Map<string, FlowConnection>(),\n      resourceStates: new Map<ResourceType, ResourceState>(),\n    };\n    this.lastOptimization = 0;\n    this.optimizationInterval = optimizationInterval;\n    this.transferHistory = [];\n    this.maxHistorySize = 100;\n  }\n\n  /**\n   * Register a flow node\n   */\n  public registerNode(node: FlowNode): boolean {\n    if (!node.id || !node.resources || node.resources.length === 0) {\n      console.error('Invalid flow node:', node);\n      return false;\n    }\n\n    this.network.nodes.set(node.id, node);\n    return true;\n  }\n\n  /**\n   * Unregister a flow node\n   */\n  public unregisterNode(id: string): boolean {\n    if (!this.network.nodes.has(id)) {\n      return false;\n    }\n\n    // Remove all connections to/from this node\n    // Convert Map entries to array to avoid MapIterator error\n    const connectionEntries = Array.from(this.network.connections.entries());\n    for (const [connectionId, connection] of connectionEntries) {\n      if (connection.source === id || connection.target === id) {\n        this.network.connections.delete(connectionId);\n      }\n    }\n\n    this.network.nodes.delete(id);\n    return true;\n  }\n\n  /**\n   * Register a flow connection\n   */\n  public registerConnection(connection: FlowConnection): boolean {\n    if (!connection.id || !connection.source || !connection.target || !connection.resourceType) {\n      console.error('Invalid flow connection:', connection);\n      return false;\n    }\n\n    // Verify source and target nodes exist\n    if (!this.network.nodes.has(connection.source) || !this.network.nodes.has(connection.target)) {\n      console.error('Source or target node does not exist:', connection);\n      return false;\n    }\n\n    // Verify source node can provide the resource\n    const sourceNode = this.network.nodes.get(connection.source);\n    if (!sourceNode?.resources.includes(connection.resourceType)) {\n      console.error('Source node cannot provide resource:', connection);\n      return false;\n    }\n\n    // Verify target node can accept the resource\n    const targetNode = this.network.nodes.get(connection.target);\n    if (!targetNode?.resources.includes(connection.resourceType)) {\n      console.error('Target node cannot accept resource:', connection);\n      return false;\n    }\n\n    this.network.connections.set(connection.id, connection);\n    return true;\n  }\n\n  /**\n   * Unregister a flow connection\n   */\n  public unregisterConnection(id: string): boolean {\n    if (!this.network.connections.has(id)) {\n      return false;\n    }\n\n    this.network.connections.delete(id);\n    return true;\n  }\n\n  /**\n   * Update resource state\n   */\n  public updateResourceState(type: ResourceType, state: ResourceState): void {\n    this.network.resourceStates.set(type, state);\n  }\n\n  /**\n   * Get resource state\n   */\n  public getResourceState(type: ResourceType): ResourceState | undefined {\n    return this.network.resourceStates.get(type);\n  }\n\n  /**\n   * Optimize resource flows\n   */\n  public optimizeFlows(): FlowOptimizationResult {\n    const now = Date.now();\n\n    // Skip optimization if not enough time has passed\n    if (now - this.lastOptimization < this.optimizationInterval) {\n      return {\n        transfers: [],\n        updatedConnections: [],\n        bottlenecks: [],\n        underutilized: [],\n      };\n    }\n\n    this.lastOptimization = now;\n\n    // Get active nodes and connections\n    const activeNodes = Array.from(this.network.nodes.values()).filter(node => node.active);\n    const activeConnections = Array.from(this.network.connections.values()).filter(\n      conn => conn.active\n    );\n\n    // Group nodes by type\n    const producers = activeNodes.filter(node => node.type === 'producer');\n    const consumers = activeNodes.filter(node => node.type === 'consumer');\n    const storages = activeNodes.filter(node => node.type === 'storage');\n    const converters = activeNodes.filter(node => node.type === 'converter');\n\n    // Calculate resource availability and demand\n    const availability: Partial<Record<ResourceType, number>> = {};\n    const demand: Partial<Record<ResourceType, number>> = {};\n\n    // Initialize with current resource states\n    // Convert Map entries to array to avoid MapIterator error\n    const resourceStateEntries = Array.from(this.network.resourceStates.entries());\n    for (const [type, state] of resourceStateEntries) {\n      availability[type] = 0;\n      demand[type] = 0;\n    }\n\n    // Calculate production capacity\n    for (const producer of producers) {\n      for (const resourceType of producer.resources) {\n        // Find outgoing connections for this resource\n        const outgoingConnections = activeConnections.filter(\n          conn => conn.source === producer.id && conn.resourceType === resourceType\n        );\n\n        // Sum up max rates\n        const totalMaxRate = outgoingConnections.reduce((sum, conn) => sum + conn.maxRate, 0);\n\n        // Apply efficiency if available\n        const effectiveRate = producer.efficiency\n          ? totalMaxRate * producer.efficiency\n          : totalMaxRate;\n\n        availability[resourceType] = (availability[resourceType] || 0) + effectiveRate;\n      }\n    }\n\n    // Calculate consumption needs\n    for (const consumer of consumers) {\n      for (const resourceType of consumer.resources) {\n        // Find incoming connections for this resource\n        const incomingConnections = activeConnections.filter(\n          conn => conn.target === consumer.id && conn.resourceType === resourceType\n        );\n\n        // Sum up max rates\n        const totalMaxRate = incomingConnections.reduce((sum, conn) => sum + conn.maxRate, 0);\n\n        demand[resourceType] = (demand[resourceType] || 0) + totalMaxRate;\n      }\n    }\n\n    // Adjust for storage capacity\n    for (const storage of storages) {\n      for (const resourceType of storage.resources) {\n        const resourceState = this.network.resourceStates.get(resourceType);\n        if (!resourceState) {\n          continue;\n        }\n\n        // If storage is near capacity, reduce availability\n        if (resourceState.current > resourceState.max * 0.9) {\n          availability[resourceType] = Math.max(\n            0,\n            (availability[resourceType] || 0) - (resourceState.max - resourceState.current)\n          );\n        }\n\n        // If storage is near empty, increase demand\n        if (resourceState.current < resourceState.max * 0.1) {\n          demand[resourceType] = (demand[resourceType] || 0) + resourceState.max * 0.2;\n        }\n      }\n    }\n\n    // Identify bottlenecks and underutilized resources\n    const bottlenecks: string[] = [];\n    const underutilized: string[] = [];\n\n    for (const [type, availableAmount] of Object.entries(availability)) {\n      const demandAmount = demand[type as ResourceType] || 0;\n\n      if (availableAmount < demandAmount * 0.9) {\n        bottlenecks.push(type);\n      } else if (availableAmount > demandAmount * 1.5) {\n        underutilized.push(type);\n      }\n    }\n\n    // Optimize flow rates based on priorities\n    const updatedConnections: FlowConnection[] = [];\n\n    // Sort connections by priority (high to low)\n    const prioritizedConnections = [...activeConnections].sort(\n      (a, b) => Number(b.priority) - Number(a.priority)\n    );\n\n    // Adjust flow rates\n    for (const connection of prioritizedConnections) {\n      const { resourceType } = connection;\n      const availableForType = availability[resourceType] || 0;\n      const demandForType = demand[resourceType] || 0;\n\n      if (availableForType <= 0 || demandForType <= 0) {\n        // No flow possible\n        connection.currentRate = 0;\n      } else if (availableForType >= demandForType) {\n        // Full flow possible\n        connection.currentRate = Math.min(connection.maxRate, demandForType);\n      } else {\n        // Partial flow based on ratio\n        const ratio = availableForType / demandForType;\n        connection.currentRate = connection.maxRate * ratio;\n      }\n\n      updatedConnections.push({ ...connection });\n\n      // Update the actual connection in the network\n      this.network.connections.set(connection.id, connection);\n    }\n\n    // Generate transfer instructions\n    const transfers: ResourceTransfer[] = [];\n\n    for (const connection of updatedConnections) {\n      if (connection.currentRate <= 0) {\n        continue;\n      }\n\n      const transfer: ResourceTransfer = {\n        type: connection.resourceType,\n        source: connection.source,\n        target: connection.target,\n        amount: connection.currentRate,\n        timestamp: now,\n      };\n\n      if (validateResourceTransfer(transfer)) {\n        transfers.push(transfer);\n\n        // Add to history\n        this.addToTransferHistory(transfer);\n      }\n    }\n\n    return {\n      transfers,\n      updatedConnections,\n      bottlenecks,\n      underutilized,\n    };\n  }\n\n  /**\n   * Add a transfer to history\n   */\n  private addToTransferHistory(transfer: ResourceTransfer): void {\n    this.transferHistory.push(transfer);\n\n    // Trim history if needed\n    if (this.transferHistory.length > this.maxHistorySize) {\n      this.transferHistory = this.transferHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Get transfer history\n   */\n  public getTransferHistory(): ResourceTransfer[] {\n    return [...this.transferHistory];\n  }\n\n  /**\n   * Get transfer history for a specific resource type\n   */\n  public getTransferHistoryByType(type: ResourceType): ResourceTransfer[] {\n    return this.transferHistory.filter(transfer => transfer.type === type);\n  }\n\n  /**\n   * Get all nodes\n   */\n  public getNodes(): FlowNode[] {\n    return Array.from(this.network.nodes.values());\n  }\n\n  /**\n   * Get all connections\n   */\n  public getConnections(): FlowConnection[] {\n    return Array.from(this.network.connections.values());\n  }\n\n  /**\n   * Get node by ID\n   */\n  public getNode(id: string): FlowNode | undefined {\n    return this.network.nodes.get(id);\n  }\n\n  /**\n   * Get connection by ID\n   */\n  public getConnection(id: string): FlowConnection | undefined {\n    return this.network.connections.get(id);\n  }\n\n  /**\n   * Create a resource flow\n   */\n  public createFlow(flow: ResourceFlow): boolean {\n    if (!validateResourceFlow(flow)) {\n      console.error('Invalid resource flow:', flow);\n      return false;\n    }\n\n    // Extract resource type and other properties from flow\n    const resourceType = flow.resources[0]?.type;\n    const rate = flow.resources[0]?.amount || 0;\n    const interval = flow.resources[0]?.interval || 1000;\n    // Create a proper ResourcePriority object\n    const priority: ResourcePriority = {\n      type: resourceType,\n      priority: 1,\n      consumers: [],\n    };\n\n    if (!resourceType) {\n      console.error('Flow must have at least one resource');\n      return false;\n    }\n\n    // Create nodes if they don't exist\n    if (!this.network.nodes.has(flow.source)) {\n      this.registerNode({\n        id: flow.source,\n        type: 'producer',\n        resources: [resourceType],\n        priority: priority,\n        active: true,\n      });\n    }\n\n    if (!this.network.nodes.has(flow.target)) {\n      this.registerNode({\n        id: flow.target,\n        type: 'consumer',\n        resources: [resourceType],\n        priority: priority,\n        active: true,\n      });\n    }\n\n    // Create connection\n    const connectionId = `${flow.source}-${flow.target}-${resourceType}`;\n\n    return this.registerConnection({\n      id: connectionId,\n      source: flow.source,\n      target: flow.target,\n      resourceType: resourceType,\n      maxRate: rate,\n      currentRate: 0,\n      priority: priority,\n      active: true,\n    });\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.network.nodes.clear();\n    this.network.connections.clear();\n    this.network.resourceStates.clear();\n    this.transferHistory = [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceIntegration.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":76,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":76,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2524,2601],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newAmount' is assigned a value but never used.","line":85,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'oldAmount' is assigned a value but never used.","line":85,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newAmount' is assigned a value but never used.","line":95,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'oldAmount' is assigned a value but never used.","line":95,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentAmount' is assigned a value but never used.","line":126,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is defined but never used.","line":337,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":337,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport {\n  ResourcePriority,\n  ResourceState,\n  ResourceThreshold,\n  ResourceTransfer,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport { ResourceManager } from '../game/ResourceManager';\nimport { ResourceCostManager } from './ResourceCostManager';\nimport { ResourceExchangeManager } from './ResourceExchangeManager';\nimport { FlowNodeType, ResourceFlowManager } from './ResourceFlowManager';\nimport { ResourcePoolManager } from './ResourcePoolManager';\nimport { ResourceStorageManager, StorageContainerConfig } from './ResourceStorageManager';\nimport { ResourceThresholdManager, ThresholdConfig } from './ResourceThresholdManager';\n\n/**\n * ResourceIntegration\n *\n * Integrates the new resource management system with existing game systems.\n * Acts as a bridge between the legacy ResourceManager and the new specialized managers.\n */\nexport class ResourceIntegration {\n  private resourceManager: ResourceManager;\n  private thresholdManager: ResourceThresholdManager;\n  private flowManager: ResourceFlowManager;\n  private storageManager: ResourceStorageManager;\n  private costManager: ResourceCostManager;\n  private exchangeManager: ResourceExchangeManager;\n  private poolManager: ResourcePoolManager;\n  private initialized: boolean = false;\n  private transferHistory: ResourceTransfer[] = [];\n\n  constructor(\n    resourceManager: ResourceManager,\n    thresholdManager: ResourceThresholdManager,\n    flowManager: ResourceFlowManager,\n    storageManager: ResourceStorageManager,\n    costManager: ResourceCostManager,\n    exchangeManager: ResourceExchangeManager,\n    poolManager: ResourcePoolManager\n  ) {\n    this.resourceManager = resourceManager;\n    this.thresholdManager = thresholdManager;\n    this.flowManager = flowManager;\n    this.storageManager = storageManager;\n    this.costManager = costManager;\n    this.exchangeManager = exchangeManager;\n    this.poolManager = poolManager;\n  }\n\n  /**\n   * Initialize the integration\n   */\n  public initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    // Subscribe to resource events from the legacy system\n    this.subscribeToLegacyEvents();\n\n    // Initialize threshold monitoring\n    this.initializeThresholds();\n\n    // Initialize storage containers\n    this.initializeStorage();\n\n    // Initialize resource flows\n    this.initializeFlows();\n\n    // Start the threshold monitoring\n    this.thresholdManager.start();\n\n    this.initialized = true;\n    console.debug('[ResourceIntegration] Resource management system integrated');\n  }\n\n  /**\n   * Subscribe to events from the legacy resource manager\n   */\n  private subscribeToLegacyEvents(): void {\n    // Subscribe to resource update events\n    moduleEventBus.subscribe('RESOURCE_PRODUCED' as ModuleEventType, event => {\n      const { resourceType, newAmount, oldAmount } = event.data;\n\n      // Update resource state in our new system\n      const resourceState = this.resourceManager.getResourceState(resourceType);\n      if (resourceState) {\n        this.updateResourceState(resourceType, resourceState);\n      }\n    });\n\n    moduleEventBus.subscribe('RESOURCE_CONSUMED' as ModuleEventType, event => {\n      const { resourceType, newAmount, oldAmount } = event.data;\n\n      // Update resource state in our new system\n      const resourceState = this.resourceManager.getResourceState(resourceType);\n      if (resourceState) {\n        this.updateResourceState(resourceType, resourceState);\n      }\n    });\n\n    moduleEventBus.subscribe('RESOURCE_TRANSFERRED' as ModuleEventType, event => {\n      const { resourceType, amount, source, target } = event.data;\n\n      // Record the transfer in our local history\n      const transfer: ResourceTransfer = {\n        type: resourceType,\n        amount,\n        source,\n        target,\n        timestamp: event.timestamp,\n      };\n\n      this.transferHistory.push(transfer);\n\n      // Keep history size manageable\n      if (this.transferHistory.length > 100) {\n        this.transferHistory.shift();\n      }\n    });\n\n    // Subscribe to threshold events\n    moduleEventBus.subscribe('RESOURCE_SHORTAGE' as ModuleEventType, event => {\n      const { resourceType, currentAmount, requiredAmount } = event.data;\n\n      // Create an alert in our threshold manager\n      const threshold: ResourceThreshold = {\n        type: resourceType,\n        min: requiredAmount,\n      };\n\n      // Find existing threshold config or create a new one\n      const existingConfig = this.thresholdManager\n        .getThresholdConfigs()\n        .find(config => config.threshold.type === resourceType);\n\n      if (existingConfig) {\n        // Update the threshold\n        existingConfig.threshold.min = Math.max(existingConfig.threshold.min || 0, requiredAmount);\n      } else {\n        // Create a new threshold config\n        const config: ThresholdConfig = {\n          id: `shortage-${resourceType}-${Date.now()}`,\n          threshold,\n          actions: [\n            {\n              type: 'notification',\n              target: 'system',\n              message: `Resource shortage: ${resourceType}`,\n            },\n          ],\n          enabled: true,\n          autoResolve: true,\n        };\n\n        this.thresholdManager.registerThreshold(config);\n      }\n    });\n  }\n\n  /**\n   * Initialize thresholds based on the legacy resource manager\n   */\n  private initializeThresholds(): void {\n    // Get all resource types\n    const resourceTypes = Array.from(this.resourceManager['resources'].keys()) as ResourceType[];\n\n    // Create thresholds for each resource type\n    resourceTypes.forEach(type => {\n      const resourceState = this.resourceManager.getResourceState(type);\n      if (!resourceState) {\n        return;\n      }\n\n      // Create a threshold config\n      const config: ThresholdConfig = {\n        id: `resource-${type}`,\n        threshold: {\n          type,\n          min: resourceState.min,\n          max: resourceState.max,\n          target: (resourceState.min + resourceState.max) / 2,\n        },\n        actions: [\n          {\n            type: 'notification',\n            target: 'system',\n            message: `${type} threshold triggered`,\n          },\n        ],\n        enabled: true,\n      };\n\n      this.thresholdManager.registerThreshold(config);\n    });\n  }\n\n  /**\n   * Initialize storage containers based on the legacy resource manager\n   */\n  private initializeStorage(): void {\n    // Get all resource types\n    const resourceTypes = Array.from(this.resourceManager['resources'].keys()) as ResourceType[];\n\n    // Create a main storage container for each resource type\n    resourceTypes.forEach(type => {\n      const resourceState = this.resourceManager.getResourceState(type);\n      if (!resourceState) {\n        return;\n      }\n\n      // Create a storage container config\n      const config: StorageContainerConfig = {\n        id: `main-storage-${type}`,\n        name: `Main ${type} Storage`,\n        type: 'storage',\n        capacity: resourceState.max,\n        resourceTypes: [type],\n        priority: 10, // High priority for main storage\n      };\n\n      this.storageManager.registerContainer(config);\n\n      // Initialize with current amount\n      this.storageManager.storeResource(config.id, type, resourceState.current);\n    });\n  }\n\n  /**\n   * Initialize resource flows based on the legacy resource manager\n   */\n  private initializeFlows(): void {\n    // Get all resource types\n    const resourceTypes = Array.from(this.resourceManager['resources'].keys()) as ResourceType[];\n\n    // Create producer and consumer nodes for each resource type\n    resourceTypes.forEach(type => {\n      const resourceState = this.resourceManager.getResourceState(type);\n      if (!resourceState) {\n        return;\n      }\n\n      // Create a resource priority\n      const resourcePriority: ResourcePriority = {\n        type,\n        priority: 1,\n        consumers: [],\n      };\n\n      // Create producer node\n      this.flowManager.registerNode({\n        id: `producer-${type}`,\n        type: 'producer' as FlowNodeType,\n        resources: [type],\n        priority: resourcePriority,\n        active: true,\n      });\n\n      // Create consumer node\n      this.flowManager.registerNode({\n        id: `consumer-${type}`,\n        type: 'consumer' as FlowNodeType,\n        resources: [type],\n        priority: resourcePriority,\n        active: true,\n      });\n\n      // Create storage node\n      this.flowManager.registerNode({\n        id: `storage-${type}`,\n        type: 'storage' as FlowNodeType,\n        resources: [type],\n        priority: resourcePriority,\n        capacity: resourceState.max,\n        active: true,\n      });\n\n      // Create connections\n      this.flowManager.registerConnection({\n        id: `production-${type}`,\n        source: `producer-${type}`,\n        target: `storage-${type}`,\n        resourceType: type,\n        maxRate: resourceState.production,\n        currentRate: 0,\n        priority: resourcePriority,\n        active: true,\n      });\n\n      this.flowManager.registerConnection({\n        id: `consumption-${type}`,\n        source: `storage-${type}`,\n        target: `consumer-${type}`,\n        resourceType: type,\n        maxRate: resourceState.consumption,\n        currentRate: 0,\n        priority: resourcePriority,\n        active: true,\n      });\n\n      // Update resource state in flow manager\n      this.flowManager.updateResourceState(type, resourceState);\n    });\n  }\n\n  /**\n   * Update resource state in all managers\n   */\n  private updateResourceState(type: ResourceType, state: ResourceState): void {\n    // Update in threshold manager via event\n    moduleEventBus.emit({\n      type: 'resource:update' as ModuleEventType,\n      moduleId: 'resource-integration',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: {\n        type,\n        state,\n      },\n    });\n\n    // Update in flow manager\n    this.flowManager.updateResourceState(type, state);\n\n    // Update in cost manager\n    this.costManager.updateResourceState(type, state);\n\n    // Update in exchange manager\n    this.exchangeManager.updateResourceState(type, state);\n  }\n\n  /**\n   * Update method to be called on game loop\n   */\n  public update(deltaTime: number): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    // Optimize resource flows\n    const flowResult = this.flowManager.optimizeFlows();\n\n    // Apply transfers to the legacy resource manager\n    flowResult.transfers.forEach(transfer => {\n      // Only apply transfers to/from storage\n      if (transfer.source.startsWith('storage-') || transfer.target.startsWith('storage-')) {\n        // Extract the resource type from the node ID\n        const sourceType = transfer.source.replace('storage-', '') as ResourceType;\n        const targetType = transfer.target.replace('storage-', '') as ResourceType;\n\n        // If transferring from storage to consumer, remove from legacy manager\n        if (transfer.source.startsWith('storage-') && transfer.target.startsWith('consumer-')) {\n          this.resourceManager.removeResource(sourceType, transfer.amount);\n        }\n\n        // If transferring from producer to storage, add to legacy manager\n        if (transfer.source.startsWith('producer-') && transfer.target.startsWith('storage-')) {\n          this.resourceManager.addResource(targetType, transfer.amount);\n        }\n      }\n    });\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    // Stop threshold monitoring\n    this.thresholdManager.stop();\n\n    // Clean up all managers\n    this.thresholdManager.cleanup();\n    this.flowManager.cleanup();\n    this.storageManager.cleanup();\n    this.costManager.cleanup();\n    this.exchangeManager.cleanup();\n    this.poolManager.cleanup();\n\n    this.initialized = false;\n  }\n}\n\n/**\n * Factory function to create and initialize the resource integration\n */\nexport function createResourceIntegration(resourceManager: ResourceManager): ResourceIntegration {\n  // Create all the resource managers\n  const thresholdManager = new ResourceThresholdManager();\n  const flowManager = new ResourceFlowManager();\n  const storageManager = new ResourceStorageManager();\n  const costManager = new ResourceCostManager();\n  const exchangeManager = new ResourceExchangeManager();\n  const poolManager = new ResourcePoolManager();\n\n  // Create the integration\n  const integration = new ResourceIntegration(\n    resourceManager,\n    thresholdManager,\n    flowManager,\n    storageManager,\n    costManager,\n    exchangeManager,\n    poolManager\n  );\n\n  // Initialize the integration\n  integration.initialize();\n\n  return integration;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourcePerformanceMonitor.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1267,1332],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":174,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":174,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[4998,5318],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":201,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":201,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[5738,5815],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\n\nexport interface PerformanceMetrics {\n  timestamp: number;\n  resourceType: ResourceType;\n  productionRate: number;\n  consumptionRate: number;\n  transferRate: number;\n  utilizationRate: number;\n  efficiency: number;\n}\n\nexport interface ResourcePerformanceSnapshot {\n  metrics: Map<ResourceType, PerformanceMetrics>;\n  systemLoad: number;\n  bottlenecks: ResourceType[];\n  recommendations: string[];\n}\n\n/**\n * Monitors and analyzes resource management performance\n */\nexport class ResourcePerformanceMonitor {\n  private metricsHistory: Map<ResourceType, PerformanceMetrics[]>;\n  private snapshotInterval: number;\n  private maxHistoryLength: number;\n  private lastSnapshotTime: number;\n\n  constructor(snapshotInterval = 5000, maxHistoryLength = 100) {\n    this.metricsHistory = new Map();\n    this.snapshotInterval = snapshotInterval;\n    this.maxHistoryLength = maxHistoryLength;\n    this.lastSnapshotTime = Date.now();\n\n    // Start monitoring\n    this.startMonitoring();\n  }\n\n  /**\n   * Starts the performance monitoring\n   */\n  private startMonitoring(): void {\n    setInterval(() => this.takeSnapshot(), this.snapshotInterval);\n    console.debug('[ResourcePerformanceMonitor] Started monitoring');\n  }\n\n  /**\n   * Records performance metrics for a resource\n   */\n  recordMetrics(\n    type: ResourceType,\n    productionRate: number,\n    consumptionRate: number,\n    transferRate: number,\n    utilizationRate: number\n  ): void {\n    const metrics: PerformanceMetrics = {\n      timestamp: Date.now(),\n      resourceType: type,\n      productionRate,\n      consumptionRate,\n      transferRate,\n      utilizationRate,\n      efficiency: this.calculateEfficiency(productionRate, consumptionRate, utilizationRate),\n    };\n\n    if (!this.metricsHistory.has(type)) {\n      this.metricsHistory.set(type, []);\n    }\n\n    const history = this.metricsHistory.get(type)!;\n    history.push(metrics);\n\n    // Trim history if needed\n    if (history.length > this.maxHistoryLength) {\n      history.shift();\n    }\n  }\n\n  /**\n   * Calculates resource efficiency\n   */\n  private calculateEfficiency(\n    production: number,\n    consumption: number,\n    utilization: number\n  ): number {\n    // Efficiency formula: balance between production matching consumption\n    // and good utilization (not too full, not too empty)\n    const productionBalance = consumption > 0 ? Math.min(production / consumption, 1.5) : 1.0;\n    const utilizationScore = 1 - Math.abs(0.5 - utilization);\n    return (productionBalance + utilizationScore) / 2;\n  }\n\n  /**\n   * Takes a performance snapshot\n   */\n  private takeSnapshot(): void {\n    const snapshot = this.generateSnapshot();\n    this.lastSnapshotTime = Date.now();\n\n    // Emit performance snapshot\n    moduleEventBus.emit({\n      type: 'STATUS_CHANGED',\n      moduleId: 'resource-performance-monitor',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: {\n        type: 'performance_snapshot',\n        snapshot,\n      },\n    });\n\n    // Log performance insights\n    this.logPerformanceInsights(snapshot);\n  }\n\n  /**\n   * Generates a performance snapshot\n   */\n  private generateSnapshot(): ResourcePerformanceSnapshot {\n    const metrics = new Map<ResourceType, PerformanceMetrics>();\n    const bottlenecks: ResourceType[] = [];\n    const recommendations: string[] = [];\n\n    // Calculate current metrics for each resource\n    for (const [type, history] of this.metricsHistory) {\n      if (history.length === 0) {\n        continue;\n      }\n\n      const latest = history[history.length - 1];\n      metrics.set(type, latest);\n\n      // Identify bottlenecks\n      if (latest.efficiency < 0.6) {\n        bottlenecks.push(type);\n\n        // Generate recommendations\n        if (latest.productionRate < latest.consumptionRate) {\n          recommendations.push(\n            `Increase production rate for ${type} (current: ${latest.productionRate.toFixed(2)}, needed: ${latest.consumptionRate.toFixed(2)})`\n          );\n        } else if (latest.utilizationRate > 0.9) {\n          recommendations.push(\n            `Consider increasing storage capacity for ${type} (utilization: ${(latest.utilizationRate * 100).toFixed(1)}%)`\n          );\n        } else if (latest.utilizationRate < 0.1) {\n          recommendations.push(\n            `Optimize consumption or reduce production of ${type} (utilization: ${(latest.utilizationRate * 100).toFixed(1)}%)`\n          );\n        }\n      }\n    }\n\n    // Calculate system load (average utilization across all resources)\n    const systemLoad =\n      Array.from(metrics.values()).reduce((sum, m) => sum + m.utilizationRate, 0) /\n      Math.max(metrics.size, 1);\n\n    return {\n      metrics,\n      systemLoad,\n      bottlenecks,\n      recommendations,\n    };\n  }\n\n  /**\n   * Logs performance insights\n   */\n  private logPerformanceInsights(snapshot: ResourcePerformanceSnapshot): void {\n    console.debug(`[ResourcePerformanceMonitor] Performance Snapshot:\n      System Load: ${(snapshot.systemLoad * 100).toFixed(1)}%\n      Bottlenecks: ${snapshot.bottlenecks.join(', ') || 'None'}\n      \n      Recommendations:\n      ${snapshot.recommendations.map(r => `- ${r}`).join('\\n      ') || '- No recommendations'}`);\n  }\n\n  /**\n   * Gets performance history for a resource\n   */\n  getResourceHistory(type: ResourceType): PerformanceMetrics[] {\n    return [...(this.metricsHistory.get(type) || [])];\n  }\n\n  /**\n   * Gets the latest snapshot\n   */\n  getLatestSnapshot(): ResourcePerformanceSnapshot {\n    return this.generateSnapshot();\n  }\n\n  /**\n   * Cleans up the monitor\n   */\n  cleanup(): void {\n    this.metricsHistory.clear();\n    console.debug('[ResourcePerformanceMonitor] Cleaned up performance monitor');\n  }\n\n  /**\n   * Get all metrics history\n   */\n  public getAllMetricsHistory(): Record<ResourceType, PerformanceMetrics[]> {\n    const result: Record<ResourceType, PerformanceMetrics[]> = {} as Record<\n      ResourceType,\n      PerformanceMetrics[]\n    >;\n\n    for (const [type, metrics] of Array.from(this.metricsHistory)) {\n      result[type] = [...metrics];\n    }\n\n    return result;\n  }\n}\n\n// Export singleton instance\nexport const resourcePerformanceMonitor = new ResourcePerformanceMonitor();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourcePoolManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11133,11136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11133,11136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ResourceContainer,\n  ResourcePool,\n  ResourceState,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport { isResourcePool } from '../../utils/resources/resourceValidation';\n\n/**\n * Pool allocation strategy\n */\nexport type PoolAllocationStrategy = 'equal' | 'priority' | 'demand-based' | 'custom';\n\n/**\n * Pool distribution rule\n */\nexport interface PoolDistributionRule {\n  id: string;\n  poolId: string;\n  targetIds: string[];\n  resourceType: ResourceType;\n  percentage: number;\n  minAmount?: number;\n  maxAmount?: number;\n  priority: number;\n  condition?: (state: ResourceState) => boolean;\n  enabled?: boolean;\n  sourceId?: string;\n  amount?: number;\n}\n\n/**\n * Pool allocation result\n */\nexport interface PoolAllocationResult {\n  poolId: string;\n  resourceType: ResourceType;\n  allocations: Array<{\n    targetId: string;\n    amount: number;\n    percentage: number;\n  }>;\n  timestamp: number;\n}\n\n/**\n * Resource Pool Manager\n * Manages resource pools, distribution, and allocation\n */\nexport class ResourcePoolManager {\n  private pools: Map<string, ResourcePool>;\n  private containers: Map<string, ResourceContainer>;\n  private distributionRules: Map<string, PoolDistributionRule>;\n  private resourceStates: Map<ResourceType, ResourceState>;\n  private allocationHistory: PoolAllocationResult[];\n  private allocationStrategy: PoolAllocationStrategy;\n  private maxHistorySize: number;\n  private lastDistribution: number;\n  private distributionInterval: number;\n\n  constructor(\n    allocationStrategy: PoolAllocationStrategy = 'priority',\n    distributionInterval = 5000,\n    maxHistorySize = 100\n  ) {\n    this.pools = new Map();\n    this.containers = new Map();\n    this.distributionRules = new Map();\n    this.resourceStates = new Map();\n    this.allocationHistory = [];\n    this.allocationStrategy = allocationStrategy;\n    this.maxHistorySize = maxHistorySize;\n    this.lastDistribution = 0;\n    this.distributionInterval = distributionInterval;\n  }\n\n  /**\n   * Update resource state\n   */\n  public updateResourceState(type: ResourceType, state: ResourceState): void {\n    this.resourceStates.set(type, state);\n  }\n\n  /**\n   * Register a resource pool\n   */\n  public registerPool(pool: ResourcePool): boolean {\n    if (!isResourcePool(pool)) {\n      console.error('Invalid resource pool:', pool);\n      return false;\n    }\n\n    this.pools.set(pool.id, pool);\n    return true;\n  }\n\n  /**\n   * Unregister a resource pool\n   */\n  public unregisterPool(id: string): boolean {\n    if (!this.pools.has(id)) {\n      return false;\n    }\n\n    // Remove all distribution rules for this pool\n    for (const [ruleId, rule] of this.distributionRules.entries()) {\n      if (rule.poolId === id) {\n        this.distributionRules.delete(ruleId);\n      }\n    }\n\n    this.pools.delete(id);\n    return true;\n  }\n\n  /**\n   * Register a container\n   */\n  public registerContainer(container: ResourceContainer): boolean {\n    if (!container.id) {\n      console.error('Invalid container:', container);\n      return false;\n    }\n\n    this.containers.set(container.id, container);\n    return true;\n  }\n\n  /**\n   * Unregister a container\n   */\n  public unregisterContainer(id: string): boolean {\n    if (!this.containers.has(id)) {\n      return false;\n    }\n\n    this.containers.delete(id);\n    return true;\n  }\n\n  /**\n   * Register a distribution rule\n   */\n  public registerDistributionRule(rule: PoolDistributionRule): boolean {\n    if (!rule.id || !rule.poolId || !rule.targetIds || rule.targetIds.length === 0) {\n      console.error('Invalid distribution rule:', rule);\n      return false;\n    }\n\n    // Verify pool exists\n    if (!this.pools.has(rule.poolId)) {\n      console.error(`Pool ${rule.poolId} does not exist`);\n      return false;\n    }\n\n    // Verify targets exist\n    for (const targetId of rule.targetIds) {\n      if (!this.containers.has(targetId)) {\n        console.error(`Target container ${targetId} does not exist`);\n        return false;\n      }\n    }\n\n    this.distributionRules.set(rule.id, rule);\n    return true;\n  }\n\n  /**\n   * Unregister a distribution rule\n   */\n  public unregisterDistributionRule(id: string): boolean {\n    if (!this.distributionRules.has(id)) {\n      return false;\n    }\n\n    this.distributionRules.delete(id);\n    return true;\n  }\n\n  /**\n   * Set allocation strategy\n   */\n  public setAllocationStrategy(strategy: PoolAllocationStrategy): void {\n    this.allocationStrategy = strategy;\n  }\n\n  /**\n   * Get allocation strategy\n   */\n  public getAllocationStrategy(): PoolAllocationStrategy {\n    return this.allocationStrategy;\n  }\n\n  /**\n   * Add resource to pool\n   */\n  public addToPool(poolId: string, type: ResourceType, amount: number): boolean {\n    const pool = this.pools.get(poolId);\n    if (!pool) {\n      console.error(`Pool ${poolId} does not exist`);\n      return false;\n    }\n\n    // Initialize resources map if it doesn't exist\n    if (!pool.resources) {\n      pool.resources = new Map<ResourceType, number>();\n    }\n\n    // Add resource to pool\n    const currentAmount = pool.resources.get(type) || 0;\n    pool.resources.set(type, currentAmount + amount);\n\n    return true;\n  }\n\n  /**\n   * Remove resource from pool\n   */\n  public removeFromPool(poolId: string, type: ResourceType, amount: number): boolean {\n    const pool = this.pools.get(poolId);\n    if (!pool || !pool.resources) {\n      console.error(`Pool ${poolId} does not exist or has no resources`);\n      return false;\n    }\n\n    const currentAmount = pool.resources.get(type) || 0;\n    if (currentAmount < amount) {\n      console.error(`Insufficient ${type} in pool ${poolId}`);\n      return false;\n    }\n\n    pool.resources.set(type, currentAmount - amount);\n    return true;\n  }\n\n  /**\n   * Transfer between pools\n   */\n  public transferBetweenPools(\n    sourcePoolId: string,\n    targetPoolId: string,\n    type: ResourceType,\n    amount: number\n  ): boolean {\n    // Remove from source pool\n    if (!this.removeFromPool(sourcePoolId, type, amount)) {\n      return false;\n    }\n\n    // Add to target pool\n    if (!this.addToPool(targetPoolId, type, amount)) {\n      // Rollback source pool removal\n      this.addToPool(sourcePoolId, type, amount);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Distribute resources from pools to containers\n   */\n  public distributeResources(now = Date.now()): PoolAllocationResult[] {\n    // Skip if not enough time has passed\n    if (now - this.lastDistribution < this.distributionInterval) {\n      return [];\n    }\n\n    this.lastDistribution = now;\n    const results: PoolAllocationResult[] = [];\n\n    // Sort rules by priority (high to low)\n    const sortedRules = Array.from(this.distributionRules.values()).sort(\n      (a, b) => b.priority - a.priority\n    );\n\n    // Process each rule\n    for (const rule of sortedRules) {\n      // Skip disabled rules\n      if (rule.enabled === false) {\n        continue;\n      }\n\n      const pool = this.pools.get(rule.poolId);\n      if (!pool || !pool.resources) {\n        continue;\n      }\n\n      const resourceAmount = pool.resources.get(rule.resourceType) || 0;\n      if (resourceAmount <= 0) {\n        continue;\n      }\n\n      // Check condition if provided\n      if (rule.condition) {\n        const resourceState = this.resourceStates.get(rule.resourceType);\n        if (!resourceState || !rule.condition(resourceState)) {\n          continue;\n        }\n      }\n\n      // Calculate amount to distribute\n      let amountToDistribute = resourceAmount * (rule.percentage / 100);\n\n      // Apply min/max constraints\n      if (rule.minAmount !== undefined && amountToDistribute < rule.minAmount) {\n        amountToDistribute = Math.min(rule.minAmount, resourceAmount);\n      }\n\n      if (rule.maxAmount !== undefined && amountToDistribute > rule.maxAmount) {\n        amountToDistribute = rule.maxAmount;\n      }\n\n      // Skip if amount is too small\n      if (amountToDistribute <= 0) {\n        continue;\n      }\n\n      // Allocate resources based on strategy\n      const allocations = this.allocateResources(\n        rule.targetIds,\n        rule.resourceType,\n        amountToDistribute\n      );\n\n      // Apply allocations\n      let totalAllocated = 0;\n      for (const allocation of allocations) {\n        const container = this.containers.get(allocation.targetId);\n        if (!container) {\n          continue;\n        }\n\n        // Initialize resources map if it doesn't exist\n        if (!container.resources) {\n          container.resources = new Map<ResourceType, number>();\n        }\n\n        // Add resource to container\n        const currentAmount = container.resources.get(rule.resourceType) || 0;\n        container.resources.set(rule.resourceType, currentAmount + allocation.amount);\n        totalAllocated += allocation.amount;\n      }\n\n      // Remove allocated amount from pool\n      if (totalAllocated > 0) {\n        pool.resources.set(rule.resourceType, resourceAmount - totalAllocated);\n\n        // Record allocation\n        const result: PoolAllocationResult = {\n          poolId: rule.poolId,\n          resourceType: rule.resourceType,\n          allocations,\n          timestamp: now,\n        };\n\n        results.push(result);\n        this.allocationHistory.push(result);\n\n        // Trim history if needed\n        if (this.allocationHistory.length > this.maxHistorySize) {\n          this.allocationHistory = this.allocationHistory.slice(-this.maxHistorySize);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Allocate resources based on strategy\n   */\n  private allocateResources(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    if (targetIds.length === 0 || amount <= 0) {\n      return [];\n    }\n\n    switch (this.allocationStrategy) {\n      case 'equal':\n        return this.allocateEqual(targetIds, amount);\n      case 'priority':\n        return this.allocatePriority(targetIds, resourceType, amount);\n      case 'demand-based':\n        return this.allocateDemandBased(targetIds, resourceType, amount);\n      case 'custom':\n        return this.allocateCustom(targetIds, resourceType, amount);\n      default:\n        return this.allocateEqual(targetIds, amount);\n    }\n  }\n\n  /**\n   * Allocate resources equally\n   */\n  private allocateEqual(\n    targetIds: string[],\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    const equalAmount = amount / targetIds.length;\n    const percentage = 100 / targetIds.length;\n\n    return targetIds.map(targetId => ({\n      targetId,\n      amount: equalAmount,\n      percentage,\n    }));\n  }\n\n  /**\n   * Allocate resources based on priority\n   */\n  private allocatePriority(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    // Get containers with priority\n    const containersWithPriority = targetIds\n      .map(id => {\n        const container = this.containers.get(id);\n        return {\n          id,\n          priority:\n            container && 'priority' in container ? ((container as any).priority as number) : 1,\n        };\n      })\n      .sort((a, b) => (b.priority as number) - (a.priority as number));\n\n    // Calculate total priority\n    const totalPriority = containersWithPriority.reduce(\n      (sum, container) => sum + (container.priority as number),\n      0\n    );\n\n    // Allocate based on priority\n    return containersWithPriority.map(container => {\n      const containerPercentage = ((container.priority as number) / totalPriority) * 100;\n      const containerAmount = ((container.priority as number) / totalPriority) * amount;\n\n      return {\n        targetId: container.id,\n        amount: containerAmount,\n        percentage: containerPercentage,\n      };\n    });\n  }\n\n  /**\n   * Allocate resources based on demand\n   */\n  private allocateDemandBased(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    // Calculate demand for each container\n    const containerDemands = targetIds.map(id => {\n      const container = this.containers.get(id);\n      if (!container) {\n        return { id, demand: 0 };\n      }\n\n      // Calculate demand based on capacity and current amount\n      let demand = 0;\n      if (container.capacity && container.resources) {\n        const currentAmount = container.resources.get(resourceType) || 0;\n        demand = Math.max(0, container.capacity - currentAmount);\n      }\n\n      return { id, demand };\n    });\n\n    // Calculate total demand\n    const totalDemand = containerDemands.reduce((sum, container) => sum + container.demand, 0);\n\n    // If no demand, allocate equally\n    if (totalDemand <= 0) {\n      return this.allocateEqual(targetIds, amount);\n    }\n\n    // Allocate based on demand\n    return containerDemands.map(container => {\n      const containerPercentage = (container.demand / totalDemand) * 100;\n      const containerAmount = (container.demand / totalDemand) * amount;\n\n      return {\n        targetId: container.id,\n        amount: containerAmount,\n        percentage: containerPercentage,\n      };\n    });\n  }\n\n  /**\n   * Allocate resources based on custom logic\n   */\n  private allocateCustom(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    // This is a placeholder for custom allocation logic\n    // In a real implementation, this would use more complex rules\n\n    // For now, we'll use a combination of priority and demand\n    const priorityAllocations = this.allocatePriority(targetIds, resourceType, amount);\n    const demandAllocations = this.allocateDemandBased(targetIds, resourceType, amount);\n\n    // Combine allocations (50% priority, 50% demand)\n    return targetIds.map(id => {\n      const priorityAllocation = priorityAllocations.find(a => a.targetId === id);\n      const demandAllocation = demandAllocations.find(a => a.targetId === id);\n\n      const combinedAmount =\n        (priorityAllocation?.amount || 0) * 0.5 + (demandAllocation?.amount || 0) * 0.5;\n\n      const combinedPercentage =\n        (priorityAllocation?.percentage || 0) * 0.5 + (demandAllocation?.percentage || 0) * 0.5;\n\n      return {\n        targetId: id,\n        amount: combinedAmount,\n        percentage: combinedPercentage,\n      };\n    });\n  }\n\n  /**\n   * Get pool by ID\n   */\n  public getPool(id: string): ResourcePool | undefined {\n    return this.pools.get(id);\n  }\n\n  /**\n   * Get all pools\n   */\n  public getAllPools(): ResourcePool[] {\n    return Array.from(this.pools.values());\n  }\n\n  /**\n   * Get pools by type\n   */\n  public getPoolsByType(type: ResourceType): ResourcePool[] {\n    return Array.from(this.pools.values()).filter(pool => pool.type === type);\n  }\n\n  /**\n   * Get distribution rules by pool ID\n   */\n  public getDistributionRulesByPool(poolId: string): PoolDistributionRule[] {\n    return Array.from(this.distributionRules.values()).filter(rule => rule.poolId === poolId);\n  }\n\n  /**\n   * Get allocation history\n   */\n  public getAllocationHistory(): PoolAllocationResult[] {\n    return [...this.allocationHistory];\n  }\n\n  /**\n   * Get allocation history by pool ID\n   */\n  public getAllocationHistoryByPool(poolId: string): PoolAllocationResult[] {\n    return this.allocationHistory.filter(result => result.poolId === poolId);\n  }\n\n  /**\n   * Get allocation history by resource type\n   */\n  public getAllocationHistoryByType(type: ResourceType): PoolAllocationResult[] {\n    return this.allocationHistory.filter(result => result.resourceType === type);\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.pools.clear();\n    this.containers.clear();\n    this.distributionRules.clear();\n    this.resourceStates.clear();\n    this.allocationHistory = [];\n  }\n\n  /**\n   * Transfer resources directly between containers\n   */\n  public transferDirectly(\n    sourceId: string,\n    targetId: string,\n    resourceType: ResourceType,\n    amount: number\n  ): boolean {\n    const sourceContainer = this.containers.get(sourceId);\n    const targetContainer = this.containers.get(targetId);\n\n    if (!sourceContainer || !targetContainer) {\n      console.error(`Source or target container not found: ${sourceId}, ${targetId}`);\n      return false;\n    }\n\n    // Initialize resources maps if they don't exist\n    if (!sourceContainer.resources) {\n      sourceContainer.resources = new Map<ResourceType, number>();\n    }\n\n    if (!targetContainer.resources) {\n      targetContainer.resources = new Map<ResourceType, number>();\n    }\n\n    // Check if source has enough resources\n    const sourceAmount = sourceContainer.resources.get(resourceType) || 0;\n    if (sourceAmount < amount) {\n      console.error(`Insufficient ${resourceType} in source container ${sourceId}`);\n      return false;\n    }\n\n    // Transfer resources\n    const targetAmount = targetContainer.resources.get(resourceType) || 0;\n\n    // Update source and target containers\n    sourceContainer.resources.set(resourceType, sourceAmount - amount);\n    targetContainer.resources.set(resourceType, targetAmount + amount);\n\n    return true;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceStorageManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'score' is assigned a value but never used.","line":276,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'score' is assigned a value but never used.","line":325,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":435,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":435,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'amount' is defined but never used.","line":435,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":435,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResourceState, ResourceTransfer, ResourceType } from '../../types/resources/ResourceTypes';\n\n/**\n * Storage allocation strategy\n */\nexport type StorageAllocationStrategy = 'balanced' | 'prioritized' | 'dedicated';\n\n/**\n * Storage container configuration\n */\nexport interface StorageContainerConfig {\n  id: string;\n  name: string;\n  type: 'container' | 'pool' | 'storage';\n  capacity: number;\n  resourceTypes: ResourceType[];\n  priority: number;\n  location?: string;\n  efficiency?: number;\n  accessSpeed?: number;\n  upgradeLevel?: number;\n  maxUpgradeLevel?: number;\n}\n\n/**\n * Storage container state\n */\nexport interface StorageContainerState {\n  config: StorageContainerConfig;\n  resources: Map<ResourceType, ResourceState>;\n  totalStored: number;\n  lastUpdated: number;\n}\n\n/**\n * Storage allocation\n */\nexport interface StorageAllocation {\n  containerId: string;\n  resourceType: ResourceType;\n  amount: number;\n  percentage: number;\n}\n\n/**\n * Storage overflow policy\n */\nexport type StorageOverflowPolicy = 'reject' | 'redistribute' | 'convert' | 'discard';\n\n/**\n * Storage manager configuration\n */\nexport interface StorageManagerConfig {\n  defaultAllocationStrategy: StorageAllocationStrategy;\n  overflowPolicy: StorageOverflowPolicy;\n  autoRebalance: boolean;\n  rebalanceThreshold: number;\n  priorityWeights: {\n    containerPriority: number;\n    resourcePriority: number;\n    fillPercentage: number;\n  };\n}\n\n/**\n * Resource Storage Manager\n * Manages resource storage containers, pools, and allocation strategies\n */\nexport class ResourceStorageManager {\n  private containers: Map<string, StorageContainerState>;\n  private resourcePriorities: Map<ResourceType, number>;\n  private config: StorageManagerConfig;\n  private transferHistory: ResourceTransfer[];\n  private maxHistorySize: number;\n\n  constructor(config?: Partial<StorageManagerConfig>) {\n    this.containers = new Map();\n    this.resourcePriorities = new Map();\n    this.transferHistory = [];\n    this.maxHistorySize = 100;\n\n    // Default configuration\n    this.config = {\n      defaultAllocationStrategy: 'balanced',\n      overflowPolicy: 'redistribute',\n      autoRebalance: true,\n      rebalanceThreshold: 0.2, // 20% imbalance triggers rebalance\n      priorityWeights: {\n        containerPriority: 0.4,\n        resourcePriority: 0.4,\n        fillPercentage: 0.2,\n      },\n      ...config,\n    };\n\n    // Set default resource priorities\n    this.setDefaultResourcePriorities();\n  }\n\n  /**\n   * Set default resource priorities\n   */\n  private setDefaultResourcePriorities(): void {\n    // Higher number = higher priority\n    this.resourcePriorities.set('energy', 10);\n    this.resourcePriorities.set('minerals', 8);\n    // Replace non-existent resource types with valid ones\n    this.resourcePriorities.set('population', 9);\n    this.resourcePriorities.set('research', 10);\n    this.resourcePriorities.set('plasma', 10);\n    this.resourcePriorities.set('gas', 7);\n    this.resourcePriorities.set('exotic', 6);\n    this.resourcePriorities.set('research', 5);\n    this.resourcePriorities.set('population', 10);\n  }\n\n  /**\n   * Register a storage container\n   */\n  public registerContainer(config: StorageContainerConfig): boolean {\n    if (!config.id || !config.resourceTypes || config.resourceTypes.length === 0) {\n      console.error('Invalid storage container configuration:', config);\n      return false;\n    }\n\n    // Initialize resource states\n    const resources = new Map<ResourceType, ResourceState>();\n\n    for (const type of config.resourceTypes) {\n      resources.set(type, {\n        current: 0,\n        min: 0,\n        max: config.capacity / config.resourceTypes.length, // Divide capacity equally by default\n        production: 0,\n        consumption: 0,\n      });\n    }\n\n    this.containers.set(config.id, {\n      config,\n      resources,\n      totalStored: 0,\n      lastUpdated: Date.now(),\n    });\n\n    return true;\n  }\n\n  /**\n   * Unregister a storage container\n   */\n  public unregisterContainer(id: string): boolean {\n    if (!this.containers.has(id)) {\n      return false;\n    }\n\n    this.containers.delete(id);\n    return true;\n  }\n\n  /**\n   * Get a storage container\n   */\n  public getContainer(id: string): StorageContainerState | undefined {\n    return this.containers.get(id);\n  }\n\n  /**\n   * Get all storage containers\n   */\n  public getAllContainers(): StorageContainerState[] {\n    return Array.from(this.containers.values());\n  }\n\n  /**\n   * Get containers by resource type\n   */\n  public getContainersByResourceType(type: ResourceType): StorageContainerState[] {\n    return Array.from(this.containers.values()).filter(container => container.resources.has(type));\n  }\n\n  /**\n   * Store resource in a specific container\n   */\n  public storeResource(containerId: string, type: ResourceType, amount: number): number {\n    const container = this.containers.get(containerId);\n    if (!container || !container.resources.has(type) || amount <= 0) {\n      return 0;\n    }\n\n    const resourceState = container.resources.get(type)!;\n    const availableSpace = resourceState.max - resourceState.current;\n\n    if (availableSpace <= 0) {\n      return 0;\n    }\n\n    const amountToStore = Math.min(amount, availableSpace);\n\n    resourceState.current += amountToStore;\n\n    container.totalStored += amountToStore;\n    container.lastUpdated = Date.now();\n\n    // Record transfer\n    this.recordTransfer({\n      type,\n      source: 'external',\n      target: containerId,\n      amount: amountToStore,\n      timestamp: Date.now(),\n    });\n\n    return amountToStore;\n  }\n\n  /**\n   * Retrieve resource from a specific container\n   */\n  public retrieveResource(containerId: string, type: ResourceType, amount: number): number {\n    const container = this.containers.get(containerId);\n    if (!container || !container.resources.has(type) || amount <= 0) {\n      return 0;\n    }\n\n    const resourceState = container.resources.get(type)!;\n\n    if (resourceState.current <= 0) {\n      return 0;\n    }\n\n    const amountToRetrieve = Math.min(amount, resourceState.current);\n\n    resourceState.current -= amountToRetrieve;\n\n    container.totalStored -= amountToRetrieve;\n    container.lastUpdated = Date.now();\n\n    // Record transfer\n    this.recordTransfer({\n      type,\n      source: containerId,\n      target: 'external',\n      amount: amountToRetrieve,\n      timestamp: Date.now(),\n    });\n\n    return amountToRetrieve;\n  }\n\n  /**\n   * Store resource in the best available container\n   */\n  public storeResourceOptimal(type: ResourceType, amount: number): number {\n    if (amount <= 0) {\n      return 0;\n    }\n\n    // Get all containers that can store this resource type\n    const availableContainers = this.getContainersByResourceType(type);\n\n    if (availableContainers.length === 0) {\n      return 0;\n    }\n\n    // Calculate scores for each container based on the allocation strategy\n    const containerScores = this.calculateContainerScores(availableContainers, type);\n\n    // Sort containers by score (highest first)\n    const sortedContainers = [...containerScores].sort((a, b) => b.score - a.score);\n\n    let remainingAmount = amount;\n    let totalStored = 0;\n\n    // Try to store in containers by score order\n    for (const { containerId, score } of sortedContainers) {\n      if (remainingAmount <= 0) {\n        break;\n      }\n\n      const amountStored = this.storeResource(containerId, type, remainingAmount);\n      totalStored += amountStored;\n      remainingAmount -= amountStored;\n    }\n\n    // Handle overflow if needed\n    if (remainingAmount > 0 && this.config.overflowPolicy !== 'reject') {\n      totalStored += this.handleOverflow(type, remainingAmount);\n    }\n\n    // Check if rebalancing is needed\n    if (this.config.autoRebalance) {\n      this.checkAndRebalance(type);\n    }\n\n    return totalStored;\n  }\n\n  /**\n   * Retrieve resource from the best available container\n   */\n  public retrieveResourceOptimal(type: ResourceType, amount: number): number {\n    if (amount <= 0) {\n      return 0;\n    }\n\n    // Get all containers that store this resource type\n    const availableContainers = this.getContainersByResourceType(type);\n\n    if (availableContainers.length === 0) {\n      return 0;\n    }\n\n    // Calculate scores for each container based on the allocation strategy\n    // For retrieval, we want to prioritize containers with higher fill percentage\n    const containerScores = this.calculateContainerScores(availableContainers, type, true);\n\n    // Sort containers by score (highest first)\n    const sortedContainers = [...containerScores].sort((a, b) => b.score - a.score);\n\n    let remainingAmount = amount;\n    let totalRetrieved = 0;\n\n    // Try to retrieve from containers by score order\n    for (const { containerId, score } of sortedContainers) {\n      if (remainingAmount <= 0) {\n        break;\n      }\n\n      const amountRetrieved = this.retrieveResource(containerId, type, remainingAmount);\n      totalRetrieved += amountRetrieved;\n      remainingAmount -= amountRetrieved;\n    }\n\n    return totalRetrieved;\n  }\n\n  /**\n   * Calculate container scores for allocation\n   */\n  private calculateContainerScores(\n    containers: StorageContainerState[],\n    resourceType: ResourceType,\n    forRetrieval = false\n  ): Array<{ containerId: string; score: number }> {\n    const { containerPriority, resourcePriority, fillPercentage } = this.config.priorityWeights;\n    const resourcePriorityValue = this.resourcePriorities.get(resourceType) || 5;\n\n    return containers.map(container => {\n      const resourceState = container.resources.get(resourceType)!;\n      const fillRatio = resourceState.current / resourceState.max;\n\n      // For storage, we prefer containers with lower fill percentage\n      // For retrieval, we prefer containers with higher fill percentage\n      const fillScore = forRetrieval ? fillRatio : 1 - fillRatio;\n\n      // Calculate weighted score\n      const score =\n        container.config.priority * containerPriority +\n        resourcePriorityValue * resourcePriority +\n        fillScore * fillPercentage;\n\n      return {\n        containerId: container.config.id,\n        score,\n      };\n    });\n  }\n\n  /**\n   * Handle overflow based on policy\n   */\n  private handleOverflow(type: ResourceType, amount: number): number {\n    switch (this.config.overflowPolicy) {\n      case 'redistribute':\n        return this.redistributeOverflow(type, amount);\n\n      case 'convert':\n        return this.convertOverflow(type, amount);\n\n      case 'discard':\n        // Just discard the overflow\n        return 0;\n\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Redistribute overflow by expanding container capacity\n   */\n  private redistributeOverflow(type: ResourceType, amount: number): number {\n    // Find containers that can store this resource type\n    const relevantContainers = this.getContainersByResourceType(type);\n\n    if (relevantContainers.length === 0) {\n      return 0;\n    }\n\n    // Sort by upgrade potential (containers with lower upgrade level first)\n    const upgradableContainers = relevantContainers\n      .filter(\n        container =>\n          container.config.upgradeLevel !== undefined &&\n          container.config.maxUpgradeLevel !== undefined &&\n          container.config.upgradeLevel < container.config.maxUpgradeLevel\n      )\n      .sort((a, b) => (a.config.upgradeLevel || 0) - (b.config.upgradeLevel || 0));\n\n    if (upgradableContainers.length === 0) {\n      return 0;\n    }\n\n    // Upgrade the first container\n    const containerToUpgrade = upgradableContainers[0];\n    const resourceState = containerToUpgrade.resources.get(type)!;\n\n    // Increase capacity by 20%\n    const capacityIncrease = resourceState.max * 0.2;\n    resourceState.max += capacityIncrease;\n\n    // Increment upgrade level\n    if (containerToUpgrade.config.upgradeLevel !== undefined) {\n      containerToUpgrade.config.upgradeLevel += 1;\n    }\n\n    // Try to store again\n    return this.storeResource(containerToUpgrade.config.id, type, amount);\n  }\n\n  /**\n   * Convert overflow to another resource type\n   */\n  private convertOverflow(type: ResourceType, amount: number): number {\n    // This is a placeholder for resource conversion logic\n    // In a real implementation, this would convert the resource to another type\n    // based on conversion rules\n\n    // For now, we'll just return 0 (no storage)\n    return 0;\n  }\n\n  /**\n   * Check if rebalancing is needed and perform it\n   */\n  private checkAndRebalance(type: ResourceType): void {\n    const containers = this.getContainersByResourceType(type);\n\n    if (containers.length <= 1) {\n      return;\n    }\n\n    // Calculate fill ratios\n    const fillRatios = containers.map(container => {\n      const resourceState = container.resources.get(type)!;\n      return {\n        id: container.config.id,\n        fillRatio: resourceState.current / resourceState.max,\n      };\n    });\n\n    // Find min and max fill ratios\n    const minFill = Math.min(...fillRatios.map(r => r.fillRatio));\n    const maxFill = Math.max(...fillRatios.map(r => r.fillRatio));\n\n    // Check if imbalance exceeds threshold\n    if (maxFill - minFill > this.config.rebalanceThreshold) {\n      this.rebalanceContainers(type, containers);\n    }\n  }\n\n  /**\n   * Rebalance resources between containers\n   */\n  private rebalanceContainers(type: ResourceType, containers: StorageContainerState[]): void {\n    // Calculate target fill ratio (average)\n    let totalCurrent = 0;\n    let totalMax = 0;\n\n    for (const container of containers) {\n      const resourceState = container.resources.get(type)!;\n      totalCurrent += resourceState.current;\n      totalMax += resourceState.max;\n    }\n\n    const targetFillRatio = totalCurrent / totalMax;\n\n    // Calculate transfers needed\n    for (const container of containers) {\n      const resourceState = container.resources.get(type)!;\n      const currentFillRatio = resourceState.current / resourceState.max;\n\n      if (Math.abs(currentFillRatio - targetFillRatio) < 0.05) {\n        // Close enough, skip\n        continue;\n      }\n\n      const targetAmount = resourceState.max * targetFillRatio;\n      const difference = targetAmount - resourceState.current;\n\n      if (difference > 0) {\n        // Need to add resources\n        // Find container with excess\n        const sourceContainer = containers.find(c => {\n          const rs = c.resources.get(type)!;\n          return rs.current / rs.max > targetFillRatio + 0.05;\n        });\n\n        if (sourceContainer) {\n          const sourceState = sourceContainer.resources.get(type)!;\n          const availableToTransfer = sourceState.current - sourceState.max * targetFillRatio;\n          const transferAmount = Math.min(difference, availableToTransfer);\n\n          // Transfer resources\n          this.transferBetweenContainers(\n            sourceContainer.config.id,\n            container.config.id,\n            type,\n            transferAmount\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Transfer resources between containers\n   */\n  public transferBetweenContainers(\n    sourceId: string,\n    targetId: string,\n    type: ResourceType,\n    amount: number\n  ): number {\n    if (amount <= 0 || sourceId === targetId) {\n      return 0;\n    }\n\n    // Retrieve from source\n    const retrievedAmount = this.retrieveResource(sourceId, type, amount);\n\n    if (retrievedAmount <= 0) {\n      return 0;\n    }\n\n    // Store in target\n    const storedAmount = this.storeResource(targetId, type, retrievedAmount);\n\n    // If not all was stored, return remainder to source\n    if (storedAmount < retrievedAmount) {\n      const remainder = retrievedAmount - storedAmount;\n      this.storeResource(sourceId, type, remainder);\n    }\n\n    // Record transfer\n    this.recordTransfer({\n      type,\n      source: sourceId,\n      target: targetId,\n      amount: storedAmount,\n      timestamp: Date.now(),\n    });\n\n    return storedAmount;\n  }\n\n  /**\n   * Record a transfer in history\n   */\n  private recordTransfer(transfer: ResourceTransfer): void {\n    this.transferHistory.push(transfer);\n\n    // Trim history if needed\n    if (this.transferHistory.length > this.maxHistorySize) {\n      this.transferHistory = this.transferHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Get transfer history\n   */\n  public getTransferHistory(): ResourceTransfer[] {\n    return [...this.transferHistory];\n  }\n\n  /**\n   * Get transfer history for a specific resource type\n   */\n  public getTransferHistoryByType(type: ResourceType): ResourceTransfer[] {\n    return this.transferHistory.filter(transfer => transfer.type === type);\n  }\n\n  /**\n   * Get total stored amount of a resource type\n   */\n  public getTotalStored(type: ResourceType): number {\n    let total = 0;\n\n    for (const container of this.containers.values()) {\n      const resourceState = container.resources.get(type);\n      if (resourceState) {\n        total += resourceState.current;\n      }\n    }\n\n    return total;\n  }\n\n  /**\n   * Get total capacity for a resource type\n   */\n  public getTotalCapacity(type: ResourceType): number {\n    let total = 0;\n\n    for (const container of this.containers.values()) {\n      const resourceState = container.resources.get(type);\n      if (resourceState) {\n        total += resourceState.max;\n      }\n    }\n\n    return total;\n  }\n\n  /**\n   * Set resource priority\n   */\n  public setResourcePriority(type: ResourceType, priority: number): void {\n    this.resourcePriorities.set(type, priority);\n  }\n\n  /**\n   * Get resource priority\n   */\n  public getResourcePriority(type: ResourceType): number {\n    return this.resourcePriorities.get(type) || 5;\n  }\n\n  /**\n   * Update container configuration\n   */\n  public updateContainerConfig(id: string, config: Partial<StorageContainerConfig>): boolean {\n    const container = this.containers.get(id);\n    if (!container) {\n      return false;\n    }\n\n    // Update config\n    container.config = {\n      ...container.config,\n      ...config,\n    };\n\n    return true;\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.containers.clear();\n    this.resourcePriorities.clear();\n    this.transferHistory = [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceThresholdManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is assigned a value but never used.","line":190,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport {\n  ResourceAlert,\n  ResourceState,\n  ResourceThreshold,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport { validateResourceThreshold } from '../../utils/resources/resourceValidation';\n\n// Map our custom event types to the standard ModuleEventType\nconst RESOURCE_UPDATE: ModuleEventType = 'RESOURCE_UPDATED';\nconst RESOURCE_THRESHOLD_TRIGGERED: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_THRESHOLD_RESOLVED: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_PRODUCTION_ADJUST: ModuleEventType = 'RESOURCE_PRODUCTION_REGISTERED';\nconst RESOURCE_CONSUMPTION_ADJUST: ModuleEventType = 'RESOURCE_CONSUMPTION_REGISTERED';\nconst RESOURCE_TRANSFER_REQUEST: ModuleEventType = 'RESOURCE_TRANSFERRED';\nconst NOTIFICATION_CREATE: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_ALERT_CREATED: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_ALERT_CLEARED: ModuleEventType = 'STATUS_CHANGED';\n\n// Resource manager module ID and type\nconst RESOURCE_MANAGER_ID = 'resource-threshold-manager';\nconst RESOURCE_MANAGER_TYPE: ModuleType = 'resource-manager';\n\n/**\n * Threshold action types\n */\nexport type ThresholdActionType = 'production' | 'consumption' | 'transfer' | 'notification';\n\n/**\n * Threshold action\n */\nexport interface ThresholdAction {\n  type: ThresholdActionType;\n  target: string;\n  amount?: number;\n  message?: string;\n  priority?: number;\n}\n\n/**\n * Threshold configuration\n */\nexport interface ThresholdConfig {\n  id: string;\n  threshold: ResourceThreshold;\n  actions: ThresholdAction[];\n  enabled: boolean;\n  autoResolve?: boolean;\n}\n\n/**\n * Threshold status\n */\nexport type ThresholdStatus = 'inactive' | 'warning' | 'critical' | 'resolved';\n\n/**\n * Threshold state\n */\nexport interface ThresholdState {\n  config: ThresholdConfig;\n  status: ThresholdStatus;\n  lastTriggered?: number;\n  lastResolved?: number;\n  actionsTaken: number;\n}\n\n/**\n * Resource Threshold Manager\n * Manages resource thresholds and triggers actions when thresholds are crossed\n */\nexport class ResourceThresholdManager {\n  private thresholds: Map<string, ThresholdConfig>;\n  private thresholdStates: Map<string, ThresholdState>;\n  private activeAlerts: Map<string, ResourceAlert>;\n  private resourceStates: Map<ResourceType, ResourceState>;\n  private checkInterval: number;\n  private intervalId: NodeJS.Timeout | null;\n  private lastCheck: number;\n\n  constructor(checkInterval = 1000) {\n    this.thresholds = new Map();\n    this.thresholdStates = new Map();\n    this.activeAlerts = new Map();\n    this.resourceStates = new Map();\n    this.checkInterval = checkInterval;\n    this.intervalId = null;\n    this.lastCheck = Date.now();\n\n    // Register event listeners\n    moduleEventBus.subscribe(RESOURCE_UPDATE, this.handleResourceUpdate);\n  }\n\n  /**\n   * Start threshold monitoring\n   */\n  public start(): void {\n    if (this.intervalId) {\n      return;\n    }\n\n    this.intervalId = setInterval(() => {\n      this.checkThresholds();\n    }, this.checkInterval);\n  }\n\n  /**\n   * Stop threshold monitoring\n   */\n  public stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  /**\n   * Register a threshold configuration\n   */\n  public registerThreshold(config: ThresholdConfig): boolean {\n    if (!config.id || !validateResourceThreshold(config.threshold)) {\n      console.error('Invalid threshold configuration:', config);\n      return false;\n    }\n\n    this.thresholds.set(config.id, config);\n    this.thresholdStates.set(config.id, {\n      config,\n      status: 'inactive',\n      actionsTaken: 0,\n    });\n\n    return true;\n  }\n\n  /**\n   * Unregister a threshold configuration\n   */\n  public unregisterThreshold(id: string): boolean {\n    if (!this.thresholds.has(id)) {\n      return false;\n    }\n\n    this.thresholds.delete(id);\n    this.thresholdStates.delete(id);\n    return true;\n  }\n\n  /**\n   * Enable a threshold\n   */\n  public enableThreshold(id: string): boolean {\n    const config = this.thresholds.get(id);\n    if (!config) {\n      return false;\n    }\n\n    config.enabled = true;\n    return true;\n  }\n\n  /**\n   * Disable a threshold\n   */\n  public disableThreshold(id: string): boolean {\n    const config = this.thresholds.get(id);\n    if (!config) {\n      return false;\n    }\n\n    config.enabled = false;\n    return true;\n  }\n\n  /**\n   * Update resource state\n   */\n  private handleResourceUpdate = (event: ModuleEvent): void => {\n    if (event.data && event.data.type && event.data.state) {\n      this.resourceStates.set(event.data.type, event.data.state);\n    }\n  };\n\n  /**\n   * Check all thresholds\n   */\n  private checkThresholds(): void {\n    const now = Date.now();\n    const deltaTime = now - this.lastCheck;\n    this.lastCheck = now;\n\n    // Convert Map entries to array to avoid MapIterator error\n    const thresholdEntries = Array.from(this.thresholds.entries());\n\n    for (let i = 0; i < thresholdEntries.length; i++) {\n      const [id, config] = thresholdEntries[i];\n\n      if (!config.enabled) {\n        continue;\n      }\n\n      const state = this.thresholdStates.get(id);\n      if (!state) {\n        continue;\n      }\n\n      const resourceState = this.resourceStates.get(config.threshold.type);\n      if (!resourceState) {\n        continue;\n      }\n\n      const isTriggered = this.isThresholdTriggered(config.threshold, resourceState);\n\n      if (isTriggered && state.status === 'inactive') {\n        // Threshold triggered\n        state.status = this.getThresholdSeverity(config.threshold, resourceState);\n        state.lastTriggered = now;\n        this.executeThresholdActions(config, state.status);\n        state.actionsTaken++;\n\n        // Create alert\n        this.createAlert(config, state.status);\n\n        // Emit event\n        moduleEventBus.emit({\n          type: RESOURCE_THRESHOLD_TRIGGERED,\n          moduleId: RESOURCE_MANAGER_ID,\n          moduleType: RESOURCE_MANAGER_TYPE,\n          timestamp: now,\n          data: {\n            id,\n            type: config.threshold.type,\n            status: state.status,\n            timestamp: now,\n            severity: state.status === 'critical' ? 'high' : 'medium',\n          },\n        });\n      } else if (!isTriggered && state.status !== 'inactive') {\n        // Threshold resolved\n        state.status = 'resolved';\n        state.lastResolved = now;\n\n        // Clear alert if auto-resolve is enabled\n        if (config.autoResolve) {\n          this.clearAlert(id);\n        }\n\n        // Emit event\n        moduleEventBus.emit({\n          type: RESOURCE_THRESHOLD_RESOLVED,\n          moduleId: RESOURCE_MANAGER_ID,\n          moduleType: RESOURCE_MANAGER_TYPE,\n          timestamp: now,\n          data: {\n            id,\n            type: config.threshold.type,\n            timestamp: now,\n            severity: 'info',\n          },\n        });\n\n        // Reset to inactive after a short delay\n        setTimeout(() => {\n          if (state.status === 'resolved') {\n            state.status = 'inactive';\n          }\n        }, 5000);\n      }\n    }\n  }\n\n  /**\n   * Check if a threshold is triggered\n   */\n  private isThresholdTriggered(threshold: ResourceThreshold, state: ResourceState): boolean {\n    if (threshold.min !== undefined && state.current < threshold.min) {\n      return true;\n    }\n\n    if (threshold.max !== undefined && state.current > threshold.max) {\n      return true;\n    }\n\n    if (threshold.target !== undefined) {\n      const deviation = Math.abs(state.current - threshold.target);\n      const maxDeviation = threshold.target * 0.1; // 10% deviation\n\n      if (deviation > maxDeviation) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get threshold severity based on how far the value is from the threshold\n   */\n  private getThresholdSeverity(\n    threshold: ResourceThreshold,\n    state: ResourceState\n  ): ThresholdStatus {\n    if (threshold.min !== undefined && state.current < threshold.min) {\n      const ratio = state.current / threshold.min;\n\n      if (ratio < 0.5) {\n        return 'critical';\n      } else {\n        return 'warning';\n      }\n    }\n\n    if (threshold.max !== undefined && state.current > threshold.max) {\n      const ratio = state.current / threshold.max;\n\n      if (ratio > 1.5) {\n        return 'critical';\n      } else {\n        return 'warning';\n      }\n    }\n\n    if (threshold.target !== undefined) {\n      const deviation = Math.abs(state.current - threshold.target);\n      const deviationRatio = deviation / threshold.target;\n\n      if (deviationRatio > 0.25) {\n        return 'critical';\n      } else {\n        return 'warning';\n      }\n    }\n\n    return 'warning';\n  }\n\n  /**\n   * Execute threshold actions\n   */\n  private executeThresholdActions(config: ThresholdConfig, status: ThresholdStatus): void {\n    const now = Date.now();\n\n    for (const action of config.actions) {\n      switch (action.type) {\n        case 'production':\n          moduleEventBus.emit({\n            type: RESOURCE_PRODUCTION_ADJUST,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: config.threshold.type,\n              target: action.target,\n              amount: action.amount || 0,\n              priority: action.priority || 1,\n              severity: 'info',\n            },\n          });\n          break;\n\n        case 'consumption':\n          moduleEventBus.emit({\n            type: RESOURCE_CONSUMPTION_ADJUST,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: config.threshold.type,\n              target: action.target,\n              amount: action.amount || 0,\n              priority: action.priority || 1,\n              severity: 'info',\n            },\n          });\n          break;\n\n        case 'transfer':\n          moduleEventBus.emit({\n            type: RESOURCE_TRANSFER_REQUEST,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: config.threshold.type,\n              target: action.target,\n              amount: action.amount || 0,\n              priority: action.priority || 1,\n              severity: 'info',\n            },\n          });\n          break;\n\n        case 'notification':\n          moduleEventBus.emit({\n            type: NOTIFICATION_CREATE,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: 'resource',\n              message: action.message || `Resource ${config.threshold.type} threshold triggered`,\n              severity: status === 'critical' ? 'high' : 'medium',\n              timestamp: now,\n            },\n          });\n          break;\n      }\n    }\n  }\n\n  /**\n   * Create a resource alert\n   */\n  private createAlert(config: ThresholdConfig, status: ThresholdStatus): void {\n    const now = Date.now();\n    const alert: ResourceAlert = {\n      id: config.id,\n      type: config.threshold.type,\n      threshold: config.threshold,\n      message: `Resource ${config.threshold.type} threshold triggered`,\n      severity: status === 'critical' ? 'critical' : 'medium',\n      autoResolve: config.autoResolve,\n      actions: config.actions\n        .filter(action => action.type !== 'notification') // Filter out notification actions\n        .map(action => ({\n          type: action.type as 'production' | 'consumption' | 'transfer',\n          target: action.target,\n          amount: action.amount || 0,\n        })),\n    };\n\n    this.activeAlerts.set(config.id, alert);\n\n    moduleEventBus.emit({\n      type: RESOURCE_ALERT_CREATED,\n      moduleId: RESOURCE_MANAGER_ID,\n      moduleType: RESOURCE_MANAGER_TYPE,\n      timestamp: now,\n      data: {\n        ...alert,\n        severity: status === 'critical' ? 'high' : 'medium',\n      },\n    });\n  }\n\n  /**\n   * Clear a resource alert\n   */\n  private clearAlert(id: string): void {\n    const now = Date.now();\n    const alert = this.activeAlerts.get(id);\n    if (!alert) {\n      return;\n    }\n\n    this.activeAlerts.delete(id);\n\n    moduleEventBus.emit({\n      type: RESOURCE_ALERT_CLEARED,\n      moduleId: RESOURCE_MANAGER_ID,\n      moduleType: RESOURCE_MANAGER_TYPE,\n      timestamp: now,\n      data: {\n        id,\n        type: alert.type,\n        timestamp: now,\n        severity: 'info',\n      },\n    });\n  }\n\n  /**\n   * Get all active alerts\n   */\n  public getActiveAlerts(): ResourceAlert[] {\n    return Array.from(this.activeAlerts.values());\n  }\n\n  /**\n   * Get all threshold configurations\n   */\n  public getThresholdConfigs(): ThresholdConfig[] {\n    return Array.from(this.thresholds.values());\n  }\n\n  /**\n   * Get all threshold states\n   */\n  public getThresholdStates(): ThresholdState[] {\n    return Array.from(this.thresholdStates.values());\n  }\n\n  /**\n   * Get a specific threshold state\n   */\n  public getThresholdState(id: string): ThresholdState | undefined {\n    return this.thresholdStates.get(id);\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.stop();\n    // Use the unsubscribe function returned by subscribe\n    moduleEventBus.subscribe(RESOURCE_UPDATE, this.handleResourceUpdate)();\n    this.thresholds.clear();\n    this.thresholdStates.clear();\n    this.activeAlerts.clear();\n    this.resourceStates.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceTransferManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/weapons/WeaponEffectManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'particleCount' is assigned a value but never used.","line":104,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":162,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'direction' is defined but never used.","line":163,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":164,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'quality' is defined but never used.","line":165,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":171,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":171,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'direction' is defined but never used.","line":172,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":172,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":173,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'quality' is defined but never used.","line":174,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":180,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":181,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'quality' is defined but never used.","line":182,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":188,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'direction' is defined but never used.","line":189,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":190,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'quality' is defined but never used.","line":191,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weaponId' is assigned a value but never used.","line":223,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Position } from '../../types/core/GameTypes';\nimport { WeaponCategory, WeaponVariant } from '../../types/weapons/WeaponTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { effectLifecycleManager } from '../effects/EffectLifecycleManager';\nimport { particleSystemManager } from '../effects/ParticleSystemManager';\n\ninterface WeaponEffectEvents {\n  effectStarted: { weaponId: string; effectType: string };\n  effectEnded: { weaponId: string; effectType: string };\n  qualityChanged: { weaponId: string; quality: 'low' | 'medium' | 'high' };\n}\n\ninterface WeaponEffectConfig {\n  duration: number;\n  particleCount: number;\n  color: string;\n  size: number;\n  spread: number;\n  speed: number;\n  pattern: 'beam' | 'projectile' | 'explosion' | 'continuous';\n  quality?: 'low' | 'medium' | 'high';\n}\n\nexport class WeaponEffectManager extends EventEmitter<WeaponEffectEvents> {\n  private static instance: WeaponEffectManager;\n  private activeEffects: Map<string, Set<string>>;\n  private effectConfigs: Map<WeaponCategory, Map<WeaponVariant, WeaponEffectConfig>>;\n  private qualitySettings: Map<string, 'low' | 'medium' | 'high'>;\n\n  private constructor() {\n    super();\n    this.activeEffects = new Map();\n    this.effectConfigs = new Map();\n    this.qualitySettings = new Map();\n    this.initializeEffectConfigs();\n  }\n\n  public static getInstance(): WeaponEffectManager {\n    if (!WeaponEffectManager.instance) {\n      WeaponEffectManager.instance = new WeaponEffectManager();\n    }\n    return WeaponEffectManager.instance;\n  }\n\n  private initializeEffectConfigs(): void {\n    // Machine Gun effects\n    this.setEffectConfig('machineGun', 'basic', {\n      duration: 200,\n      particleCount: 10,\n      color: '#ffaa00',\n      size: 2,\n      spread: 0.1,\n      speed: 2,\n      pattern: 'projectile',\n    });\n\n    // Plasma Cannon effects\n    this.setEffectConfig('plasmaCannon', 'basic', {\n      duration: 1000,\n      particleCount: 30,\n      color: '#00ffff',\n      size: 4,\n      spread: 0.2,\n      speed: 1,\n      pattern: 'beam',\n    });\n\n    // Beam Weapon effects\n    this.setEffectConfig('beamWeapon', 'basic', {\n      duration: 2000,\n      particleCount: 50,\n      color: '#ff00ff',\n      size: 3,\n      spread: 0.05,\n      speed: 3,\n      pattern: 'continuous',\n    });\n  }\n\n  private setEffectConfig(\n    category: WeaponCategory,\n    variant: WeaponVariant,\n    config: WeaponEffectConfig\n  ): void {\n    if (!this.effectConfigs.has(category)) {\n      this.effectConfigs.set(category, new Map());\n    }\n    this.effectConfigs.get(category)!.set(variant, config);\n  }\n\n  public createWeaponEffect(\n    weaponId: string,\n    category: WeaponCategory,\n    variant: WeaponVariant,\n    position: Position,\n    direction: number\n  ): string[] {\n    const config = this.effectConfigs.get(category)?.get(variant);\n    if (!config) {\n      return [];\n    }\n\n    const quality = this.qualitySettings.get(weaponId) || 'medium';\n    const particleCount = this.getQualityAdjustedParticleCount(config.particleCount, quality);\n\n    const systemIds: string[] = [];\n\n    // Create main weapon effect\n    const mainEffectId = this.createMainEffect(weaponId, position, direction, config, quality);\n    if (mainEffectId) {\n      systemIds.push(mainEffectId);\n    }\n\n    // Create additional effects based on pattern\n    switch (config.pattern) {\n      case 'beam':\n        systemIds.push(...this.createBeamEffect(position, direction, config, quality));\n        break;\n      case 'explosion':\n        systemIds.push(...this.createExplosionEffect(position, config, quality));\n        break;\n      case 'continuous':\n        systemIds.push(...this.createContinuousEffect(position, direction, config, quality));\n        break;\n    }\n\n    // Register with effect lifecycle manager\n    const effectId = effectLifecycleManager.registerEffect(\n      `weapon-${category}-${variant}`,\n      position,\n      config.duration,\n      systemIds,\n      () => this.cleanupWeaponEffect(weaponId, systemIds)\n    );\n\n    // Track active effects\n    if (!this.activeEffects.has(weaponId)) {\n      this.activeEffects.set(weaponId, new Set());\n    }\n    this.activeEffects.get(weaponId)!.add(effectId);\n\n    this.emit('effectStarted', { weaponId, effectType: `${category}-${variant}` });\n    return systemIds;\n  }\n\n  private getQualityAdjustedParticleCount(\n    baseCount: number,\n    quality: 'low' | 'medium' | 'high'\n  ): number {\n    switch (quality) {\n      case 'low':\n        return Math.floor(baseCount * 0.5);\n      case 'high':\n        return Math.floor(baseCount * 1.5);\n      default:\n        return baseCount;\n    }\n  }\n\n  private createMainEffect(\n    weaponId: string,\n    position: Position,\n    direction: number,\n    config: WeaponEffectConfig,\n    quality: 'low' | 'medium' | 'high'\n  ): string {\n    return `${weaponId}-main-${Date.now()}`;\n  }\n\n  private createBeamEffect(\n    position: Position,\n    direction: number,\n    config: WeaponEffectConfig,\n    quality: 'low' | 'medium' | 'high'\n  ): string[] {\n    return [`beam-${Date.now()}`];\n  }\n\n  private createExplosionEffect(\n    position: Position,\n    config: WeaponEffectConfig,\n    quality: 'low' | 'medium' | 'high'\n  ): string[] {\n    return [`explosion-${Date.now()}`];\n  }\n\n  private createContinuousEffect(\n    position: Position,\n    direction: number,\n    config: WeaponEffectConfig,\n    quality: 'low' | 'medium' | 'high'\n  ): string[] {\n    return [`continuous-${Date.now()}`];\n  }\n\n  private cleanupWeaponEffect(weaponId: string, systemIds: string[]): void {\n    // Remove particle systems\n    systemIds.forEach(id => {\n      particleSystemManager.removeSystem(id);\n    });\n\n    // Update active effects tracking\n    const effects = this.activeEffects.get(weaponId);\n    if (effects) {\n      effects.forEach(effectId => {\n        this.emit('effectEnded', { weaponId, effectType: effectId });\n      });\n      effects.clear();\n    }\n  }\n\n  public setQuality(weaponId: string, quality: 'low' | 'medium' | 'high'): void {\n    this.qualitySettings.set(weaponId, quality);\n    this.emit('qualityChanged', { weaponId, quality });\n  }\n\n  public getActiveEffects(weaponId: string): string[] {\n    return Array.from(this.activeEffects.get(weaponId) || []);\n  }\n\n  public cleanup(): void {\n    // Clean up all active effects\n    for (const [weaponId, effects] of this.activeEffects) {\n      effects.forEach(effectId => {\n        effectLifecycleManager.cleanupEffectsByType(`weapon-${effectId}`);\n      });\n      effects.clear();\n    }\n    this.activeEffects.clear();\n    this.qualitySettings.clear();\n  }\n}\n\n// Export singleton instance\nexport const weaponEffectManager = WeaponEffectManager.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/weapons/WeaponUpgradeManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8453,8456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8453,8456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport {\n  CombatWeaponStats,\n  WeaponCategory,\n  WeaponInstance,\n  WeaponUpgrade,\n  WeaponUpgradeType,\n} from '../../types/weapons/WeaponTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\ninterface WeaponUpgradeEvents {\n  upgradeApplied: { weaponId: string; upgradeId: string };\n  upgradeRemoved: { weaponId: string; upgradeId: string };\n  statsUpdated: { weaponId: string; stats: CombatWeaponStats };\n  specializationUnlocked: { weaponId: string; specializationType: string };\n  experienceGained: { weaponId: string; amount: number };\n}\n\ninterface WeaponSpecialization {\n  id: string;\n  name: string;\n  description: string;\n  requirements: {\n    level: number;\n    upgrades: string[];\n    experience: number;\n  };\n  bonuses: Partial<CombatWeaponStats>;\n  unlocked: boolean;\n}\n\ntype UpgradeTree = {\n  [key in WeaponCategory]: {\n    upgrades: WeaponUpgrade[];\n    specializations: WeaponSpecialization[];\n  };\n};\n\nconst WEAPON_CATEGORIES: WeaponCategory[] = [\n  'machineGun',\n  'gaussCannon',\n  'railGun',\n  'mgss',\n  'rockets',\n  'pointDefense',\n  'flakCannon',\n  'capitalLaser',\n  'torpedoes',\n  'harmonicCannon',\n  'temporalCannon',\n  'quantumCannon',\n  'plasmaCannon',\n  'beamWeapon',\n  'pulseWeapon',\n  'disruptor',\n  'ionCannon',\n];\n\nexport class WeaponUpgradeManager extends EventEmitter<WeaponUpgradeEvents> {\n  private static instance: WeaponUpgradeManager;\n  private upgradeTrees: UpgradeTree;\n  private weaponExperience: Map<string, number> = new Map();\n  private appliedUpgrades: Map<string, Set<string>> = new Map();\n\n  private constructor() {\n    super();\n    this.upgradeTrees = this.initializeUpgradeTrees();\n  }\n\n  public static getInstance(): WeaponUpgradeManager {\n    if (!WeaponUpgradeManager.instance) {\n      WeaponUpgradeManager.instance = new WeaponUpgradeManager();\n    }\n    return WeaponUpgradeManager.instance;\n  }\n\n  private initializeUpgradeTrees(): UpgradeTree {\n    const trees = {} as UpgradeTree;\n\n    // Initialize upgrade trees for each weapon category\n    WEAPON_CATEGORIES.forEach(category => {\n      trees[category] = {\n        upgrades: this.createUpgradesForCategory(category),\n        specializations: this.createSpecializationsForCategory(category),\n      };\n    });\n\n    return trees;\n  }\n\n  private createUpgradesForCategory(category: WeaponCategory): WeaponUpgrade[] {\n    const baseUpgrades: WeaponUpgrade[] = [\n      {\n        id: `${category}-damage-1`,\n        name: 'Enhanced Damage',\n        type: 'damage' as WeaponUpgradeType,\n        description: 'Increases weapon damage output',\n        stats: {\n          damage: 1.2,\n          effects: [], // Maintain the effects array\n        },\n        requirements: { tech: [], resources: [] },\n        unlocked: true,\n      },\n      {\n        id: `${category}-rate-1`,\n        name: 'Rapid Fire',\n        type: 'rate' as WeaponUpgradeType,\n        description: 'Increases rate of fire',\n        stats: {\n          rateOfFire: 1.2,\n          effects: [], // Maintain the effects array\n        },\n        requirements: { tech: [], resources: [] },\n        unlocked: true,\n      },\n      {\n        id: `${category}-accuracy-1`,\n        name: 'Targeting Enhancement',\n        type: 'accuracy' as WeaponUpgradeType,\n        description: 'Improves weapon accuracy',\n        stats: {\n          accuracy: 1.15,\n          effects: [], // Maintain the effects array\n        },\n        requirements: { tech: [], resources: [] },\n        unlocked: true,\n      },\n    ];\n\n    // Add category-specific upgrades\n    switch (category) {\n      case 'plasmaCannon':\n        baseUpgrades.push({\n          id: `${category}-plasma-overcharge`,\n          name: 'Plasma Overcharge',\n          type: 'plasma' as WeaponUpgradeType,\n          description: 'Enhances plasma damage and penetration',\n          stats: {\n            damage: 1.3,\n            effects: [], // Maintain the effects array\n            special: { armorPenetration: 0.4 },\n          },\n          requirements: { tech: [], resources: [] },\n          unlocked: false,\n        });\n        break;\n      case 'beamWeapon':\n        baseUpgrades.push({\n          id: `${category}-beam-focus`,\n          name: 'Beam Focus',\n          type: 'beam' as WeaponUpgradeType,\n          description: 'Increases beam weapon range and accuracy',\n          stats: {\n            range: 1.25,\n            accuracy: 1.2,\n            effects: [], // Maintain the effects array\n          },\n          requirements: { tech: [], resources: [] },\n          unlocked: false,\n        });\n        break;\n      // Add more category-specific upgrades\n    }\n\n    return baseUpgrades;\n  }\n\n  private createSpecializationsForCategory(category: WeaponCategory): WeaponSpecialization[] {\n    const baseSpecializations: WeaponSpecialization[] = [\n      {\n        id: `${category}-specialist`,\n        name: 'Weapon Specialist',\n        description: 'Master of this weapon type',\n        requirements: {\n          level: 3,\n          upgrades: [`${category}-damage-1`, `${category}-accuracy-1`],\n          experience: 1000,\n        },\n        bonuses: {\n          damage: 1.5,\n          accuracy: 1.3,\n          rateOfFire: 1.2,\n        },\n        unlocked: false,\n      },\n    ];\n\n    // Add category-specific specializations\n    switch (category) {\n      case 'plasmaCannon':\n        baseSpecializations.push({\n          id: `${category}-plasma-master`,\n          name: 'Plasma Master',\n          description: 'Expert in plasma weapon systems',\n          requirements: {\n            level: 5,\n            upgrades: [`${category}-plasma-overcharge`],\n            experience: 2000,\n          },\n          bonuses: {\n            damage: 2.0,\n            special: {\n              armorPenetration: 0.6,\n              shieldDamageBonus: 0.4,\n            },\n          },\n          unlocked: false,\n        });\n        break;\n      // Add more category-specific specializations\n    }\n\n    return baseSpecializations;\n  }\n\n  public applyUpgrade(weapon: WeaponInstance, upgradeId: string): boolean {\n    const { category } = weapon.config;\n    const upgrade = this.upgradeTrees[category].upgrades.find(u => u.id === upgradeId);\n\n    if (!upgrade || !upgrade.unlocked) {\n      return false;\n    }\n\n    // Get or create the set of applied upgrades for this weapon\n    let weaponUpgrades = this.appliedUpgrades.get(weapon.config.id);\n    if (!weaponUpgrades) {\n      weaponUpgrades = new Set();\n      this.appliedUpgrades.set(weapon.config.id, weaponUpgrades);\n    }\n\n    // Apply the upgrade\n    weaponUpgrades.add(upgradeId);\n    const updatedStats = this.calculateUpdatedStats(weapon, Array.from(weaponUpgrades));\n\n    // Emit events\n    this.emit('upgradeApplied', { weaponId: weapon.config.id, upgradeId });\n    this.emit('statsUpdated', { weaponId: weapon.config.id, stats: updatedStats });\n\n    // Check for specialization unlocks\n    this.checkSpecializationUnlocks(weapon);\n\n    return true;\n  }\n\n  private calculateUpdatedStats(\n    weapon: WeaponInstance,\n    appliedUpgradeIds: string[]\n  ): CombatWeaponStats {\n    // Create a new stats object with all required properties\n    const updatedStats: CombatWeaponStats = {\n      damage: weapon.config.baseStats.damage,\n      range: weapon.config.baseStats.range,\n      accuracy: weapon.config.baseStats.accuracy,\n      rateOfFire: weapon.config.baseStats.rateOfFire,\n      energyCost: weapon.config.baseStats.energyCost,\n      cooldown: weapon.config.baseStats.cooldown,\n      effects: [...weapon.config.baseStats.effects],\n      special: { ...weapon.config.baseStats.special },\n    };\n\n    const { category } = weapon.config;\n\n    // Get all applied upgrades\n    const appliedUpgrades = appliedUpgradeIds\n      .map(id => this.upgradeTrees[category].upgrades.find(u => u.id === id))\n      .filter((u): u is WeaponUpgrade => u !== undefined);\n\n    // Apply upgrades\n    appliedUpgrades.forEach(upgrade => {\n      Object.entries(upgrade.stats).forEach(([key, value]) => {\n        if (key === 'special' && value && typeof value === 'object') {\n          updatedStats.special = {\n            ...updatedStats.special,\n            ...value,\n          };\n        } else if (key === 'effects' && Array.isArray(value)) {\n          updatedStats.effects = [...updatedStats.effects, ...value];\n        } else if (key !== 'special' && key !== 'effects') {\n          const numericValue = value as number;\n          (updatedStats as any)[key] *= numericValue;\n        }\n      });\n    });\n\n    return updatedStats;\n  }\n\n  public addExperience(weaponId: string, amount: number): void {\n    const currentExp = this.weaponExperience.get(weaponId) || 0;\n    this.weaponExperience.set(weaponId, currentExp + amount);\n\n    // Emit event through module event bus\n    moduleEventBus.emit({\n      type: 'MODULE_UPGRADED',\n      moduleId: weaponId,\n      moduleType: 'hangar', // Changed from 'weapon' to 'hangar' as it's a valid ModuleType\n      timestamp: Date.now(),\n      data: { experience: currentExp + amount },\n    });\n  }\n\n  private checkSpecializationUnlocks(weapon: WeaponInstance): void {\n    const { category } = weapon.config;\n    const weaponId = weapon.config.id;\n    const experience = this.weaponExperience.get(weaponId) || 0;\n    const appliedUpgrades = Array.from(this.appliedUpgrades.get(weaponId) || []);\n\n    this.upgradeTrees[category].specializations.forEach(spec => {\n      if (!spec.unlocked && this.canUnlockSpecialization(spec, experience, appliedUpgrades)) {\n        spec.unlocked = true;\n        this.emit('specializationUnlocked', {\n          weaponId,\n          specializationType: spec.id,\n        });\n      }\n    });\n  }\n\n  private canUnlockSpecialization(\n    spec: WeaponSpecialization,\n    experience: number,\n    appliedUpgrades: string[]\n  ): boolean {\n    return (\n      experience >= spec.requirements.experience &&\n      spec.requirements.upgrades.every(required => appliedUpgrades.includes(required))\n    );\n  }\n\n  public getAvailableUpgrades(weapon: WeaponInstance): WeaponUpgrade[] {\n    const { category } = weapon.config;\n    return this.upgradeTrees[category].upgrades.filter(upgrade => upgrade.unlocked);\n  }\n\n  public getSpecializations(weapon: WeaponInstance): WeaponSpecialization[] {\n    const { category } = weapon.config;\n    return this.upgradeTrees[category].specializations;\n  }\n\n  public cleanup(): void {\n    this.weaponExperience.clear();\n    this.appliedUpgrades.clear();\n  }\n\n  public subscribe<K extends keyof WeaponUpgradeEvents>(\n    event: K,\n    handler: (data: WeaponUpgradeEvents[K]) => void\n  ) {\n    this.on(event, handler);\n    return {\n      unsubscribe: () => {\n        this.off(event, handler);\n      },\n    };\n  }\n\n  public getWeaponExperience(weaponId: string): number {\n    return this.weaponExperience.get(weaponId) || 0;\n  }\n\n  public addWeaponExperience(weaponId: string, amount: number): void {\n    const currentExp = this.getWeaponExperience(weaponId);\n    this.weaponExperience.set(weaponId, currentExp + amount);\n    this.emit('experienceGained', { weaponId, amount });\n  }\n}\n\nexport const weaponUpgradeManager = WeaponUpgradeManager.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/hooks/automation/useAutomation.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3681,3684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3681,3684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3740,3743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3740,3743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { act, renderHook } from '@testing-library/react';\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { useAutomation } from '../../../hooks/automation/useAutomation';\nimport { GlobalRoutine } from '../../../managers/automation/GlobalAutomationManager';\nimport { MessagePriority, SystemId } from '../../../utils/events/EventCommunication';\n\n// Mock the GlobalAutomationManager\nvi.mock('../../../managers/automation/GlobalAutomationManager', () => {\n  const mockRoutines: GlobalRoutine[] = [];\n\n  return {\n    GlobalRoutineType: {\n      'resource-balancing': 'resource-balancing',\n      'performance-optimization': 'performance-optimization',\n      'emergency-response': 'emergency-response',\n      'system-maintenance': 'system-maintenance',\n      'scheduled-task': 'scheduled-task',\n      custom: 'custom',\n    },\n    GlobalAutomationManager: vi.fn().mockImplementation(() => ({\n      initialize: vi.fn(),\n      getAllRoutines: vi.fn().mockImplementation(() => mockRoutines),\n      registerRoutine: vi.fn().mockImplementation((routine: GlobalRoutine) => {\n        mockRoutines.push(routine);\n        return routine.id;\n      }),\n      unregisterRoutine: vi.fn().mockImplementation((id: string) => {\n        const index = mockRoutines.findIndex(r => r.id === id);\n        if (index >= 0) {\n          mockRoutines.splice(index, 1);\n          return true;\n        }\n        return false;\n      }),\n      enableRoutine: vi.fn().mockImplementation((id: string) => {\n        const routine = mockRoutines.find(r => r.id === id);\n        if (routine) {\n          routine.enabled = true;\n          return true;\n        }\n        return false;\n      }),\n      disableRoutine: vi.fn().mockImplementation((id: string) => {\n        const routine = mockRoutines.find(r => r.id === id);\n        if (routine) {\n          routine.enabled = false;\n          return true;\n        }\n        return false;\n      }),\n      getRoutinesByType: vi.fn().mockImplementation((type: string) => {\n        return mockRoutines.filter(r => r.type === type);\n      }),\n      getRoutinesByTag: vi.fn().mockImplementation((tag: string) => {\n        return mockRoutines.filter(r => r.tags.includes(tag));\n      }),\n      getRoutinesBySystem: vi.fn().mockImplementation((system: SystemId) => {\n        return mockRoutines.filter(r => r.systems.includes(system));\n      }),\n      getActiveRoutines: vi.fn().mockImplementation(() => {\n        return mockRoutines.filter(r => r.enabled);\n      }),\n      cleanup: vi.fn(),\n    })),\n  };\n});\n\n// Mock the AutomationManager\nvi.mock('../../../managers/game/AutomationManager', () => ({\n  AutomationManager: vi.fn().mockImplementation(() => ({\n    registerRule: vi.fn(),\n    updateRule: vi.fn(),\n    removeRule: vi.fn(),\n    getRule: vi.fn(),\n    getRulesForModule: vi.fn().mockReturnValue([]),\n  })),\n}));\n\n// Mock the SystemId values\nvi.mock('../../../utils/events/EventCommunication', () => ({\n  MessagePriority: {\n    CRITICAL: 0,\n    HIGH: 1,\n    NORMAL: 2,\n    LOW: 3,\n    BACKGROUND: 4,\n  },\n  SystemId: {\n    'resource-system': 'resource-system',\n    'module-system': 'module-system',\n    'combat-system': 'combat-system',\n    'exploration-system': 'exploration-system',\n    'mining-system': 'mining-system',\n    'tech-system': 'tech-system',\n    'ui-system': 'ui-system',\n    'game-loop': 'game-loop',\n    'event-system': 'event-system',\n  },\n}));\n\ndescribe('useAutomation', () => {\n  // Define system IDs for tests\n  const resourceSystem = 'resource-system' as SystemId;\n  const moduleSystem = 'module-system' as SystemId;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n\n    // Reset the singleton instances\n    (useAutomation as any).globalAutomationManager = null;\n    (useAutomation as any).automationManagerInstance = null;\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should initialize the automation manager', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Verify that the hook initialized properly\n    expect(result.current.isInitialized).toBe(true);\n    expect(result.current.routines).toEqual([]);\n    expect(result.current.activeRoutines).toEqual([]);\n    expect(result.current.automationManager).toBeDefined();\n  });\n\n  it('should create a routine', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create a new routine\n    act(() => {\n      const newRoutine = result.current.createRoutine({\n        name: 'Test Routine',\n        type: 'resource-balancing',\n        description: 'A test routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n\n      // Verify that the routine was created\n      expect(newRoutine).toBeDefined();\n      expect(newRoutine?.name).toBe('Test Routine');\n    });\n\n    // Verify that the routines list was updated\n    expect(result.current.routines.length).toBe(1);\n    expect(result.current.routines[0].name).toBe('Test Routine');\n  });\n\n  it('should enable and disable a routine', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create a new routine (initially disabled)\n    act(() => {\n      result.current.createRoutine({\n        name: 'Test Routine',\n        type: 'resource-balancing',\n        description: 'A test routine',\n        enabled: false,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get the routine ID\n    const routineId = result.current.routines[0].id;\n\n    // Enable the routine\n    act(() => {\n      result.current.enableRoutine(routineId);\n    });\n\n    // Verify that the routine is enabled\n    expect(result.current.routines[0].enabled).toBe(true);\n    expect(result.current.activeRoutines.length).toBe(1);\n\n    // Disable the routine\n    act(() => {\n      result.current.disableRoutine(routineId);\n    });\n\n    // Verify that the routine is disabled\n    expect(result.current.routines[0].enabled).toBe(false);\n    expect(result.current.activeRoutines.length).toBe(0);\n  });\n\n  it('should remove a routine', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create a new routine\n    act(() => {\n      result.current.createRoutine({\n        name: 'Test Routine',\n        type: 'resource-balancing',\n        description: 'A test routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get the routine ID\n    const routineId = result.current.routines[0].id;\n\n    // Remove the routine\n    act(() => {\n      result.current.removeRoutine(routineId);\n    });\n\n    // Verify that the routine was removed\n    expect(result.current.routines.length).toBe(0);\n  });\n\n  it('should filter routines by type', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create routines of different types\n    act(() => {\n      result.current.createRoutine({\n        name: 'Resource Routine',\n        type: 'resource-balancing',\n        description: 'A resource routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n\n      result.current.createRoutine({\n        name: 'Performance Routine',\n        type: 'performance-optimization',\n        description: 'A performance routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get routines by type\n    const resourceRoutines = result.current.getRoutinesByType('resource-balancing');\n    const performanceRoutines = result.current.getRoutinesByType('performance-optimization');\n\n    // Verify the results\n    expect(resourceRoutines.length).toBe(1);\n    expect(resourceRoutines[0].name).toBe('Resource Routine');\n\n    expect(performanceRoutines.length).toBe(1);\n    expect(performanceRoutines[0].name).toBe('Performance Routine');\n  });\n\n  it('should filter routines by tag', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create routines with different tags\n    act(() => {\n      result.current.createRoutine({\n        name: 'Routine 1',\n        type: 'resource-balancing',\n        description: 'A routine with tag1',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['tag1', 'common'],\n      });\n\n      result.current.createRoutine({\n        name: 'Routine 2',\n        type: 'performance-optimization',\n        description: 'A routine with tag2',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['tag2', 'common'],\n      });\n    });\n\n    // Get routines by tag\n    const tag1Routines = result.current.getRoutinesByTag('tag1');\n    const tag2Routines = result.current.getRoutinesByTag('tag2');\n    const commonRoutines = result.current.getRoutinesByTag('common');\n\n    // Verify the results\n    expect(tag1Routines.length).toBe(1);\n    expect(tag1Routines[0].name).toBe('Routine 1');\n\n    expect(tag2Routines.length).toBe(1);\n    expect(tag2Routines[0].name).toBe('Routine 2');\n\n    expect(commonRoutines.length).toBe(2);\n  });\n\n  it('should filter routines by system', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create routines for different systems\n    act(() => {\n      result.current.createRoutine({\n        name: 'Resource System Routine',\n        type: 'resource-balancing',\n        description: 'A resource system routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n\n      result.current.createRoutine({\n        name: 'Module System Routine',\n        type: 'performance-optimization',\n        description: 'A module system routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [moduleSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get routines by system\n    const resourceSystemRoutines = result.current.getRoutinesBySystem(resourceSystem);\n    const moduleSystemRoutines = result.current.getRoutinesBySystem(moduleSystem);\n\n    // Verify the results\n    expect(resourceSystemRoutines.length).toBe(1);\n    expect(resourceSystemRoutines[0].name).toBe('Resource System Routine');\n\n    expect(moduleSystemRoutines.length).toBe(1);\n    expect(moduleSystemRoutines[0].name).toBe('Module System Routine');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/hooks/resources/useResourceTracking.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/automation/GlobalAutomationManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/game/GameLoopManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/module/ModuleManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/module/ModuleUpgradeManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/resource/ResourceFlowManager.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4242,4245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4242,4245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5588,5591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5588,5591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { ResourceFlowManager } from '../../../managers/resource/ResourceFlowManager';\nimport { ResourceFlow, ResourceState, ResourceType } from '../../../types/resources/ResourceTypes';\nimport { validateResourceFlow } from '../../../utils/resources/resourceValidation';\n\n// Import FlowNode and FlowConnection types\nimport type {\n  FlowConnection,\n  FlowNode,\n  FlowNodeType,\n} from '../../../managers/resource/ResourceFlowManager';\n\n// Mock the resourceValidation module\nvi.mock('../../../utils/resources/resourceValidation', () => ({\n  validateResourceFlow: vi.fn().mockImplementation(() => true),\n  validateResourceTransfer: vi.fn().mockImplementation(() => true),\n}));\n\ndescribe('ResourceFlowManager', () => {\n  let flowManager: ResourceFlowManager;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    flowManager = new ResourceFlowManager();\n  });\n\n  afterEach(() => {\n    flowManager.cleanup();\n  });\n\n  it('should create a new instance', () => {\n    expect(flowManager).toBeInstanceOf(ResourceFlowManager);\n  });\n\n  it('should register a node', () => {\n    const node: FlowNode = {\n      id: 'test-node',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerNode(node);\n    expect(result).toBe(true);\n\n    const nodes = flowManager.getNodes();\n    expect(nodes.length).toBe(1);\n    expect(nodes[0].id).toBe('test-node');\n  });\n\n  it('should not register an invalid node', () => {\n    const invalidNode: FlowNode = {\n      id: '',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerNode(invalidNode);\n    expect(result).toBe(false);\n\n    const nodes = flowManager.getNodes();\n    expect(nodes.length).toBe(0);\n  });\n\n  it('should register a connection', () => {\n    // Register nodes first\n    flowManager.registerNode({\n      id: 'source-node',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    flowManager.registerNode({\n      id: 'target-node',\n      type: 'consumer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    const connection: FlowConnection = {\n      id: 'test-connection',\n      source: 'source-node',\n      target: 'target-node',\n      resourceType: 'energy' as ResourceType,\n      maxRate: 10,\n      currentRate: 0,\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerConnection(connection);\n    expect(result).toBe(true);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(1);\n    expect(connections[0].id).toBe('test-connection');\n  });\n\n  it('should not register an invalid connection', () => {\n    const invalidConnection: FlowConnection = {\n      id: '',\n      source: 'source-node',\n      target: 'target-node',\n      resourceType: 'energy' as ResourceType,\n      maxRate: 10,\n      currentRate: 0,\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerConnection(invalidConnection);\n    expect(result).toBe(false);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(0);\n  });\n\n  it('should create a flow', () => {\n    const flow: ResourceFlow = {\n      source: 'source-node',\n      target: 'target-node',\n      resources: [\n        {\n          type: 'energy' as ResourceType,\n          amount: 10,\n          interval: 1000,\n        },\n      ],\n    };\n\n    const result = flowManager.createFlow(flow);\n    expect(result).toBe(true);\n\n    // Verify that nodes and connection were created\n    const nodes = flowManager.getNodes();\n    expect(nodes.length).toBe(2);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(1);\n    expect(connections[0].resourceType).toBe('energy');\n    expect(connections[0].maxRate).toBe(10);\n  });\n\n  it('should not create an invalid flow', () => {\n    // Mock validateResourceFlow to return false for this test\n    (validateResourceFlow as any).mockReturnValueOnce(false);\n\n    const invalidFlow = {\n      source: '',\n      target: 'target-node',\n      resources: [],\n    } as ResourceFlow;\n\n    const result = flowManager.createFlow(invalidFlow);\n    expect(result).toBe(false);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(0);\n  });\n\n  it('should optimize flows', () => {\n    // Register nodes\n    flowManager.registerNode({\n      id: 'producer-1',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    flowManager.registerNode({\n      id: 'consumer-1',\n      type: 'consumer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    // Register connection\n    flowManager.registerConnection({\n      id: 'connection-1',\n      source: 'producer-1',\n      target: 'consumer-1',\n      resourceType: 'energy' as ResourceType,\n      maxRate: 10,\n      currentRate: 0,\n      priority: 1,\n      active: true,\n    });\n\n    // Set resource state using the network property\n    const resourceState: ResourceState = {\n      current: 50,\n      min: 0,\n      max: 100,\n      production: 10,\n      consumption: 5,\n    };\n\n    // Access the network property directly to set the resource state\n    (flowManager as any).network.resourceStates.set('energy', resourceState);\n\n    // Optimize flows\n    const result = flowManager.optimizeFlows();\n\n    expect(result.transfers.length).toBe(1);\n    expect(result.updatedConnections.length).toBe(1);\n    expect(result.transfers[0].type).toBe('energy');\n    expect(result.transfers[0].amount).toBe(10); // maxRate\n  });\n\n  it('should handle transfer history', () => {\n    // Add a transfer to history\n    const transfer = {\n      type: 'energy' as ResourceType,\n      source: 'producer-1',\n      target: 'consumer-1',\n      amount: 10,\n      timestamp: Date.now(),\n    };\n\n    flowManager.addToTransferHistory(transfer);\n\n    const history = flowManager.getTransferHistory();\n    expect(history.length).toBe(1);\n    expect(history[0].type).toBe('energy');\n    expect(history[0].amount).toBe(10);\n  });\n\n  it('should limit transfer history size', () => {\n    // Set a small history size\n    flowManager = new ResourceFlowManager(1000, 5); // 5 history items max\n\n    // Add multiple transfers\n    for (let i = 0; i < 10; i++) {\n      flowManager.addToTransferHistory({\n        type: 'energy' as ResourceType,\n        source: 'producer-1',\n        target: 'consumer-1',\n        amount: i,\n        timestamp: Date.now() + i,\n      });\n    }\n\n    const history = flowManager.getTransferHistory();\n    expect(history.length).toBe(5); // Limited to 5 items\n    expect(history[0].amount).toBe(9); // Most recent first\n    expect(history[4].amount).toBe(5);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/resource/ResourceStorageManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/resource/ResourceThresholdManager.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3934,3937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3934,3937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4300,4303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4300,4303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5320,5323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5320,5323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5419,5422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5419,5422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6036,6039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6036,6039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6134,6137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6134,6137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport {\n  ResourceThresholdManager,\n  ThresholdConfig,\n} from '../../../managers/resource/ResourceThresholdManager';\nimport { ResourceType } from '../../../types/resources/ResourceTypes';\nimport { moduleEventBusMock } from '../../setup';\n\n// Mock the moduleEventBus\nvi.mock('../../../lib/modules/ModuleEvents', () => ({\n  moduleEventBus: moduleEventBusMock,\n}));\n\ndescribe('ResourceThresholdManager', () => {\n  let thresholdManager: ResourceThresholdManager;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    thresholdManager = new ResourceThresholdManager(100); // 100ms check interval for tests\n  });\n\n  afterEach(() => {\n    thresholdManager.cleanup();\n  });\n\n  it('should create a new instance', () => {\n    expect(thresholdManager).toBeInstanceOf(ResourceThresholdManager);\n  });\n\n  it('should register a threshold configuration', () => {\n    const config: ThresholdConfig = {\n      id: 'test-threshold',\n      threshold: {\n        type: 'energy' as ResourceType,\n        min: 10,\n        max: 100,\n        target: 50,\n      },\n      actions: [\n        {\n          type: 'notification',\n          target: 'system',\n          message: 'Energy threshold triggered',\n        },\n      ],\n      enabled: true,\n    };\n\n    const result = thresholdManager.registerThreshold(config);\n    expect(result).toBe(true);\n\n    const states = thresholdManager.getThresholdStates();\n    expect(states.length).toBe(1);\n    expect(states[0].config.id).toBe('test-threshold');\n  });\n\n  it('should not register an invalid threshold configuration', () => {\n    const invalidConfig = {\n      id: '',\n      threshold: {\n        type: 'energy' as ResourceType,\n        min: 10,\n        max: 100,\n      },\n      actions: [],\n      enabled: true,\n    } as ThresholdConfig;\n\n    const result = thresholdManager.registerThreshold(invalidConfig);\n    expect(result).toBe(false);\n\n    const states = thresholdManager.getThresholdStates();\n    expect(states.length).toBe(0);\n  });\n\n  it('should unregister a threshold configuration', () => {\n    const config: ThresholdConfig = {\n      id: 'test-threshold',\n      threshold: {\n        type: 'energy' as ResourceType,\n        min: 10,\n        max: 100,\n        target: 50,\n      },\n      actions: [],\n      enabled: true,\n    };\n\n    thresholdManager.registerThreshold(config);\n    const result = thresholdManager.unregisterThreshold('test-threshold');\n    expect(result).toBe(true);\n\n    const states = thresholdManager.getThresholdStates();\n    expect(states.length).toBe(0);\n  });\n\n  it('should enable and disable a threshold', () => {\n    const config: ThresholdConfig = {\n      id: 'test-threshold',\n      threshold: {\n        type: 'energy' as ResourceType,\n        min: 10,\n        max: 100,\n        target: 50,\n      },\n      actions: [],\n      enabled: false,\n    };\n\n    thresholdManager.registerThreshold(config);\n\n    // Enable\n    const enableResult = thresholdManager.enableThreshold('test-threshold');\n    expect(enableResult).toBe(true);\n\n    const configs = thresholdManager.getThresholdConfigs();\n    expect(configs[0].enabled).toBe(true);\n\n    // Disable\n    const disableResult = thresholdManager.disableThreshold('test-threshold');\n    expect(disableResult).toBe(true);\n\n    const updatedConfigs = thresholdManager.getThresholdConfigs();\n    expect(updatedConfigs[0].enabled).toBe(false);\n  });\n\n  it('should start and stop threshold monitoring', () => {\n    const setIntervalSpy = vi.spyOn(global, 'setInterval');\n    const clearIntervalSpy = vi.spyOn(global, 'clearInterval');\n\n    thresholdManager.start();\n    expect(setIntervalSpy).toHaveBeenCalledTimes(1);\n\n    thresholdManager.stop();\n    expect(clearIntervalSpy).toHaveBeenCalledTimes(1);\n  });\n\n  it('should handle resource updates', () => {\n    // Create a private method accessor for testing\n    const handleResourceUpdate = vi.spyOn(thresholdManager as any, 'handleResourceUpdate');\n\n    // Simulate resource update event\n    const resourceUpdate = {\n      type: 'resource:update',\n      data: {\n        type: 'energy' as ResourceType,\n        current: 20,\n        min: 0,\n        max: 100,\n        production: 5,\n        consumption: 2,\n      },\n    };\n\n    // Manually call the event handler\n    (thresholdManager as any).handleResourceUpdate(resourceUpdate);\n\n    expect(handleResourceUpdate).toHaveBeenCalledWith(resourceUpdate);\n  });\n\n  it('should create and clear alerts', () => {\n    // Register a threshold\n    const config: ThresholdConfig = {\n      id: 'test-threshold',\n      threshold: {\n        type: 'energy' as ResourceType,\n        min: 10,\n        max: 100,\n        target: 50,\n      },\n      actions: [\n        {\n          type: 'notification',\n          target: 'system',\n          message: 'Energy threshold triggered',\n        },\n      ],\n      enabled: true,\n      autoResolve: true,\n    };\n\n    thresholdManager.registerThreshold(config);\n\n    // Simulate resource update that triggers threshold\n    const resourceUpdate = {\n      type: 'resource:update',\n      data: {\n        type: 'energy' as ResourceType,\n        current: 5, // Below min threshold\n        min: 0,\n        max: 100,\n        production: 5,\n        consumption: 2,\n      },\n    };\n\n    // Manually call the event handler\n    (thresholdManager as any).handleResourceUpdate(resourceUpdate);\n\n    // Manually trigger check\n    (thresholdManager as any).checkThresholds();\n\n    // Check if alert was created\n    const alerts = thresholdManager.getActiveAlerts();\n    expect(alerts.length).toBe(1);\n    expect(alerts[0].type).toBe('energy');\n    expect(alerts[0].severity).toBe('critical');\n\n    // Simulate resource update that resolves threshold\n    const resolveUpdate = {\n      type: 'resource:update',\n      data: {\n        type: 'energy' as ResourceType,\n        current: 20, // Above min threshold\n        min: 0,\n        max: 100,\n        production: 5,\n        consumption: 2,\n      },\n    };\n\n    // Manually call the event handler\n    (thresholdManager as any).handleResourceUpdate(resolveUpdate);\n\n    // Manually trigger check\n    (thresholdManager as any).checkThresholds();\n\n    // Check if alert was cleared (due to autoResolve)\n    const updatedAlerts = thresholdManager.getActiveAlerts();\n    expect(updatedAlerts.length).toBe(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventCommunication.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1048,1051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1048,1051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1082,1085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1082,1085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7756,7759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7756,7759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8951,8954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8951,8954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { moduleEventBus } from '../../../lib/modules/ModuleEvents';\nimport {\n  cleanupAllSystemCommunications,\n  EventCommunication,\n  getSystemCommunication,\n  MessageAcknowledgment,\n  MessagePriority,\n  SystemMessage,\n} from '../../../utils/events/EventCommunication';\n\n// Mock the moduleEventBus\nvi.mock('../../../lib/modules/ModuleEvents', () => {\n  return {\n    moduleEventBus: {\n      emit: vi.fn(),\n      subscribe: vi.fn().mockImplementation((type, handler) => {\n        // Store the handler so we can call it in tests\n        if (type === 'SYSTEM_MESSAGE') {\n          systemMessageHandler = handler;\n        } else if (type === 'SYSTEM_MESSAGE_ACK') {\n          systemMessageAckHandler = handler;\n        }\n        return () => {}; // Return unsubscribe function\n      }),\n    },\n    ModuleEventType: {\n      SYSTEM_MESSAGE: 'SYSTEM_MESSAGE',\n      SYSTEM_MESSAGE_ACK: 'SYSTEM_MESSAGE_ACK',\n    },\n  };\n});\n\n// Store handlers for testing\nlet systemMessageHandler: any;\nlet systemMessageAckHandler: any;\n\ndescribe('EventCommunication', () => {\n  let resourceSystem: EventCommunication;\n  let combatSystem: EventCommunication;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n\n    // Reset handlers\n    systemMessageHandler = null;\n    systemMessageAckHandler = null;\n\n    // Create system instances\n    resourceSystem = getSystemCommunication('resource-system');\n    combatSystem = getSystemCommunication('combat-system');\n  });\n\n  afterEach(() => {\n    // Clean up\n    cleanupAllSystemCommunications();\n  });\n\n  describe('initialization', () => {\n    it('should subscribe to system message events', () => {\n      // Check that it subscribed to the moduleEventBus\n      expect(moduleEventBus.subscribe).toHaveBeenCalledWith('SYSTEM_MESSAGE', expect.any(Function));\n      expect(moduleEventBus.subscribe).toHaveBeenCalledWith(\n        'SYSTEM_MESSAGE_ACK',\n        expect.any(Function)\n      );\n    });\n\n    it('should create a singleton instance for each system ID', () => {\n      // Get the same system again\n      const resourceSystem2 = getSystemCommunication('resource-system');\n\n      // Should be the same instance\n      expect(resourceSystem2).toBe(resourceSystem);\n\n      // Different systems should be different instances\n      expect(combatSystem).not.toBe(resourceSystem);\n    });\n  });\n\n  describe('message handling', () => {\n    it('should register and call message handlers', () => {\n      // Create a handler\n      const handler = vi.fn();\n\n      // Register the handler\n      resourceSystem.registerHandler('test-message', handler);\n\n      // Create a message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'test-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the handler was called with the message\n      expect(handler).toHaveBeenCalledWith(message);\n    });\n\n    it('should not call handlers for messages targeted at other systems', () => {\n      // Create a handler\n      const handler = vi.fn();\n\n      // Register the handler\n      resourceSystem.registerHandler('test-message', handler);\n\n      // Create a message targeted at a different system\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'resource-system',\n        target: 'combat-system', // Different target\n        type: 'test-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the handler was not called\n      expect(handler).not.toHaveBeenCalled();\n    });\n\n    it('should call handlers for broadcast messages', () => {\n      // Create handlers for both systems\n      const resourceHandler = vi.fn();\n      const combatHandler = vi.fn();\n\n      // Register the handlers\n      resourceSystem.registerHandler('broadcast-message', resourceHandler);\n      combatSystem.registerHandler('broadcast-message', combatHandler);\n\n      // Create a broadcast message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'ui-system',\n        target: 'broadcast',\n        type: 'broadcast-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that both handlers were called\n      expect(resourceHandler).toHaveBeenCalledWith(message);\n      expect(combatHandler).toHaveBeenCalledWith(message);\n    });\n\n    it('should unregister handlers correctly', () => {\n      // Create a handler\n      const handler = vi.fn();\n\n      // Register the handler and get the unregister function\n      const unregister = resourceSystem.registerHandler('test-message', handler);\n\n      // Unregister the handler\n      unregister();\n\n      // Create a message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'test-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the handler was not called\n      expect(handler).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('message sending', () => {\n    it('should send messages through the event bus', () => {\n      // Send a message\n      resourceSystem.sendMessage('combat-system', 'test-message', { test: 'data' });\n\n      // Check that it emitted through the moduleEventBus\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'SYSTEM_MESSAGE',\n          moduleId: 'system-resource-system',\n          data: expect.objectContaining({\n            message: expect.objectContaining({\n              source: 'resource-system',\n              target: 'combat-system',\n              type: 'test-message',\n              payload: { test: 'data' },\n            }),\n          }),\n        })\n      );\n    });\n\n    it('should send messages with custom priority', () => {\n      // Send a message with high priority\n      resourceSystem.sendMessage(\n        'combat-system',\n        'priority-message',\n        { test: 'data' },\n        { priority: MessagePriority.HIGH }\n      );\n\n      // Check that it emitted with the correct priority\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          data: expect.objectContaining({\n            message: expect.objectContaining({\n              priority: MessagePriority.HIGH,\n            }),\n          }),\n        })\n      );\n    });\n\n    it('should return a promise when acknowledgment is required', async () => {\n      // Mock Date.now to return a consistent value for testing\n      const originalDateNow = Date.now;\n      Date.now = vi.fn().mockReturnValue(1000);\n\n      // Send a message that requires acknowledgment\n      const promise = resourceSystem.sendMessage(\n        'combat-system',\n        'ack-message',\n        { test: 'data' },\n        { requiresAck: true }\n      ) as Promise<MessageAcknowledgment>;\n\n      // Check that it's a promise\n      expect(promise).toBeInstanceOf(Promise);\n\n      // Get the message ID from the emit call\n      const emitCall = (moduleEventBus.emit as any).mock.calls[0][0];\n      const messageId = emitCall.data.message.id;\n\n      // Create an acknowledgment\n      const ack: MessageAcknowledgment = {\n        messageId,\n        source: 'combat-system',\n        target: 'resource-system',\n        timestamp: Date.now(),\n        success: true,\n      };\n\n      // Simulate receiving the acknowledgment\n      systemMessageAckHandler({\n        data: { ack },\n      });\n\n      // Check that the promise resolves with the acknowledgment\n      const result = await promise;\n      expect(result).toEqual(ack);\n\n      // Restore Date.now\n      Date.now = originalDateNow;\n    });\n\n    it('should reject the promise when acknowledgment fails', async () => {\n      // Mock Date.now to return a consistent value for testing\n      const originalDateNow = Date.now;\n      Date.now = vi.fn().mockReturnValue(1000);\n\n      // Send a message that requires acknowledgment\n      const promise = resourceSystem.sendMessage(\n        'combat-system',\n        'ack-message',\n        { test: 'data' },\n        { requiresAck: true }\n      ) as Promise<MessageAcknowledgment>;\n\n      // Get the message ID from the emit call\n      const emitCall = (moduleEventBus.emit as any).mock.calls[0][0];\n      const messageId = emitCall.data.message.id;\n\n      // Create a failed acknowledgment\n      const ack: MessageAcknowledgment = {\n        messageId,\n        source: 'combat-system',\n        target: 'resource-system',\n        timestamp: Date.now(),\n        success: false,\n        error: 'Test error',\n      };\n\n      // Simulate receiving the acknowledgment\n      systemMessageAckHandler({\n        data: { ack },\n      });\n\n      // Check that the promise rejects with the error\n      await expect(promise).rejects.toThrow('Test error');\n\n      // Restore Date.now\n      Date.now = originalDateNow;\n    });\n\n    it('should reject the promise when acknowledgment times out', async () => {\n      // Mock timers\n      vi.useFakeTimers();\n\n      // Send a message that requires acknowledgment with a short timeout\n      const promise = resourceSystem.sendMessage(\n        'combat-system',\n        'timeout-message',\n        { test: 'data' },\n        { requiresAck: true, timeout: 1000 }\n      ) as Promise<MessageAcknowledgment>;\n\n      // Advance time past the timeout\n      await vi.advanceTimersByTimeAsync(1100);\n\n      // Check that the promise rejects with a timeout error\n      await expect(promise).rejects.toThrow('Acknowledgment timeout');\n\n      // Restore timers\n      vi.useRealTimers();\n    });\n  });\n\n  describe('acknowledgment handling', () => {\n    it('should send acknowledgments for messages that require them', () => {\n      // Create a handler that doesn't throw\n      const handler = vi.fn();\n\n      // Register the handler\n      resourceSystem.registerHandler('ack-message', handler);\n\n      // Create a message that requires acknowledgment\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'ack-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n        requiresAck: true,\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that it sent a successful acknowledgment\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'SYSTEM_MESSAGE_ACK',\n          data: expect.objectContaining({\n            ack: expect.objectContaining({\n              messageId: 'test-id',\n              source: 'resource-system',\n              target: 'combat-system',\n              success: true,\n            }),\n          }),\n        })\n      );\n    });\n\n    it('should send error acknowledgments when handlers throw', () => {\n      // Create a handler that throws\n      const handler = vi.fn().mockImplementation(() => {\n        throw new Error('Test error');\n      });\n\n      // Register the handler\n      resourceSystem.registerHandler('error-message', handler);\n\n      // Create a message that requires acknowledgment\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'error-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n        requiresAck: true,\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that it sent a failed acknowledgment with the error\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'SYSTEM_MESSAGE_ACK',\n          data: expect.objectContaining({\n            ack: expect.objectContaining({\n              messageId: 'test-id',\n              source: 'resource-system',\n              target: 'combat-system',\n              success: false,\n              error: 'Test error',\n            }),\n          }),\n        })\n      );\n    });\n\n    it('should send negative acknowledgments when no handlers exist', () => {\n      // Create a message for a type with no handlers\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'no-handler-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n        requiresAck: true,\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that it sent a failed acknowledgment\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'SYSTEM_MESSAGE_ACK',\n          data: expect.objectContaining({\n            ack: expect.objectContaining({\n              messageId: 'test-id',\n              source: 'resource-system',\n              target: 'combat-system',\n              success: false,\n              error: expect.stringContaining('No handlers registered'),\n            }),\n          }),\n        })\n      );\n    });\n\n    it('should handle async handlers and wait for them to complete', async () => {\n      // Create an async handler\n      const handler = vi.fn().mockImplementation(async () => {\n        // Simulate async work\n        await new Promise(resolve => setTimeout(resolve, 100));\n      });\n\n      // Register the handler\n      resourceSystem.registerHandler('async-message', handler);\n\n      // Create a message that requires acknowledgment\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'async-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n        requiresAck: true,\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the handler was called\n      expect(handler).toHaveBeenCalled();\n\n      // Wait for the async handler to complete\n      await vi.advanceTimersByTimeAsync(100);\n\n      // Check that it sent a successful acknowledgment after the handler completed\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'SYSTEM_MESSAGE_ACK',\n          data: expect.objectContaining({\n            ack: expect.objectContaining({\n              messageId: 'test-id',\n              success: true,\n            }),\n          }),\n        })\n      );\n    });\n  });\n\n  describe('observables', () => {\n    it('should provide an observable of messages', () => {\n      // Create a mock observer\n      const nextFn = vi.fn();\n\n      // Subscribe to messages\n      const subscription = resourceSystem.getMessages().subscribe({\n        next: nextFn,\n      });\n\n      // Create a message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'test-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the observer was called with the message\n      expect(nextFn).toHaveBeenCalledWith(message);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n\n    it('should provide an observable of messages filtered by type', () => {\n      // Create a mock observer\n      const nextFn = vi.fn();\n\n      // Subscribe to messages of a specific type\n      const subscription = resourceSystem.getMessages('filtered-message').subscribe({\n        next: nextFn,\n      });\n\n      // Create messages of different types\n      const message1: SystemMessage = {\n        id: 'test-id-1',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'filtered-message', // This should be received\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data-1' },\n      };\n\n      const message2: SystemMessage = {\n        id: 'test-id-2',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'other-message', // This should be filtered out\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data-2' },\n      };\n\n      // Simulate receiving the messages\n      systemMessageHandler({\n        data: { message: message1 },\n      });\n\n      systemMessageHandler({\n        data: { message: message2 },\n      });\n\n      // Check that the observer was called only with the filtered message\n      expect(nextFn).toHaveBeenCalledTimes(1);\n      expect(nextFn).toHaveBeenCalledWith(message1);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n\n    it('should provide an observable of acknowledgments', () => {\n      // Create a mock observer\n      const nextFn = vi.fn();\n\n      // Subscribe to acknowledgments\n      const subscription = resourceSystem.getAcknowledgments().subscribe({\n        next: nextFn,\n      });\n\n      // Create an acknowledgment\n      const ack: MessageAcknowledgment = {\n        messageId: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        timestamp: Date.now(),\n        success: true,\n      };\n\n      // Simulate receiving the acknowledgment\n      systemMessageAckHandler({\n        data: { ack },\n      });\n\n      // Check that the observer was called with the acknowledgment\n      expect(nextFn).toHaveBeenCalledWith(ack);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n\n    it('should provide an observable of message payloads', () => {\n      // Create a mock observer\n      const nextFn = vi.fn();\n\n      // Subscribe to message payloads of a specific type\n      const subscription = resourceSystem\n        .getMessagePayloads<{ test: string }>('payload-message')\n        .subscribe({\n          next: nextFn,\n        });\n\n      // Create a message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'payload-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the observer was called with just the payload\n      expect(nextFn).toHaveBeenCalledWith({ test: 'data' });\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('cleanup', () => {\n    it('should clean up resources', () => {\n      // Create a handler\n      const handler = vi.fn();\n\n      // Register the handler\n      resourceSystem.registerHandler('test-message', handler);\n\n      // Create a mock observer\n      const nextFn = vi.fn();\n\n      // Subscribe to messages\n      const subscription = resourceSystem.getMessages().subscribe({\n        next: nextFn,\n      });\n\n      // Clean up\n      resourceSystem.cleanup();\n\n      // Create a message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'combat-system',\n        target: 'resource-system',\n        type: 'test-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that the handler was not called\n      expect(handler).not.toHaveBeenCalled();\n\n      // Check that the observer was not called\n      expect(nextFn).not.toHaveBeenCalled();\n\n      // Clean up subscription\n      subscription.unsubscribe();\n    });\n\n    it('should clean up all system communications', () => {\n      // Create handlers for both systems\n      const resourceHandler = vi.fn();\n      const combatHandler = vi.fn();\n\n      // Register the handlers\n      resourceSystem.registerHandler('test-message', resourceHandler);\n      combatSystem.registerHandler('test-message', combatHandler);\n\n      // Clean up all systems\n      cleanupAllSystemCommunications();\n\n      // Create a broadcast message\n      const message: SystemMessage = {\n        id: 'test-id',\n        source: 'ui-system',\n        target: 'broadcast',\n        type: 'test-message',\n        priority: MessagePriority.NORMAL,\n        timestamp: Date.now(),\n        payload: { test: 'data' },\n      };\n\n      // Simulate receiving the message\n      systemMessageHandler({\n        data: { message },\n      });\n\n      // Check that neither handler was called\n      expect(resourceHandler).not.toHaveBeenCalled();\n      expect(combatHandler).not.toHaveBeenCalled();\n    });\n\n    it('should reject pending acknowledgments on cleanup', async () => {\n      // Send a message that requires acknowledgment\n      const promise = resourceSystem.sendMessage(\n        'combat-system',\n        'ack-message',\n        { test: 'data' },\n        { requiresAck: true }\n      ) as Promise<MessageAcknowledgment>;\n\n      // Clean up\n      resourceSystem.cleanup();\n\n      // Check that the promise rejects\n      await expect(promise).rejects.toThrow('System communication cleanup');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventDispatcher.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventFilteringBasic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventFilteringComprehensive.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/rxjsIntegration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5638,5641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5638,5641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9086,9089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9086,9089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9308,9311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9308,9311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9513,9516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9513,9516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, Subject } from 'rxjs';\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { ModuleEvent, ModuleEventType, moduleEventBus } from '../../../lib/modules/ModuleEvents';\nimport {\n  createBufferedEventStream,\n  createCombinedEventStream,\n  createDebouncedEventStream,\n  createEventTypeSubject,\n  createFilteredEventStream,\n  createThrottledEventStream,\n  createTransformedEventStream,\n  emitEvent,\n  getEventData,\n  getEventsByData,\n  getEventsByModule,\n  getEventsByType,\n  initializeRxJSIntegration,\n  moduleEventSubject,\n  moduleEvents$,\n} from '../../../utils/events/rxjsIntegration';\n\n// Mock the moduleEventBus\nvi.mock('../../../lib/modules/ModuleEvents', () => {\n  const mockEventBus = {\n    subscribe: vi.fn().mockReturnValue(() => {}),\n    emit: vi.fn(),\n    getHistory: vi.fn().mockReturnValue([]),\n    getModuleHistory: vi.fn().mockReturnValue([]),\n    getEventTypeHistory: vi.fn().mockReturnValue([]),\n    clearHistory: vi.fn(),\n  };\n\n  return {\n    moduleEventBus: mockEventBus,\n    ModuleEventType: {\n      MODULE_CREATED: 'MODULE_CREATED',\n      MODULE_UPDATED: 'MODULE_UPDATED',\n      RESOURCE_PRODUCED: 'RESOURCE_PRODUCED',\n    },\n  };\n});\n\ndescribe('RxJS Integration', () => {\n  // Sample events for testing\n  const sampleEvent1: ModuleEvent = {\n    type: 'MODULE_CREATED' as ModuleEventType,\n    moduleId: 'test-module-1',\n    moduleType: 'resource-manager',\n    timestamp: 1000,\n    data: { name: 'Test Module 1' },\n  };\n\n  const sampleEvent2: ModuleEvent = {\n    type: 'MODULE_UPDATED' as ModuleEventType,\n    moduleId: 'test-module-1',\n    moduleType: 'resource-manager',\n    timestamp: 2000,\n    data: { name: 'Test Module 1', status: 'active' },\n  };\n\n  const sampleEvent3: ModuleEvent = {\n    type: 'RESOURCE_PRODUCED' as ModuleEventType,\n    moduleId: 'test-module-2',\n    moduleType: 'mineral',\n    timestamp: 3000,\n    data: { resourceType: 'iron', amount: 10 },\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    // Clean up any subscriptions\n    moduleEventSubject.observers = [];\n  });\n\n  describe('initializeRxJSIntegration', () => {\n    it('should subscribe to module events and return a cleanup function', () => {\n      const cleanup = initializeRxJSIntegration();\n\n      // Check that it subscribed to the moduleEventBus\n      expect(moduleEventBus.subscribe).toHaveBeenCalledWith('MODULE_CREATED', expect.any(Function));\n\n      // Check that the cleanup function is returned\n      expect(typeof cleanup).toBe('function');\n\n      // Call the cleanup function\n      cleanup();\n\n      // Check that the subject is completed (we can't directly test this, but we can check that the subject has no observers)\n      expect(moduleEventSubject.observers.length).toBe(0);\n    });\n  });\n\n  describe('getEventsByType', () => {\n    it('should filter events by type', () => {\n      const events: ModuleEvent[] = [];\n\n      // Subscribe to MODULE_CREATED events\n      const subscription = getEventsByType('MODULE_CREATED' as ModuleEventType).subscribe({\n        next: event => {\n          events.push(event);\n\n          // Check that only MODULE_CREATED events are received\n          expect(event.type).toBe('MODULE_CREATED');\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be received\n      moduleEventSubject.next(sampleEvent2); // Should be filtered out\n      moduleEventSubject.next(sampleEvent3); // Should be filtered out\n\n      // Check that only one event was received\n      expect(events.length).toBe(1);\n      expect(events[0]).toEqual(sampleEvent1);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('getEventsByModule', () => {\n    it('should filter events by module ID', () => {\n      const events: ModuleEvent[] = [];\n\n      // Subscribe to events from test-module-1\n      const subscription = getEventsByModule('test-module-1').subscribe({\n        next: event => {\n          events.push(event);\n\n          // Check that only events from test-module-1 are received\n          expect(event.moduleId).toBe('test-module-1');\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be received\n      moduleEventSubject.next(sampleEvent2); // Should be received\n      moduleEventSubject.next(sampleEvent3); // Should be filtered out\n\n      // Check that two events were received\n      expect(events.length).toBe(2);\n      expect(events[0]).toEqual(sampleEvent1);\n      expect(events[1]).toEqual(sampleEvent2);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('getEventsByData', () => {\n    it('should filter events by data property', () => {\n      const events: ModuleEvent[] = [];\n\n      // Subscribe to events with data.resourceType === 'iron'\n      const subscription = getEventsByData('resourceType', 'iron').subscribe({\n        next: event => {\n          events.push(event);\n\n          // Check that only events with data.resourceType === 'iron' are received\n          expect(event.data.resourceType).toBe('iron');\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be filtered out\n      moduleEventSubject.next(sampleEvent2); // Should be filtered out\n      moduleEventSubject.next(sampleEvent3); // Should be received\n\n      // Check that only one event was received\n      expect(events.length).toBe(1);\n      expect(events[0]).toEqual(sampleEvent3);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('getEventData', () => {\n    it('should map events to their data', () => {\n      const dataItems: any[] = [];\n\n      // Subscribe to data from MODULE_CREATED events\n      const subscription = getEventData<{ name: string }>(\n        'MODULE_CREATED' as ModuleEventType\n      ).subscribe({\n        next: data => {\n          dataItems.push(data);\n\n          // Check that the data is correctly extracted\n          expect(data).toEqual({ name: 'Test Module 1' });\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be received\n      moduleEventSubject.next(sampleEvent2); // Should be filtered out\n      moduleEventSubject.next(sampleEvent3); // Should be filtered out\n\n      // Check that only one data item was received\n      expect(dataItems.length).toBe(1);\n      expect(dataItems[0]).toEqual({ name: 'Test Module 1' });\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('createFilteredEventStream', () => {\n    it('should create a custom filtered event stream', () => {\n      const events: ModuleEvent[] = [];\n\n      // Create a custom filter for events with timestamp > 1500\n      const subscription = createFilteredEventStream(event => event.timestamp > 1500).subscribe({\n        next: event => {\n          events.push(event);\n\n          // Check that only events with timestamp > 1500 are received\n          expect(event.timestamp).toBeGreaterThan(1500);\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be filtered out (timestamp = 1000)\n      moduleEventSubject.next(sampleEvent2); // Should be received (timestamp = 2000)\n      moduleEventSubject.next(sampleEvent3); // Should be received (timestamp = 3000)\n\n      // Check that two events were received\n      expect(events.length).toBe(2);\n      expect(events[0]).toEqual(sampleEvent2);\n      expect(events[1]).toEqual(sampleEvent3);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('emitEvent', () => {\n    it('should emit events through both moduleEventBus and moduleEventSubject', () => {\n      const events: ModuleEvent[] = [];\n\n      // Subscribe to all events\n      const subscription = moduleEvents$.subscribe({\n        next: event => {\n          events.push(event);\n        },\n      });\n\n      // Emit an event\n      emitEvent(sampleEvent1);\n\n      // Check that the event was emitted through moduleEventSubject\n      expect(events.length).toBe(1);\n      expect(events[0]).toEqual(sampleEvent1);\n\n      // Check that the event was also emitted through moduleEventBus\n      expect(moduleEventBus.emit).toHaveBeenCalledWith(sampleEvent1);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('createEventTypeSubject', () => {\n    it('should create a subject for a specific event type', () => {\n      // Create a subject for MODULE_CREATED events\n      const subject = createEventTypeSubject('MODULE_CREATED' as ModuleEventType);\n\n      // Check that it's a Subject\n      expect(subject).toBeInstanceOf(Subject);\n\n      // Check that it subscribed to the moduleEventBus\n      expect(moduleEventBus.subscribe).toHaveBeenCalledWith('MODULE_CREATED', expect.any(Function));\n\n      // Subscribe to the subject\n      const events: ModuleEvent[] = [];\n      const subscription = subject.subscribe({\n        next: event => {\n          events.push(event);\n        },\n      });\n\n      // Call the event handler that was passed to moduleEventBus.subscribe\n      const eventHandler = (moduleEventBus.subscribe as any).mock.calls[0][1];\n      eventHandler(sampleEvent1);\n\n      // Check that the event was received\n      expect(events.length).toBe(1);\n      expect(events[0]).toEqual(sampleEvent1);\n\n      // Clean up\n      (subject as any).cleanup();\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('createTransformedEventStream', () => {\n    it('should create a transformed event stream', () => {\n      const transformedItems: any[] = [];\n\n      // Create a transformed stream that extracts the module ID\n      const subscription = createTransformedEventStream<ModuleEvent, string>(\n        'MODULE_CREATED' as ModuleEventType,\n        event => event.moduleId\n      ).subscribe({\n        next: moduleId => {\n          transformedItems.push(moduleId);\n\n          // Check that the transformation was applied\n          expect(moduleId).toBe('test-module-1');\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be received and transformed\n      moduleEventSubject.next(sampleEvent2); // Should be filtered out\n      moduleEventSubject.next(sampleEvent3); // Should be filtered out\n\n      // Check that only one transformed item was received\n      expect(transformedItems.length).toBe(1);\n      expect(transformedItems[0]).toBe('test-module-1');\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  describe('createCombinedEventStream', () => {\n    it('should create a combined event stream from multiple event types', () => {\n      const events: ModuleEvent[] = [];\n\n      // Create a combined stream for MODULE_CREATED and RESOURCE_PRODUCED events\n      const subscription = createCombinedEventStream([\n        'MODULE_CREATED' as ModuleEventType,\n        'RESOURCE_PRODUCED' as ModuleEventType,\n      ]).subscribe({\n        next: event => {\n          events.push(event);\n\n          // Check that only MODULE_CREATED and RESOURCE_PRODUCED events are received\n          expect(['MODULE_CREATED', 'RESOURCE_PRODUCED']).toContain(event.type);\n        },\n      });\n\n      // Emit events\n      moduleEventSubject.next(sampleEvent1); // Should be received (MODULE_CREATED)\n      moduleEventSubject.next(sampleEvent2); // Should be filtered out (MODULE_UPDATED)\n      moduleEventSubject.next(sampleEvent3); // Should be received (RESOURCE_PRODUCED)\n\n      // Check that two events were received\n      expect(events.length).toBe(2);\n      expect(events[0]).toEqual(sampleEvent1);\n      expect(events[1]).toEqual(sampleEvent3);\n\n      // Clean up\n      subscription.unsubscribe();\n    });\n  });\n\n  // Note: The following tests are simplified since the actual implementations\n  // of debounceTime, throttleTime, and bufferTime are commented out in the source\n\n  describe('createDebouncedEventStream', () => {\n    it('should create a debounced event stream', () => {\n      const stream = createDebouncedEventStream('MODULE_CREATED' as ModuleEventType, 100);\n      expect(stream).toBeInstanceOf(Observable);\n    });\n  });\n\n  describe('createThrottledEventStream', () => {\n    it('should create a throttled event stream', () => {\n      const stream = createThrottledEventStream('MODULE_CREATED' as ModuleEventType, 100);\n      expect(stream).toBeInstanceOf(Observable);\n    });\n  });\n\n  describe('createBufferedEventStream', () => {\n    it('should create a buffered event stream', () => {\n      const stream = createBufferedEventStream('MODULE_CREATED' as ModuleEventType, 100);\n      expect(stream).toBeInstanceOf(Observable);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/buildings/ModuleTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/buildings/ShipHangarTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/combat/CombatTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/combat/HazardTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/combat/SalvageTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/core/GameTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/core/Position.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/debug/DebugTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/events/moduleEventBus.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/officers/OfficerTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2133,2136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2133,2136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Officer system types and interfaces\n * @module OfficerTypes\n */\n\n// Base Types\n// ------------------------------------------------------------\n\n/**\n * Officer roles\n */\nexport type OfficerRole = 'Squad Leader' | 'Captain';\n\n/**\n * Officer specializations\n */\nexport type OfficerSpecialization = 'War' | 'Recon' | 'Mining';\n\n/**\n * Officer status\n */\nexport type OfficerStatus = 'available' | 'training' | 'assigned';\n\n/**\n * Officer tier\n */\nexport type OfficerTier = 1 | 2 | 3;\n\n/**\n * Officer skills\n */\nexport interface OfficerSkills {\n  combat: number;\n  leadership: number;\n  technical: number;\n}\n\n// Core Interfaces\n// ------------------------------------------------------------\n\n/**\n * Base officer interface\n */\nexport interface Officer {\n  id: string;\n  name: string;\n  portrait: string;\n  level: number;\n  xp: number;\n  nextLevelXp: number;\n  role: OfficerRole;\n  status: OfficerStatus;\n  specialization: OfficerSpecialization;\n  skills: OfficerSkills;\n  assignedTo?: string;\n  trainingProgress?: number;\n  traits: string[];\n  stats: OfficerSkills;\n}\n\n/**\n * Squad interface\n */\nexport interface Squad {\n  id: string;\n  name: string;\n  leader?: Officer;\n  members: Officer[];\n  specialization: OfficerSpecialization;\n  bonuses: {\n    combat: number;\n    efficiency: number;\n    survival: number;\n  };\n}\n\n/**\n * Training program interface\n */\nexport interface TrainingProgram {\n  id: string;\n  officerId: string;\n  specialization: OfficerSpecialization;\n  progress: number;\n  startTime: number;\n  duration: number;\n  bonuses: {\n    xpMultiplier: number;\n    skillGainRate: number;\n  };\n}\n\n// Event Types\n// ------------------------------------------------------------\n\n/**\n * Officer event types\n */\nexport type OfficerEventType =\n  | 'officerHired'\n  | 'officerAssigned'\n  | 'trainingStarted'\n  | 'trainingCompleted'\n  | 'experienceGained'\n  | 'officerLeveledUp'\n  | 'squadCreated'\n  | 'squadUpdated'\n  | 'squadBonusesUpdated'\n  | 'tierUpgraded'\n  | 'academyActivated';\n\n/**\n * Officer event interface\n */\nexport interface OfficerEvent {\n  type: OfficerEventType;\n  officerId?: string;\n  squadId?: string;\n  data?: any;\n  timestamp: number;\n}\n\n// Manager Interface\n// ------------------------------------------------------------\n\n/**\n * Officer manager interface\n */\nexport interface OfficerManager {\n  hireOfficer(role: OfficerRole, specialization: OfficerSpecialization): Officer;\n  startTraining(officerId: string, specialization: OfficerSpecialization): void;\n  assignOfficer(officerId: string, assignmentId: string): void;\n  createSquad(name: string, specialization: OfficerSpecialization): Squad;\n  assignToSquad(officerId: string, squadId: string): void;\n  addExperience(officerId: string, amount: number, activity?: string): void;\n  update(deltaTime: number): void;\n  getOfficer(id: string): Officer | undefined;\n  getSquad(id: string): Squad | undefined;\n  getAvailableOfficers(): Officer[];\n  getSquadsBySpecialization(specialization: OfficerSpecialization): Squad[];\n  getCurrentTier(): OfficerTier;\n}\n\n// Configuration Types\n// ------------------------------------------------------------\n\n/**\n * Officer trait configuration\n */\nexport interface OfficerTrait {\n  id: string;\n  name: string;\n  description: string;\n  effects: {\n    skills?: Partial<OfficerSkills>;\n    bonuses?: {\n      xpGain?: number;\n      trainingSpeed?: number;\n      squadBonus?: number;\n    };\n  };\n}\n\n/**\n * Training configuration\n */\nexport interface TrainingConfig {\n  baseTime: number;\n  levelModifier: number;\n  specializationModifier: number;\n  xpMultiplier: number;\n  skillGainRate: number;\n}\n\n/**\n * Squad configuration\n */\nexport interface SquadConfig {\n  maxSize: number;\n  bonusMultipliers: {\n    combat: number;\n    efficiency: number;\n    survival: number;\n  };\n  leadershipBonus: number;\n}\n\nexport interface OfficerEvents {\n  officerHired: {\n    officer: Officer;\n  };\n  officerLeveledUp: {\n    officerId: string;\n    newLevel: number;\n    skills: OfficerSkills;\n  };\n  experienceGained: {\n    officerId: string;\n    amount: number;\n    newTotal: number;\n    nextLevel: number;\n  };\n  trainingStarted: {\n    officerId: string;\n    program: TrainingProgram;\n  };\n  trainingCompleted: {\n    officerId: string;\n    specialization: OfficerSpecialization;\n    skills: OfficerSkills;\n  };\n  officerAssigned: {\n    officerId: string;\n    assignmentId: string;\n  };\n  squadCreated: {\n    squad: Squad;\n  };\n  squadUpdated: {\n    squadId: string;\n    officer: string;\n  };\n  tierUpgraded: {\n    tier: OfficerTier;\n  };\n  academyActivated: {\n    moduleId: string;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/resources/ResourcePoolTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1696,1699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1696,1699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2075,2078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2075,2078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResourceState, ResourceType } from './ResourceTypes';\n\n/**\n * Pool allocation strategy\n */\nexport type PoolAllocationStrategy = 'equal' | 'priority' | 'demand-based' | 'custom';\n\n/**\n * Pool distribution rule\n */\nexport interface PoolDistributionRule {\n  id: string;\n  poolId: string;\n  targetIds: string[];\n  resourceType: ResourceType;\n  percentage: number;\n  minAmount?: number;\n  maxAmount?: number;\n  priority: number;\n  condition?: (state: ResourceState) => boolean;\n}\n\n/**\n * Pool allocation result\n */\nexport interface PoolAllocationResult {\n  poolId: string;\n  resourceType: ResourceType;\n  allocations: Array<{\n    targetId: string;\n    amount: number;\n    percentage: number;\n  }>;\n  timestamp: number;\n}\n\n/**\n * Pool allocation options\n */\nexport interface PoolAllocationOptions {\n  strategy?: PoolAllocationStrategy;\n  priorityMap?: Map<string, number>;\n  customAllocations?: Map<string, number>;\n  minAllocation?: number;\n  maxAllocation?: number;\n}\n\n/**\n * Pool distribution options\n */\nexport interface PoolDistributionOptions {\n  interval?: number;\n  maxHistory?: number;\n  autoDistribute?: boolean;\n  validateRules?: boolean;\n}\n\n/**\n * Pool target demand\n */\nexport interface PoolTargetDemand {\n  targetId: string;\n  resourceType: ResourceType;\n  currentAmount: number;\n  capacity: number;\n  priority: number;\n  demandFactor: number;\n}\n\n/**\n * Pool resource summary\n */\nexport interface PoolResourceSummary {\n  poolId: string;\n  resourceType: ResourceType;\n  amount: number;\n  capacity: number;\n  percentage: number;\n  distributionRules: number;\n  lastDistribution?: number;\n}\n\n/**\n * Type guard for PoolDistributionRule\n */\nexport function isPoolDistributionRule(obj: any): obj is PoolDistributionRule {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    'id' in obj &&\n    'poolId' in obj &&\n    'targetIds' in obj &&\n    'resourceType' in obj &&\n    'percentage' in obj &&\n    'priority' in obj &&\n    Array.isArray(obj.targetIds)\n  );\n}\n\n/**\n * Type guard for PoolAllocationResult\n */\nexport function isPoolAllocationResult(obj: any): obj is PoolAllocationResult {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    'poolId' in obj &&\n    'resourceType' in obj &&\n    'allocations' in obj &&\n    'timestamp' in obj &&\n    Array.isArray(obj.allocations)\n  );\n}\n\n/**\n * Helper function to create a default distribution rule\n */\nexport function createDefaultDistributionRule(\n  poolId: string,\n  targetIds: string[],\n  resourceType: ResourceType\n): PoolDistributionRule {\n  return {\n    id: `rule-${poolId}-${resourceType}-${Date.now()}`,\n    poolId,\n    targetIds,\n    resourceType,\n    percentage: 100,\n    priority: 1,\n  };\n}\n\n/**\n * Helper function to calculate demand factor for a target\n */\nexport function calculateDemandFactor(currentAmount: number, capacity: number): number {\n  if (capacity <= 0) {\n    return 0;\n  }\n  const fillPercentage = (currentAmount / capacity) * 100;\n  return Math.max(0, 100 - fillPercentage) / 100;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/resources/ResourceSerializationTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1576,1579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1576,1579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1888,1891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1888,1891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1916,1919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1916,1919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1960,1963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1960,1963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1994,1997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1994,1997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResourceAlert, ResourceType } from './ResourceTypes';\n\n/**\n * Interface for serialized resource data\n * Used for localStorage persistence\n */\nexport interface SerializedResource {\n  current: number;\n  capacity: number;\n  production: number;\n  consumption: number;\n  history?: Array<{\n    timestamp: number;\n    amount: number;\n    type: 'production' | 'consumption' | 'transfer';\n  }>;\n}\n\n/**\n * Interface for serialized threshold data\n * Used for localStorage persistence\n */\nexport interface SerializedThreshold {\n  min?: number;\n  max?: number;\n  target?: number;\n  alert?: boolean;\n}\n\n/**\n * Interface for serialized resource state\n * Used for localStorage persistence\n */\nexport interface SerializedResourceState {\n  resources: Record<ResourceType, SerializedResource>;\n  thresholds: Record<string, SerializedThreshold[]>;\n  alerts: ResourceAlert[];\n  timestamp?: number;\n}\n\n/**\n * Interface for resource totals\n * Used for summary calculations\n */\nexport interface ResourceTotals {\n  production: number;\n  consumption: number;\n  net: number;\n  amounts?: Record<ResourceType, number>;\n  capacities?: Record<ResourceType, number>;\n  rates?: Record<ResourceType, number>;\n}\n\n/**\n * Type guard for SerializedResource\n */\nexport function isSerializedResource(obj: any): obj is SerializedResource {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    'current' in obj &&\n    'capacity' in obj &&\n    'production' in obj &&\n    'consumption' in obj\n  );\n}\n\n/**\n * Type guard for SerializedResourceState\n */\nexport function isSerializedResourceState(obj: any): obj is SerializedResourceState {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    'resources' in obj &&\n    'thresholds' in obj &&\n    'alerts' in obj\n  );\n}\n\n/**\n * Helper function to convert Map to Record for serialization\n */\nexport function serializeResourceMap(map: Map<ResourceType, any>): Record<ResourceType, any> {\n  const record: Record<ResourceType, any> = {} as Record<ResourceType, any>;\n\n  // Convert Map entries to array to avoid MapIterator error\n  Array.from(map.entries()).forEach(([key, value]) => {\n    record[key] = value;\n  });\n\n  return record;\n}\n\n/**\n * Helper function to convert Record to Map for deserialization\n */\nexport function deserializeResourceMap<T>(record: Record<ResourceType, T>): Map<ResourceType, T> {\n  const map = new Map<ResourceType, T>();\n\n  Object.entries(record).forEach(([key, value]) => {\n    map.set(key as ResourceType, value);\n  });\n\n  return map;\n}\n\n/**\n * Helper function to provide default values for a resource\n */\nexport function getResourceWithDefaults(resource: Partial<SerializedResource>): SerializedResource {\n  return {\n    current: resource.current ?? 0,\n    capacity: resource.capacity ?? 100,\n    production: resource.production ?? 0,\n    consumption: resource.consumption ?? 0,\n    history: resource.history ?? [],\n  };\n}\n\n/**\n * Helper function to validate a serialized resource state\n */\nexport function validateResourceState(state: SerializedResourceState): boolean {\n  if (!state.resources || typeof state.resources !== 'object') return false;\n  if (!state.thresholds || typeof state.thresholds !== 'object') return false;\n  if (!Array.isArray(state.alerts)) return false;\n\n  // Check each resource\n  for (const key in state.resources) {\n    const resource = state.resources[key as ResourceType];\n    if (!isSerializedResource(resource)) return false;\n  }\n\n  return true;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/resources/ResourceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/CommonShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/FactionShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/FactionTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/PlayerShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/Ship.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/ShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ui/UITypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/weapons/WeaponTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/weapons/WeaponUpgrades.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/EventEmitter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[99,102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[99,102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Generic event emitter implementation\n */\nexport class EventEmitter<T extends Record<string, any>> {\n  private listeners: Map<keyof T, Array<(data: T[keyof T]) => void>> = new Map();\n\n  /**\n   * Subscribe to an event\n   */\n  public on<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)?.push(callback as (data: T[keyof T]) => void);\n  }\n\n  /**\n   * Unsubscribe from an event\n   */\n  public off<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    const listeners = this.listeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback as (data: T[keyof T]) => void);\n      if (index !== -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emit an event with data\n   */\n  public emit<K extends keyof T>(event: K, data: T[K]): void {\n    const listeners = this.listeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data as T[keyof T]));\n    }\n  }\n\n  /**\n   * Subscribe to an event (alias for on)\n   */\n  public subscribe<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    this.on(event, callback);\n  }\n\n  /**\n   * Unsubscribe from an event (alias for off)\n   */\n  public unsubscribe<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    this.off(event, callback);\n  }\n\n  /**\n   * Remove all listeners for an event\n   */\n  public removeAllListeners<K extends keyof T>(event?: K): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/EventCommunication.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[774,777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[774,777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7479,7482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7479,7482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, Subject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ModuleEvent, ModuleEventType, moduleEventBus } from '../../lib/modules/ModuleEvents';\n\n/**\n * System identifier type\n */\nexport type SystemId =\n  | 'resource-system'\n  | 'module-system'\n  | 'combat-system'\n  | 'exploration-system'\n  | 'mining-system'\n  | 'tech-system'\n  | 'ui-system'\n  | 'game-loop'\n  | 'event-system';\n\n/**\n * Message priority levels\n */\nexport enum MessagePriority {\n  CRITICAL = 0,\n  HIGH = 1,\n  NORMAL = 2,\n  LOW = 3,\n  BACKGROUND = 4,\n}\n\n/**\n * System message interface\n */\nexport interface SystemMessage {\n  id: string;\n  source: SystemId;\n  target: SystemId | 'broadcast';\n  type: string;\n  priority: MessagePriority;\n  timestamp: number;\n  payload: any;\n  requiresAck?: boolean;\n  correlationId?: string;\n}\n\n/**\n * Message acknowledgment interface\n */\nexport interface MessageAcknowledgment {\n  messageId: string;\n  source: SystemId;\n  target: SystemId;\n  timestamp: number;\n  success: boolean;\n  error?: string;\n  correlationId?: string;\n}\n\n/**\n * Message handler type\n */\nexport type MessageHandler = (message: SystemMessage) => void | Promise<void>;\n\n/**\n * Event communication system\n */\nexport class EventCommunication {\n  private handlers: Map<SystemId, Map<string, Set<MessageHandler>>> = new Map();\n  private messageSubject: Subject<SystemMessage> = new Subject();\n  private ackSubject: Subject<MessageAcknowledgment> = new Subject();\n  private systemId: SystemId;\n  private pendingAcks: Map<\n    string,\n    {\n      message: SystemMessage;\n      timeout: NodeJS.Timeout;\n      resolve: (ack: MessageAcknowledgment) => void;\n      reject: (error: Error) => void;\n    }\n  > = new Map();\n\n  constructor(systemId: SystemId) {\n    this.systemId = systemId;\n    this.initializeEventBusIntegration();\n  }\n\n  /**\n   * Initialize integration with the module event bus\n   */\n  private initializeEventBusIntegration(): void {\n    // Subscribe to system communication events\n    moduleEventBus.subscribe('SYSTEM_MESSAGE' as ModuleEventType, (event: ModuleEvent) => {\n      if (event.data && event.data.message) {\n        const message = event.data.message as SystemMessage;\n\n        // Process the message if it's targeted at this system or is a broadcast\n        if (message.target === this.systemId || message.target === 'broadcast') {\n          this.processIncomingMessage(message);\n        }\n      }\n    });\n\n    // Subscribe to acknowledgment events\n    moduleEventBus.subscribe('SYSTEM_MESSAGE_ACK' as ModuleEventType, (event: ModuleEvent) => {\n      if (event.data && event.data.ack) {\n        const ack = event.data.ack as MessageAcknowledgment;\n\n        // Process the acknowledgment if it's targeted at this system\n        if (ack.target === this.systemId) {\n          this.processAcknowledgment(ack);\n        }\n      }\n    });\n  }\n\n  /**\n   * Process an incoming message\n   */\n  private processIncomingMessage(message: SystemMessage): void {\n    // Forward to the message subject\n    this.messageSubject.next(message);\n\n    // Get handlers for this message type\n    const systemHandlers = this.handlers.get(this.systemId);\n    if (!systemHandlers) {\n      // If no handlers and message requires acknowledgment, send negative ack\n      if (message.requiresAck) {\n        this.sendAcknowledgment(\n          message.id,\n          message.source,\n          false,\n          'No handlers registered for this system'\n        );\n      }\n      return;\n    }\n\n    const typeHandlers = systemHandlers.get(message.type);\n    if (!typeHandlers || typeHandlers.size === 0) {\n      // If no handlers for this type and message requires acknowledgment, send negative ack\n      if (message.requiresAck) {\n        this.sendAcknowledgment(\n          message.id,\n          message.source,\n          false,\n          `No handlers registered for message type: ${message.type}`\n        );\n      }\n      return;\n    }\n\n    // Call all handlers\n    const handlerPromises: Promise<void>[] = [];\n    const errors: Error[] = [];\n\n    typeHandlers.forEach(handler => {\n      try {\n        const result = handler(message);\n        if (result instanceof Promise) {\n          handlerPromises.push(\n            result.catch(error => {\n              errors.push(error);\n            })\n          );\n        }\n      } catch (error) {\n        errors.push(error as Error);\n      }\n    });\n\n    // If message requires acknowledgment, wait for all handlers to complete\n    if (message.requiresAck) {\n      if (handlerPromises.length > 0) {\n        // Wait for all promises to resolve\n        Promise.all(handlerPromises).then(() => {\n          this.sendAcknowledgment(\n            message.id,\n            message.source,\n            errors.length === 0,\n            errors.length > 0 ? errors.map(e => e.message).join(', ') : undefined\n          );\n        });\n      } else {\n        // Send acknowledgment immediately\n        this.sendAcknowledgment(\n          message.id,\n          message.source,\n          errors.length === 0,\n          errors.length > 0 ? errors.map(e => e.message).join(', ') : undefined\n        );\n      }\n    }\n  }\n\n  /**\n   * Process an acknowledgment\n   */\n  private processAcknowledgment(ack: MessageAcknowledgment): void {\n    // Forward to the ack subject\n    this.ackSubject.next(ack);\n\n    // Resolve pending promise if exists\n    const pending = this.pendingAcks.get(ack.messageId);\n    if (pending) {\n      clearTimeout(pending.timeout);\n      this.pendingAcks.delete(ack.messageId);\n\n      if (ack.success) {\n        pending.resolve(ack);\n      } else {\n        pending.reject(new Error(ack.error || 'Unknown error'));\n      }\n    }\n  }\n\n  /**\n   * Send an acknowledgment\n   */\n  private sendAcknowledgment(\n    messageId: string,\n    target: SystemId,\n    success: boolean,\n    error?: string\n  ): void {\n    const ack: MessageAcknowledgment = {\n      messageId,\n      source: this.systemId,\n      target,\n      timestamp: Date.now(),\n      success,\n      error,\n    };\n\n    // Emit through the module event bus\n    moduleEventBus.emit({\n      type: 'SYSTEM_MESSAGE_ACK' as ModuleEventType,\n      moduleId: `system-${this.systemId}`,\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { ack },\n    });\n  }\n\n  /**\n   * Register a message handler\n   */\n  public registerHandler(type: string, handler: MessageHandler): () => void {\n    // Create system handlers map if it doesn't exist\n    if (!this.handlers.has(this.systemId)) {\n      this.handlers.set(this.systemId, new Map());\n    }\n\n    // Create type handlers set if it doesn't exist\n    const systemHandlers = this.handlers.get(this.systemId)!;\n    if (!systemHandlers.has(type)) {\n      systemHandlers.set(type, new Set());\n    }\n\n    // Add the handler\n    const typeHandlers = systemHandlers.get(type)!;\n    typeHandlers.add(handler);\n\n    // Return unregister function\n    return () => {\n      const systemHandlers = this.handlers.get(this.systemId);\n      if (systemHandlers) {\n        const typeHandlers = systemHandlers.get(type);\n        if (typeHandlers) {\n          typeHandlers.delete(handler);\n          if (typeHandlers.size === 0) {\n            systemHandlers.delete(type);\n          }\n        }\n        if (systemHandlers.size === 0) {\n          this.handlers.delete(this.systemId);\n        }\n      }\n    };\n  }\n\n  /**\n   * Send a message to another system\n   */\n  public sendMessage(\n    target: SystemId | 'broadcast',\n    type: string,\n    payload: any,\n    options: {\n      priority?: MessagePriority;\n      requiresAck?: boolean;\n      timeout?: number;\n      correlationId?: string;\n    } = {}\n  ): Promise<MessageAcknowledgment> | void {\n    const {\n      priority = MessagePriority.NORMAL,\n      requiresAck = false,\n      timeout = 5000,\n      correlationId,\n    } = options;\n\n    const messageId = `${this.systemId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const message: SystemMessage = {\n      id: messageId,\n      source: this.systemId,\n      target,\n      type,\n      priority,\n      timestamp: Date.now(),\n      payload,\n      requiresAck,\n      correlationId,\n    };\n\n    // Emit through the module event bus\n    moduleEventBus.emit({\n      type: 'SYSTEM_MESSAGE' as ModuleEventType,\n      moduleId: `system-${this.systemId}`,\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { message },\n    });\n\n    // If acknowledgment is required, return a promise\n    if (requiresAck) {\n      return new Promise<MessageAcknowledgment>((resolve, reject) => {\n        // Set timeout for acknowledgment\n        const timeoutId = setTimeout(() => {\n          this.pendingAcks.delete(messageId);\n          reject(new Error(`Acknowledgment timeout for message ${messageId}`));\n        }, timeout);\n\n        // Store pending acknowledgment\n        this.pendingAcks.set(messageId, {\n          message,\n          timeout: timeoutId,\n          resolve,\n          reject,\n        });\n      });\n    }\n  }\n\n  /**\n   * Get an observable of messages for a specific type\n   */\n  public getMessages(type?: string): Observable<SystemMessage> {\n    return this.messageSubject\n      .asObservable()\n      .pipe(filter(message => !type || message.type === type));\n  }\n\n  /**\n   * Get an observable of acknowledgments\n   */\n  public getAcknowledgments(correlationId?: string): Observable<MessageAcknowledgment> {\n    return this.ackSubject\n      .asObservable()\n      .pipe(filter(ack => !correlationId || ack.correlationId === correlationId));\n  }\n\n  /**\n   * Get an observable of message payloads for a specific type\n   */\n  public getMessagePayloads<T>(type: string): Observable<T> {\n    return this.getMessages(type).pipe(map(message => message.payload as T));\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    // Clear all pending acknowledgments\n    this.pendingAcks.forEach(pending => {\n      clearTimeout(pending.timeout);\n      pending.reject(new Error('System communication cleanup'));\n    });\n    this.pendingAcks.clear();\n\n    // Clear all handlers\n    this.handlers.clear();\n\n    // Complete subjects\n    this.messageSubject.complete();\n    this.ackSubject.complete();\n  }\n}\n\n// Map of system communication instances\nconst systemCommunications: Map<SystemId, EventCommunication> = new Map();\n\n/**\n * Get or create a system communication instance\n */\nexport function getSystemCommunication(systemId: SystemId): EventCommunication {\n  if (!systemCommunications.has(systemId)) {\n    systemCommunications.set(systemId, new EventCommunication(systemId));\n  }\n  return systemCommunications.get(systemId)!;\n}\n\n/**\n * Clean up all system communications\n */\nexport function cleanupAllSystemCommunications(): void {\n  systemCommunications.forEach(comm => comm.cleanup());\n  systemCommunications.clear();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/EventDispatcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxHistorySize' is assigned a value but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","message":"Definition for rule 'react-hooks/exhaustive-deps' was not found.","line":165,"column":29,"endLine":165,"endColumn":79,"severity":2,"nodeType":null},{"ruleId":"react-hooks/exhaustive-deps","message":"Definition for rule 'react-hooks/exhaustive-deps' was not found.","line":190,"column":37,"endLine":190,"endColumn":87,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\n\n/**\n * Event dispatcher context interface\n */\ninterface EventDispatcherContextType {\n  // Event subscription\n  subscribe: (type: ModuleEventType, listener: (event: ModuleEvent) => void) => () => void;\n\n  // Event emission\n  emit: (event: ModuleEvent) => void;\n\n  // Event history\n  getHistory: () => ModuleEvent[];\n  getModuleHistory: (moduleId: string) => ModuleEvent[];\n  getEventTypeHistory: (type: ModuleEventType) => ModuleEvent[];\n  clearHistory: () => void;\n\n  // Event filtering\n  getFilteredEvents: (filter: (event: ModuleEvent) => boolean) => ModuleEvent[];\n\n  // Latest events by type\n  latestEvents: Map<ModuleEventType, ModuleEvent>;\n}\n\n/**\n * Event dispatcher provider props\n */\ninterface EventDispatcherProviderProps {\n  children: ReactNode;\n  maxHistorySize?: number;\n}\n\n// Create the context with a default value\nconst EventDispatcherContext = createContext<EventDispatcherContextType | null>(null);\n\n/**\n * Event dispatcher provider component\n */\nexport const EventDispatcherProvider: React.FC<EventDispatcherProviderProps> = ({\n  children,\n  maxHistorySize = 1000,\n}) => {\n  // Store the latest event of each type\n  const [latestEvents, setLatestEvents] = useState<Map<ModuleEventType, ModuleEvent>>(new Map());\n\n  // Subscribe to all module events\n  useEffect(() => {\n    // Create a handler for all events\n    const handleEvent = (event: ModuleEvent) => {\n      setLatestEvents(prev => {\n        const newMap = new Map(prev);\n        newMap.set(event.type, event);\n        return newMap;\n      });\n    };\n\n    // Get all possible event types\n    const eventTypes: ModuleEventType[] = [\n      'MODULE_CREATED',\n      'MODULE_ATTACHED',\n      'MODULE_DETACHED',\n      'MODULE_UPGRADED',\n      'MODULE_ACTIVATED',\n      'MODULE_DEACTIVATED',\n      'ATTACHMENT_STARTED',\n      'ATTACHMENT_CANCELLED',\n      'ATTACHMENT_COMPLETED',\n      'ATTACHMENT_PREVIEW_SHOWN',\n      'RESOURCE_PRODUCED',\n      'RESOURCE_CONSUMED',\n      'RESOURCE_TRANSFERRED',\n      'RESOURCE_PRODUCTION_REGISTERED',\n      'RESOURCE_PRODUCTION_UNREGISTERED',\n      'RESOURCE_CONSUMPTION_REGISTERED',\n      'RESOURCE_CONSUMPTION_UNREGISTERED',\n      'RESOURCE_FLOW_REGISTERED',\n      'RESOURCE_FLOW_UNREGISTERED',\n      'RESOURCE_SHORTAGE',\n      'AUTOMATION_STARTED',\n      'AUTOMATION_STOPPED',\n      'AUTOMATION_CYCLE_COMPLETE',\n      'STATUS_CHANGED',\n      'ERROR_OCCURRED',\n      'MISSION_STARTED',\n      'MISSION_COMPLETED',\n      'MISSION_FAILED',\n      'MISSION_PROGRESS_UPDATED',\n      'MISSION_REWARD_CLAIMED',\n      'SUB_MODULE_CREATED',\n      'SUB_MODULE_ATTACHED',\n      'SUB_MODULE_DETACHED',\n      'SUB_MODULE_UPGRADED',\n      'SUB_MODULE_ACTIVATED',\n      'SUB_MODULE_DEACTIVATED',\n      'SUB_MODULE_EFFECT_APPLIED',\n      'SUB_MODULE_EFFECT_REMOVED',\n    ];\n\n    // Subscribe to all event types\n    const unsubscribers = eventTypes.map(type => moduleEventBus.subscribe(type, handleEvent));\n\n    // Cleanup subscriptions\n    return () => {\n      unsubscribers.forEach(unsubscribe => {\n        if (typeof unsubscribe === 'function') {\n          unsubscribe();\n        }\n      });\n    };\n  }, []);\n\n  // Context value\n  const value: EventDispatcherContextType = {\n    // Event subscription - delegate to moduleEventBus\n    subscribe: (type, listener) => moduleEventBus.subscribe(type, listener),\n\n    // Event emission - delegate to moduleEventBus\n    emit: event => moduleEventBus.emit(event),\n\n    // Event history - delegate to moduleEventBus\n    getHistory: () => moduleEventBus.getHistory(),\n    getModuleHistory: moduleId => moduleEventBus.getModuleHistory(moduleId),\n    getEventTypeHistory: type => moduleEventBus.getEventTypeHistory(type),\n    clearHistory: () => moduleEventBus.clearHistory(),\n\n    // Event filtering\n    getFilteredEvents: filter => moduleEventBus.getHistory().filter(filter),\n\n    // Latest events by type\n    latestEvents,\n  };\n\n  return (\n    <EventDispatcherContext.Provider value={value}>{children}</EventDispatcherContext.Provider>\n  );\n};\n\n/**\n * Hook to use the event dispatcher\n */\nexport const useEventDispatcher = (): EventDispatcherContextType => {\n  const context = useContext(EventDispatcherContext);\n\n  if (!context) {\n    throw new Error('useEventDispatcher must be used within an EventDispatcherProvider');\n  }\n\n  return context;\n};\n\n/**\n * Hook to subscribe to specific event types\n */\nexport const useEventSubscription = <T extends ModuleEventType>(\n  eventType: T,\n  callback: (event: ModuleEvent) => void,\n  deps: React.DependencyList = []\n): void => {\n  const { subscribe } = useEventDispatcher();\n\n  useEffect(() => {\n    return subscribe(eventType, callback);\n  }, [eventType, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\n/**\n * Hook to get the latest event of a specific type\n */\nexport const useLatestEvent = <T extends ModuleEventType>(\n  eventType: T\n): ModuleEvent | undefined => {\n  const { latestEvents } = useEventDispatcher();\n  return latestEvents.get(eventType);\n};\n\n/**\n * Hook to get filtered events\n */\nexport const useFilteredEvents = (\n  filter: (event: ModuleEvent) => boolean,\n  deps: React.DependencyList = []\n): ModuleEvent[] => {\n  const { getFilteredEvents } = useEventDispatcher();\n  const [filteredEvents, setFilteredEvents] = useState<ModuleEvent[]>([]);\n\n  useEffect(() => {\n    setFilteredEvents(getFilteredEvents(filter));\n  }, [getFilteredEvents, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return filteredEvents;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/EventFiltering.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'priority' is assigned a value but never used.","line":87,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'priority' is assigned a value but never used.","line":150,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, timer } from 'rxjs';\nimport { buffer, debounceTime, filter, groupBy, map, mergeMap } from 'rxjs/operators';\nimport { ModuleEvent, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { MessagePriority, SystemMessage } from './EventCommunication';\n\n/**\n * Filter condition type for event filtering\n */\nexport type FilterCondition<T> = (event: T) => boolean;\n\n/**\n * Event batch processor type\n */\nexport type BatchProcessor<T, R> = (events: T[]) => R;\n\n/**\n * Event priority queue for handling events based on priority\n */\nexport class EventPriorityQueue<T extends { priority?: number }> {\n  private queues: Map<number, T[]> = new Map();\n  private processing = false;\n  private processingPromise: Promise<void> | null = null;\n  private processor: (event: T) => Promise<void> | void;\n\n  /**\n   * Create a new event priority queue\n   * @param processor Function to process each event\n   */\n  constructor(processor: (event: T) => Promise<void> | void) {\n    this.processor = processor;\n\n    // Initialize queues for each priority level\n    for (let i = 0; i <= 4; i++) {\n      this.queues.set(i, []);\n    }\n  }\n\n  /**\n   * Add an event to the queue\n   * @param event Event to add\n   */\n  public enqueue(event: T): void {\n    const priority = event.priority !== undefined ? event.priority : MessagePriority.NORMAL;\n    const queue = this.queues.get(priority);\n    if (queue) {\n      queue.push(event);\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Process the queue\n   */\n  private async processQueue(): Promise<void> {\n    if (this.processing) {\n      return;\n    }\n\n    this.processing = true;\n    this.processingPromise = this.processQueueInternal();\n    await this.processingPromise;\n    this.processingPromise = null;\n    this.processing = false;\n\n    // Check if new events were added during processing\n    let hasEvents = false;\n    // Convert Map entries to array to avoid MapIterator error\n    const queueValues = Array.from(this.queues.values());\n    for (const queue of queueValues) {\n      if (queue.length > 0) {\n        hasEvents = true;\n        break;\n      }\n    }\n\n    if (hasEvents) {\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Internal queue processing\n   */\n  private async processQueueInternal(): Promise<void> {\n    // Process all events in priority order\n    const queueEntries = Array.from(this.queues.entries());\n    for (const [priority, queue] of queueEntries) {\n      while (queue.length > 0) {\n        const event = queue.shift();\n        if (event) {\n          try {\n            const result = this.processor(event);\n            if (result instanceof Promise) {\n              await result;\n            }\n          } catch (error) {\n            console.error('Error processing event:', error);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the current queue sizes\n   */\n  public getQueueSizes(): Record<number, number> {\n    const sizes: Record<number, number> = {};\n    // Convert Map entries to array to avoid MapIterator error\n    const queueEntries = Array.from(this.queues.entries());\n    for (const [priority, queue] of queueEntries) {\n      sizes[priority] = queue.length;\n    }\n    return sizes;\n  }\n\n  /**\n   * Check if the queue is currently processing\n   */\n  public isProcessing(): boolean {\n    return this.processing;\n  }\n\n  /**\n   * Wait for all current processing to complete\n   */\n  public async waitForProcessing(): Promise<void> {\n    if (this.processingPromise) {\n      await this.processingPromise;\n    }\n  }\n\n  /**\n   * Clear all queues\n   */\n  public clear(): void {\n    // Convert Map entries to array to avoid MapIterator error\n    const queueValues = Array.from(this.queues.values());\n    for (const queue of queueValues) {\n      queue.length = 0;\n    }\n  }\n\n  /**\n   * Process all events in priority order\n   */\n  public processAll(): void {\n    // Convert Map entries to array to avoid MapIterator error\n    const queueEntries = Array.from(this.queues.entries());\n    for (const [priority, queue] of queueEntries) {\n      while (queue.length > 0) {\n        const event = queue.shift();\n        if (event) {\n          this.processor(event);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Create a filtered event stream\n * @param source Source observable\n * @param condition Filter condition\n */\nexport function createFilteredStream<T>(\n  source: Observable<T>,\n  condition: FilterCondition<T>\n): Observable<T> {\n  return source.pipe(filter(condition));\n}\n\n/**\n * Create a batched event stream\n * @param source Source observable\n * @param timeWindow Time window for batching in milliseconds\n * @param processor Batch processor function\n */\nexport function createBatchedStream<T, R>(\n  source: Observable<T>,\n  timeWindow: number,\n  processor: BatchProcessor<T, R>\n): Observable<R> {\n  return source.pipe(\n    buffer(timer(0, timeWindow)),\n    filter(events => events.length > 0),\n    map(events => processor(events))\n  );\n}\n\n/**\n * Create a grouped event stream\n * @param source Source observable\n * @param keySelector Function to select the key for grouping\n */\nexport function createGroupedStream<T, K>(\n  source: Observable<T>,\n  keySelector: (event: T) => K\n): Observable<{ key: K; events: T[] }> {\n  return source.pipe(\n    groupBy(keySelector),\n    mergeMap(group => {\n      return group.pipe(\n        buffer(group.pipe(debounceTime(100))),\n        map(events => ({ key: group.key, events }))\n      );\n    })\n  );\n}\n\n/**\n * Filter module events by type\n * @param events Module events observable\n * @param type Event type to filter\n */\nexport function filterEventsByType(\n  events: Observable<ModuleEvent>,\n  type: ModuleEventType\n): Observable<ModuleEvent> {\n  return events.pipe(filter(event => event.type === type));\n}\n\n/**\n * Filter module events by module ID\n * @param events Module events observable\n * @param moduleId Module ID to filter\n */\nexport function filterEventsByModuleId(\n  events: Observable<ModuleEvent>,\n  moduleId: string\n): Observable<ModuleEvent> {\n  return events.pipe(filter(event => event.moduleId === moduleId));\n}\n\n/**\n * Filter module events by module type\n * @param events Module events observable\n * @param moduleType Module type to filter\n */\nexport function filterEventsByModuleType(\n  events: Observable<ModuleEvent>,\n  moduleType: string\n): Observable<ModuleEvent> {\n  return events.pipe(filter(event => event.moduleType === moduleType));\n}\n\n/**\n * Filter system messages by type\n * @param messages System messages observable\n * @param type Message type to filter\n */\nexport function filterMessagesByType(\n  messages: Observable<SystemMessage>,\n  type: string\n): Observable<SystemMessage> {\n  return messages.pipe(filter(message => message.type === type));\n}\n\n/**\n * Filter system messages by source\n * @param messages System messages observable\n * @param source Source system ID to filter\n */\nexport function filterMessagesBySource(\n  messages: Observable<SystemMessage>,\n  source: string\n): Observable<SystemMessage> {\n  return messages.pipe(filter(message => message.source === source));\n}\n\n/**\n * Filter system messages by priority\n * @param messages System messages observable\n * @param priority Priority level to filter\n * @param comparison Comparison operator ('eq' | 'lt' | 'lte' | 'gt' | 'gte')\n */\nexport function filterMessagesByPriority(\n  messages: Observable<SystemMessage>,\n  priority: MessagePriority,\n  comparison: 'eq' | 'lt' | 'lte' | 'gt' | 'gte' = 'eq'\n): Observable<SystemMessage> {\n  return messages.pipe(\n    filter(message => {\n      const messagePriority = message.priority;\n      switch (comparison) {\n        case 'eq':\n          return messagePriority === priority;\n        case 'lt':\n          return messagePriority < priority;\n        case 'lte':\n          return messagePriority <= priority;\n        case 'gt':\n          return messagePriority > priority;\n        case 'gte':\n          return messagePriority >= priority;\n        default:\n          return messagePriority === priority;\n      }\n    })\n  );\n}\n\n/**\n * Create a conditional event processor\n * @param condition Condition to check\n * @param processor Processor function\n */\nexport function createConditionalProcessor<T>(\n  condition: FilterCondition<T>,\n  processor: (event: T) => void\n): (event: T) => void {\n  return (event: T) => {\n    if (condition(event)) {\n      processor(event);\n    }\n  };\n}\n\n/**\n * Create a debounced event processor\n * @param processor Processor function\n * @param debounceMs Debounce time in milliseconds\n */\nexport function createDebouncedProcessor<T>(\n  processor: (event: T) => void,\n  debounceMs: number\n): {\n  process: (event: T) => void;\n  flush: () => void;\n} {\n  let timeout: NodeJS.Timeout | null = null;\n  let lastEvent: T | null = null;\n\n  return {\n    process: (event: T) => {\n      lastEvent = event;\n\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(() => {\n        if (lastEvent) {\n          processor(lastEvent);\n          lastEvent = null;\n        }\n        timeout = null;\n      }, debounceMs);\n    },\n    flush: () => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      if (lastEvent) {\n        processor(lastEvent);\n        lastEvent = null;\n      }\n    },\n  };\n}\n\n/**\n * Create a throttled event processor\n * @param processor Processor function\n * @param throttleMs Throttle time in milliseconds\n */\nexport function createThrottledProcessor<T>(\n  processor: (event: T) => void,\n  throttleMs: number\n): (event: T) => void {\n  let lastProcessTime = 0;\n  let pending: T | null = null;\n  let timeout: NodeJS.Timeout | null = null;\n\n  return (event: T) => {\n    const now = Date.now();\n\n    if (now - lastProcessTime >= throttleMs) {\n      // Process immediately\n      lastProcessTime = now;\n      processor(event);\n    } else {\n      // Store for later processing\n      pending = event;\n\n      if (!timeout) {\n        timeout = setTimeout(\n          () => {\n            if (pending) {\n              processor(pending);\n              pending = null;\n            }\n            lastProcessTime = Date.now();\n            timeout = null;\n          },\n          throttleMs - (now - lastProcessTime)\n        );\n      }\n    }\n  };\n}\n\n/**\n * Create a batch event processor\n * @param batchProcessor Batch processor function\n * @param maxBatchSize Maximum batch size\n * @param maxWaitMs Maximum wait time in milliseconds\n */\nexport function createBatchProcessor<T, R>(\n  batchProcessor: BatchProcessor<T, R>,\n  maxBatchSize: number,\n  maxWaitMs: number\n): {\n  process: (event: T) => void;\n  flush: () => R | null;\n  onResult: (callback: (result: R) => void) => () => void;\n} {\n  const batch: T[] = [];\n  let timeout: NodeJS.Timeout | null = null;\n  const resultCallbacks: Set<(result: R) => void> = new Set();\n\n  const processCurrentBatch = (): R | null => {\n    if (batch.length === 0) {\n      return null;\n    }\n\n    const currentBatch = [...batch];\n    batch.length = 0;\n\n    const result = batchProcessor(currentBatch);\n\n    // Notify callbacks\n    resultCallbacks.forEach(callback => {\n      try {\n        callback(result);\n      } catch (error) {\n        console.error('Error in batch result callback:', error);\n      }\n    });\n\n    return result;\n  };\n\n  return {\n    process: (event: T) => {\n      batch.push(event);\n\n      if (batch.length >= maxBatchSize) {\n        // Process immediately if batch is full\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        processCurrentBatch();\n      } else if (!timeout) {\n        // Start timer for batch processing\n        timeout = setTimeout(() => {\n          timeout = null;\n          processCurrentBatch();\n        }, maxWaitMs);\n      }\n    },\n    flush: () => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      return processCurrentBatch();\n    },\n    onResult: (callback: (result: R) => void) => {\n      resultCallbacks.add(callback);\n      return () => {\n        resultCallbacks.delete(callback);\n      };\n    },\n  };\n}\n\n/**\n * Create a priority-based event processor\n * @param processors Map of processors by priority\n * @param defaultPriority Default priority if not specified\n */\nexport function createPriorityProcessor<T extends { priority?: number }>(\n  processors: Map<number, (event: T) => void>,\n  defaultPriority: number = MessagePriority.NORMAL\n): (event: T) => void {\n  return (event: T) => {\n    const priority = event.priority !== undefined ? event.priority : defaultPriority;\n    const processor = processors.get(priority);\n\n    if (processor) {\n      processor(event);\n    } else {\n      // Find the closest priority processor\n      let closestPriority: number | null = null;\n      let minDistance = Infinity;\n\n      for (const p of processors.keys()) {\n        const distance = Math.abs(p - priority);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestPriority = p;\n        }\n      }\n\n      if (closestPriority !== null) {\n        const closestProcessor = processors.get(closestPriority);\n        if (closestProcessor) {\n          closestProcessor(event);\n        }\n      }\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/rxjsIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2935,2938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2935,2938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'T' is defined but never used.","line":122,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'debounceTime' is defined but never used.","line":137,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'throttleTime' is defined but never used.","line":151,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bufferTime' is defined but never used.","line":165,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, Subject, filter, map, share } from 'rxjs';\nimport { ModuleEvent, ModuleEventType, moduleEventBus } from '../../lib/modules/ModuleEvents';\n\n/**\n * Subject for all module events\n */\nexport const moduleEventSubject = new Subject<ModuleEvent>();\n\n/**\n * Observable for all module events\n */\nexport const moduleEvents$ = moduleEventSubject.asObservable().pipe(\n  share() // Share the observable to prevent multiple subscriptions\n);\n\n/**\n * Initialize the RxJS integration with the moduleEventBus\n */\nexport function initializeRxJSIntegration(): () => void {\n  // Subscribe to all module events and forward them to the subject\n  const unsubscribe = moduleEventBus.subscribe('MODULE_CREATED' as ModuleEventType, event => {\n    moduleEventSubject.next(event);\n  });\n\n  // Return a cleanup function\n  return () => {\n    if (typeof unsubscribe === 'function') {\n      unsubscribe();\n    }\n    moduleEventSubject.complete();\n  };\n}\n\n/**\n * Get an observable for a specific event type\n */\nexport function getEventsByType<T extends ModuleEventType>(eventType: T): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(event => event.type === eventType));\n}\n\n/**\n * Get an observable for events from a specific module\n */\nexport function getEventsByModule(moduleId: string): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(event => event.moduleId === moduleId));\n}\n\n/**\n * Get an observable for events with a specific data property\n */\nexport function getEventsByData<T>(\n  propertyName: string,\n  propertyValue: T\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(\n    filter(\n      event =>\n        event.data &&\n        event.data[propertyName] !== undefined &&\n        event.data[propertyName] === propertyValue\n    )\n  );\n}\n\n/**\n * Get an observable that maps events to their data\n */\nexport function getEventData<T>(eventType: ModuleEventType): Observable<T> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType),\n    map(event => event.data as T)\n  );\n}\n\n/**\n * Create a custom event observable with filtering\n */\nexport function createFilteredEventStream(\n  filterFn: (event: ModuleEvent) => boolean\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(filterFn));\n}\n\n/**\n * Emit an event through the RxJS subject and moduleEventBus\n */\nexport function emitEvent(event: ModuleEvent): void {\n  // Emit through the moduleEventBus\n  moduleEventBus.emit(event);\n\n  // Also emit through the RxJS subject\n  moduleEventSubject.next(event);\n}\n\n/**\n * Hook up a Subject to a specific event type\n */\nexport function createEventTypeSubject<T extends ModuleEventType>(\n  eventType: T\n): Subject<ModuleEvent> {\n  const subject = new Subject<ModuleEvent>();\n\n  // Subscribe to the event type and forward to the subject\n  const unsubscribe = moduleEventBus.subscribe(eventType, event => {\n    subject.next(event);\n  });\n\n  // Add cleanup method to the subject\n  (subject as any).cleanup = () => {\n    if (typeof unsubscribe === 'function') {\n      unsubscribe();\n    }\n    subject.complete();\n  };\n\n  return subject;\n}\n\n/**\n * Create a specialized event stream with transformation\n */\nexport function createTransformedEventStream<T, R>(\n  eventType: ModuleEventType,\n  transformFn: (event: ModuleEvent) => R\n): Observable<R> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType),\n    map(transformFn)\n  );\n}\n\n/**\n * Create a debounced event stream\n */\nexport function createDebouncedEventStream(\n  eventType: ModuleEventType,\n  debounceTime: number\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType)\n    // We would normally use debounceTime here, but we're keeping it simple\n    // debounceTime(debounceTime)\n  );\n}\n\n/**\n * Create a throttled event stream\n */\nexport function createThrottledEventStream(\n  eventType: ModuleEventType,\n  throttleTime: number\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType)\n    // We would normally use throttleTime here, but we're keeping it simple\n    // throttleTime(throttleTime)\n  );\n}\n\n/**\n * Create a buffered event stream that collects events over time\n */\nexport function createBufferedEventStream(\n  eventType: ModuleEventType,\n  bufferTime: number\n): Observable<ModuleEvent[]> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType)\n    // We would normally use bufferTime here, but we're keeping it simple\n    // bufferTime(bufferTime)\n  ) as unknown as Observable<ModuleEvent[]>;\n}\n\n/**\n * Create a combined event stream from multiple event types\n */\nexport function createCombinedEventStream(eventTypes: ModuleEventType[]): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(event => eventTypes.includes(event.type)));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/geometry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/idGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/math.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/modules/moduleValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/resources/resourceValidation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6269,6272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6269,6272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6632,6635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6632,6635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7073,7076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7073,7076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7471,7474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7471,7474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":345,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7845,7848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7845,7848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":360,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8148,8151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8148,8151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AdvancedResource,\n  BasicResource,\n  ResourceConsumption,\n  ResourceContainer,\n  ResourceCost,\n  ResourceFlow,\n  ResourcePool,\n  ResourceProduction,\n  ResourceState,\n  ResourceStorage,\n  ResourceThreshold,\n  ResourceTransfer,\n  ResourceType,\n  SpecialResource,\n} from '../../types/resources/ResourceTypes';\n\n/**\n * Type guard for ResourceType\n */\nexport function isResourceType(value: any): value is ResourceType {\n  const validTypes: ResourceType[] = [\n    'minerals',\n    'energy',\n    'population',\n    'research',\n    'plasma',\n    'gas',\n    'exotic',\n  ];\n  return typeof value === 'string' && validTypes.includes(value as ResourceType);\n}\n\n/**\n * Validates a ResourceState object\n */\nexport function validateResourceState(state: ResourceState): boolean {\n  if (typeof state !== 'object' || state === null) {\n    return false;\n  }\n\n  return (\n    typeof state.current === 'number' &&\n    typeof state.max === 'number' &&\n    typeof state.min === 'number' &&\n    typeof state.production === 'number' &&\n    typeof state.consumption === 'number' &&\n    state.min <= state.current &&\n    state.current <= state.max\n  );\n}\n\n/**\n * Validates a ResourceTransfer object\n */\nexport function validateResourceTransfer(transfer: ResourceTransfer): boolean {\n  if (typeof transfer !== 'object' || transfer === null) {\n    return false;\n  }\n\n  return (\n    isResourceType(transfer.type) &&\n    typeof transfer.amount === 'number' &&\n    transfer.amount > 0 &&\n    typeof transfer.source === 'string' &&\n    typeof transfer.target === 'string' &&\n    typeof transfer.timestamp === 'number'\n  );\n}\n\n/**\n * Validates a ResourceThreshold object\n */\nexport function validateResourceThreshold(threshold: ResourceThreshold): boolean {\n  if (typeof threshold !== 'object' || threshold === null) {\n    return false;\n  }\n\n  // Type must be valid\n  if (!isResourceType(threshold.type)) {\n    return false;\n  }\n\n  // At least one threshold value must be defined\n  if (\n    threshold.min === undefined &&\n    threshold.max === undefined &&\n    threshold.target === undefined\n  ) {\n    return false;\n  }\n\n  // Validate threshold values if defined\n  if (threshold.min !== undefined && typeof threshold.min !== 'number') {\n    return false;\n  }\n  if (threshold.max !== undefined && typeof threshold.max !== 'number') {\n    return false;\n  }\n  if (threshold.target !== undefined && typeof threshold.target !== 'number') {\n    return false;\n  }\n\n  // Ensure min <= target <= max if all are defined\n  if (\n    threshold.min !== undefined &&\n    threshold.max !== undefined &&\n    threshold.target !== undefined &&\n    !(threshold.min <= threshold.target && threshold.target <= threshold.max)\n  ) {\n    return false;\n  }\n\n  // Ensure min <= max if both are defined\n  if (threshold.min !== undefined && threshold.max !== undefined && threshold.min > threshold.max) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Validates a ResourceProduction object\n */\nexport function validateResourceProduction(production: ResourceProduction): boolean {\n  if (typeof production !== 'object' || production === null) {\n    return false;\n  }\n\n  // Basic properties validation\n  const basicValid =\n    isResourceType(production.type) &&\n    typeof production.amount === 'number' &&\n    production.amount >= 0 &&\n    typeof production.interval === 'number' &&\n    production.interval > 0;\n\n  if (!basicValid) {\n    return false;\n  }\n\n  // Validate conditions if defined\n  if (production.conditions) {\n    if (!Array.isArray(production.conditions)) {\n      return false;\n    }\n\n    for (const condition of production.conditions) {\n      if (!validateResourceThreshold(condition)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Validates a ResourceConsumption object\n */\nexport function validateResourceConsumption(consumption: ResourceConsumption): boolean {\n  if (typeof consumption !== 'object' || consumption === null) {\n    return false;\n  }\n\n  // Basic properties validation\n  const basicValid =\n    isResourceType(consumption.type) &&\n    typeof consumption.amount === 'number' &&\n    consumption.amount >= 0 &&\n    typeof consumption.interval === 'number' &&\n    consumption.interval > 0 &&\n    typeof consumption.required === 'boolean';\n\n  if (!basicValid) {\n    return false;\n  }\n\n  // Validate conditions if defined\n  if (consumption.conditions) {\n    if (!Array.isArray(consumption.conditions)) {\n      return false;\n    }\n\n    for (const condition of consumption.conditions) {\n      if (!validateResourceThreshold(condition)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Validates a ResourceFlow object\n */\nexport function validateResourceFlow(flow: ResourceFlow): boolean {\n  if (typeof flow !== 'object' || flow === null) {\n    return false;\n  }\n\n  // Basic properties validation\n  const basicValid =\n    typeof flow.source === 'string' &&\n    typeof flow.target === 'string' &&\n    Array.isArray(flow.resources) &&\n    flow.resources.length > 0;\n\n  if (!basicValid) {\n    return false;\n  }\n\n  // Validate resources\n  for (const resource of flow.resources) {\n    if (\n      !isResourceType(resource.type) ||\n      typeof resource.amount !== 'number' ||\n      resource.amount <= 0 ||\n      typeof resource.interval !== 'number' ||\n      resource.interval <= 0\n    ) {\n      return false;\n    }\n  }\n\n  // Validate conditions if defined\n  if (flow.conditions) {\n    if (!Array.isArray(flow.conditions)) {\n      return false;\n    }\n\n    for (const condition of flow.conditions) {\n      if (!validateResourceThreshold(condition)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Validates a ResourceCost object\n */\nexport function validateResourceCost(cost: ResourceCost): boolean {\n  if (typeof cost !== 'object' || cost === null) {\n    return false;\n  }\n\n  return isResourceType(cost.type) && typeof cost.amount === 'number' && cost.amount >= 0;\n}\n\n/**\n * Validates an array of ResourceCost objects\n */\nexport function validateResourceCosts(costs: ResourceCost[]): boolean {\n  if (!Array.isArray(costs)) {\n    return false;\n  }\n\n  for (const cost of costs) {\n    if (!validateResourceCost(cost)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Type guard for BasicResource\n */\nexport function isBasicResource(resource: any): resource is BasicResource {\n  if (typeof resource !== 'object' || resource === null) {\n    return false;\n  }\n\n  return (\n    'id' in resource &&\n    'name' in resource &&\n    'type' in resource &&\n    'category' in resource &&\n    resource.category === 'basic'\n  );\n}\n\n/**\n * Type guard for AdvancedResource\n */\nexport function isAdvancedResource(resource: any): resource is AdvancedResource {\n  if (typeof resource !== 'object' || resource === null) {\n    return false;\n  }\n\n  return (\n    'id' in resource &&\n    'name' in resource &&\n    'type' in resource &&\n    'category' in resource &&\n    'components' in resource &&\n    resource.category === 'advanced' &&\n    Array.isArray(resource.components)\n  );\n}\n\n/**\n * Type guard for SpecialResource\n */\nexport function isSpecialResource(resource: any): resource is SpecialResource {\n  if (typeof resource !== 'object' || resource === null) {\n    return false;\n  }\n\n  return (\n    'id' in resource &&\n    'name' in resource &&\n    'type' in resource &&\n    'category' in resource &&\n    'rarity' in resource &&\n    resource.category === 'special'\n  );\n}\n\n/**\n * Type guard for ResourceContainer\n */\nexport function isResourceContainer(container: any): container is ResourceContainer {\n  if (typeof container !== 'object' || container === null) {\n    return false;\n  }\n\n  return (\n    'id' in container &&\n    'name' in container &&\n    'capacity' in container &&\n    typeof container.capacity === 'number' &&\n    container.capacity > 0\n  );\n}\n\n/**\n * Type guard for ResourcePool\n */\nexport function isResourcePool(pool: any): pool is ResourcePool {\n  if (!isResourceContainer(pool)) {\n    return false;\n  }\n\n  return (\n    'type' in pool &&\n    'poolType' in pool &&\n    (pool.poolType === 'global' || pool.poolType === 'module')\n  );\n}\n\n/**\n * Type guard for ResourceStorage\n */\nexport function isResourceStorage(storage: any): storage is ResourceStorage {\n  if (!isResourceContainer(storage)) {\n    return false;\n  }\n\n  return (\n    'type' in storage &&\n    'storageType' in storage &&\n    (storage.storageType === 'basic' || storage.storageType === 'advanced') &&\n    'efficiency' in storage &&\n    typeof storage.efficiency === 'number' &&\n    storage.efficiency > 0 &&\n    storage.efficiency <= 1\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/ships/shipClassUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/ships/shipUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/typeConversions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3001,3004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3001,3004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3073,3076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3073,3076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3140,3143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3140,3143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5313,5316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5313,5316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5778,5781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5778,5781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6465,6468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6465,6468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7344,7347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7344,7347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7411,7414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7411,7414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CombatUnit, FactionCombatUnit } from '../types/combat/CombatTypes';\nimport { FactionShipClass } from '../types/ships/FactionShipTypes';\nimport { FactionId } from '../types/ships/FactionTypes';\nimport { WeaponMount, WeaponSystem } from '../types/weapons/WeaponTypes';\nimport {\n  WeaponSystemType,\n  convertSystemTypeToWeaponCategory,\n  convertWeaponCategoryToSystemType,\n} from './weapons/weaponTypeConversions';\n\nexport function convertWeaponMountToSystem(mount: WeaponMount): WeaponSystem {\n  if (!mount.currentWeapon) {\n    return {\n      id: mount.id,\n      type: convertWeaponCategoryToSystemType(mount.allowedCategories[0] || 'machineGun'),\n      damage: 0,\n      range: 0,\n      cooldown: 0,\n      status: 'ready',\n    };\n  }\n\n  const weapon = mount.currentWeapon;\n  return {\n    id: weapon.config.id,\n    type: convertWeaponCategoryToSystemType(weapon.config.category),\n    damage: weapon.state.currentStats.damage,\n    range: weapon.state.currentStats.range,\n    cooldown: weapon.state.currentStats.cooldown,\n    status: weapon.state.status as 'ready' | 'charging' | 'cooling',\n    upgrades: weapon.config.requirements?.tech.map(tech => ({\n      name: tech,\n      description: `Requires ${tech}`,\n      unlocked: false,\n    })),\n  };\n}\n\nexport function convertWeaponSystemToMount(weapon: WeaponSystem, index: number): WeaponMount {\n  const category = convertSystemTypeToWeaponCategory(weapon.type as WeaponSystemType);\n  return {\n    id: `mount-${index}`,\n    size: 'medium',\n    position: index % 2 === 0 ? 'front' : 'side',\n    rotation: 0,\n    allowedCategories: [category],\n    currentWeapon: {\n      config: {\n        id: weapon.id,\n        name: weapon.type,\n        category,\n        tier: 1,\n        baseStats: {\n          damage: weapon.damage,\n          range: weapon.range,\n          cooldown: weapon.cooldown,\n          accuracy: 0.8,\n          rateOfFire: 1,\n          energyCost: 1,\n          effects: [],\n        },\n        visualAsset: `weapons/${weapon.type}.png`,\n        mountRequirements: {\n          size: 'medium',\n          power: 1,\n        },\n        requirements: weapon.upgrades\n          ? {\n              tech: weapon.upgrades.map(upgrade => upgrade.name),\n              resources: [],\n            }\n          : undefined,\n      },\n      state: {\n        currentStats: {\n          damage: weapon.damage,\n          range: weapon.range,\n          cooldown: weapon.cooldown,\n          accuracy: 0.8,\n          rateOfFire: 1,\n          energyCost: 1,\n          effects: [],\n        },\n        status: weapon.status,\n        effects: [],\n      },\n    },\n  };\n}\n\nexport function convertToFactionCombatUnit(\n  unit: CombatUnit,\n  factionId: FactionId,\n  shipClass: FactionShipClass\n): FactionCombatUnit {\n  const weaponMounts = unit.weapons.map((weapon, index) =>\n    convertWeaponSystemToMount(weapon, index)\n  );\n  const weaponSystems = weaponMounts.map(convertWeaponMountToSystem);\n\n  // Get formation data with safe defaults\n  const formationType = (unit as any).formation?.type ?? 'balanced';\n  const formationSpacing = (unit as any).formation?.spacing ?? 100;\n  const formationFacing = (unit as any).formation?.facing ?? 0;\n\n  return {\n    ...unit,\n    faction: factionId,\n    class: shipClass,\n    tactics: {\n      formation: 'standard',\n      behavior: 'balanced',\n      target: undefined,\n    },\n    weaponMounts,\n    weapons: weaponSystems,\n    formation: {\n      type: formationType,\n      spacing: formationSpacing,\n      facing: formationFacing,\n      position: 0,\n    },\n    stats: {\n      health: unit.stats?.health || 100,\n      maxHealth: unit.stats?.maxHealth || 100,\n      shield: unit.stats?.shield || 50,\n      maxShield: unit.stats?.maxShield || 50,\n      armor: unit.stats?.armor || 0,\n      speed: unit.stats?.speed || 5,\n      turnRate: unit.stats?.turnRate || 1,\n      accuracy: 0.8,\n      evasion: 0.2,\n      criticalChance: 0.1,\n      criticalDamage: 1.5,\n      armorPenetration: 0,\n      shieldPenetration: 0,\n      experience: 0,\n      level: 1,\n    },\n    status: {\n      main: unit.status?.main || 'active',\n      secondary: unit.status?.secondary,\n      effects: unit.status?.effects || [],\n    },\n    experience: {\n      current: 0,\n      total: 0,\n      level: 1,\n      skills: [],\n    },\n  };\n}\n\nexport function convertToBaseCombatUnit(unit: FactionCombatUnit): CombatUnit {\n  return {\n    id: unit.id,\n    type: unit.type,\n    position: unit.position,\n    rotation: unit.rotation || 0,\n    velocity: unit.velocity || { x: 0, y: 0 },\n    status: unit.status,\n    weapons: unit.weapons,\n    stats: {\n      health: unit.stats.health,\n      maxHealth: unit.stats.maxHealth,\n      shield: unit.stats.shield,\n      maxShield: unit.stats.maxShield,\n      armor: unit.stats.armor,\n      speed: unit.stats.speed,\n      turnRate: unit.stats.turnRate,\n    },\n  };\n}\n\n// Type guard functions\nexport function isFactionCombatUnit(\n  unit: CombatUnit | FactionCombatUnit\n): unit is FactionCombatUnit {\n  return 'class' in unit && 'tactics' in unit && 'weaponMounts' in unit;\n}\n\nexport function isBaseCombatUnit(unit: CombatUnit | FactionCombatUnit): unit is CombatUnit {\n  return !isFactionCombatUnit(unit);\n}\n\n/**\n * Converts a CombatUnit from combatManager.ts to a CombatUnit from CombatTypes.ts\n */\nexport function convertToCombatTypesUnit(\n  unit: any\n): import('../types/combat/CombatTypes').CombatUnit {\n  // Create a CombatUnit that matches the interface in CombatTypes.ts\n  return {\n    id: unit.id,\n    type: unit.type,\n    position: unit.position,\n    rotation: 0, // Default value if not present\n    velocity: { x: 0, y: 0 }, // Default value if not present\n    status: {\n      main: convertStatusToMain(unit.status),\n      secondary: undefined,\n      effects: [],\n    },\n    weapons: unit.weapons.map((w: any) => ({\n      id: w.id,\n      type: w.type,\n      damage: w.damage,\n      cooldown: w.cooldown,\n      range: w.range,\n      state: {\n        status: w.status,\n        lastFired: w.lastFired || 0,\n        effects: [],\n      },\n    })),\n    stats: {\n      health: unit.health || 0,\n      maxHealth: unit.maxHealth || 0,\n      shield: unit.shield || 0,\n      maxShield: unit.maxShield || 0,\n      armor: unit.armor || 0,\n      speed: unit.speed || 0,\n      turnRate: unit.turnRate || 0,\n    },\n  };\n}\n\n/**\n * Converts a CombatUnit from CombatTypes.ts to a CombatUnit from combatManager.ts\n */\nexport function convertToManagerUnit(unit: import('../types/combat/CombatTypes').CombatUnit): any {\n  // Create a CombatUnit that matches the interface in combatManager.ts\n  return {\n    id: unit.id,\n    faction: 'unknown', // Default value if not present\n    type: unit.type,\n    tier: 1, // Default value if not present\n    position: unit.position,\n    status: convertMainToStatus(unit.status.main),\n    health: unit.stats.health,\n    maxHealth: unit.stats.maxHealth,\n    shield: unit.stats.shield,\n    maxShield: unit.stats.maxShield,\n    target: undefined, // Default value if not present\n    weapons: unit.weapons.map(w => {\n      // Extract weapon properties safely\n      const weaponId = w.id;\n      const weaponType = w.type;\n      const weaponRange = w.range || 0;\n      const weaponDamage = w.damage;\n      const weaponCooldown = w.cooldown;\n\n      // Access state properties safely using optional chaining and nullish coalescing\n      const weaponStatus = (w as any).state?.status || 'ready';\n      const weaponLastFired = (w as any).state?.lastFired || 0;\n\n      return {\n        id: weaponId,\n        type: weaponType,\n        range: weaponRange,\n        damage: weaponDamage,\n        cooldown: weaponCooldown,\n        status: weaponStatus,\n        lastFired: weaponLastFired,\n      };\n    }),\n  };\n}\n\n/**\n * Converts a status string from combatManager.ts to a main status in CombatTypes.ts\n */\nfunction convertStatusToMain(status: string): 'active' | 'disabled' | 'destroyed' {\n  if (status === 'disabled') {\n    return 'disabled';\n  }\n  if (status === 'destroyed') {\n    return 'destroyed';\n  }\n  return 'active'; // Default for all other statuses\n}\n\n/**\n * Converts a main status from CombatTypes.ts to a status string in combatManager.ts\n */\nfunction convertMainToStatus(main: 'active' | 'disabled' | 'destroyed'): string {\n  if (main === 'disabled') {\n    return 'disabled';\n  }\n  if (main === 'destroyed') {\n    return 'destroyed';\n  }\n  return 'idle'; // Default for 'active'\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/weapons/weaponEffectUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommonShipAbility' is defined but never used.","line":19,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6662,6665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6662,6665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":343,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8765,8768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8765,8768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8855,8858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8855,8858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":348,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8982,8985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8982,8985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":352,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9088,9091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9088,9091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9502,9505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9502,9505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9543,9546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9543,9546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9576,9579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9576,9579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9645,9648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9645,9648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":373,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9693,9696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9693,9696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":373,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9726,9729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9726,9729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AreaEffect,\n  DamageEffect,\n  StatusEffect,\n  WeaponEffect,\n  WeaponEffectType,\n} from '../../effects/types_effects/WeaponEffects';\nimport { Effect } from '../../types/core/GameTypes';\nimport { WeaponCategory, WeaponSystem } from '../../types/weapons/WeaponTypes';\n\ninterface WeaponLike {\n  id: string;\n  type: WeaponCategory | string;\n  damage?: number;\n  cooldown: number;\n  displayName?: string;\n}\n\ninterface CommonShipAbility {\n  id?: string;\n  name: string;\n  type?: string;\n  cooldown: number;\n  damage?: number;\n}\n\n/**\n * Creates a weapon-like object from parameters\n */\nexport function createWeaponLike(params: {\n  id: string;\n  type: WeaponCategory | string;\n  damage?: number;\n  cooldown: number;\n  displayName?: string;\n}): WeaponLike {\n  return params;\n}\n\n/**\n * Converts a HangarWeaponSystem to WeaponLike\n */\nexport function convertToWeaponLike(weapon: WeaponSystem & { name?: string }): WeaponLike {\n  return {\n    id: weapon.id,\n    type: weapon.type,\n    damage: weapon.damage,\n    cooldown: weapon.cooldown,\n    displayName: 'name' in weapon ? weapon.name : undefined,\n  };\n}\n\n/**\n * Creates a base weapon effect\n */\nexport function createBaseWeaponEffect(params: {\n  id: string;\n  type: 'damage' | 'area' | 'status';\n  magnitude: number;\n  duration: number;\n  strength: number;\n  name?: string;\n  description?: string;\n}): WeaponEffect {\n  return {\n    id: params.id,\n    type: params.type,\n    magnitude: params.magnitude,\n    duration: params.duration,\n    strength: params.strength,\n    name: params.name || params.id,\n    description: params.description || `${params.type} effect with magnitude ${params.magnitude}`,\n  };\n}\n\n/**\n * Creates a damage effect with the specified parameters\n */\nexport function createDamageEffect(params: {\n  id: string;\n  magnitude: number;\n  duration: number;\n  strength: number;\n  damageType: 'physical' | 'energy' | 'explosive';\n  penetration: number;\n  name?: string;\n  description?: string;\n}): DamageEffect {\n  const baseEffect = createBaseWeaponEffect({\n    id: params.id,\n    type: 'damage',\n    magnitude: params.magnitude,\n    duration: params.duration,\n    strength: params.strength,\n    name: params.name,\n    description: params.description,\n  });\n\n  return {\n    ...baseEffect,\n    type: 'damage' as const,\n    damageType: params.damageType,\n    penetration: params.penetration,\n  };\n}\n\n/**\n * Creates an area effect with the specified parameters\n */\nexport function createAreaEffect(params: {\n  id: string;\n  magnitude: number;\n  duration: number;\n  strength: number;\n  radius: number;\n  falloff: number;\n  name?: string;\n  description?: string;\n}): AreaEffect {\n  const baseEffect = createBaseWeaponEffect({\n    id: params.id,\n    type: 'area',\n    magnitude: params.magnitude,\n    duration: params.duration,\n    strength: params.strength,\n    name: params.name,\n    description: params.description,\n  });\n\n  return {\n    ...baseEffect,\n    type: 'area' as const,\n    radius: params.radius,\n    falloff: params.falloff,\n  };\n}\n\n/**\n * Creates a status effect with the specified parameters\n */\nexport function createStatusEffect(params: {\n  id: string;\n  magnitude: number;\n  duration: number;\n  strength: number;\n  statusType: 'burn' | 'emp' | 'slow' | 'stun';\n  name?: string;\n  description?: string;\n}): StatusEffect {\n  const baseEffect = createBaseWeaponEffect({\n    id: params.id,\n    type: 'status',\n    magnitude: params.magnitude,\n    duration: params.duration,\n    strength: params.strength,\n    name: params.name,\n    description: params.description,\n  });\n\n  return {\n    ...baseEffect,\n    type: 'status' as const,\n    statusType: params.statusType,\n  };\n}\n\n/**\n * Creates a weapon effect from a weapon system or ability\n */\nexport function createWeaponEffect(source: WeaponLike): WeaponEffectType {\n  return createDamageEffect({\n    id: `${source.id}-effect`,\n    magnitude: source.damage || 0,\n    duration: source.cooldown,\n    strength: source.damage || 0,\n    damageType: 'physical',\n    penetration: 0,\n    name: source.displayName || `${source.type} Effect`,\n    description: `Effect from ${source.displayName || source.type}`,\n  });\n}\n\n/**\n * Creates a weapon effect with custom parameters\n */\nexport function createCustomWeaponEffect(params: {\n  id: string;\n  type: 'damage' | 'area' | 'status';\n  magnitude: number;\n  duration: number;\n  strength: number;\n  damageType?: 'physical' | 'energy' | 'explosive';\n  penetration?: number;\n  radius?: number;\n  falloff?: number;\n  statusType?: 'burn' | 'emp' | 'slow' | 'stun';\n  name?: string;\n  description?: string;\n}): WeaponEffectType {\n  switch (params.type) {\n    case 'damage':\n      return createDamageEffect({\n        id: params.id,\n        magnitude: params.magnitude,\n        duration: params.duration,\n        strength: params.strength,\n        damageType: params.damageType || 'physical',\n        penetration: params.penetration || 0,\n        name: params.name,\n        description: params.description,\n      });\n    case 'area':\n      return createAreaEffect({\n        id: params.id,\n        magnitude: params.magnitude,\n        duration: params.duration,\n        strength: params.strength,\n        radius: params.radius || 0,\n        falloff: params.falloff || 0,\n        name: params.name,\n        description: params.description,\n      });\n    case 'status':\n      return createStatusEffect({\n        id: params.id,\n        magnitude: params.magnitude,\n        duration: params.duration,\n        strength: params.strength,\n        statusType: params.statusType || 'stun',\n        name: params.name,\n        description: params.description,\n      });\n  }\n}\n\n/**\n * Creates a weapon effect from a weapon system with scaling\n */\nexport function createScaledWeaponEffect(\n  weapon: WeaponSystem & { name?: string },\n  scale: number = 1\n): WeaponEffectType {\n  return createDamageEffect({\n    id: `${weapon.id}-scaled-effect`,\n    magnitude: weapon.damage * scale,\n    duration: weapon.cooldown,\n    strength: weapon.damage * scale,\n    damageType: 'physical',\n    penetration: 0,\n    name: weapon.name || `Scaled ${weapon.type}`,\n    description: `Scaled effect (${scale}x) from ${weapon.name || weapon.type}`,\n  });\n}\n\n/**\n * Creates a combined weapon effect from multiple weapons\n */\nexport function createCombinedWeaponEffect(weapons: WeaponSystem[]): WeaponEffectType {\n  if (weapons.length === 0) {\n    throw new Error('Cannot create combined effect from empty weapons array');\n  }\n\n  const totalDamage = weapons.reduce((sum, w) => sum + w.damage, 0);\n  const avgCooldown = weapons.reduce((sum, w) => sum + w.cooldown, 0) / weapons.length;\n  const weaponNames = weapons.map(w => ('name' in w ? (w as any).name : w.type)).join(', ');\n\n  return createDamageEffect({\n    id: `combined-weapon-effect-${weapons[0].id}`,\n    magnitude: totalDamage,\n    duration: avgCooldown,\n    strength: totalDamage,\n    damageType: 'physical',\n    penetration: 0,\n    name: `Combined Weapons`,\n    description: `Combined effect from: ${weaponNames}`,\n  });\n}\n\n/**\n * Type guard to check if an object is a valid Effect\n */\nexport function isValidEffect(effect: unknown): effect is Effect {\n  if (!effect || typeof effect !== 'object') {\n    return false;\n  }\n\n  const e = effect as Effect;\n  return (\n    typeof e.id === 'string' &&\n    typeof e.type === 'string' &&\n    typeof e.duration === 'number' &&\n    typeof e.magnitude === 'number'\n  );\n}\n\n/**\n * Validates and normalizes an effect object\n */\nexport function validateEffect(effect: Partial<Effect>): Effect {\n  if (!effect.id) {\n    throw new Error('Effect must have an id');\n  }\n  if (!effect.type) {\n    throw new Error('Effect must have a type');\n  }\n  if (effect.magnitude === undefined) {\n    throw new Error('Effect must have a magnitude');\n  } else if (typeof effect.magnitude !== 'number') {\n    throw new Error('Effect magnitude must be a number');\n  }\n  if (typeof effect.duration !== 'number') {\n    throw new Error('Effect must have a duration');\n  }\n\n  return {\n    id: effect.id,\n    type: effect.type,\n    magnitude: effect.magnitude,\n    duration: effect.duration,\n    target: effect.target,\n    active: effect.active,\n    cooldown: effect.cooldown,\n  };\n}\n\n/**\n * Combines multiple effects into a single effect\n */\nexport function combineEffects(effects: Effect[]): Effect {\n  if (effects.length === 0) {\n    throw new Error('Cannot combine empty effects array');\n  }\n\n  // Create the base combined effect\n  const combinedEffect: Effect = {\n    id: effects.map(e => e.id).join('-'),\n    type: effects[0].type,\n    magnitude: effects.reduce((sum, e) => sum + e.magnitude, 0),\n    duration: Math.min(...effects.map(e => e.duration)),\n  };\n\n  // Get names and descriptions if available\n  const names = effects.filter(e => 'name' in e).map(e => (e as any).name);\n  const descriptions = effects.filter(e => 'description' in e).map(e => (e as any).description);\n\n  // Add name and description as any to avoid type errors\n  if (names.length > 0) {\n    (combinedEffect as any).name = `Combined: ${names.join(', ')}`;\n  }\n\n  if (descriptions.length > 0) {\n    (combinedEffect as any).description = `Combined effects: ${descriptions.join('; ')}`;\n  }\n\n  return combinedEffect;\n}\n\n/**\n * Scales an effect's magnitude by a factor\n */\nexport function scaleEffect(effect: Effect, factor: number): Effect {\n  const result = {\n    ...effect,\n    magnitude: effect.magnitude * factor,\n  };\n\n  // Add scaled information to name and description if they exist\n  if ('name' in effect && typeof (effect as any).name === 'string') {\n    (result as any).name = `Scaled ${(effect as any).name}`;\n  }\n\n  if ('description' in effect && typeof (effect as any).description === 'string') {\n    (result as any).description = `${(effect as any).description} (scaled by ${factor})`;\n  }\n\n  return result;\n}\n\n/**\n * Creates a chain of effects that trigger in sequence\n */\nexport function createEffectChain(effects: Effect[]): Effect[] {\n  let currentDuration = 0;\n  return effects.map(effect => ({\n    ...effect,\n    duration: (currentDuration += effect.duration),\n  }));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/weapons/weaponTypeConversions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/workers/combatWorker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHazard' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[627,630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[627,630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Combat Web Worker\nimport { QuadTree } from '../lib/optimization/QuadTree';\nimport { CombatUnit } from '../types/combat/CombatTypes';\nimport { Hazard } from '../types/combat/HazardTypes';\nimport { Position } from '../types/core/GameTypes';\n\ninterface WorkerMessage {\n  type: string;\n  units: CombatUnit[];\n  hazards: Hazard[];\n  worldBounds: { width: number; height: number };\n}\n\ninterface BatchedUpdate {\n  weaponFires: Array<{\n    weaponId: string;\n    targetId: string;\n    weaponType: string;\n  }>;\n  unitMoves: Array<{\n    unitId: string;\n    position: Position;\n  }>;\n}\n\n// Type guard for Hazard\nfunction isHazard(obj: any): obj is Hazard {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    'id' in obj &&\n    'position' in obj &&\n    'radius' in obj &&\n    'type' in obj\n  );\n}\n\n// Combat state\nlet quadTree: QuadTree;\nlet lastUpdate = 0;\nconst UPDATE_INTERVAL = 16; // ~60fps\nconst BATCH_SIZE = 10;\nlet pendingUpdates: BatchedUpdate = {\n  weaponFires: [],\n  unitMoves: [],\n};\n\n// Handle combat calculations\nself.onmessage = (e: MessageEvent<WorkerMessage>) => {\n  const { type, units, hazards, worldBounds } = e.data;\n\n  if (type === 'UPDATE') {\n    const now = performance.now();\n    if (now - lastUpdate < UPDATE_INTERVAL) {\n      return; // Skip update if too soon\n    }\n    lastUpdate = now;\n\n    // Initialize or clear quadtree\n    if (!quadTree) {\n      quadTree = new QuadTree({ x: 0, y: 0, width: worldBounds.width, height: worldBounds.height });\n    } else {\n      quadTree.clear();\n    }\n\n    // Insert units into quadtree\n    units.forEach(unit => {\n      quadTree.insert({\n        id: unit.id,\n        position: unit.position,\n      });\n    });\n\n    // Process units in batches\n    for (let i = 0; i < units.length; i += BATCH_SIZE) {\n      const batch = units.slice(i, i + BATCH_SIZE);\n      processBatch(batch, hazards);\n    }\n\n    // Send batched updates\n    if (pendingUpdates.weaponFires.length > 0 || pendingUpdates.unitMoves.length > 0) {\n      self.postMessage({\n        type: 'BATCH_UPDATE',\n        updates: pendingUpdates,\n      });\n\n      // Clear pending updates\n      pendingUpdates = {\n        weaponFires: [],\n        unitMoves: [],\n      };\n    }\n  }\n};\n\nfunction processBatch(units: CombatUnit[], hazards: Hazard[]): void {\n  units.forEach(unit => {\n    // Check if unit status is an object with a main property\n    if (typeof unit.status === 'object' && unit.status.main === 'active') {\n      processEngagingUnit(unit, hazards);\n    }\n  });\n}\n\nfunction processEngagingUnit(unit: CombatUnit, hazards: Hazard[]): void {\n  // Find nearby hazards using quadtree\n  const searchBounds = {\n    x: unit.position.x - 500,\n    y: unit.position.y - 500,\n    width: 1000,\n    height: 1000,\n  };\n\n  const nearbyObjects = quadTree.retrieve(searchBounds) as Array<{\n    id: string;\n    position: Position;\n  }>;\n\n  // Create a filtered array of hazards instead of using Set\n  const nearbyHazards: Hazard[] = [];\n\n  hazards.forEach(hazard => {\n    if (\n      nearbyObjects.some(\n        obj =>\n          Math.abs(obj.position.x - hazard.position.x) < hazard.radius &&\n          Math.abs(obj.position.y - hazard.position.y) < hazard.radius\n      )\n    ) {\n      nearbyHazards.push(hazard);\n    }\n  });\n\n  // Find nearest hazard\n  let nearestHazard: Hazard | null = null;\n  let nearestDistance = Infinity;\n\n  // Iterate over the array directly\n  for (let i = 0; i < nearbyHazards.length; i++) {\n    const hazard = nearbyHazards[i];\n    const distance = calculateDistance(unit.position, hazard.position);\n    if (distance < nearestDistance) {\n      nearestDistance = distance;\n      nearestHazard = hazard;\n    }\n  }\n\n  // Check if we found a hazard\n  if (nearestHazard) {\n    // Check for ready weapon\n    const readyWeapon = unit.weapons.find(\n      weapon => weapon.status === 'ready' && nearestDistance <= weapon.range\n    );\n\n    if (readyWeapon) {\n      pendingUpdates.weaponFires.push({\n        weaponId: readyWeapon.id,\n        targetId: nearestHazard.id,\n        weaponType: readyWeapon.type,\n      });\n    }\n\n    // Calculate new position with smooth movement\n    const newPosition = calculateNewPosition(unit.position, nearestHazard.position);\n    pendingUpdates.unitMoves.push({\n      unitId: unit.id,\n      position: newPosition,\n    });\n  }\n}\n\nfunction calculateDistance(pos1: Position, pos2: Position): number {\n  const dx = pos2.x - pos1.x;\n  const dy = pos2.y - pos1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction calculateNewPosition(current: Position, target: Position): Position {\n  const dx = target.x - current.x;\n  const dy = target.y - current.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n\n  // Smooth movement with easing\n  const speed = 0.1;\n  const easing = 1 - Math.pow(0.95, distance);\n\n  return {\n    x: current.x + dx * speed * easing,\n    y: current.y + dy * speed * easing,\n  };\n}\n\n// Prevent TypeScript error about missing self\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/test-prettier-2.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'obj' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":10},{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":8,"column":5,"nodeType":"Literal","messageId":"unexpected","endLine":8,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":9,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":10}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// This is a test file with more obvious formatting issues\nfunction testFunction(a, b) {\n  return a + b;\n}\n\nconst obj = { a: 1, b: 2, c: 3 };\n\nif (true) {\n  console.log('test');\n}\n\nexport default testFunction;\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/test-prettier.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'obj' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// This is a test file to check if Prettier is working\nfunction testFunction(a, b) {\n  return a + b;\n}\n\nconst obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nexport default testFunction;\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tools/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tools/analyze-lint-errors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tools/chart-lint-progress.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tools/fix-eslint-by-rule.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'__dirname' is assigned a value but never used.","line":25,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":168,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseErr' is defined but never used.","line":180,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promptSelect' is defined but never used.","line":211,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":259,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasEslintConfig' is assigned a value but never used.","line":292,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasPrettierConfig' is assigned a value but never used.","line":292,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":352,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":352,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":398,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":398,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":418,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":418,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":430,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":430,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fixedCount' is assigned a value but never used.","line":538,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":538,"endColumn":17}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\n\n/**\n * Advanced ESLint & Prettier issue fixer by rule name\n * Usage: node fix-eslint-by-rule.js [rule-name] [directory] [options]\n * Example: node fix-eslint-by-rule.js no-unused-vars src/components\n *\n * Options:\n *   --auto      Automatically fix top issue without prompting\n *   --batch=N   Fix N issues at once (batched fixing to avoid overwhelming changes)\n *   --dry-run   Show what would be fixed without making changes\n *   --prettier  Fix Prettier formatting issues\n *   --strict    Display all issues, including those in ignored files\n *   --threshold=N Only fix rules with at least N occurrences\n */\n\n// Get __dirname equivalent in ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Configuration\nconst CONFIG = {\n  eslintCmd: 'npx eslint',\n  prettierCmd: 'npx prettier',\n  defaultFilePatterns: ['js', 'jsx', 'ts', 'tsx', 'vue'],\n  ignoreDirs: ['node_modules', 'dist', 'build', '.git', 'coverage'],\n  topIssuesToShow: 15, // Number of top issues to display\n  batchSize: 10, // Default number of files to fix in one batch\n  fixableRuleHints: {\n    // Provide hints for common rules\n    'no-unused-vars': 'Remove unused variables',\n    'no-console': 'Remove console.log statements',\n    'prefer-const': 'Convert let to const where possible',\n    indent: 'Fix indentation issues',\n    quotes: 'Fix quote style issues (single vs double)',\n    semi: 'Fix missing or extra semicolons',\n    eqeqeq: 'Replace == with === and != with !==',\n    'no-multiple-empty-lines': 'Remove extra blank lines',\n    'prettier/prettier': 'Fix formatting to match Prettier configuration',\n  },\n  recommendedOrder: [\n    // Recommended order for fixing rules\n    'prettier/prettier', // Fix formatting first\n    'no-unused-imports', // Then remove unused imports\n    'no-unused-vars', // Then remove unused variables\n    'eqeqeq', // Then fix equality operators\n    'prefer-const', // Then convert let to const\n  ],\n  // Helper messages to guide the user\n  helpMessages: {\n    prettierConfig:\n      'No .prettierrc found. Create one with: echo \\'{\"singleQuote\": true, \"trailingComma\": \"es5\", \"printWidth\": 100}\\' > .prettierrc',\n    eslintConfig: 'No ESLint configuration found. Create one with: npm init @eslint/config',\n  },\n  logFile: 'eslint-progress.log',\n};\n\n// Process command line arguments\nconst args = process.argv.slice(2);\nconst ruleName = args.find(arg => !arg.startsWith('--') && arg.indexOf('=') === -1);\nconst directory =\n  args.find(arg => !arg.startsWith('--') && arg !== ruleName && arg.indexOf('=') === -1) || '.';\nconst options = {\n  auto: args.includes('--auto'),\n  dryRun: args.includes('--dry-run'),\n  prettier: args.includes('--prettier'),\n  strict: args.includes('--strict'),\n  batchSize: CONFIG.batchSize,\n  threshold: 1,\n};\n\n// Parse options with values\nargs.forEach(arg => {\n  if (arg.startsWith('--batch=')) {\n    options.batchSize = parseInt(arg.split('=')[1], 10) || CONFIG.batchSize;\n  }\n  if (arg.startsWith('--threshold=')) {\n    options.threshold = parseInt(arg.split('=')[1], 10) || 1;\n  }\n});\n\n// Help function\nfunction showHelp() {\n  console.log('Advanced ESLint & Prettier Issue Fixer by Rule');\n  console.log('---------------------------------------------');\n  console.log('Usage: node fix-eslint-by-rule.js [rule-name] [directory] [options]');\n  console.log('\\nOptions:');\n  console.log('  --auto          Automatically fix the top issue without prompting');\n  console.log('  --batch=N       Fix N files at once (default: 10)');\n  console.log('  --dry-run       Show what would be fixed without making changes');\n  console.log('  --prettier      Fix Prettier formatting issues');\n  console.log('  --strict        Include issues in files that would normally be ignored');\n  console.log('  --threshold=N   Only fix rules with at least N occurrences');\n  console.log('  --help          Show this help message');\n  console.log('\\nExamples:');\n  console.log('  node fix-eslint-by-rule.js              # Show top issues');\n  console.log('  node fix-eslint-by-rule.js no-unused-vars src # Fix no-unused-vars in src');\n  console.log('  node fix-eslint-by-rule.js --auto       # Auto-fix top issue');\n  console.log('  node fix-eslint-by-rule.js --prettier   # Fix formatting issues');\n  process.exit(0);\n}\n\nif (args.includes('--help') || args.includes('-h')) {\n  showHelp();\n}\n\n// Check for ESLint and Prettier configurations\nfunction checkConfigurations() {\n  // Check for ESLint config\n  const eslintConfigFiles = [\n    '.eslintrc.js',\n    '.eslintrc.cjs',\n    '.eslintrc.yaml',\n    '.eslintrc.yml',\n    '.eslintrc.json',\n    '.eslintrc',\n    'eslint.config.js',\n  ];\n  const hasEslintConfig = eslintConfigFiles.some(configFile =>\n    fs.existsSync(path.join(process.cwd(), configFile)),\n  );\n\n  // Check for Prettier config\n  const prettierConfigFiles = [\n    '.prettierrc',\n    '.prettierrc.js',\n    '.prettierrc.cjs',\n    '.prettierrc.yaml',\n    '.prettierrc.yml',\n    '.prettierrc.json',\n    '.prettierrc.toml',\n    'prettier.config.js',\n  ];\n  const hasPrettierConfig = prettierConfigFiles.some(configFile =>\n    fs.existsSync(path.join(process.cwd(), configFile)),\n  );\n\n  if (!hasEslintConfig) {\n    console.warn('⚠️  Warning: No ESLint configuration found.');\n    console.warn(`   ${CONFIG.helpMessages.eslintConfig}`);\n  }\n\n  if (options.prettier && !hasPrettierConfig) {\n    console.warn('⚠️  Warning: No Prettier configuration found.');\n    console.warn(`   ${CONFIG.helpMessages.prettierConfig}`);\n  }\n\n  return { hasEslintConfig, hasPrettierConfig };\n}\n\n// Safe execution function with error handling\nfunction safeExec(command, { silent = false, json = false } = {}) {\n  try {\n    const output = execSync(command, {\n      encoding: 'utf8',\n      stdio: silent ? 'pipe' : ['pipe', 'pipe', 'pipe'],\n    });\n\n    if (json) {\n      try {\n        return JSON.parse(output);\n      } catch (err) {\n        console.warn('Warning: Could not parse command output as JSON.');\n        return { parseError: true, output };\n      }\n    }\n\n    return output;\n  } catch (error) {\n    // For ESLint, an error code is expected when issues are found\n    if (error.stdout && json) {\n      try {\n        return JSON.parse(error.stdout);\n      } catch (parseErr) {\n        return { parseError: true, output: error.stdout };\n      }\n    } else if (error.stdout) {\n      return error.stdout;\n    }\n    throw error;\n  }\n}\n\n// Function to build file glob patterns\nfunction buildFileGlobs(patterns = CONFIG.defaultFilePatterns, baseDir = '.') {\n  return patterns.map(ext => `\"${baseDir}/**/*.${ext}\"`).join(' ');\n}\n\n// Create a readline interface for user input\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\n// Function to prompt user for confirmation\nfunction confirm(question) {\n  return new Promise(resolve => {\n    rl.question(`${question} (y/n) `, answer => {\n      resolve(answer.toLowerCase().startsWith('y'));\n    });\n  });\n}\n\n// Function to prompt user to select an option\nasync function promptSelect(message, options) {\n  console.log(message);\n  options.forEach((option, index) => {\n    console.log(`${index + 1}. ${option}`);\n  });\n\n  return new Promise(resolve => {\n    rl.question('Enter number: ', answer => {\n      const index = parseInt(answer, 10) - 1;\n      if (index >= 0 && index < options.length) {\n        resolve(index);\n      } else {\n        console.log('Invalid selection. Please try again.');\n        resolve(promptSelect(message, options));\n      }\n    });\n  });\n}\n\n// Function to track progress\nfunction trackProgress(fixedCount, ruleName) {\n  if (fixedCount > 0) {\n    try {\n      const date = new Date().toISOString().split('T')[0];\n      const progressEntry = `${date}: Fixed ${fixedCount} issues of rule \"${ruleName}\"`;\n\n      if (fs.existsSync(CONFIG.logFile)) {\n        fs.appendFileSync(CONFIG.logFile, `${progressEntry}\\n`, 'utf8');\n      }\n\n      console.log('\\n✅ Progress entry added to eslint-progress.log');\n    } catch (error) {\n      console.warn('Could not update progress log:', error.message);\n    }\n  }\n}\n\n// Function to fix Prettier issues\nasync function fixPrettierIssues(dir) {\n  console.log('\\n🔍 Checking for Prettier formatting issues...');\n\n  const fileGlobs = buildFileGlobs(CONFIG.defaultFilePatterns, dir);\n  const checkCmd = `${CONFIG.prettierCmd} --check ${fileGlobs} --loglevel=error`;\n\n  try {\n    safeExec(checkCmd);\n    console.log('✅ No Prettier formatting issues found.');\n    return 0;\n  } catch (error) {\n    // Prettier found formatting issues\n    console.log('Found Prettier formatting issues.');\n\n    if (options.dryRun) {\n      console.log('(Dry run mode - no changes will be made)');\n      return 0;\n    }\n\n    if (!options.auto) {\n      const shouldFix = await confirm('Do you want to fix all formatting issues?');\n      if (!shouldFix) {\n        return 0;\n      }\n    }\n\n    const fixCmd = `${CONFIG.prettierCmd} --write ${fileGlobs}`;\n    console.log(`\\n🔧 Fixing formatting issues...`);\n\n    try {\n      execSync(fixCmd, { stdio: 'inherit' });\n      console.log('\\n✅ Fixed Prettier formatting issues!');\n      return 1; // We don't know the exact count, so return 1 for positive progress\n    } catch (error) {\n      console.error('Error fixing Prettier issues:', error.message);\n      return 0;\n    }\n  }\n}\n\n// Main function to find and fix issues\nasync function main() {\n  // Check for configurations\n  const { hasEslintConfig, hasPrettierConfig } = checkConfigurations();\n\n  // Handle Prettier fixing\n  if (options.prettier || ruleName === 'prettier' || ruleName === 'prettier/prettier') {\n    const fixedCount = await fixPrettierIssues(directory);\n    if (fixedCount > 0) {\n      trackProgress(fixedCount, 'prettier/prettier');\n    }\n\n    if (!ruleName || ruleName === 'prettier' || ruleName === 'prettier/prettier') {\n      rl.close();\n      return;\n    }\n  }\n\n  // If no rule specified, find top issues\n  if (!ruleName) {\n    console.log('📊 Analyzing linting issues...');\n\n    // Add --no-ignore in strict mode\n    const strictFlag = options.strict ? '--no-ignore' : '';\n\n    // Build the ESLint command\n    const fileGlobs = buildFileGlobs(CONFIG.defaultFilePatterns, directory);\n    const eslintCmd = `${CONFIG.eslintCmd} ${fileGlobs} ${strictFlag} --format json`;\n\n    try {\n      // Get ESLint report\n      const eslintData = safeExec(eslintCmd, { silent: true, json: true });\n\n      if (eslintData.parseError) {\n        throw new Error('Could not parse ESLint output.');\n      }\n\n      // Count by rule\n      const ruleStats = {};\n      const filesByRule = {};\n\n      eslintData.forEach(file => {\n        if (file.messages && file.messages.length > 0) {\n          file.messages.forEach(msg => {\n            const rule = msg.ruleId || 'unknown';\n            if (!rule) {\n              return;\n            }\n\n            if (!ruleStats[rule]) {\n              ruleStats[rule] = 0;\n              filesByRule[rule] = new Set();\n            }\n\n            ruleStats[rule]++;\n            filesByRule[rule].add(file.filePath);\n          });\n        }\n      });\n\n      // Sort and display top issues\n      const sortedRules = Object.entries(ruleStats)\n        .sort((a, b) => b[1] - a[1])\n        .filter(([_, count]) => count >= options.threshold)\n        .slice(0, CONFIG.topIssuesToShow);\n\n      if (sortedRules.length === 0) {\n        console.log('\\n✅ No linting issues found matching your criteria.');\n        rl.close();\n        return;\n      }\n\n      console.log('\\n🔍 Top linting issues:');\n      console.log('------------------');\n\n      // Order rules by recommended fixing order if possible\n      const orderedRules = [...sortedRules].sort((a, b) => {\n        const indexA = CONFIG.recommendedOrder.indexOf(a[0]);\n        const indexB = CONFIG.recommendedOrder.indexOf(b[0]);\n\n        // If both are in the recommended order list, sort by that order\n        if (indexA !== -1 && indexB !== -1) {\n          return indexA - indexB;\n        }\n        // If only one is in the list, prioritize it\n        if (indexA !== -1) {\n          return -1;\n        }\n        if (indexB !== -1) {\n          return 1;\n        }\n        // Otherwise keep original order (by count)\n        return 0;\n      });\n\n      orderedRules.forEach(([rule, count], i) => {\n        const fileCount = filesByRule[rule] ? filesByRule[rule].size : 0;\n        const hint = CONFIG.fixableRuleHints[rule] || '';\n        const hintText = hint ? ` (${hint})` : '';\n        const isFixable = rule !== 'unknown' && rule !== null;\n        const symbol = isFixable ? '🔧' : '⚠️';\n\n        console.log(\n          `${i + 1}. ${symbol} ${rule}: ${count} issues in ${fileCount} files${hintText}`,\n        );\n      });\n\n      // Auto-fix mode\n      if (options.auto && orderedRules.length > 0) {\n        const [topRule, _] = orderedRules[0];\n        if (topRule && topRule !== 'unknown') {\n          console.log(`\\n🔧 Auto-fixing top issue: ${topRule}`);\n          await fixIssuesByRule(topRule, directory);\n        }\n        rl.close();\n        return;\n      }\n\n      // Interactive mode\n      console.log('\\n📋 Options:');\n      console.log('1. Fix an issue by number');\n      console.log('2. Fix all issues');\n      console.log('3. Exit');\n\n      rl.question('\\nEnter your choice (1-3): ', async choice => {\n        if (choice === '1') {\n          rl.question('\\nEnter issue number to fix: ', async ruleNumber => {\n            const index = parseInt(ruleNumber, 10) - 1;\n            if (index >= 0 && index < orderedRules.length) {\n              const [selectedRule, _] = orderedRules[index];\n              await fixIssuesByRule(selectedRule, directory);\n            } else {\n              console.log('❌ Invalid rule number.');\n            }\n            rl.close();\n          });\n        } else if (choice === '2') {\n          const shouldFix = await confirm(\n            '\\nAre you sure you want to fix ALL issues? This might make a lot of changes.',\n          );\n          if (shouldFix) {\n            for (const [rule, _] of orderedRules) {\n              if (rule !== 'unknown' && rule !== null) {\n                await fixIssuesByRule(rule, directory);\n              }\n            }\n          }\n          rl.close();\n        } else {\n          rl.close();\n        }\n      });\n    } catch (error) {\n      console.error('❌ Error analyzing ESLint issues:', error.message);\n      rl.close();\n    }\n  } else {\n    // Fix the specified rule\n    await fixIssuesByRule(ruleName, directory);\n    rl.close();\n  }\n}\n\n// Function to fix issues by rule\nasync function fixIssuesByRule(rule, dir) {\n  console.log(`\\n🔍 Checking for \"${rule}\" issues in ${dir}...`);\n\n  try {\n    const strictFlag = options.strict ? '--no-ignore' : '';\n    const fileGlobs = buildFileGlobs(CONFIG.defaultFilePatterns, dir);\n\n    // First, check how many issues of this type exist\n    const checkCmd = `${CONFIG.eslintCmd} ${fileGlobs} ${strictFlag} --format json`;\n    const beforeData = safeExec(checkCmd, { silent: true, json: true });\n\n    if (beforeData.parseError) {\n      throw new Error('Could not parse ESLint output.');\n    }\n\n    // Count issues of this type and gather affected files\n    let beforeCount = 0;\n    const affectedFiles = new Set();\n\n    beforeData.forEach(file => {\n      if (file.messages) {\n        const matchingMessages = file.messages.filter(msg => msg.ruleId === rule);\n        if (matchingMessages.length > 0) {\n          beforeCount += matchingMessages.length;\n          affectedFiles.add(file.filePath);\n        }\n      }\n    });\n\n    if (beforeCount === 0) {\n      console.log(`✅ No issues found for rule \"${rule}\".`);\n      return 0;\n    }\n\n    console.log(\n      `📊 Found ${beforeCount} issues for rule \"${rule}\" in ${affectedFiles.size} files.`,\n    );\n\n    if (options.dryRun) {\n      console.log('🔍 Dry run mode - no changes will be made.');\n      console.log('The following files would be modified:');\n      Array.from(affectedFiles)\n        .slice(0, 10)\n        .forEach(file => {\n          console.log(`- ${path.relative(process.cwd(), file)}`);\n        });\n      if (affectedFiles.size > 10) {\n        console.log(`... and ${affectedFiles.size - 10} more files`);\n      }\n      return 0;\n    }\n\n    const shouldFix = options.auto || (await confirm(`Do you want to fix \"${rule}\" issues?`));\n    if (!shouldFix) {\n      return 0;\n    }\n\n    // Special handling for Prettier\n    if (rule === 'prettier/prettier' || rule === 'prettier') {\n      return await fixPrettierIssues(dir);\n    }\n\n    // Fix in batches if there are many files\n    const affectedFilesArray = Array.from(affectedFiles);\n    const batchCount = Math.ceil(affectedFilesArray.length / options.batchSize);\n    let fixedCount = 0;\n\n    if (batchCount > 1) {\n      console.log(`⚙️ Fixing in ${batchCount} batches of ${options.batchSize} files...`);\n    }\n\n    for (let i = 0; i < batchCount; i++) {\n      const batchFiles = affectedFilesArray\n        .slice(i * options.batchSize, (i + 1) * options.batchSize)\n        .map(f => `\"${f}\"`)\n        .join(' ');\n\n      if (batchCount > 1) {\n        console.log(`\\n🔧 Batch ${i + 1}/${batchCount}...`);\n      }\n\n      // Run the fix command\n      const fixCmd = `${CONFIG.eslintCmd} ${batchFiles} --fix --rule \"${rule}:error\"`;\n      execSync(fixCmd, { stdio: 'inherit' });\n\n      fixedCount += beforeCount; // This is approximate since we don't recount per batch\n    }\n\n    // Check how many issues remain\n    const afterData = safeExec(checkCmd, { silent: true, json: true });\n    let afterCount = 0;\n\n    afterData.forEach(file => {\n      if (file.messages) {\n        afterCount += file.messages.filter(msg => msg.ruleId === rule).length;\n      }\n    });\n\n    const actualFixedCount = beforeCount - afterCount;\n\n    console.log(`\\n✅ Results for \"${rule}\":`);\n    console.log(`- Fixed: ${actualFixedCount} issues`);\n    console.log(`- Remaining: ${afterCount} issues`);\n\n    if (actualFixedCount > 0) {\n      trackProgress(actualFixedCount, rule);\n    }\n\n    return actualFixedCount;\n  } catch (error) {\n    console.error(`❌ Error fixing \"${rule}\" issues:`, error.message);\n    return 0;\n  }\n}\n\n// Run the main function\nmain().catch(error => {\n  console.error('❌ Unexpected error:', error);\n  rl.close();\n  process.exit(1);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tools/setup-linting.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":131,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":138,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-env node */\nimport fs from 'fs';\nimport path from 'path';\nimport { execSync } from 'child_process';\n\n/**\n * Script to set up and fix ESLint and Prettier configuration\n * Usage: node tools/setup-linting.js\n */\n\nconsole.log('Setting up ESLint and Prettier configuration...');\n\n// Check if Prettier and ESLint are installed\ntry {\n  execSync('npx prettier --version', { stdio: 'ignore' });\n  execSync('npx eslint --version', { stdio: 'ignore' });\n  console.log('✅ Prettier and ESLint are installed');\n} catch (error) {\n  console.error('❌ Prettier or ESLint is not installed. Please run:');\n  console.error('npm install --save-dev prettier eslint eslint-config-prettier');\n  process.exit(1);\n}\n\n// Create or update .prettierrc.json\nconst prettierConfig = {\n  semi: true,\n  singleQuote: true,\n  tabWidth: 2,\n  trailingComma: 'es5',\n  printWidth: 100,\n  bracketSpacing: true,\n  arrowParens: 'avoid',\n  endOfLine: 'lf',\n  plugins: ['prettier-plugin-organize-imports', 'prettier-plugin-tailwindcss']\n};\n\nfs.writeFileSync('.prettierrc.json', JSON.stringify(prettierConfig, null, 2));\nconsole.log('✅ Created/updated .prettierrc.json');\n\n// Check for conflicting ESLint configurations\nconst oldConfigFiles = [\n  '.eslintrc',\n  '.eslintrc.js',\n  '.eslintrc.cjs',\n  '.eslintrc.yaml',\n  '.eslintrc.yml',\n  '.eslintrc.json'\n];\n\nlet conflictsFound = false;\noldConfigFiles.forEach(file => {\n  if (fs.existsSync(file)) {\n    console.log(`⚠️ Found potentially conflicting ESLint config: ${file}`);\n    conflictsFound = true;\n  }\n});\n\nif (conflictsFound) {\n  console.log('Consider removing old ESLint config files to avoid conflicts with eslint.config.js');\n}\n\n// Update tools/.eslintrc.json\nconst toolsEslintConfig = {\n  env: {\n    node: true,\n    es2020: true\n  },\n  rules: {\n    'no-console': 'off'\n  }\n};\n\n// Ensure tools directory exists\nif (!fs.existsSync('tools')) {\n  fs.mkdirSync('tools');\n}\n\nfs.writeFileSync('tools/.eslintrc.json', JSON.stringify(toolsEslintConfig, null, 2));\nconsole.log('✅ Created/updated tools/.eslintrc.json');\n\n// Create a VS Code settings file for Prettier and ESLint integration\nconst vscodePath = '.vscode';\nconst vscodeSettingsPath = path.join(vscodePath, 'settings.json');\n\nif (!fs.existsSync(vscodePath)) {\n  fs.mkdirSync(vscodePath);\n}\n\nlet vscodeSettings = {};\nif (fs.existsSync(vscodeSettingsPath)) {\n  try {\n    vscodeSettings = JSON.parse(fs.readFileSync(vscodeSettingsPath, 'utf8'));\n  } catch (error) {\n    console.error('❌ Error reading .vscode/settings.json:', error.message);\n  }\n}\n\n// Update VS Code settings for ESLint and Prettier\nvscodeSettings = {\n  ...vscodeSettings,\n  'editor.formatOnSave': true,\n  'editor.defaultFormatter': 'esbenp.prettier-vscode',\n  'editor.codeActionsOnSave': {\n    'source.fixAll.eslint': true\n  },\n  'eslint.validate': ['javascript', 'javascriptreact', 'typescript', 'typescriptreact'],\n  'prettier.requireConfig': true,\n  '[typescript]': {\n    'editor.defaultFormatter': 'esbenp.prettier-vscode'\n  },\n  '[typescriptreact]': {\n    'editor.defaultFormatter': 'esbenp.prettier-vscode'\n  },\n  '[javascript]': {\n    'editor.defaultFormatter': 'esbenp.prettier-vscode'\n  },\n  '[javascriptreact]': {\n    'editor.defaultFormatter': 'esbenp.prettier-vscode'\n  }\n};\n\nfs.writeFileSync(vscodeSettingsPath, JSON.stringify(vscodeSettings, null, 2));\nconsole.log('✅ Created/updated .vscode/settings.json');\n\n// Create a test script to verify the setup\nconsole.log('\\nTesting ESLint and Prettier setup...');\n\ntry {\n  execSync('npx eslint --no-error-on-unmatched-pattern eslint.config.js', { stdio: 'inherit' });\n  console.log('✅ ESLint test passed');\n} catch (error) {\n  console.error('❌ ESLint test failed');\n}\n\ntry {\n  execSync('npx prettier --check .prettierrc.json', { stdio: 'inherit' });\n  console.log('✅ Prettier test passed');\n} catch (error) {\n  console.error('❌ Prettier test failed');\n}\n\nconsole.log('\\n✅ Setup complete!');\nconsole.log('\\nRecommended VS Code extensions:');\nconsole.log('- ESLint (dbaeumer.vscode-eslint)');\nconsole.log('- Prettier (esbenp.prettier-vscode)');\nconsole.log('\\nTo format all files, run:');\nconsole.log('npm run format:all'); ","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/tools/track-eslint-progress.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":89,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":131,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n/**\n * Adds a new progress entry to eslint-progress.log\n * Run this daily or after fixing batches of issues\n * Enhanced version with automatic ignoring of node_modules and filtering options\n */\n\n// Get __dirname equivalent in ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Configuration (you can adjust these)\nconst CONFIG = {\n  logFile: 'eslint-progress.log',\n  filePatterns: ['js', 'ts', 'tsx'], // Removed 'jsx' since it's causing issues\n  ignoreDirs: ['node_modules', 'dist', 'build', '.git'],\n  includeDetails: true, // Set to true to include top issues in the log\n  topIssuesCount: 5, // Number of top issues to display\n  checkPrettier: true, // Whether to check Prettier formatting\n};\n\n// Process command line arguments\nconst args = process.argv.slice(2);\nconst showHelp = args.includes('--help') || args.includes('-h');\nconst includeDetails = args.includes('--details') ? true : CONFIG.includeDetails;\nconst checkPrettier = args.includes('--no-prettier') ? false : CONFIG.checkPrettier;\nconst silentMode = args.includes('--silent');\n\nif (showHelp) {\n  console.log('ESLint & Prettier Progress Tracker');\n  console.log('Usage: ./track-eslint-progress.js [options]');\n  console.log('');\n  console.log('Options:');\n  console.log('  --help, -h     Show this help message');\n  console.log('  --details      Include details about top issues in the log');\n  console.log(\"  --no-details   Don't include details about issues in the log\");\n  console.log('  --no-prettier  Skip Prettier check');\n  console.log(\"  --silent       Don't show the progress chart\");\n  process.exit(0);\n}\n\n// Get current date\nconst date = new Date().toISOString().split('T')[0];\nconst dateEntry = `===== ${date} =====`;\n\n// Helper function to execute commands safely\nfunction safeExec(command) {\n  try {\n    return execSync(command, { encoding: 'utf8' });\n  } catch (error) {\n    // If the command fails but outputs something, return that output\n    if (error.stdout) {\n      return error.stdout;\n    }\n    throw error;\n  }\n}\n\n// Run ESLint check and parse results\ntry {\n  // Ensure the log file exists\n  if (!fs.existsSync(CONFIG.logFile)) {\n    fs.writeFileSync(CONFIG.logFile, '', 'utf8');\n  }\n\n  let logContent = `${dateEntry}\\n`;\n  let totalIssues = 0;\n  let eslintErrors = 0;\n  let eslintWarnings = 0;\n  let prettierIssues = 0;\n\n  // Build the ESLint command with file patterns and ignores\n  const fileGlobs = CONFIG.filePatterns.map(ext => `\"**/*.${ext}\"`).join(' ');\n  const eslintCmd = `npx eslint ${fileGlobs} --format json`;\n\n  console.log('Running ESLint check...');\n  const eslintOutput = safeExec(eslintCmd);\n\n  // Parse ESLint results\n  let eslintData = [];\n  try {\n    eslintData = JSON.parse(eslintOutput);\n  } catch (e) {\n    console.warn(\n      'Warning: Could not parse ESLint output as JSON. ESLint may not be properly configured.',\n    );\n    console.warn('Proceeding with zero ESLint issues...');\n  }\n\n  // Count errors and warnings\n  const issuesByRule = {};\n\n  eslintData.forEach(file => {\n    if (file.messages && file.messages.length > 0) {\n      file.messages.forEach(msg => {\n        if (msg.severity === 2) {\n          eslintErrors++;\n        } else if (msg.severity === 1) {\n          eslintWarnings++;\n        }\n\n        // Track issues by rule\n        const ruleId = msg.ruleId || 'unknown';\n        if (!issuesByRule[ruleId]) {\n          issuesByRule[ruleId] = 0;\n        }\n        issuesByRule[ruleId]++;\n      });\n    }\n  });\n\n  // Check Prettier formatting issues if enabled\n  if (checkPrettier) {\n    console.log('Running Prettier check...');\n    try {\n      const prettierCmd = `npx prettier --check ${fileGlobs} | wc -l`;\n      const prettierOutput = safeExec(prettierCmd).trim();\n\n      // Parse Prettier output - this is an approximation as Prettier doesn't have a strict format\n      const prettierCount = parseInt(prettierOutput, 10);\n      if (!isNaN(prettierCount) && prettierCount > 0) {\n        // Usually Prettier prints a header line, so we subtract 1\n        prettierIssues = Math.max(0, prettierCount - 1);\n      }\n    } catch (error) {\n      console.warn('Warning: Could not run Prettier check. Prettier may not be installed.');\n      console.warn('Proceeding with zero Prettier issues...');\n    }\n  }\n\n  // Calculate totals\n  totalIssues = eslintErrors + eslintWarnings + prettierIssues;\n\n  // Format the progress entry\n  const eslintProgressEntry = `${eslintErrors + eslintWarnings} ESLint problems (${eslintErrors} errors, ${eslintWarnings} warnings)`;\n  const prettierProgressEntry = checkPrettier ? `${prettierIssues} Prettier formatting issues` : '';\n  const progressEntry = `${totalIssues} problems (${eslintErrors} errors, ${eslintWarnings} warnings${checkPrettier ? `, ${prettierIssues} formatting` : ''})`;\n\n  logContent += `${progressEntry}\\n`;\n\n  // Add details about top issues if enabled\n  if (includeDetails && Object.keys(issuesByRule).length > 0) {\n    logContent += '\\nTop issues by rule:\\n';\n\n    // Sort issues by count (descending)\n    const sortedIssues = Object.entries(issuesByRule)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, CONFIG.topIssuesCount);\n\n    sortedIssues.forEach(([rule, count]) => {\n      logContent += `- ${rule}: ${count} occurrences\\n`;\n    });\n\n    // Add a suggestion for fixing the top issue\n    if (sortedIssues.length > 0) {\n      const [topRule, topCount] = sortedIssues[0];\n      if (topRule && topRule !== 'unknown') {\n        logContent += `\\nSuggestion: Focus on fixing \"${topRule}\" issues (${topCount} occurrences)\\n`;\n\n        if (topRule.startsWith('prettier/') || topRule === 'prettier') {\n          logContent += `Try running: npx prettier --write ${fileGlobs}\\n`;\n        } else {\n          logContent += `Try running: npx eslint --fix . --rule \"${topRule}: error\"\\n`;\n        }\n      }\n    }\n  }\n\n  logContent += '\\n';\n\n  // Write to log file\n  fs.appendFileSync(CONFIG.logFile, logContent, 'utf8');\n\n  console.log('Progress entry added to eslint-progress.log');\n  console.log(eslintProgressEntry);\n  if (checkPrettier && prettierProgressEntry) {\n    console.log(prettierProgressEntry);\n  }\n  console.log(`Total: ${totalIssues} issues`);\n\n  // Generate chart\n  if (!silentMode) {\n    console.log('\\nGenerating progress chart...');\n\n    // Check if chart script exists in the same directory\n    const chartScript = path.join(__dirname, 'chart-lint-progress.js');\n    if (fs.existsSync(chartScript)) {\n      // We can't directly require in ESM, so we'll run it as a separate process\n      execSync(`node ${chartScript}`, { stdio: 'inherit' });\n    } else {\n      console.log(\n        '\\nTo generate a chart, please save the chart-lint-progress.js file in the same directory.',\n      );\n    }\n  }\n} catch (error) {\n  console.error('Error tracking ESLint progress:', error.message);\n  process.exit(1);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/vite.config.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":18,"column":13,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":18,"endColumn":26,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[606,619],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { resolve } from 'path';\nimport serveStatic from 'serve-static';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(),\n    {\n      name: 'configure-server',\n      configureServer(server) {\n        // Serve files from .pixelArtAssets directory\n        server.middlewares.use((req, res, next) => {\n          if (req.url?.startsWith('/.pixelArtAssets/')) {\n            req.url = req.url.replace('/.pixelArtAssets/', '/');\n            res.setHeader('Content-Type', 'image/png');\n            // @ts-ignore\n            return serveStatic(resolve(__dirname, '.pixelArtAssets'))(req, res, next);\n          }\n          next();\n        });\n      },\n    },\n  ],\n  resolve: {\n    alias: {\n      '@': '/src',\n    },\n  },\n  optimizeDeps: {\n    exclude: ['lucide-react'],\n  },\n  server: {\n    port: 3000,\n    host: true,\n    open: true,\n    strictPort: true,\n  },\n  assetsInclude: ['**/*.png', '**/*.jpg', '**/*.aseprite'],\n  // Copy both asset directories to public\n  publicDir: resolve(__dirname, 'assets'),\n  build: {\n    rollupOptions: {\n      input: {\n        main: resolve(__dirname, 'index.html'),\n      },\n    },\n  },\n  esbuild: {\n    target: 'es2020',\n  },\n  // Configure TypeScript options\n  css: {\n    devSourcemap: true,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
