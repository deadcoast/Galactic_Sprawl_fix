[{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/AutomatedExpansion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/BiodomeModule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/ColonyCore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/CulturalCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/EconomicHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/HabitableWorld.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/colony/ResourceTransferAnimation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationHub.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":206,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":206,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5485,5535],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AlertTriangle,\n  Filter,\n  Flag,\n  History,\n  Map,\n  Radar,\n  Rocket,\n  Search,\n  Target,\n  ZoomIn,\n  ZoomOut,\n} from 'lucide-react';\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { ContextMenuItem, useContextMenu } from '../../../../components/ui/ContextMenu';\nimport { Draggable, DragItem, DropTarget } from '../../../../components/ui/DragAndDrop';\nimport { useTooltipContext } from '../../../../components/ui/tooltip-context';\nimport { explorationRules } from '../../../../config/automation/explorationRules';\nimport { ReconShipManagerImpl } from '../../../../managers/exploration/ReconShipManagerImpl';\nimport { automationManager } from '../../../../managers/game/AutomationManager';\nimport { Position } from '../../../../types/core/GameTypes';\nimport { ResourceTransfer } from '../MiningHub/ResourceTransfer';\nimport { ExplorationControls } from './ExplorationControls';\nimport { ExplorationTutorial } from './ExplorationTutorial';\nimport { MissionLog } from './MissionLog';\nimport { ReconShipStatus } from './ReconShipStatus';\n\ninterface Sector {\n  id: string;\n  name: string;\n  status: 'unmapped' | 'mapped' | 'scanning';\n  coordinates: { x: number; y: number };\n  resourcePotential: number;\n  habitabilityScore: number;\n  anomalies: Anomaly[];\n  lastScanned?: number;\n  resources?: Array<{\n    type: string;\n    amount: number;\n  }>;\n}\n\ninterface Anomaly {\n  id: string;\n  type: 'artifact' | 'signal' | 'phenomenon';\n  severity: 'low' | 'medium' | 'high';\n  description: string;\n  investigated: boolean;\n}\n\ninterface ReconShip {\n  id: string;\n  name: string;\n  status: 'idle' | 'scanning' | 'investigating' | 'returning';\n  targetSector?: string;\n  experience: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  efficiency: number;\n  lastUpdate?: number;\n}\n\ninterface MapOffset {\n  x: number;\n  y: number;\n}\n\ninterface AdvancedFilters {\n  minResourcePotential: number;\n  minHabitabilityScore: number;\n  hasAnomalies: boolean;\n  anomalySeverity: 'any' | 'low' | 'medium' | 'high';\n  lastScannedWithin: number; // hours\n  resourceTypes: string[];\n}\n\n// Mock data for demonstration\nconst mockSectors: Sector[] = [\n  {\n    id: 'alpha-sector',\n    name: 'Alpha Sector',\n    status: 'mapped',\n    coordinates: { x: 0, y: 0 },\n    resourcePotential: 0.8,\n    habitabilityScore: 0.6,\n    anomalies: [\n      {\n        id: 'ancient-ruins',\n        type: 'artifact',\n        severity: 'high',\n        description: 'Ancient ruins of unknown origin',\n        investigated: false,\n      },\n    ],\n    lastScanned: Date.now() - 3600000,\n  },\n  {\n    id: 'beta-sector',\n    name: 'Beta Sector',\n    status: 'scanning',\n    coordinates: { x: 200, y: -150 },\n    resourcePotential: 0.5,\n    habitabilityScore: 0.3,\n    anomalies: [],\n    lastScanned: Date.now(),\n  },\n  {\n    id: 'gamma-sector',\n    name: 'Gamma Sector',\n    status: 'unmapped',\n    coordinates: { x: -180, y: 120 },\n    resourcePotential: 0.4,\n    habitabilityScore: 0.7,\n    anomalies: [],\n  },\n];\n\nconst mockShips: ReconShip[] = [\n  {\n    id: 'recon-1',\n    name: 'Pathfinder Alpha',\n    status: 'scanning',\n    targetSector: 'beta-sector',\n    experience: 1250,\n    specialization: 'mapping',\n    efficiency: 0.9,\n  },\n  {\n    id: 'recon-2',\n    name: 'Signal Hunter Beta',\n    status: 'investigating',\n    targetSector: 'alpha-sector',\n    experience: 800,\n    specialization: 'anomaly',\n    efficiency: 0.85,\n  },\n];\n\n// Mock transfer data for exploration discoveries\nconst mockExplorationTransfers = [\n  {\n    id: 'discovery-1',\n    sourceId: 'alpha-sector',\n    targetId: 'storage',\n    resourceType: 'Dark Matter',\n    amount: 100,\n    progress: 0.5,\n  },\n];\n\ntype FilterType = 'all' | 'unmapped' | 'anomalies';\n\n// Memoized Sector Component\nconst SectorComponent = memo(\n  ({\n    sector,\n    isSelected,\n    showHeatMap,\n    onSelect,\n    onHover,\n    getSectorHeat,\n    ships,\n    onShipAssign,\n  }: {\n    sector: Sector;\n    isSelected: boolean;\n    showHeatMap: boolean;\n    onSelect: (sector: Sector) => void;\n    onHover: (show: boolean, sector: Sector) => void;\n    getSectorHeat: (sector: Sector) => number;\n    ships: ReconShip[];\n    onShipAssign: (shipId: string, sectorId: string) => void;\n  }) => {\n    const scanningShip = ships.find(ship => ship.targetSector === sector.id);\n    const heatValue = getSectorHeat(sector);\n\n    // Context menu for sector actions\n    const getSectorMenuItems = (): ContextMenuItem[] => {\n      const assignedShip = ships.find(ship => ship.targetSector === sector.id);\n      return [\n        {\n          id: 'info',\n          label: 'View Details',\n          icon: <Map className=\"h-4 w-4\" />,\n          action: () => onSelect(sector),\n        },\n        {\n          id: 'assign-ship',\n          label: assignedShip ? 'Reassign Ship' : 'Assign Ship',\n          icon: <Rocket className=\"h-4 w-4\" />,\n          action: () => {}, // No-op action for parent menu\n          children: ships\n            .filter(ship => ship.status === 'idle' || ship.targetSector === sector.id)\n            .map(ship => ({\n              id: ship.id,\n              label: ship.name,\n              icon: <Target className=\"h-4 w-4\" />,\n              action: () => onShipAssign(ship.id, sector.id),\n            })),\n        },\n        {\n          id: 'mark-priority',\n          label: 'Mark as Priority',\n          icon: <Flag className=\"h-4 w-4\" />,\n          action: () => {\n            // Handle priority marking\n            console.log(`Marking ${sector.name} as priority`);\n          },\n        },\n      ];\n    };\n\n    const { handleContextMenu, ContextMenuComponent } = useContextMenu({\n      items: getSectorMenuItems(),\n    });\n\n    return (\n      <div\n        className=\"absolute\"\n        style={{\n          left: `calc(50% + ${sector.coordinates.x}px)`,\n          top: `calc(50% + ${sector.coordinates.y}px)`,\n          transform: 'translate(-50%, -50%)',\n        }}\n      >\n        <DropTarget\n          accept={['ship']}\n          onDrop={(item: DragItem) => {\n            if (item.type === 'ship') {\n              onShipAssign(item.data.id, sector.id);\n            }\n          }}\n          className=\"group relative\"\n        >\n          <div\n            onContextMenu={handleContextMenu}\n            onClick={() => onSelect(sector)}\n            onMouseEnter={() => onHover(true, sector)}\n            onMouseLeave={() => onHover(false, sector)}\n          >\n            {/* Sector Visualization */}\n            <div\n              className={`h-24 w-24 rounded-lg transition-all duration-300 ${\n                sector.status === 'unmapped'\n                  ? 'bg-gray-800/50'\n                  : sector.status === 'scanning'\n                    ? 'animate-pulse bg-teal-900/50'\n                    : 'bg-teal-800/30'\n              } relative ${\n                isSelected ? 'ring-2 ring-teal-400 ring-offset-2 ring-offset-gray-900' : ''\n              }`}\n            >\n              {/* Heat Map Overlay */}\n              {showHeatMap && sector.status !== 'unmapped' && (\n                <div\n                  className=\"absolute inset-0 rounded-lg mix-blend-overlay\"\n                  style={{\n                    background: `rgba(${Math.round(heatValue * 255)}, ${Math.round(heatValue * 100)}, 0, ${heatValue * 0.8})`,\n                  }}\n                />\n              )}\n\n              {/* Resource Potential Indicator */}\n              {sector.status !== 'unmapped' && (\n                <div\n                  className=\"absolute inset-2 rounded border-2 border-teal-500/30 transition-all\"\n                  style={{\n                    clipPath: `polygon(0 ${100 - sector.resourcePotential * 100}%, 100% ${100 - sector.resourcePotential * 100}%, 0%, 0 100%)`,\n                  }}\n                />\n              )}\n\n              {/* Habitability Score Ring */}\n              {sector.status !== 'unmapped' && (\n                <div\n                  className=\"absolute inset-0 rounded-lg border-4 border-teal-400/20 transition-all\"\n                  style={{\n                    clipPath: `polygon(0 0, ${sector.habitabilityScore * 100}% 0, ${sector.habitabilityScore * 100}% 100%, 0 100%)`,\n                  }}\n                />\n              )}\n\n              {/* Anomaly Indicators */}\n              {sector.anomalies.length > 0 && (\n                <div className=\"mb-3\">\n                  <div className=\"mb-2 text-xs font-medium text-gray-300\">Detected Anomalies</div>\n                  <div className=\"space-y-1\">\n                    {sector.anomalies.map(anomaly => (\n                      <div\n                        key={anomaly.id}\n                        className={`rounded px-2 py-1 text-xs ${\n                          anomaly.severity === 'high'\n                            ? 'bg-red-900/50 text-red-400'\n                            : anomaly.severity === 'medium'\n                              ? 'bg-yellow-900/50 text-yellow-400'\n                              : 'bg-blue-900/50 text-blue-400'\n                        }`}\n                      >\n                        {anomaly.type.charAt(0).toUpperCase() + anomaly.type.slice(1)}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Scanning Ship Indicator */}\n              {scanningShip && (\n                <div className=\"absolute -right-2 -top-2\">\n                  <Rocket className=\"h-5 w-5 animate-pulse text-teal-400\" />\n                </div>\n              )}\n            </div>\n\n            {/* Sector Label */}\n            <div className=\"absolute left-1/2 top-full mt-2 -translate-x-1/2 text-center\">\n              <div className=\"font-medium text-teal-200\">{sector.name}</div>\n              {sector.status !== 'unmapped' && (\n                <div className=\"text-sm text-teal-300/70\">\n                  {sector.status === 'scanning' ? 'Scanning in Progress' : 'Mapped'}\n                </div>\n              )}\n            </div>\n          </div>\n        </DropTarget>\n        {ContextMenuComponent}\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    // Custom comparison function for memo\n    return (\n      prevProps.sector === nextProps.sector &&\n      prevProps.isSelected === nextProps.isSelected &&\n      prevProps.showHeatMap === nextProps.showHeatMap &&\n      prevProps.ships.length === nextProps.ships.length\n    );\n  }\n);\n\n// Ship Marker Component with drag-and-drop\nconst ShipMarker = memo(({ ship, targetSector }: { ship: ReconShip; targetSector: Sector }) => {\n  return (\n    <div\n      className=\"absolute transition-all duration-300\"\n      style={{\n        left: `calc(50% + ${targetSector.coordinates.x}px)`,\n        top: `calc(50% + ${targetSector.coordinates.y}px)`,\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Draggable\n        item={{\n          id: ship.id,\n          type: 'ship',\n          data: ship,\n        }}\n      >\n        <div className=\"rounded-lg border border-teal-500/30 bg-teal-900/80 p-2 backdrop-blur-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Rocket className=\"h-4 w-4 text-teal-400\" />\n            <span className=\"text-xs font-medium text-teal-200\">{ship.name}</span>\n          </div>\n          <div className=\"mt-1 text-xs text-teal-400/70\">\n            {ship.status.charAt(0).toUpperCase() + ship.status.slice(1)}\n          </div>\n        </div>\n      </Draggable>\n    </div>\n  );\n});\n\n// Define the ExplorationTask interface to match the one in ReconShipManagerImpl.ts\ninterface ExplorationTask {\n  id: string;\n  type: 'explore' | 'investigate' | 'evade';\n  target: {\n    id: string;\n    position: Position;\n  };\n  priority: number;\n  assignedAt: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  status: 'queued' | 'in-progress' | 'completed' | 'failed';\n  progress?: number;\n  threatLevel?: number;\n}\n\nexport function ExplorationHub() {\n  const [selectedSector, setSelectedSector] = useState<Sector | null>(null);\n  const [showTutorial, setShowTutorial] = useState(true);\n  const [showMissionLog, setShowMissionLog] = useState(false);\n  const [filter, setFilter] = useState<FilterType>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [zoom, setZoom] = useState(1);\n  const [position, setPosition] = useState<{ x: number; y: number } | null>(null);\n  const [showHeatMap, setShowHeatMap] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n  const [advancedFilters, setAdvancedFilters] = useState<AdvancedFilters>({\n    minResourcePotential: 0,\n    minHabitabilityScore: 0,\n    hasAnomalies: false,\n    anomalySeverity: 'any',\n    lastScannedWithin: 24,\n    resourceTypes: [],\n  });\n  const [mapOffset, setMapOffset] = useState<MapOffset>({ x: 0, y: 0 });\n\n  const isDragging = useRef(false);\n  const lastPosition = useRef({ x: 0, y: 0 });\n  const { showTooltip, hideTooltip } = useTooltipContext();\n\n  // Add new state for real-time updates\n  const [sectors, setSectors] = useState(mockSectors);\n  const [ships, setShips] = useState(mockShips);\n  const [transfers, setTransfers] = useState(mockExplorationTransfers);\n\n  // Optimize update intervals with useRef\n  const updateIntervals = useRef({\n    ships: null as NodeJS.Timeout | null,\n    sectors: null as NodeJS.Timeout | null,\n    transfers: null as NodeJS.Timeout | null,\n  });\n\n  // Memoize complex calculations\n  const activeShips = useMemo(() => {\n    return ships.filter(ship => ship.status !== 'idle');\n  }, [ships]);\n\n  // Initialize ReconShipManager\n  const reconManager = useMemo(() => new ReconShipManagerImpl(), []);\n\n  // Register automation rules on mount\n  useEffect(() => {\n    // Register each exploration rule\n    explorationRules.forEach(rule => {\n      automationManager.registerRule(rule);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      explorationRules.forEach(rule => {\n        automationManager.removeRule(rule.id);\n      });\n    };\n  }, []);\n\n  // Optimize real-time updates with separate intervals\n  useEffect(() => {\n    // Ship position updates (more frequent)\n    updateIntervals.current.ships = setInterval(() => {\n      setShips(prevShips =>\n        prevShips.map(ship => {\n          if (ship.status === 'idle' || !ship.targetSector) return ship;\n\n          const targetSector = sectors.find(s => s.id === ship.targetSector);\n          if (!targetSector) return ship;\n\n          // Calculate progress based on efficiency and time\n          const progress = Math.min(\n            1,\n            (Date.now() - (ship.lastUpdate || Date.now())) / (10000 / ship.efficiency)\n          );\n\n          // Update ship status based on progress\n          if (progress >= 1) {\n            return {\n              ...ship,\n              status: ship.status === 'scanning' ? 'investigating' : 'returning',\n              lastUpdate: Date.now(),\n            };\n          }\n\n          return {\n            ...ship,\n            lastUpdate: Date.now(),\n          };\n        })\n      );\n    }, 1000);\n\n    // Sector updates (less frequent)\n    updateIntervals.current.sectors = setInterval(() => {\n      setSectors(prevSectors =>\n        prevSectors.map(sector => {\n          const scanningShip = ships.find(\n            ship => ship.targetSector === sector.id && ship.status === 'scanning'\n          );\n\n          if (scanningShip) {\n            // Update sector data based on ship's scan\n            return {\n              ...sector,\n              status: 'scanning',\n              lastScanned: Date.now(),\n            };\n          }\n\n          if (sector.status === 'scanning' && !scanningShip) {\n            // Complete the scan\n            return {\n              ...sector,\n              status: 'mapped',\n              lastScanned: Date.now(),\n            };\n          }\n\n          return sector;\n        })\n      );\n    }, 2000);\n\n    // Transfer updates (least frequent)\n    updateIntervals.current.transfers = setInterval(() => {\n      setTransfers(prevTransfers =>\n        prevTransfers.map(transfer => {\n          if (transfer.progress >= 1) return transfer;\n\n          return {\n            ...transfer,\n            progress: Math.min(1, transfer.progress + 0.1),\n          };\n        })\n      );\n    }, 3000);\n\n    // Store current intervals for cleanup\n    const currentIntervals = { ...updateIntervals.current };\n\n    return () => {\n      Object.values(currentIntervals).forEach(interval => {\n        if (interval) clearInterval(interval);\n      });\n    };\n  }, [sectors, ships]);\n\n  // Enhanced sector filtering\n  const filteredSectors = useMemo(() => {\n    return sectors.filter(sector => {\n      // Basic text search\n      if (searchQuery && !sector.name.toLowerCase().includes(searchQuery.toLowerCase())) {\n        return false;\n      }\n\n      // Basic type filter\n      if (filter === 'unmapped' && sector.status !== 'unmapped') {\n        return false;\n      }\n      if (filter === 'anomalies' && sector.anomalies.length === 0) {\n        return false;\n      }\n\n      // Advanced filters\n      if (sector.resourcePotential < advancedFilters.minResourcePotential) {\n        return false;\n      }\n      if (sector.habitabilityScore < advancedFilters.minHabitabilityScore) {\n        return false;\n      }\n      if (advancedFilters.hasAnomalies && sector.anomalies.length === 0) {\n        return false;\n      }\n      if (advancedFilters.anomalySeverity !== 'any') {\n        const hasMatchingSeverity = sector.anomalies.some(\n          a => a.severity === advancedFilters.anomalySeverity\n        );\n        if (!hasMatchingSeverity) {\n          return false;\n        }\n      }\n      if (advancedFilters.lastScannedWithin > 0 && sector.lastScanned) {\n        const hoursSinceLastScan = (Date.now() - sector.lastScanned) / (1000 * 60 * 60);\n        if (hoursSinceLastScan > advancedFilters.lastScannedWithin) {\n          return false;\n        }\n      }\n      if (\n        advancedFilters.resourceTypes.length > 0 &&\n        !sector.resources?.some(r => advancedFilters.resourceTypes.includes(r.type))\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n  }, [sectors, searchQuery, filter, advancedFilters]);\n\n  // Enhanced heat map calculation\n  const getSectorHeat = useCallback((sector: Sector) => {\n    let heatValue = 0;\n\n    // Base heat from resource potential\n    heatValue += sector.resourcePotential * 0.4;\n\n    // Heat from habitability\n    heatValue += sector.habitabilityScore * 0.3;\n\n    // Heat from anomalies\n    const anomalyHeat = sector.anomalies.reduce((sum, anomaly) => {\n      const severityValue =\n        anomaly.severity === 'high' ? 0.3 : anomaly.severity === 'medium' ? 0.2 : 0.1;\n      return sum + severityValue;\n    }, 0);\n    heatValue += anomalyHeat;\n\n    // Reduce heat for older scans\n    if (sector.lastScanned) {\n      const hoursSinceLastScan = (Date.now() - sector.lastScanned) / (1000 * 60 * 60);\n      const ageFactor = Math.max(0, 1 - hoursSinceLastScan / 168); // 168 hours = 1 week\n      heatValue *= ageFactor;\n    }\n\n    return Math.min(1, heatValue);\n  }, []);\n\n  // Memoize handlers\n  const handleSectorSelect = useCallback((sector: Sector) => {\n    setSelectedSector(sector);\n  }, []);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    isDragging.current = true;\n    lastPosition.current = { x: e.clientX, y: e.clientY };\n    const startX = e.clientX;\n    const startY = e.clientY;\n    setPosition({ x: startX, y: startY });\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent) => {\n      // Implementation for map panning\n      if (position && isDragging.current) {\n        const dx = e.clientX - position.x;\n        const dy = e.clientY - position.y;\n        setPosition({ x: e.clientX, y: e.clientY });\n        // Update map position based on dx and dy\n        setMapOffset((prev: MapOffset) => ({\n          x: prev.x + dx,\n          y: prev.y + dy,\n        }));\n      }\n    },\n    [position]\n  );\n\n  const handleMouseUp = useCallback(() => {\n    isDragging.current = false;\n    setPosition(null);\n  }, []);\n\n  const handleZoom = useCallback((delta: number) => {\n    setZoom(prev => Math.max(0.5, Math.min(2, prev + delta)));\n  }, []);\n\n  // Enhanced sector hover tooltip\n  const handleSectorHover = useCallback(\n    (show: boolean, sector: Sector) => {\n      if (show) {\n        showTooltip(\n          <div className=\"max-w-xs rounded-lg border border-gray-700 bg-gray-800/95 p-4 shadow-xl\">\n            <div className=\"mb-3 flex items-center justify-between\">\n              <div className=\"font-medium text-white\">{sector.name}</div>\n              <div\n                className={`rounded px-2 py-0.5 text-xs ${\n                  sector.status === 'unmapped'\n                    ? 'bg-gray-700 text-gray-400'\n                    : sector.status === 'scanning'\n                      ? 'bg-teal-900/50 text-teal-400'\n                      : 'bg-teal-800/30 text-teal-300'\n                }`}\n              >\n                {sector.status.charAt(0).toUpperCase() + sector.status.slice(1)}\n              </div>\n            </div>\n\n            {sector.status !== 'unmapped' && (\n              <>\n                {/* Resource and Habitability Bars */}\n                <div className=\"mb-3 space-y-2\">\n                  <div>\n                    <div className=\"mb-1 flex justify-between text-xs\">\n                      <span className=\"text-gray-400\">Resources</span>\n                      <span className=\"text-teal-400\">\n                        {Math.round(sector.resourcePotential * 100)}%\n                      </span>\n                    </div>\n                    <div className=\"h-1.5 overflow-hidden rounded-full bg-gray-700\">\n                      <div\n                        className=\"h-full rounded-full bg-teal-500\"\n                        style={{ width: `${sector.resourcePotential * 100}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"mb-1 flex justify-between text-xs\">\n                      <span className=\"text-gray-400\">Habitability</span>\n                      <span className=\"text-teal-400\">\n                        {Math.round(sector.habitabilityScore * 100)}%\n                      </span>\n                    </div>\n                    <div className=\"h-1.5 overflow-hidden rounded-full bg-gray-700\">\n                      <div\n                        className=\"h-full rounded-full bg-teal-500\"\n                        style={{ width: `${sector.habitabilityScore * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Anomalies */}\n                {sector.anomalies.length > 0 && (\n                  <div className=\"mb-3\">\n                    <div className=\"mb-2 text-xs font-medium text-gray-300\">Detected Anomalies</div>\n                    <div className=\"space-y-1\">\n                      {sector.anomalies.map(anomaly => (\n                        <div\n                          key={anomaly.id}\n                          className={`rounded px-2 py-1 text-xs ${\n                            anomaly.severity === 'high'\n                              ? 'bg-red-900/50 text-red-400'\n                              : anomaly.severity === 'medium'\n                                ? 'bg-yellow-900/50 text-yellow-400'\n                                : 'bg-blue-900/50 text-blue-400'\n                          }`}\n                        >\n                          {anomaly.type.charAt(0).toUpperCase() + anomaly.type.slice(1)}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Last Scanned */}\n                {sector.lastScanned && (\n                  <div className=\"text-xs text-gray-500\">\n                    Last Scanned: {new Date(sector.lastScanned).toLocaleString()}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        );\n      } else {\n        hideTooltip();\n      }\n    },\n    [showTooltip, hideTooltip]\n  );\n\n  // Handle ship assignment\n  const handleShipAssign = useCallback(\n    (shipId: string, sectorId: string) => {\n      const sector = sectors.find(s => s.id === sectorId);\n      if (!sector) return;\n\n      reconManager.assignExplorationTask(\n        shipId,\n        sectorId,\n        sector.coordinates,\n        'mapping' // Default to mapping, can be updated based on sector type\n      );\n\n      setShips(prevShips =>\n        prevShips.map(ship =>\n          ship.id === shipId\n            ? {\n                ...ship,\n                status: 'scanning',\n                targetSector: sectorId,\n                lastUpdate: Date.now(),\n              }\n            : ship\n        )\n      );\n    },\n    [sectors, reconManager]\n  );\n\n  // Register ships with ReconShipManager\n  useEffect(() => {\n    ships.forEach(ship => {\n      reconManager.registerShip({\n        ...ship,\n        type: 'AC27G',\n        position: { x: 0, y: 0 }, // Initial position\n        capabilities: {\n          canScan: true,\n          canSalvage: false,\n          canMine: false,\n          canJump: true,\n        },\n        stealth: {\n          active: false,\n          level: 1,\n          cooldown: 0,\n        },\n        sensors: {\n          range: 100,\n          accuracy: 0.8,\n          anomalyDetection: 0.7,\n        },\n        discoveries: {\n          mappedSectors: 0,\n          anomaliesFound: 0,\n          resourcesLocated: 0,\n        },\n      });\n    });\n\n    // Cleanup on unmount\n    return () => {\n      ships.forEach(ship => reconManager.unregisterShip(ship.id));\n    };\n  }, [ships, reconManager]);\n\n  // Listen for ReconShipManager events\n  useEffect(() => {\n    const handleTaskCompleted = ({ shipId, task }: { shipId: string; task: ExplorationTask }) => {\n      setShips(prevShips =>\n        prevShips.map(ship =>\n          ship.id === shipId\n            ? {\n                ...ship,\n                status: 'returning',\n                experience: ship.experience + 100, // Base XP gain\n              }\n            : ship\n        )\n      );\n\n      // Update sector status\n      setSectors(prevSectors =>\n        prevSectors.map(sector =>\n          sector.id === task.target.id\n            ? {\n                ...sector,\n                status: 'mapped',\n                lastScanned: Date.now(),\n              }\n            : sector\n        )\n      );\n    };\n\n    reconManager.on('taskCompleted', handleTaskCompleted);\n    return () => {\n      reconManager.off('taskCompleted', handleTaskCompleted);\n    };\n  }, [reconManager]);\n\n  // Update ReconShipManager\n  useEffect(() => {\n    const interval = setInterval(() => {\n      reconManager.update(1000 / 60); // Update at 60fps\n    }, 1000 / 60);\n\n    return () => clearInterval(interval);\n  }, [reconManager]);\n\n  return (\n    <div className=\"fixed inset-4 flex overflow-hidden rounded-lg border border-gray-700 bg-gray-900/95 shadow-2xl backdrop-blur-md\">\n      {/* Left Panel - Exploration Map */}\n      <div className=\"flex w-2/3 flex-col border-r border-gray-700 p-6\">\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Radar className=\"h-6 w-6 text-teal-400\" />\n            <h2 className=\"text-xl font-bold text-white\">Exploration Hub</h2>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search sectors...\"\n                className=\"w-64 rounded-lg border border-gray-700 bg-gray-800/90 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-teal-500\"\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n              />\n              <Search className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => handleZoom(0.1)}\n                className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n              >\n                <ZoomIn className=\"h-5 w-5 text-teal-400\" />\n              </button>\n              <button\n                onClick={() => handleZoom(-0.1)}\n                className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n              >\n                <ZoomOut className=\"h-5 w-5 text-teal-400\" />\n              </button>\n            </div>\n\n            <button\n              onClick={() => setShowMissionLog(true)}\n              className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n            >\n              <History className=\"h-5 w-5 text-teal-400\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Enhanced Filter Controls */}\n        <div className=\"mb-6\">\n          <div className=\"mb-2 flex items-center justify-between\">\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => setFilter('all')}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  filter === 'all'\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <Map className=\"h-4 w-4\" />\n                <span>All Sectors</span>\n              </button>\n              <button\n                onClick={() => setFilter('unmapped')}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  filter === 'unmapped'\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <Radar className=\"h-4 w-4\" />\n                <span>Unmapped</span>\n              </button>\n              <button\n                onClick={() => setFilter('anomalies')}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  filter === 'anomalies'\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <AlertTriangle className=\"h-4 w-4\" />\n                <span>Anomalies</span>\n              </button>\n              <button\n                onClick={() => setShowHeatMap(!showHeatMap)}\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                  showHeatMap\n                    ? 'bg-teal-600 text-white'\n                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n                }`}\n              >\n                <Map className=\"h-4 w-4\" />\n                <span>Heat Map</span>\n              </button>\n            </div>\n\n            <button\n              onClick={() => setShowFilters(!showFilters)}\n              className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                Object.values(advancedFilters).some(v =>\n                  Array.isArray(v) ? v.length > 0 : v !== 0 && v !== false && v !== 'any'\n                )\n                  ? 'bg-teal-600 text-white'\n                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n              }`}\n            >\n              <Filter className=\"h-4 w-4\" />\n              <span>Advanced Filters</span>\n            </button>\n          </div>\n\n          {/* Advanced Filters Panel */}\n          {showFilters && (\n            <div className=\"mt-4 rounded-lg bg-gray-800/50 p-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Min Resource Potential</label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={advancedFilters.minResourcePotential}\n                    onChange={e =>\n                      setAdvancedFilters(prev => ({\n                        ...prev,\n                        minResourcePotential: parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"w-full\"\n                  />\n                  <div className=\"mt-1 text-sm text-teal-400\">\n                    {Math.round(advancedFilters.minResourcePotential * 100)}%\n                  </div>\n                </div>\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Min Habitability Score</label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1\"\n                    step=\"0.1\"\n                    value={advancedFilters.minHabitabilityScore}\n                    onChange={e =>\n                      setAdvancedFilters(prev => ({\n                        ...prev,\n                        minHabitabilityScore: parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"w-full\"\n                  />\n                  <div className=\"mt-1 text-sm text-teal-400\">\n                    {Math.round(advancedFilters.minHabitabilityScore * 100)}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Anomaly Settings</label>\n                  <div className=\"space-y-2\">\n                    <label className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={advancedFilters.hasAnomalies}\n                        onChange={e =>\n                          setAdvancedFilters(prev => ({\n                            ...prev,\n                            hasAnomalies: e.target.checked,\n                          }))\n                        }\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm text-gray-300\">Has Anomalies</span>\n                    </label>\n                    <select\n                      value={advancedFilters.anomalySeverity}\n                      onChange={e =>\n                        setAdvancedFilters(prev => ({\n                          ...prev,\n                          anomalySeverity: e.target.value as 'any' | 'low' | 'medium' | 'high',\n                        }))\n                      }\n                      className=\"w-full rounded bg-gray-700 px-2 py-1 text-sm text-white\"\n                    >\n                      <option value=\"any\">Any Severity</option>\n                      <option value=\"low\">Low</option>\n                      <option value=\"medium\">Medium</option>\n                      <option value=\"high\">High</option>\n                    </select>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"mb-2 block text-sm text-gray-400\">Last Scanned Within</label>\n                  <select\n                    value={advancedFilters.lastScannedWithin}\n                    onChange={e =>\n                      setAdvancedFilters(prev => ({\n                        ...prev,\n                        lastScannedWithin: parseInt(e.target.value),\n                      }))\n                    }\n                    className=\"w-full rounded bg-gray-700 px-2 py-1 text-sm text-white\"\n                  >\n                    <option value={0}>Any Time</option>\n                    <option value={24}>24 Hours</option>\n                    <option value={72}>3 Days</option>\n                    <option value={168}>1 Week</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <label className=\"mb-2 block text-sm text-gray-400\">Resource Types</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {['Dark Matter', 'Helium-3', 'Rare Metals', 'Common Ores'].map(type => (\n                    <button\n                      key={type}\n                      onClick={() =>\n                        setAdvancedFilters(prev => ({\n                          ...prev,\n                          resourceTypes: prev.resourceTypes.includes(type)\n                            ? prev.resourceTypes.filter(t => t !== type)\n                            : [...prev.resourceTypes, type],\n                        }))\n                      }\n                      className={`rounded px-2 py-1 text-sm ${\n                        advancedFilters.resourceTypes.includes(type)\n                          ? 'bg-teal-600 text-white'\n                          : 'bg-gray-700 text-gray-400'\n                      }`}\n                    >\n                      {type}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Map Content */}\n        <div\n          className=\"relative flex-1 overflow-hidden\"\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n        >\n          <div\n            className=\"absolute inset-0\"\n            style={{\n              transform: `translate(${mapOffset.x}px, ${mapOffset.y}px) scale(${zoom})`,\n              transformOrigin: 'center',\n              transition: isDragging.current ? 'none' : 'transform 0.3s ease-out',\n            }}\n          >\n            {filteredSectors.map(sector => (\n              <SectorComponent\n                key={sector.id}\n                sector={sector}\n                isSelected={selectedSector?.id === sector.id}\n                showHeatMap={showHeatMap}\n                onSelect={handleSectorSelect}\n                onHover={handleSectorHover}\n                getSectorHeat={getSectorHeat}\n                ships={ships}\n                onShipAssign={handleShipAssign}\n              />\n            ))}\n\n            {/* Ship Markers */}\n            {activeShips.map(ship => {\n              const targetSector = sectors.find(s => s.id === ship.targetSector);\n              if (!targetSector) {\n                return null;\n              }\n              return <ShipMarker key={ship.id} ship={ship} targetSector={targetSector} />;\n            })}\n\n            {/* Resource Transfers */}\n            <ResourceTransfer transfers={transfers} />\n          </div>\n        </div>\n      </div>\n\n      {/* Right Panel */}\n      <div className=\"flex w-1/3 flex-col p-6\">\n        {selectedSector ? (\n          <>\n            <ExplorationControls sector={selectedSector} onClose={() => setSelectedSector(null)} />\n            <div className=\"mt-6\">\n              <ReconShipStatus ships={activeShips} />\n            </div>\n          </>\n        ) : (\n          <div className=\"flex h-full items-center justify-center text-gray-400\">\n            Select a sector to view details\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      {showMissionLog && <MissionLog onClose={() => setShowMissionLog(false)} />}\n      {showTutorial && <ExplorationTutorial onClose={() => setShowTutorial(false)} />}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationTutorial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ExplorationWindow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/MissionLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/MissionReplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ReconShipStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/ExplorationHub/ShipStatusMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/AutomationMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MineralProcessingCentre.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningTutorial.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/MiningWindow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFilter' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":158,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'storage' is defined but never used. Allowed unused args must match /^_/u.","line":243,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ArrowDown,\n  ArrowUp,\n  ChevronRight,\n  Database,\n  Grid2X2,\n  HelpCircle,\n  Map,\n  Rocket,\n  Settings,\n  Ship,\n} from 'lucide-react';\nimport { useState } from 'react';\nimport { ContextMenuItem, useContextMenu } from '../../../../components/ui/ContextMenu';\nimport { Draggable, DragItem, DropTarget } from '../../../../components/ui/DragAndDrop';\nimport { MiningMap } from './MiningMap';\nimport { MiningTutorial } from './MiningTutorial';\nimport { ResourceNode } from './ResourceNode';\nimport { ResourceStorage } from './ResourceStorage';\nimport { ResourceTransfer } from './ResourceTransfer';\n\n// Mock storage data\nconst mockStorageData = [\n  {\n    id: 'iron-storage',\n    resourceType: 'Iron',\n    currentAmount: 8500,\n    maxCapacity: 10000,\n    refiningAmount: 250,\n    refiningProgress: 0.65,\n    transferRate: 25,\n  },\n  {\n    id: 'helium-storage',\n    resourceType: 'Helium-3',\n    currentAmount: 2800,\n    maxCapacity: 5000,\n    refiningAmount: 100,\n    refiningProgress: 0.3,\n    transferRate: 15,\n  },\n];\n\n// Mock transfer animations\nconst mockTransfers = [\n  {\n    id: 'transfer-1',\n    sourceId: 'iron-belt-1',\n    targetId: 'iron-storage',\n    resourceType: 'Iron',\n    amount: 50,\n    progress: 0.3,\n  },\n  {\n    id: 'transfer-2',\n    sourceId: 'helium-cloud-1',\n    targetId: 'helium-storage',\n    resourceType: 'Helium-3',\n    amount: 25,\n    progress: 0.7,\n  },\n];\n\ninterface Resource {\n  id: string;\n  name: string;\n  type: 'mineral' | 'gas' | 'exotic';\n  abundance: number;\n  distance: number;\n  extractionRate: number;\n  depletion: number;\n  priority: number;\n  thresholds: {\n    min: number;\n    max: number;\n  };\n}\n\ninterface MiningShip {\n  id: string;\n  name: string;\n  type: 'rockBreaker' | 'voidDredger';\n  status: 'idle' | 'mining' | 'returning' | 'maintenance';\n  capacity: number;\n  currentLoad: number;\n  targetNode?: string;\n  efficiency: number;\n}\n\nconst mockResources: Resource[] = [\n  {\n    id: 'iron-belt-1',\n    name: 'Iron Belt Alpha',\n    type: 'mineral',\n    abundance: 0.8,\n    distance: 150,\n    extractionRate: 25,\n    depletion: 0.2,\n    priority: 1,\n    thresholds: { min: 3000, max: 10000 },\n  },\n  {\n    id: 'helium-cloud-1',\n    name: 'Helium Cloud Beta',\n    type: 'gas',\n    abundance: 0.6,\n    distance: 300,\n    extractionRate: 15,\n    depletion: 0.1,\n    priority: 2,\n    thresholds: { min: 1000, max: 5000 },\n  },\n  {\n    id: 'dark-matter-1',\n    name: 'Dark Matter Cluster',\n    type: 'exotic',\n    abundance: 0.3,\n    distance: 500,\n    extractionRate: 5,\n    depletion: 0.05,\n    priority: 3,\n    thresholds: { min: 100, max: 1000 },\n  },\n];\n\nconst mockShips: MiningShip[] = [\n  {\n    id: 'rb-1',\n    name: 'Rock Breaker Alpha',\n    type: 'rockBreaker',\n    status: 'mining',\n    capacity: 1000,\n    currentLoad: 450,\n    targetNode: 'iron-belt-1',\n    efficiency: 0.9,\n  },\n  {\n    id: 'vd-1',\n    name: 'Void Dredger Beta',\n    type: 'voidDredger',\n    status: 'returning',\n    capacity: 2000,\n    currentLoad: 1800,\n    targetNode: 'helium-cloud-1',\n    efficiency: 0.85,\n  },\n];\n\ntype ViewMode = 'map' | 'grid';\ntype SortOption = 'priority' | 'name' | 'type' | 'abundance' | 'distance';\ntype FilterOption = 'all' | 'mineral' | 'gas' | 'exotic';\n\nexport function MiningWindow() {\n  const [selectedNode, setSelectedNode] = useState<Resource | null>(null);\n  const [viewMode, setViewMode] = useState<ViewMode>('map');\n  const [sortBy, setSortBy] = useState<SortOption>('priority');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [filter, setFilter] = useState<FilterOption>('all');\n  const [showTutorial, setShowTutorial] = useState(false);\n\n  // Mock tech bonuses\n  const techBonuses = {\n    extractionRate: 1.2,\n    efficiency: 1.1,\n    range: 1.15,\n    storageCapacity: 1.5,\n  };\n\n  // Filter and sort resources\n  const filteredResources = mockResources\n    .filter(resource => filter === 'all' || resource.type === filter)\n    .sort((a, b) => {\n      let comparison = 0;\n      switch (sortBy) {\n        case 'priority':\n          comparison = a.priority - b.priority;\n          break;\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'type':\n          comparison = a.type.localeCompare(b.type);\n          break;\n        case 'abundance':\n          comparison = b.abundance - a.abundance;\n          break;\n        case 'distance':\n          comparison = a.distance - b.distance;\n          break;\n      }\n      return sortOrder === 'asc' ? comparison : -comparison;\n    });\n\n  // Context menu for resources\n  const getResourceMenuItems = (resource: Resource): ContextMenuItem[] => {\n    const assignedShip = mockShips.find(ship => ship.targetNode === resource.id);\n    return [\n      {\n        id: 'info',\n        label: 'Resource Info',\n        icon: <Database className=\"h-4 w-4\" />,\n        action: () => setSelectedNode(resource),\n      },\n      {\n        id: 'assign-ship',\n        label: assignedShip ? 'Reassign Ship' : 'Assign Ship',\n        icon: <Ship className=\"h-4 w-4\" />,\n        action: () => {}, // No-op action for parent menu\n        children: mockShips\n          .filter(ship => ship.status === 'idle' || ship.targetNode === resource.id)\n          .map(ship => ({\n            id: ship.id,\n            label: ship.name,\n            icon: <Rocket className=\"h-4 w-4\" />,\n            action: () => {\n              // Handle ship assignment\n              // Replace console.log with actual implementation\n              // console.log(`Assigning ${ship.name} to ${resource.name}`);\n              // TODO: Implement ship assignment logic\n            },\n          })),\n      },\n      {\n        id: 'set-priority',\n        label: 'Set Priority',\n        icon: <ChevronRight className=\"h-4 w-4\" />,\n        action: () => {}, // No-op action for parent menu\n        children: [1, 2, 3, 4, 5].map(priority => ({\n          id: `priority-${priority}`,\n          label: `Priority ${priority}`,\n          action: () => {\n            // Handle priority change\n            // Replace console.log with actual implementation\n            // console.log(`Setting ${resource.name} priority to ${priority}`);\n            // TODO: Implement priority change logic\n          },\n        })),\n      },\n    ];\n  };\n\n  // Handle resource drop on storage\n  const handleResourceDrop = (item: DragItem, storage: (typeof mockStorageData)[0]) => {\n    if (item.type === 'resource') {\n      // Handle resource transfer\n      // Replace console.log with actual implementation\n      // console.log(`Transferring ${item.data.type} to ${storage.resourceType} storage`);\n      // TODO: Implement resource transfer logic\n    }\n  };\n\n  return (\n    <div className=\"flex h-full flex-col\">\n      {/* Header */}\n      <div className=\"mb-6 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-xl font-bold text-white\">Mineral Processing</h2>\n          <button\n            onClick={() => setShowTutorial(true)}\n            className=\"p-2 text-gray-400 hover:text-gray-300\"\n          >\n            <HelpCircle className=\"h-5 w-5\" />\n          </button>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => setViewMode(prev => (prev === 'map' ? 'grid' : 'map'))}\n            className=\"p-2 text-gray-400 hover:text-gray-300\"\n          >\n            {viewMode === 'map' ? <Grid2X2 className=\"h-5 w-5\" /> : <Map className=\"h-5 w-5\" />}\n          </button>\n          <button className=\"p-2 text-gray-400 hover:text-gray-300\">\n            <Settings className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"mb-4 flex items-center space-x-4\">\n        <select\n          value={sortBy}\n          onChange={e => setSortBy(e.target.value as SortOption)}\n          className=\"rounded-lg border border-gray-700 bg-gray-800 px-3 py-1.5 text-sm text-gray-300\"\n        >\n          <option value=\"priority\">Sort by Priority</option>\n          <option value=\"name\">Sort by Name</option>\n          <option value=\"type\">Sort by Type</option>\n          <option value=\"abundance\">Sort by Abundance</option>\n          <option value=\"distance\">Sort by Distance</option>\n        </select>\n        <button\n          onClick={() => setSortOrder(prev => (prev === 'asc' ? 'desc' : 'asc'))}\n          className=\"rounded-lg bg-gray-800 p-1.5 text-gray-400 hover:text-gray-300\"\n        >\n          {sortOrder === 'asc' ? (\n            <ArrowUp className=\"h-4 w-4\" />\n          ) : (\n            <ArrowDown className=\"h-4 w-4\" />\n          )}\n        </button>\n      </div>\n\n      {/* Resource View (Map or Grid) */}\n      {viewMode === 'map' ? (\n        <MiningMap\n          resources={filteredResources}\n          selectedNode={selectedNode}\n          onSelectNode={setSelectedNode}\n          techBonuses={techBonuses}\n          ships={mockShips}\n          quality=\"high\"\n        >\n          <ResourceTransfer transfers={mockTransfers} />\n        </MiningMap>\n      ) : (\n        <div className=\"grid flex-1 grid-cols-2 gap-4 overflow-y-auto\">\n          {filteredResources.map(resource => {\n            const { handleContextMenu, ContextMenuComponent } = useContextMenu({\n              items: getResourceMenuItems(resource),\n            });\n\n            return (\n              <div key={resource.id}>\n                <Draggable\n                  item={{\n                    id: resource.id,\n                    type: 'resource',\n                    data: resource,\n                  }}\n                >\n                  <div onContextMenu={handleContextMenu}>\n                    <ResourceNode\n                      resource={resource}\n                      isSelected={selectedNode?.id === resource.id}\n                      techBonuses={techBonuses}\n                      onClick={() => setSelectedNode(resource)}\n                    />\n                  </div>\n                </Draggable>\n                {ContextMenuComponent}\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {/* Storage Section */}\n      <div className=\"mt-4 grid grid-cols-2 gap-4\">\n        <DropTarget\n          accept={['resource']}\n          onDrop={item => handleResourceDrop(item, mockStorageData[0])}\n          className=\"rounded-lg bg-gray-800 p-4 transition-colors hover:bg-gray-800/80\"\n        >\n          <ResourceStorage storageData={mockStorageData} />\n        </DropTarget>\n      </div>\n\n      {/* Mining Fleet Status */}\n      <div className=\"mt-4\">\n        <h3 className=\"mb-3 text-lg font-medium text-white\">Mining Fleet</h3>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {mockShips.map(ship => {\n            const assignedResource = mockResources.find(r => r.id === ship.targetNode);\n\n            return (\n              <Draggable\n                key={ship.id}\n                item={{\n                  id: ship.id,\n                  type: 'ship',\n                  data: ship,\n                }}\n              >\n                <div className=\"rounded-lg bg-gray-800 p-4\">\n                  <div className=\"mb-2 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Ship className=\"h-4 w-4 text-cyan-400\" />\n                      <span className=\"font-medium text-gray-200\">{ship.name}</span>\n                    </div>\n                    <span\n                      className={`rounded-full px-2 py-0.5 text-xs ${\n                        ship.status === 'mining'\n                          ? 'bg-green-900/50 text-green-400'\n                          : ship.status === 'returning'\n                            ? 'bg-blue-900/50 text-blue-400'\n                            : 'bg-gray-900/50 text-gray-400'\n                      }`}\n                    >\n                      {ship.status}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-400\">\n                    {assignedResource ? <>Mining: {assignedResource.name}</> : <>No assignment</>}\n                  </div>\n                  <div className=\"mt-2 text-xs text-gray-500\">\n                    Cargo: {ship.currentLoad}/{ship.capacity} • Efficiency:{' '}\n                    {Math.round(ship.efficiency * 100)}%\n                  </div>\n                </div>\n              </Draggable>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Tutorial Modal */}\n      {showTutorial && <MiningTutorial onClose={() => setShowTutorial(false)} />}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ResourceNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ResourceStorage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ResourceTransfer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/TechBonus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ThresholdManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ThresholdPresetsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/MiningHub/ThresholdStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/HiringPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/OfficerAcademy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/OfficerCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/academy/OfficerDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/hangar/HangarModule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/hangar/ShipBuildingInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/hangar/ShipHangar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mockShips' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'queueItem' is defined but never used. Allowed unused args must match /^_/u.","line":170,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Grid2X2, List, Rocket, Search } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useScalingSystem } from '../../../../hooks/game/useScalingSystem';\nimport { ShipHangarManager } from '../../../../managers/module/ShipHangarManager';\nimport { ShipBuildQueueItem } from '../../../../types/buildings/ShipHangarTypes';\nimport { Effect } from '../../../../types/core/GameTypes';\nimport { CommonShip } from '../../../../types/ships/CommonShipTypes';\nimport {\n  WeaponSystem as BaseWeaponSystem,\n  WeaponCategory,\n  WeaponStatus,\n} from '../../../../types/weapons/WeaponTypes';\nimport { createWeaponEffect, createWeaponLike } from '../../../../utils/weapons/weaponEffectUtils';\nimport { PlayerShipCustomization } from '../../../ships/player/customization/PlayerShipCustomization';\nimport { PlayerShipUpgradeSystem } from '../../../ships/player/customization/PlayerShipUpgradeSystem';\nimport { WarShip } from '../../../ships/player/variants/warships/WarShip';\n\ninterface HangarWeaponSystem extends BaseWeaponSystem {\n  name: string;\n}\n\ninterface Ship {\n  id: string;\n  name: string;\n  type:\n    | 'spitflare'\n    | 'starSchooner'\n    | 'orionFrigate'\n    | 'harbringerGalleon'\n    | 'midwayCarrier'\n    | 'motherEarthRevenge';\n  tier: 1 | 2 | 3;\n  status: 'idle' | 'patrolling' | 'engaging' | 'returning' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: HangarWeaponSystem[];\n  abilities: Array<{\n    name: string;\n    description: string;\n    cooldown: number;\n    duration: number;\n    active: boolean;\n    effect: Effect;\n  }>;\n  alerts?: string[];\n}\n\n// Mock data for demonstration\nconst mockShips: Ship[] = [\n  {\n    id: 'spitflare-1',\n    name: 'Spitflare Alpha',\n    type: 'spitflare',\n    tier: 1,\n    status: 'idle',\n    hull: 100,\n    maxHull: 100,\n    shield: 50,\n    maxShield: 50,\n    weapons: [\n      {\n        id: 'mg-1',\n        name: 'Machine Gun',\n        type: 'machineGun',\n        damage: 10,\n        range: 100,\n        cooldown: 5,\n        status: 'ready',\n      },\n    ],\n    abilities: [\n      {\n        name: 'Machine Gun',\n        description: 'Standard weapon system',\n        cooldown: 5,\n        duration: 10,\n        active: false,\n        effect: createWeaponEffect(\n          createWeaponLike({\n            id: 'mg-1',\n            type: 'machineGun',\n            damage: 10,\n            cooldown: 5,\n            displayName: 'Machine Gun',\n          })\n        ),\n      },\n    ],\n  },\n  {\n    id: 'schooner-1',\n    name: 'Star Schooner Beta',\n    type: 'starSchooner',\n    tier: 2,\n    status: 'patrolling',\n    hull: 150,\n    maxHull: 150,\n    shield: 100,\n    maxShield: 100,\n    weapons: [\n      {\n        id: 'rail-1',\n        name: 'Rail Gun',\n        type: 'railGun',\n        damage: 25,\n        range: 200,\n        cooldown: 10,\n        status: 'charging',\n      },\n    ],\n    abilities: [\n      {\n        name: 'Rail Gun',\n        description: 'Standard weapon system',\n        cooldown: 10,\n        duration: 10,\n        active: false,\n        effect: createWeaponEffect(\n          createWeaponLike({\n            id: 'rail-1',\n            type: 'railGun',\n            damage: 25,\n            cooldown: 10,\n            displayName: 'Rail Gun',\n          })\n        ),\n      },\n    ],\n  },\n];\n\ninterface ShipHangarProps {\n  manager: ShipHangarManager;\n}\n\nexport function ShipHangar({ manager }: ShipHangarProps) {\n  const [filter, setFilter] = useState<'all' | 'idle' | 'active' | 'damaged'>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedShip, setSelectedShip] = useState<Ship | null>(null);\n  const [view, setView] = useState<'grid' | 'list'>('grid');\n  const [showCustomization, setShowCustomization] = useState(false);\n  const [ships, setShips] = useState<Ship[]>([]);\n  const [buildQueue, setBuildQueue] = useState<ShipBuildQueueItem[]>([]);\n\n  const scaling = useScalingSystem();\n  const quality =\n    scaling.performance.fps > 45 ? 'high' : scaling.performance.fps > 30 ? 'medium' : 'low';\n\n  useEffect(() => {\n    // Initial load\n    const dockedShips = manager.getDockedShips();\n    const convertedShips = dockedShips.map(convertCommonShipToShip);\n    setShips(convertedShips);\n    setBuildQueue(manager.getBuildQueue());\n\n    // Subscribe to events\n    const handleShipDocked = ({ ship }: { ship: CommonShip }) => {\n      setShips(prev => [...prev, convertCommonShipToShip(ship)]);\n    };\n\n    const handleShipLaunched = ({ ship }: { ship: CommonShip }) => {\n      setShips(prev => prev.filter(s => s.id !== ship.id));\n      if (selectedShip?.id === ship.id) {\n        setSelectedShip(null);\n      }\n    };\n\n    const handleBuildStarted = ({ queueItem }: { queueItem: ShipBuildQueueItem }) => {\n      setBuildQueue(manager.getBuildQueue());\n    };\n\n    const handleBuildCompleted = ({ ship }: { ship: CommonShip }) => {\n      setBuildQueue(manager.getBuildQueue());\n      setShips(prev => [...prev, convertCommonShipToShip(ship)]);\n    };\n\n    const handleBuildProgressed = () => {\n      setBuildQueue(manager.getBuildQueue());\n    };\n\n    manager.on('shipDocked', handleShipDocked);\n    manager.on('shipLaunched', handleShipLaunched);\n    manager.on('buildStarted', handleBuildStarted);\n    manager.on('buildCompleted', handleBuildCompleted);\n    manager.on('buildProgressed', handleBuildProgressed);\n\n    return () => {\n      manager.off('shipDocked', handleShipDocked);\n      manager.off('shipLaunched', handleShipLaunched);\n      manager.off('buildStarted', handleBuildStarted);\n      manager.off('buildCompleted', handleBuildCompleted);\n      manager.off('buildProgressed', handleBuildProgressed);\n    };\n  }, [manager]);\n\n  // Convert CommonShip to Ship interface\n  const convertCommonShipToShip = (commonShip: CommonShip): Ship => {\n    const weapons = commonShip.abilities.map(ability => ({\n      id: crypto.randomUUID(),\n      name: ability.name,\n      type: 'machineGun' as WeaponCategory,\n      damage: 10,\n      range: 100,\n      cooldown: ability.cooldown,\n      status: 'ready' as WeaponStatus,\n    }));\n\n    return {\n      id: commonShip.id,\n      name: commonShip.name,\n      type: commonShip.name.toLowerCase().split('-')[0] as Ship['type'],\n      tier: 1,\n      status: commonShip.status === 'ready' ? 'idle' : 'damaged',\n      hull: commonShip.stats.defense.armor,\n      maxHull: commonShip.stats.defense.armor,\n      shield: commonShip.stats.defense.shield,\n      maxShield: commonShip.stats.defense.shield,\n      weapons,\n      abilities: weapons.map(w => ({\n        name: w.name,\n        description: 'Standard weapon system',\n        cooldown: w.cooldown,\n        duration: 10,\n        active: false,\n        effect: createWeaponEffect(createWeaponLike(w)),\n      })),\n    };\n  };\n\n  const filteredShips = ships.filter(ship => {\n    if (searchQuery && !ship.name.toLowerCase().includes(searchQuery.toLowerCase())) {\n      return false;\n    }\n    if (filter === 'idle' && ship.status !== 'idle') {\n      return false;\n    }\n    if (filter === 'active' && !['patrolling', 'engaging'].includes(ship.status)) {\n      return false;\n    }\n    if (filter === 'damaged' && ship.status !== 'damaged') {\n      return false;\n    }\n    return true;\n  });\n\n  const handleDeploy = (shipId: string) => {\n    try {\n      manager.launchShip(shipId);\n    } catch (error) {\n      console.error('Failed to launch ship:', error);\n    }\n  };\n\n  const handleRecall = (shipId: string) => {\n    const ship = ships.find(s => s.id === shipId);\n    if (ship) {\n      try {\n        const commonShip: CommonShip = {\n          id: ship.id,\n          name: ship.name,\n          category: ship.type.includes('void-dredger')\n            ? 'mining'\n            : ship.type.includes('schooner')\n              ? 'recon'\n              : 'war',\n          status: ship.status === 'idle' ? 'ready' : 'damaged',\n          stats: {\n            health: ship.hull,\n            maxHealth: ship.maxHull,\n            shield: ship.shield,\n            maxShield: ship.maxShield,\n            energy: 100,\n            maxEnergy: 100,\n            speed: 10,\n            turnRate: 5,\n            cargo: 0,\n            weapons: [],\n            abilities: [],\n            defense: {\n              armor: ship.hull,\n              shield: ship.shield,\n              evasion: 0,\n            },\n            mobility: {\n              speed: 10,\n              turnRate: 5,\n              acceleration: 5,\n            },\n          },\n          abilities: ship.weapons.map(w => ({\n            name: w.name,\n            description: 'Standard weapon system',\n            cooldown: w.cooldown,\n            duration: 10,\n            active: false,\n            effect: createWeaponEffect(createWeaponLike(w)),\n          })),\n        };\n        manager.dockShip(commonShip);\n      } catch (error) {\n        console.error('Failed to dock ship:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-4 flex overflow-hidden rounded-lg border border-gray-700 bg-gray-900/95 shadow-2xl backdrop-blur-md\">\n      {/* Ship List */}\n      <div className=\"w-2/3 border-r border-gray-700 p-6\">\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Rocket className=\"h-6 w-6 text-indigo-400\" />\n            <h2 className=\"text-xl font-bold text-white\">Ship Hangar</h2>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search ships...\"\n                className=\"w-64 rounded-lg border border-gray-700 bg-gray-800/90 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n              />\n              <Search className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n\n            {/* View Toggle */}\n            <div className=\"flex rounded-lg bg-gray-800 p-1\">\n              <button\n                onClick={() => setView('grid')}\n                className={`rounded p-1.5 ${\n                  view === 'grid' ? 'bg-indigo-600 text-white' : 'text-gray-400 hover:text-gray-300'\n                }`}\n              >\n                <Grid2X2 className=\"h-5 w-5\" />\n              </button>\n              <button\n                onClick={() => setView('list')}\n                className={`rounded p-1.5 ${\n                  view === 'list' ? 'bg-indigo-600 text-white' : 'text-gray-400 hover:text-gray-300'\n                }`}\n              >\n                <List className=\"h-5 w-5\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Filter Controls */}\n        <div className=\"mb-6 flex space-x-2\">\n          {[\n            { id: 'all', label: 'All Ships' },\n            { id: 'idle', label: 'Idle' },\n            { id: 'active', label: 'Active' },\n            { id: 'damaged', label: 'Damaged' },\n          ].map(({ id, label }) => (\n            <button\n              key={id}\n              onClick={() => setFilter(id as 'all' | 'idle' | 'active' | 'damaged')}\n              className={`flex items-center space-x-2 rounded-lg px-3 py-2 ${\n                filter === id\n                  ? 'bg-indigo-600 text-white'\n                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'\n              }`}\n            >\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Ship Grid */}\n        <div\n          className={`${\n            view === 'grid' ? 'grid grid-cols-2 gap-6' : 'space-y-4'\n          } max-h-[calc(100vh-16rem)] overflow-y-auto`}\n        >\n          {filteredShips.map(ship => (\n            <WarShip\n              key={ship.id}\n              ship={ship}\n              quality={quality}\n              onDeploy={() => handleDeploy(ship.id)}\n              onRecall={() => handleRecall(ship.id)}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Ship Details Panel */}\n      <div className=\"w-1/3 p-6\">\n        {selectedShip ? (\n          <>\n            <div className=\"mb-4 flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium text-white\">{selectedShip.name}</h3>\n              <button\n                onClick={() => setShowCustomization(prev => !prev)}\n                className=\"rounded bg-indigo-600 px-3 py-1 text-sm text-white hover:bg-indigo-700\"\n              >\n                {showCustomization ? 'Show Upgrades' : 'Customize'}\n              </button>\n            </div>\n            {showCustomization ? (\n              <PlayerShipCustomization\n                ship={{\n                  id: selectedShip.id,\n                  name: selectedShip.name,\n                  type:\n                    selectedShip.type === 'motherEarthRevenge'\n                      ? 'midwayCarrier'\n                      : selectedShip.type,\n                  tier: selectedShip.tier,\n                  customization: {\n                    colors: [],\n                    patterns: [],\n                    decals: [],\n                  },\n                  loadout: {\n                    weapons: [],\n                    shields: [],\n                    engines: [],\n                  },\n                }}\n                onApplyCustomization={() => {}}\n                onEquipLoadout={() => {}}\n              />\n            ) : (\n              <PlayerShipUpgradeSystem\n                ship={{\n                  id: selectedShip.id,\n                  name: selectedShip.name,\n                  type:\n                    selectedShip.type === 'motherEarthRevenge'\n                      ? 'midwayCarrier'\n                      : selectedShip.type,\n                  tier: selectedShip.tier,\n                  upgradeAvailable: true,\n                  requirements: [],\n                  stats: {\n                    hull: {\n                      current: selectedShip.hull,\n                      upgraded: selectedShip.hull * 1.5,\n                    },\n                    shield: {\n                      current: selectedShip.shield,\n                      upgraded: selectedShip.shield * 1.5,\n                    },\n                    weapons: { current: 100, upgraded: 150 },\n                    speed: { current: 100, upgraded: 120 },\n                  },\n                  resourceCost: [],\n                  visualUpgrades: [],\n                }}\n                onUpgrade={() => {}}\n                onPreviewUpgrade={() => {}}\n              />\n            )}\n          </>\n        ) : (\n          <div className=\"flex h-full items-center justify-center text-center text-gray-400\">\n            <div>\n              <Rocket className=\"mx-auto mb-4 h-12 w-12 opacity-50\" />\n              <p>Select a ship to view details and manage loadout</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Build Queue Panel */}\n      <div className=\"absolute bottom-0 left-0 right-0 border-t border-gray-700 bg-gray-800/90 p-4\">\n        <div className=\"mb-2 flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium text-white\">Build Queue</h4>\n          <span className=\"text-xs text-gray-400\">\n            {buildQueue.length} / {manager.getState().maxQueueSize}\n          </span>\n        </div>\n        <div className=\"flex space-x-4 overflow-x-auto\">\n          {buildQueue.map(item => (\n            <div key={item.id} className=\"w-48 flex-shrink-0 rounded-lg bg-gray-700 p-3\">\n              <div className=\"mb-2 flex items-center justify-between\">\n                <span className=\"text-sm text-white\">{item.shipClass}</span>\n                <button\n                  onClick={() => manager.cancelBuild(item.id)}\n                  className=\"text-xs text-gray-400 hover:text-white\"\n                >\n                  Cancel\n                </button>\n              </div>\n              <div className=\"h-2 w-full rounded-full bg-gray-600\">\n                <div\n                  className=\"h-2 rounded-full bg-indigo-500\"\n                  style={{ width: `${item.progress * 100}%` }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Docking Bay Status */}\n      <div className=\"absolute bottom-6 left-6 flex items-center space-x-2 rounded-lg border border-indigo-700/30 bg-indigo-900/50 px-4 py-2\">\n        <Rocket className=\"h-4 w-4 text-indigo-400\" />\n        <span className=\"text-sm text-indigo-200\">\n          {ships.length} Ships Docked •{' '}\n          {ships.filter(s => ['engaging', 'patrolling'].includes(s.status)).length} Active\n        </span>\n      </div>\n\n      {/* Warnings */}\n      {ships.some(s => s.status === 'damaged') && (\n        <div className=\"absolute bottom-6 right-6 flex items-center space-x-2 rounded-lg border border-red-700/30 bg-red-900/50 px-4 py-2\">\n          <Rocket className=\"h-4 w-4 text-red-400\" />\n          <span className=\"text-sm text-red-200\">Ships requiring repairs detected</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/radar/RadarModule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/modules/trading/TradingHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/buildings/mothership/MothershipCore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/combat/BattleEnvironment.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/combat/SalvageSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/debug/AIDebugOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/factions/FactionAI.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/factions/FactionManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/FactionDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/equatorHorizon/CelestialArbiter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/equatorHorizon/EtherealGalleon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/equatorHorizon/StellarEquinox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/lostNova/DarkMatterReaper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/lostNova/EclipseScythe.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/lostNova/NullHunter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/spaceRats/AsteroidMarauder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/spaceRats/RatKing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/FactionShips/spaceRats/RogueNebula.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/base/BaseShip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSpecialAbility' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair } from 'lucide-react';\nimport { ReactNode, useEffect } from 'react';\nimport { ShipProvider, useShipState } from '../../../contexts/ShipContext';\nimport { BaseEffect } from '../../../effects/types_effects/EffectTypes';\nimport { useShipActions } from '../../../hooks/ships/useShipActions';\nimport { useShipEffects } from '../../../hooks/ships/useShipEffects';\nimport { CommonShipStats } from '../../../types/ships/CommonShipTypes';\nimport { WeaponMount } from '../../../types/weapons/WeaponTypes';\n\ninterface BaseShipProps {\n  id: string;\n  name: string;\n  status: 'engaging' | 'patrolling' | 'retreating' | 'disabled';\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  weapons: WeaponMount[];\n  stats: CommonShipStats;\n  onFire?: (weaponId: string) => void;\n  onEngage?: () => void;\n  onRetreat?: () => void;\n  onSpecialAbility?: () => void;\n  className?: string;\n  children?: ReactNode;\n}\n\n/**\n * BaseShipContent Component\n *\n * Internal component that uses ship state hooks\n */\nfunction BaseShipContent({\n  onFire,\n  onEngage,\n  onRetreat,\n  onSpecialAbility,\n  className = '',\n  children,\n}: Omit<\n  BaseShipProps,\n  'id' | 'name' | 'status' | 'health' | 'maxHealth' | 'shield' | 'maxShield' | 'weapons' | 'stats'\n>) {\n  const { state } = useShipState();\n  const { fireWeapon } = useShipActions();\n  const { activeEffects, clearExpiredEffects } = useShipEffects();\n\n  // Clear expired effects periodically\n  useEffect(() => {\n    const interval = setInterval(clearExpiredEffects, 1000);\n    return () => clearInterval(interval);\n  }, [clearExpiredEffects]);\n\n  // Handle weapon firing\n  const handleFire = (weaponId: string) => {\n    fireWeapon(weaponId);\n    onFire?.(weaponId);\n  };\n\n  return (\n    <div className={`ship-container relative ${className}`}>\n      {/* Ship Header */}\n      <div className=\"ship-header mb-4\">\n        <h3 className=\"text-lg font-medium text-white\">{state.name}</h3>\n        <div\n          className={`status-badge rounded-full px-2 py-1 text-sm ${\n            state.status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : state.status === 'patrolling'\n                ? 'bg-green-900/50 text-green-400'\n                : state.status === 'retreating'\n                  ? 'bg-yellow-900/50 text-yellow-400'\n                  : 'bg-gray-700 text-gray-400'\n          }`}\n        >\n          {state.status.charAt(0).toUpperCase() + state.status.slice(1)}\n        </div>\n      </div>\n\n      {/* Health & Shield Bars */}\n      <div className=\"stats-container mb-4\">\n        <div className=\"stat-bar mb-2\">\n          <div className=\"mb-1 text-sm text-gray-400\">Shield</div>\n          <div className=\"h-2 rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(state.shield / state.maxShield) * 100}%` }}\n            />\n          </div>\n          <div className=\"mt-1 text-xs text-gray-500\">\n            {Math.round(state.shield)}/{state.maxShield}\n          </div>\n        </div>\n        <div className=\"stat-bar\">\n          <div className=\"mb-1 text-sm text-gray-400\">Health</div>\n          <div className=\"h-2 rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-red-500 transition-all\"\n              style={{ width: `${(state.health / state.maxHealth) * 100}%` }}\n            />\n          </div>\n          <div className=\"mt-1 text-xs text-gray-500\">\n            {Math.round(state.health)}/{state.maxHealth}\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"weapons-container mb-4 grid grid-cols-2 gap-3\">\n        {state.weapons.map(mount => {\n          if (!mount.currentWeapon) return null;\n\n          return (\n            <div\n              key={mount.id}\n              className={`rounded-lg p-3 ${\n                mount.currentWeapon.state.status === 'ready'\n                  ? 'bg-gray-800/50 hover:bg-gray-700/50'\n                  : 'bg-gray-800/30'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">\n                  {mount.currentWeapon.config.name}\n                </div>\n                <div\n                  className={`text-xs ${\n                    mount.currentWeapon.state.status === 'ready'\n                      ? 'text-green-400'\n                      : mount.currentWeapon.state.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {mount.currentWeapon.state.status}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Range: {mount.currentWeapon.state.currentStats.range}ly</span>\n                <span>DMG: {mount.currentWeapon.state.currentStats.damage}</span>\n              </div>\n              <button\n                onClick={() => handleFire(mount.id)}\n                disabled={mount.currentWeapon.state.status !== 'ready'}\n                className={`mt-2 flex w-full items-center justify-center space-x-2 rounded px-3 py-1.5 ${\n                  mount.currentWeapon.state.status === 'ready'\n                    ? 'bg-gray-700 text-white hover:bg-gray-600'\n                    : 'cursor-not-allowed bg-gray-800 text-gray-500'\n                }`}\n              >\n                <Crosshair className=\"h-4 w-4\" />\n                <span>Fire</span>\n              </button>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Active Effects */}\n      {activeEffects.length > 0 && (\n        <div className=\"active-effects mb-4\">\n          <div className=\"mb-2 text-sm text-gray-400\">Active Effects</div>\n          <div className=\"space-y-2\">\n            {activeEffects.map((effect: BaseEffect) => (\n              <div key={effect.id} className=\"rounded-lg bg-gray-800/50 px-3 py-2 text-sm\">\n                <div className=\"font-medium text-gray-300\">{effect.name}</div>\n                <div className=\"text-xs text-gray-400\">{effect.description}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Status Effects and Custom Content */}\n      <div className=\"custom-content\">{children}</div>\n\n      {/* Action Buttons */}\n      <div className=\"action-buttons-container mt-4 flex gap-2\">\n        {onEngage && (\n          <button\n            onClick={onEngage}\n            disabled={state.status === 'disabled'}\n            className=\"flex-1 rounded-lg bg-red-900/30 px-4 py-2 text-sm font-medium text-red-400 transition-colors hover:bg-red-900/50 disabled:opacity-50\"\n          >\n            Engage\n          </button>\n        )}\n        {onRetreat && (\n          <button\n            onClick={onRetreat}\n            disabled={state.status === 'disabled'}\n            className=\"flex-1 rounded-lg bg-yellow-900/30 px-4 py-2 text-sm font-medium text-yellow-400 transition-colors hover:bg-yellow-900/50 disabled:opacity-50\"\n          >\n            Retreat\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * BaseShip Component\n *\n * Core ship component that provides common functionality for all ship types:\n * - Health and shield display\n * - Weapon mounting and firing\n * - Status effects\n * - Action buttons\n */\nexport function BaseShip(props: BaseShipProps) {\n  const { id, name, status, health, maxHealth, shield, maxShield, weapons, stats, ...rest } = props;\n\n  return (\n    <ShipProvider\n      initialState={{\n        id,\n        name,\n        status,\n        health,\n        maxHealth,\n        shield,\n        maxShield,\n        weapons,\n        stats,\n      }}\n    >\n      <BaseShipContent {...rest} />\n    </ShipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/CommonShipMovement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/CommonShipStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/EquatorHorizonShip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tactics' is defined but never used. Allowed unused args must match /^_/u.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":73,"column":13,"nodeType":"MemberExpression","messageId":"limited","endLine":73,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2308,2433],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Shield, Target } from 'lucide-react';\nimport { ReactNode, useCallback } from 'react';\nimport { CombatEffectType } from '../../../effects/types_effects/EffectTypes';\nimport { createEffect, isDamageEffect } from '../../../effects/util_effects/effectUtils';\nimport { useShipEffects } from '../../../hooks/ships/useShipEffects';\nimport { Effect } from '../../../types/core/GameTypes';\nimport { EquatorHorizonShipClass, FactionShipStats } from '../../../types/ships/FactionShipTypes';\nimport { FactionBehaviorType, FactionId } from '../../../types/ships/FactionTypes';\nimport { WeaponMount } from '../../../types/weapons/WeaponTypes';\nimport { createDamageEffect } from '../../../utils/weapons/weaponEffectUtils';\nimport { AbilityButton } from '../../ui/buttons/AbilityButton';\nimport { StatusEffect } from '../../ui/status/StatusEffect';\nimport { FactionShipBase } from './FactionShipBase';\n\ninterface EquatorHorizonShipProps {\n  id: string;\n  name: string;\n  type: EquatorHorizonShipClass;\n  status: 'engaging' | 'patrolling' | 'retreating' | 'disabled';\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  weapons: WeaponMount[];\n  stats: FactionShipStats;\n  tactics: 'aggressive' | 'defensive' | 'hit-and-run' | 'stealth';\n  position: { x: number; y: number };\n  rotation: number;\n  onEngage?: () => void;\n  onRetreat?: () => void;\n  onSpecialAbility?: () => void;\n  onFire?: (weaponId: string) => void;\n  children?: ReactNode;\n}\n\n/**\n * EquatorHorizonShip Component\n *\n * Base component for Equator Horizon faction ships.\n * Provides faction-specific styling and behavior.\n */\nexport function EquatorHorizonShip({\n  id,\n  name,\n  type,\n  status,\n  health,\n  maxHealth,\n  shield,\n  maxShield,\n  weapons,\n  stats,\n  tactics,\n  position,\n  rotation,\n  onEngage,\n  onRetreat,\n  onSpecialAbility,\n  onFire,\n  children,\n}: EquatorHorizonShipProps) {\n  const { addEffect, removeEffect, hasEffect } = useShipEffects();\n\n  // Handle weapon firing\n  const handleFire = useCallback(\n    (weaponId: string) => {\n      const weapon = weapons.find(mount => mount.id === weaponId)?.currentWeapon;\n\n      if (weapon && weapon.state.status === 'ready') {\n        // Apply weapon effects\n        weapon.state.effects.forEach(effect => {\n          if (isDamageEffect(effect)) {\n            console.debug(\n              `[EquatorHorizonShip] Firing weapon ${weaponId} with strength ${effect.strength}`\n            );\n          }\n        });\n\n        // Update weapon state\n        weapon.state.status = 'cooling';\n        setTimeout(() => {\n          if (weapon) {\n            weapon.state.status = 'ready';\n          }\n        }, weapon.config.baseStats.cooldown * 1000);\n\n        // Call the onFire callback if provided\n        onFire?.(weaponId);\n      }\n    },\n    [weapons, onFire]\n  );\n\n  // Faction-specific effects\n  const handleOvercharge = useCallback(() => {\n    const effectId = 'overcharge';\n    const hasOvercharge = hasEffect(effectId);\n    if (hasOvercharge) {\n      removeEffect(effectId);\n      // Remove overcharge effect from weapons\n      weapons.forEach(mount => {\n        if (mount.currentWeapon) {\n          mount.currentWeapon.state.effects = mount.currentWeapon.state.effects.filter(effect => {\n            if (isDamageEffect(effect)) {\n              return effect.id !== effectId;\n            }\n            return true;\n          });\n\n          // Reset weapon stats\n          mount.currentWeapon.state.currentStats = {\n            ...mount.currentWeapon.config.baseStats,\n          };\n        }\n      });\n    } else {\n      // Create base effect for ship\n      const baseEffect = createEffect(\n        effectId,\n        'Overcharge',\n        'damage' as CombatEffectType,\n        1.4,\n        'Increases weapon damage and accuracy',\n        {\n          duration: 10,\n          active: true,\n        }\n      );\n      addEffect(baseEffect);\n\n      // Create weapon effect for each weapon\n      weapons.forEach(mount => {\n        if (mount.currentWeapon) {\n          const weaponEffect = createDamageEffect({\n            id: `${mount.currentWeapon.config.id}-${effectId}`,\n            magnitude: mount.currentWeapon.state.currentStats.damage * 1.4,\n            duration: 10,\n            strength: 1.4,\n            damageType: 'energy',\n            penetration: 0.2,\n          });\n\n          mount.currentWeapon.state.effects = [\n            ...mount.currentWeapon.state.effects.filter(effect => {\n              if (isDamageEffect(effect)) {\n                return effect.id !== weaponEffect.id;\n              }\n              return true;\n            }),\n            weaponEffect,\n          ];\n\n          // Update weapon stats with overcharge\n          const { currentStats } = mount.currentWeapon.state;\n          mount.currentWeapon.state.currentStats = {\n            ...currentStats,\n            damage: currentStats.damage * 1.4,\n            accuracy: Math.min(1, currentStats.accuracy * 1.4),\n          };\n        }\n      });\n    }\n    onSpecialAbility?.();\n  }, [hasEffect, removeEffect, addEffect, weapons, onSpecialAbility]);\n\n  // Handle reinforced shields effect\n  const handleReinforcedShields = useCallback(() => {\n    const effectId = 'reinforced-shields';\n    const hasShields = hasEffect(effectId);\n    if (hasShields) {\n      removeEffect(effectId);\n    } else {\n      const baseEffect = createEffect(\n        effectId,\n        'Reinforced Shields',\n        'shield' as CombatEffectType,\n        1.5,\n        'Boosts shield strength and regeneration',\n        {\n          duration: 15,\n          active: true,\n        }\n      );\n      addEffect(baseEffect);\n    }\n    onSpecialAbility?.();\n  }, [hasEffect, removeEffect, addEffect, onSpecialAbility]);\n\n  return (\n    <FactionShipBase\n      ship={{\n        id,\n        name,\n        class: type,\n        faction: 'equator-horizon' as FactionId,\n        status,\n        tactics: {\n          formation: 'balanced',\n          behavior: 'defensive',\n        } as FactionBehaviorType,\n        category: 'war',\n        health,\n        maxHealth,\n        shield,\n        maxShield,\n        position,\n        rotation,\n        abilities: [\n          {\n            name: 'Overcharge',\n            description: 'Increases weapon damage and accuracy',\n            cooldown: 15,\n            duration: 10,\n            active: hasEffect('overcharge'),\n            effect: {\n              id: 'overcharge',\n              type: 'damage',\n              magnitude: 1.4,\n              duration: 10,\n            } as Effect,\n          },\n          {\n            name: 'Reinforced Shields',\n            description: 'Boosts shield strength and regeneration',\n            cooldown: 20,\n            duration: 15,\n            active: hasEffect('reinforced-shields'),\n            effect: {\n              id: 'reinforced-shields',\n              type: 'shield',\n              magnitude: 1.5,\n              duration: 15,\n            } as Effect,\n          },\n        ],\n        stats,\n      }}\n      onEngage={onEngage}\n      onRetreat={onRetreat}\n      onSpecialAbility={onSpecialAbility}\n      onFire={handleFire}\n    >\n      {/* Status Effects */}\n      <StatusEffect\n        active={hasEffect('overcharge')}\n        icon={Target}\n        label=\"Overcharge\"\n        color=\"amber\"\n      />\n      <StatusEffect\n        active={hasEffect('reinforced-shields')}\n        icon={Shield}\n        label=\"Reinforced Shields\"\n        color=\"cyan\"\n      />\n\n      {/* Ability Buttons */}\n      <AbilityButton\n        active={hasEffect('overcharge')}\n        icon={Target}\n        label=\"Overcharge\"\n        color=\"amber\"\n        onClick={handleOvercharge}\n      />\n      <AbilityButton\n        active={hasEffect('reinforced-shields')}\n        icon={Shield}\n        label=\"Reinforced Shields\"\n        color=\"cyan\"\n        onClick={handleReinforcedShields}\n      />\n\n      {children}\n    </FactionShipBase>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/FactionFleet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/FactionShipBase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/FactionShipStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/LostNovaShip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/common/SpaceRatShip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/adapters/ShipAdapter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/base/PlayerShipBase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/base/PlayerShipStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/customization/PlayerShipCustomization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/customization/PlayerShipUpgrade.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/customization/PlayerShipUpgradeSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/miningships/VoidDredgerMiner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/reconships/ReconShipControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/reconships/ReconShipStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/HarbringerGalleon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/MidwayCarrier.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/MotherEarthRevenge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/OrionFrigate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair, Shield } from 'lucide-react';\n\ninterface OrionFrigateProps {\n  id: string;\n  status: 'idle' | 'engaging' | 'retreating' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: {\n    id: string;\n    name: string;\n    type: 'machineGun' | 'gaussCannon';\n    damage: number;\n    status: 'ready' | 'charging' | 'cooling';\n  }[];\n  specialAbility: {\n    name: string;\n    description: string;\n    active: boolean;\n    cooldown: number;\n  };\n  onFire: (weaponId: string) => void;\n  onActivateAbility: () => void;\n  onRetreat: () => void;\n}\n\nexport function OrionFrigate({\n  id,\n  status,\n  hull,\n  maxHull,\n  shield,\n  maxShield,\n  weapons,\n  specialAbility,\n  onFire,\n  onActivateAbility,\n  onRetreat,\n}: OrionFrigateProps) {\n  return (\n    <div className=\"rounded-lg border border-violet-700/30 bg-violet-900/20 p-6\">\n      {/* Ship Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-white\">Orion's Frigate</h3>\n          <div className=\"text-sm text-gray-400\">Tier 2 Combat Frigate</div>\n        </div>\n        <div\n          className={`rounded-full px-3 py-1 text-sm ${\n            status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : status === 'retreating'\n                ? 'bg-yellow-900/50 text-yellow-400'\n                : status === 'damaged'\n                  ? 'bg-red-900/50 text-red-400'\n                  : 'bg-green-900/50 text-green-400'\n          }`}\n        >\n          {status.charAt(0).toUpperCase() + status.slice(1)}\n        </div>\n      </div>\n\n      {/* Combat Status */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Hull Integrity</span>\n            <span className={hull < maxHull * 0.3 ? 'text-red-400' : 'text-gray-300'}>\n              {Math.round((hull / maxHull) * 100)}%\n            </span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className={`h-full rounded-full transition-all ${\n                hull < maxHull * 0.3 ? 'bg-red-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${(hull / maxHull) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Shield Power</span>\n            <span className=\"text-gray-300\">{Math.round((shield / maxShield) * 100)}%</span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(shield / maxShield) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"mb-6 space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Weapon Systems</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {weapons.map(weapon => (\n            <button\n              key={weapon.id}\n              onClick={() => onFire(weapon.id)}\n              disabled={weapon.status !== 'ready'}\n              className={`rounded-lg p-3 transition-colors ${\n                weapon.status === 'ready'\n                  ? 'border border-violet-500/30 bg-violet-500/20 hover:bg-violet-500/30'\n                  : 'cursor-not-allowed border border-gray-600/30 bg-gray-700/50'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">{weapon.name}</div>\n                <div\n                  className={`text-xs ${\n                    weapon.status === 'ready'\n                      ? 'text-green-400'\n                      : weapon.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {weapon.status.charAt(0).toUpperCase() + weapon.status.slice(1)}\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-400\">Damage: {weapon.damage}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Special Ability */}\n      <div className=\"mb-6\">\n        <button\n          onClick={onActivateAbility}\n          disabled={specialAbility.active}\n          className={`w-full rounded-lg p-3 text-left transition-colors ${\n            specialAbility.active\n              ? 'border border-violet-500/30 bg-violet-500/20'\n              : 'bg-gray-700/50 hover:bg-gray-600/50'\n          }`}\n        >\n          <div className=\"mb-1 flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-white\">{specialAbility.name}</span>\n            {specialAbility.active ? (\n              <span className=\"text-xs text-green-400\">Active</span>\n            ) : (\n              <span className=\"text-xs text-gray-400\">{specialAbility.cooldown}s</span>\n            )}\n          </div>\n          <p className=\"text-xs text-gray-400\">{specialAbility.description}</p>\n        </button>\n      </div>\n\n      {/* Combat Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <button\n          onClick={() => onFire(weapons[0].id)}\n          disabled={!weapons.some(w => w.status === 'ready')}\n          className={`flex items-center justify-center space-x-2 rounded-lg px-4 py-2 text-sm ${\n            weapons.some(w => w.status === 'ready')\n              ? 'bg-violet-500/20 text-violet-200 hover:bg-violet-500/30'\n              : 'cursor-not-allowed bg-gray-700 text-gray-500'\n          }`}\n        >\n          <Crosshair className=\"h-4 w-4\" />\n          <span>Fire Weapons</span>\n        </button>\n        <button\n          onClick={onRetreat}\n          disabled={status === 'damaged'}\n          className={`flex items-center justify-center space-x-2 rounded-lg bg-gray-700 px-4 py-2 text-sm hover:bg-gray-600 ${\n            status === 'damaged' ? 'cursor-not-allowed opacity-50' : ''\n          }`}\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Retreat</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/PlayerWarShipCombat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/Spitflare.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair, Shield } from 'lucide-react';\n\ninterface SpitflareProps {\n  id: string;\n  status: 'idle' | 'engaging' | 'retreating' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: {\n    id: string;\n    name: string;\n    type: 'machineGun';\n    damage: number;\n    status: 'ready' | 'charging' | 'cooling';\n  }[];\n  onFire: (weaponId: string) => void;\n  onRetreat: () => void;\n}\n\nexport function Spitflare({\n  id,\n  status,\n  hull,\n  maxHull,\n  shield,\n  maxShield,\n  weapons,\n  onFire,\n  onRetreat,\n}: SpitflareProps) {\n  return (\n    <div className=\"rounded-lg border border-cyan-700/30 bg-cyan-900/20 p-6\">\n      {/* Ship Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-white\">Spitflare</h3>\n          <div className=\"text-sm text-gray-400\">Tier 1 Light Fighter</div>\n        </div>\n        <div\n          className={`rounded-full px-3 py-1 text-sm ${\n            status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : status === 'retreating'\n                ? 'bg-yellow-900/50 text-yellow-400'\n                : status === 'damaged'\n                  ? 'bg-red-900/50 text-red-400'\n                  : 'bg-green-900/50 text-green-400'\n          }`}\n        >\n          {status.charAt(0).toUpperCase() + status.slice(1)}\n        </div>\n      </div>\n\n      {/* Combat Status */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Hull Integrity</span>\n            <span className={hull < maxHull * 0.3 ? 'text-red-400' : 'text-gray-300'}>\n              {Math.round((hull / maxHull) * 100)}%\n            </span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className={`h-full rounded-full transition-all ${\n                hull < maxHull * 0.3 ? 'bg-red-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${(hull / maxHull) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Shield Power</span>\n            <span className=\"text-gray-300\">{Math.round((shield / maxShield) * 100)}%</span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(shield / maxShield) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"mb-6 space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Machine Guns</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {weapons.map(weapon => (\n            <button\n              key={weapon.id}\n              onClick={() => onFire(weapon.id)}\n              disabled={weapon.status !== 'ready'}\n              className={`rounded-lg p-3 transition-colors ${\n                weapon.status === 'ready'\n                  ? 'border border-cyan-500/30 bg-cyan-500/20 hover:bg-cyan-500/30'\n                  : 'cursor-not-allowed border border-gray-600/30 bg-gray-700/50'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">{weapon.name}</div>\n                <div\n                  className={`text-xs ${\n                    weapon.status === 'ready'\n                      ? 'text-green-400'\n                      : weapon.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {weapon.status.charAt(0).toUpperCase() + weapon.status.slice(1)}\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-400\">Damage: {weapon.damage}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Combat Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <button\n          onClick={() => onFire(weapons[0].id)}\n          disabled={!weapons.some(w => w.status === 'ready')}\n          className={`flex items-center justify-center space-x-2 rounded-lg px-4 py-2 text-sm ${\n            weapons.some(w => w.status === 'ready')\n              ? 'bg-cyan-500/20 text-cyan-200 hover:bg-cyan-500/30'\n              : 'cursor-not-allowed bg-gray-700 text-gray-500'\n          }`}\n        >\n          <Crosshair className=\"h-4 w-4\" />\n          <span>Fire Weapons</span>\n        </button>\n        <button\n          onClick={onRetreat}\n          disabled={status === 'damaged'}\n          className={`flex items-center justify-center space-x-2 rounded-lg bg-gray-700 px-4 py-2 text-sm hover:bg-gray-600 ${\n            status === 'damaged' ? 'cursor-not-allowed opacity-50' : ''\n          }`}\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Retreat</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/StarSchooner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair, Shield } from 'lucide-react';\n\ninterface StarSchoonerProps {\n  id: string;\n  tier: 1 | 2;\n  status: 'idle' | 'engaging' | 'retreating' | 'damaged';\n  hull: number;\n  maxHull: number;\n  shield: number;\n  maxShield: number;\n  weapons: {\n    id: string;\n    name: string;\n    type: 'railGun';\n    damage: number;\n    status: 'ready' | 'charging' | 'cooling';\n  }[];\n  onFire: (weaponId: string) => void;\n  onRetreat: () => void;\n}\n\nexport function StarSchooner({\n  id,\n  tier,\n  status,\n  hull,\n  maxHull,\n  shield,\n  maxShield,\n  weapons,\n  onFire,\n  onRetreat,\n}: StarSchoonerProps) {\n  return (\n    <div className=\"rounded-lg border border-indigo-700/30 bg-indigo-900/20 p-6\">\n      {/* Ship Header */}\n      <div className=\"mb-6 flex items-start justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-white\">Star Schooner</h3>\n          <div className=\"text-sm text-gray-400\">Tier {tier} Rail Gun Vessel</div>\n        </div>\n        <div\n          className={`rounded-full px-3 py-1 text-sm ${\n            status === 'engaging'\n              ? 'bg-red-900/50 text-red-400'\n              : status === 'retreating'\n                ? 'bg-yellow-900/50 text-yellow-400'\n                : status === 'damaged'\n                  ? 'bg-red-900/50 text-red-400'\n                  : 'bg-green-900/50 text-green-400'\n          }`}\n        >\n          {status.charAt(0).toUpperCase() + status.slice(1)}\n        </div>\n      </div>\n\n      {/* Combat Status */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Hull Integrity</span>\n            <span className={hull < maxHull * 0.3 ? 'text-red-400' : 'text-gray-300'}>\n              {Math.round((hull / maxHull) * 100)}%\n            </span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className={`h-full rounded-full transition-all ${\n                hull < maxHull * 0.3 ? 'bg-red-500' : 'bg-green-500'\n              }`}\n              style={{ width: `${(hull / maxHull) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <div className=\"mb-1 flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Shield Power</span>\n            <span className=\"text-gray-300\">{Math.round((shield / maxShield) * 100)}%</span>\n          </div>\n          <div className=\"h-2 overflow-hidden rounded-full bg-gray-700\">\n            <div\n              className=\"h-full rounded-full bg-blue-500 transition-all\"\n              style={{ width: `${(shield / maxShield) * 100}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Weapon Systems */}\n      <div className=\"mb-6 space-y-4\">\n        <h4 className=\"text-sm font-medium text-gray-300\">Rail Gun System</h4>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {weapons.map(weapon => (\n            <button\n              key={weapon.id}\n              onClick={() => onFire(weapon.id)}\n              disabled={weapon.status !== 'ready'}\n              className={`rounded-lg p-3 transition-colors ${\n                weapon.status === 'ready'\n                  ? 'border border-indigo-500/30 bg-indigo-500/20 hover:bg-indigo-500/30'\n                  : 'cursor-not-allowed border border-gray-600/30 bg-gray-700/50'\n              }`}\n            >\n              <div className=\"mb-2 flex items-center justify-between\">\n                <div className=\"text-sm font-medium text-white\">{weapon.name}</div>\n                <div\n                  className={`text-xs ${\n                    weapon.status === 'ready'\n                      ? 'text-green-400'\n                      : weapon.status === 'charging'\n                        ? 'text-yellow-400'\n                        : 'text-red-400'\n                  }`}\n                >\n                  {weapon.status.charAt(0).toUpperCase() + weapon.status.slice(1)}\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-400\">Damage: {weapon.damage}</div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Combat Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <button\n          onClick={() => onFire(weapons[0].id)}\n          disabled={!weapons.some(w => w.status === 'ready')}\n          className={`flex items-center justify-center space-x-2 rounded-lg px-4 py-2 text-sm ${\n            weapons.some(w => w.status === 'ready')\n              ? 'bg-indigo-500/20 text-indigo-200 hover:bg-indigo-500/30'\n              : 'cursor-not-allowed bg-gray-700 text-gray-500'\n          }`}\n        >\n          <Crosshair className=\"h-4 w-4\" />\n          <span>Fire Rail Gun</span>\n        </button>\n        <button\n          onClick={onRetreat}\n          disabled={status === 'damaged'}\n          className={`flex items-center justify-center space-x-2 rounded-lg bg-gray-700 px-4 py-2 text-sm hover:bg-gray-600 ${\n            status === 'damaged' ? 'cursor-not-allowed opacity-50' : ''\n          }`}\n        >\n          <Shield className=\"h-4 w-4\" />\n          <span>Retreat</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ships/player/variants/warships/WarShip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/trade/TradeRouteVisualizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/ContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/DiplomacyPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/DragAndDrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/GalaxyMap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/GameHUD.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/GameLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/NotificationSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/ResourceVisualization.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'prev' is defined but never used. Allowed unused args must match /^_/u.","line":127,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AnimatePresence, motion } from 'framer-motion';\nimport { Beaker, Database, Users, Zap } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useResources } from '../../contexts/GameContext';\n\ninterface ResourceDisplayProps {\n  type: 'minerals' | 'energy' | 'population' | 'research';\n  value: number;\n  rate: number;\n  capacity?: number;\n  thresholds?: {\n    low: number;\n    critical: number;\n  };\n}\n\nconst resourceIcons = {\n  minerals: Database,\n  energy: Zap,\n  population: Users,\n  research: Beaker,\n};\n\nconst resourceColors = {\n  minerals: {\n    base: 'text-amber-400',\n    bg: 'bg-amber-900/20',\n    border: 'border-amber-700/30',\n    fill: 'bg-amber-500',\n  },\n  energy: {\n    base: 'text-cyan-400',\n    bg: 'bg-cyan-900/20',\n    border: 'border-cyan-700/30',\n    fill: 'bg-cyan-500',\n  },\n  population: {\n    base: 'text-green-400',\n    bg: 'bg-green-900/20',\n    border: 'border-green-700/30',\n    fill: 'bg-green-500',\n  },\n  research: {\n    base: 'text-purple-400',\n    bg: 'bg-purple-900/20',\n    border: 'border-purple-700/30',\n    fill: 'bg-purple-500',\n  },\n};\n\nfunction ResourceDisplay({ type, value, rate, capacity, thresholds }: ResourceDisplayProps) {\n  const Icon = resourceIcons[type];\n  const colors = resourceColors[type];\n  const percentage = capacity ? (value / capacity) * 100 : 100;\n  const isLow = thresholds && value <= thresholds.low;\n  const isCritical = thresholds && value <= thresholds.critical;\n\n  return (\n    <div className={`p-3 ${colors.bg} rounded-lg border ${colors.border}`}>\n      <div className=\"mb-2 flex items-center space-x-3\">\n        <div className={`rounded-lg p-1.5 ${colors.bg}`}>\n          <Icon className={`h-4 w-4 ${colors.base}`} />\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"text-sm font-medium capitalize text-gray-300\">{type}</div>\n          <div className={`text-lg font-bold ${colors.base}`}>\n            {value.toLocaleString()}\n            {capacity && ` / ${capacity.toLocaleString()}`}\n          </div>\n        </div>\n        <AnimatePresence>\n          {rate !== 0 && (\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: 10 }}\n              className={`text-sm ${rate > 0 ? 'text-green-400' : 'text-red-400'}`}\n            >\n              {rate > 0 ? '+' : ''}\n              {rate}/s\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"h-1.5 overflow-hidden rounded-full bg-gray-800\">\n        <motion.div\n          className={`h-full ${colors.fill} transition-all duration-500`}\n          initial={{ width: 0 }}\n          animate={{ width: `${percentage}%` }}\n          style={{\n            opacity: isCritical ? 0.5 : isLow ? 0.7 : 1,\n          }}\n        />\n      </div>\n\n      {/* Warning Indicator */}\n      <AnimatePresence>\n        {(isLow || isCritical) && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className={`mt-2 text-xs ${isCritical ? 'text-red-400' : 'text-yellow-400'}`}\n          >\n            {isCritical ? 'Critical' : 'Low'} {type} levels\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport function ResourceVisualization() {\n  const resources = useResources();\n  const [resourceRates, setResourceRates] = useState({\n    minerals: 0,\n    energy: 0,\n    population: 0,\n    research: 0,\n  });\n\n  // Calculate resource rates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setResourceRates(prev => ({\n        minerals: Math.random() * 10 - 2, // Example rate calculation\n        energy: Math.random() * 15 - 5,\n        population: Math.random() * 2 - 0.5,\n        research: Math.random() * 5,\n      }));\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"grid grid-cols-2 gap-4\">\n      <ResourceDisplay\n        type=\"minerals\"\n        value={resources.minerals}\n        rate={resourceRates.minerals}\n        capacity={10000}\n        thresholds={{ low: 1000, critical: 500 }}\n      />\n      <ResourceDisplay\n        type=\"energy\"\n        value={resources.energy}\n        rate={resourceRates.energy}\n        capacity={8000}\n        thresholds={{ low: 800, critical: 400 }}\n      />\n      <ResourceDisplay\n        type=\"population\"\n        value={resources.population}\n        rate={resourceRates.population}\n        thresholds={{ low: 50, critical: 25 }}\n      />\n      <ResourceDisplay type=\"research\" value={resources.research} rate={resourceRates.research} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/ResourceVisualizationEnhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/SprawlView.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":291,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":291,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6992,7027],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AlertTriangle,\n  Bell,\n  ChevronRight,\n  Crown,\n  Database,\n  Flag,\n  HelpCircle,\n  Layers,\n  Map,\n  Rocket,\n  Search,\n  Star,\n  Zap,\n  ZoomIn,\n  ZoomOut,\n} from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { GameLayout } from './GameLayout';\n\ninterface EmpireDetails {\n  name: string;\n  bannerColor: string;\n}\n\ninterface Asset {\n  id: string;\n  type: 'colony' | 'dysonSphere' | 'starStation' | 'tradeHub';\n  name: string;\n  position: { x: number; y: number };\n  population?: number;\n  resources?: string[];\n  tradeConnections?: { target: string; volume: number }[];\n  status: 'active' | 'constructing' | 'damaged';\n  developmentLevel: number;\n  lastUpdate?: number;\n}\n\ninterface ViewState {\n  zoom: number;\n  focusedAsset: string | null;\n  position: { x: number; y: number };\n  activeOverlays: string[];\n  searchQuery: string;\n  notifications: {\n    id: string;\n    type: 'info' | 'warning' | 'success';\n    message: string;\n    timestamp: number;\n  }[];\n  dayNightCycle: number;\n}\n\nexport function SprawlView({ empire }: { empire: EmpireDetails }) {\n  const [view, setView] = useState<ViewState>({\n    zoom: 1,\n    focusedAsset: null,\n    position: { x: 0, y: 0 },\n    activeOverlays: ['trade', 'resources'],\n    searchQuery: '',\n    notifications: [],\n    dayNightCycle: 0,\n  });\n\n  const [assets, setAssets] = useState<Asset[]>([\n    {\n      id: 'alpha-colony',\n      type: 'colony',\n      name: 'Alpha Prime',\n      position: { x: 0, y: 0 },\n      population: 10000,\n      resources: ['Iron', 'Titanium'],\n      tradeConnections: [\n        { target: 'beta-station', volume: 0.8 },\n        { target: 'gamma-sphere', volume: 0.5 },\n      ],\n      status: 'active',\n      developmentLevel: 0.8,\n      lastUpdate: Date.now(),\n    },\n    {\n      id: 'beta-station',\n      type: 'starStation',\n      name: 'Beta Station',\n      position: { x: 150, y: -100 },\n      population: 5000,\n      resources: ['Helium-3'],\n      tradeConnections: [{ target: 'alpha-colony', volume: 0.8 }],\n      status: 'active',\n      developmentLevel: 0.6,\n      lastUpdate: Date.now(),\n    },\n    {\n      id: 'gamma-sphere',\n      type: 'dysonSphere',\n      name: 'Gamma Sphere',\n      position: { x: -120, y: 80 },\n      tradeConnections: [\n        { target: 'alpha-colony', volume: 0.5 },\n        { target: 'delta-hub', volume: 0.3 },\n      ],\n      status: 'constructing',\n      developmentLevel: 0.4,\n      lastUpdate: Date.now(),\n    },\n    {\n      id: 'delta-hub',\n      type: 'tradeHub',\n      name: 'Delta Trading Post',\n      position: { x: 80, y: 120 },\n      population: 2000,\n      tradeConnections: [{ target: 'gamma-sphere', volume: 0.3 }],\n      status: 'active',\n      developmentLevel: 0.3,\n      lastUpdate: Date.now(),\n    },\n  ]);\n\n  // Day/Night cycle effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setView(prev => ({\n        ...prev,\n        dayNightCycle: (prev.dayNightCycle + 0.01) % 1,\n      }));\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setAssets(currentAssets => {\n        return currentAssets.map(asset => {\n          if (asset.status === 'active' && Math.random() > 0.8) {\n            const populationChange = Math.floor(Math.random() * 100) - 30;\n            const newPopulation = asset.population ? asset.population + populationChange : 0;\n\n            if (populationChange > 0) {\n              addNotification(\n                'success',\n                `${asset.name}: Population increased by ${populationChange}`,\n                asset.id\n              );\n            }\n\n            return {\n              ...asset,\n              population: Math.max(0, newPopulation),\n              lastUpdate: Date.now(),\n            };\n          }\n          return asset;\n        });\n      });\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const addNotification = (\n    type: 'info' | 'warning' | 'success',\n    message: string,\n    assetId: string\n  ) => {\n    const notification = {\n      id: `${assetId}-${Date.now()}`,\n      type,\n      message,\n      timestamp: Date.now(),\n    };\n\n    setView(prev => ({\n      ...prev,\n      notifications: [...prev.notifications, notification],\n    }));\n\n    // Remove notification after 5 seconds\n    setTimeout(() => {\n      setView(prev => ({\n        ...prev,\n        notifications: prev.notifications.filter(n => n.id !== notification.id),\n      }));\n    }, 5000);\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const isDragging = useRef(false);\n  const lastPosition = useRef({ x: 0, y: 0 });\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    isDragging.current = true;\n    lastPosition.current = { x: e.clientX, y: e.clientY };\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isDragging.current) {\n      return;\n    }\n\n    const deltaX = e.clientX - lastPosition.current.x;\n    const deltaY = e.clientY - lastPosition.current.y;\n\n    setView(prev => ({\n      ...prev,\n      position: {\n        x: prev.position.x + deltaX,\n        y: prev.position.y + deltaY,\n      },\n    }));\n\n    lastPosition.current = { x: e.clientX, y: e.clientY };\n  };\n\n  const handleMouseUp = () => {\n    isDragging.current = false;\n  };\n\n  const handleZoom = (delta: number) => {\n    setView(prev => ({\n      ...prev,\n      zoom: Math.max(0.5, Math.min(2, prev.zoom + delta)),\n    }));\n  };\n\n  const focusAsset = (assetName: string) => {\n    setView(prev => ({\n      ...prev,\n      focusedAsset: assetName,\n      zoom: 1.5,\n    }));\n  };\n\n  const getAssetIcon = (type: Asset['type']) => {\n    switch (type) {\n      case 'colony':\n        return Crown;\n      case 'dysonSphere':\n        return Star;\n      case 'starStation':\n        return Rocket;\n      case 'tradeHub':\n        return Database;\n      default:\n        return Crown;\n    }\n  };\n\n  const getAssetColor = (asset: Asset) => {\n    if (asset.status === 'constructing') {\n      return 'yellow';\n    }\n    if (asset.status === 'damaged') {\n      return 'red';\n    }\n    switch (asset.type) {\n      case 'colony':\n        return 'cyan';\n      case 'dysonSphere':\n        return 'orange';\n      case 'starStation':\n        return 'purple';\n      case 'tradeHub':\n        return 'emerald';\n      default:\n        return 'blue';\n    }\n  };\n\n  const filteredAssets = assets.filter(asset =>\n    view.searchQuery ? asset.name.toLowerCase().includes(view.searchQuery.toLowerCase()) : true\n  );\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        setView(prev => ({\n          ...prev,\n          focusedAsset: null,\n          zoom: 1,\n        }));\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, []);\n\n  const onToggleSprawlView = () => {\n    // Implement the logic to toggle the sprawl view\n    console.log('Sprawl view toggled');\n  };\n\n  return (\n    <GameLayout empireName={empire.name} bannerColor={empire.bannerColor}>\n      <div className=\"absolute inset-0 overflow-hidden bg-gray-900\">\n        {/* Multi-layered Starfield Background */}\n        <div\n          className=\"absolute inset-0\"\n          style={{\n            backgroundColor: `rgba(0, 0, 0, ${0.3 + Math.sin(view.dayNightCycle * Math.PI * 2) * 0.2})`,\n          }}\n        >\n          <div\n            className=\"absolute inset-0 scale-100 transform bg-[url('https://images.unsplash.com/photo-1506318137071-a8e063b4bec0?q=80&w=3000')] bg-cover opacity-20\"\n            style={{ transition: 'transform 120s linear' }}\n          />\n          <div\n            className=\"absolute inset-0 scale-150 transform bg-[url('https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?q=80&w=2013')] bg-cover opacity-10\"\n            style={{ transition: 'transform 180s linear' }}\n          />\n\n          {/* Aurora Effect */}\n          <div\n            className=\"absolute inset-0 bg-gradient-to-b from-indigo-500/5 via-transparent to-transparent\"\n            style={{\n              transform: `translateY(${Math.sin(view.dayNightCycle * Math.PI * 2) * 20}px)`,\n              opacity: 0.3 + Math.sin(view.dayNightCycle * Math.PI * 2) * 0.2,\n            }}\n          />\n        </div>\n\n        {/* Controls */}\n        <div className=\"absolute left-6 right-6 top-6 z-10 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Search assets...\"\n                className=\"w-64 rounded-lg border border-gray-700 bg-gray-800/90 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-500\"\n                value={view.searchQuery}\n                onChange={e => setView(prev => ({ ...prev, searchQuery: e.target.value }))}\n              />\n              <Search className=\"absolute right-3 top-2.5 h-5 w-5 text-gray-400\" />\n            </div>\n\n            {/* Overlay Toggles */}\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() =>\n                  setView(prev => ({\n                    ...prev,\n                    activeOverlays: prev.activeOverlays.includes('trade')\n                      ? prev.activeOverlays.filter(o => o !== 'trade')\n                      : [...prev.activeOverlays, 'trade'],\n                  }))\n                }\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 transition-colors ${\n                  view.activeOverlays.includes('trade')\n                    ? 'bg-indigo-600 text-white'\n                    : 'bg-gray-800/90 text-gray-400 hover:bg-gray-700/90'\n                }`}\n              >\n                <Database className=\"h-4 w-4\" />\n                <span>Trade Routes</span>\n              </button>\n\n              <button\n                onClick={() =>\n                  setView(prev => ({\n                    ...prev,\n                    activeOverlays: prev.activeOverlays.includes('resources')\n                      ? prev.activeOverlays.filter(o => o !== 'resources')\n                      : [...prev.activeOverlays, 'resources'],\n                  }))\n                }\n                className={`flex items-center space-x-2 rounded-lg px-3 py-2 transition-colors ${\n                  view.activeOverlays.includes('resources')\n                    ? 'bg-indigo-600 text-white'\n                    : 'bg-gray-800/90 text-gray-400 hover:bg-gray-700/90'\n                }`}\n              >\n                <Layers className=\"h-4 w-4\" />\n                <span>Resources</span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => handleZoom(0.1)}\n              className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n            >\n              <ZoomIn className=\"h-5 w-5 text-cyan-400\" />\n            </button>\n            <button\n              onClick={() => handleZoom(-0.1)}\n              className=\"rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\"\n            >\n              <ZoomOut className=\"h-5 w-5 text-cyan-400\" />\n            </button>\n            <button className=\"group relative rounded-lg bg-gray-800/90 p-2 backdrop-blur-sm transition-colors hover:bg-gray-700/90\">\n              <HelpCircle className=\"h-5 w-5 text-cyan-400\" />\n              <div className=\"absolute right-0 top-full mt-2 hidden w-64 rounded-lg border border-gray-700 bg-gray-800/95 p-3 group-hover:block\">\n                <h4 className=\"mb-2 font-medium text-white\">Navigation Help</h4>\n                <ul className=\"space-y-1 text-sm text-gray-300\">\n                  <li className=\"flex items-center\">\n                    <ZoomIn className=\"mr-2 h-4 w-4\" /> Zoom in view\n                  </li>\n                  <li className=\"flex items-center\">\n                    <ZoomOut className=\"mr-2 h-4 w-4\" /> Zoom out view\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Flag className=\"mr-2 h-4 w-4\" /> Mark territory\n                  </li>\n                  <li className=\"flex items-center\">\n                    <ChevronRight className=\"mr-2 h-4 w-4\" /> Navigate sectors\n                  </li>\n                </ul>\n              </div>\n            </button>\n          </div>\n        </div>\n\n        {/* Map Area */}\n        <div\n          ref={containerRef}\n          className=\"absolute inset-0 cursor-move\"\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n        >\n          <div\n            className=\"absolute inset-0 transition-transform duration-300 ease-out\"\n            style={{\n              transform: `translate(${view.position.x}px, ${view.position.y}px) scale(${view.zoom})`,\n            }}\n          >\n            {/* Trade Routes */}\n            {view.activeOverlays.includes('trade') && (\n              <svg className=\"pointer-events-none absolute inset-0\">\n                {assets.map(asset =>\n                  asset.tradeConnections?.map(connection => {\n                    const target = assets.find(a => a.id === connection.target);\n                    if (!target) {\n                      return null;\n                    }\n\n                    const startX = asset.position.x + window.innerWidth / 2;\n                    const startY = asset.position.y + window.innerHeight / 2;\n                    const endX = target.position.x + window.innerWidth / 2;\n                    const endY = target.position.y + window.innerHeight / 2;\n\n                    return (\n                      <g key={`${asset.id}-${target.id}`}>\n                        <line\n                          x1={startX}\n                          y1={startY}\n                          x2={endX}\n                          y2={endY}\n                          stroke=\"rgba(99, 102, 241, 0.3)\"\n                          strokeWidth={2 + connection.volume * 4}\n                          strokeDasharray=\"4 4\"\n                        >\n                          <animate\n                            attributeName=\"stroke-dashoffset\"\n                            from=\"0\"\n                            to=\"8\"\n                            dur={`${1 / connection.volume}s`}\n                            repeatCount=\"indefinite\"\n                          />\n                        </line>\n                        {/* Trade Volume Indicator */}\n                        <circle\n                          cx={(startX + endX) / 2}\n                          cy={(startY + endY) / 2}\n                          r={4 + connection.volume * 4}\n                          fill=\"rgba(99, 102, 241, 0.2)\"\n                          className=\"animate-pulse\"\n                        />\n                      </g>\n                    );\n                  })\n                )}\n              </svg>\n            )}\n\n            {/* Assets */}\n            {filteredAssets.map(asset => {\n              const Icon = getAssetIcon(asset.type);\n              const color = getAssetColor(asset);\n\n              return (\n                <div\n                  key={asset.id}\n                  className=\"absolute\"\n                  style={{\n                    left: `calc(50% + ${asset.position.x}px)`,\n                    top: `calc(50% + ${asset.position.y}px)`,\n                    transform: 'translate(-50%, -50%)',\n                  }}\n                >\n                  <button onClick={() => focusAsset(asset.id)} className=\"group relative\">\n                    <div\n                      className={`h-24 w-24 rounded-full bg-${color}-500/20 relative animate-pulse`}\n                      style={{\n                        boxShadow: `0 0 ${20 + asset.developmentLevel * 30}px ${asset.developmentLevel * 20}px rgba(${\n                          color === 'cyan'\n                            ? '34, 211, 238'\n                            : color === 'orange'\n                              ? '234, 88, 12'\n                              : color === 'purple'\n                                ? '147, 51, 234'\n                                : color === 'emerald'\n                                  ? '16, 185, 129'\n                                  : '59, 130, 246'\n                        }, ${0.1 + asset.developmentLevel * 0.2})`,\n                      }}\n                    >\n                      <div\n                        className={`absolute left-1/2 top-1/2 h-16 w-16 -translate-x-1/2 -translate-y-1/2 rounded-full bg-${color}-400/30`}\n                        style={{\n                          transform: `translate(-50%, -50%) scale(${0.8 + Math.sin(Date.now() / 1000) * 0.1})`,\n                        }}\n                      >\n                        <div\n                          className={`absolute left-1/2 top-1/2 h-8 w-8 -translate-x-1/2 -translate-y-1/2 rounded-full bg-${color}-300/40 animate-spin-slow flex items-center justify-center`}\n                        >\n                          <Icon className={`h-5 w-5 text-${color}-200`} />\n                        </div>\n                      </div>\n\n                      {/* Development Level Rings */}\n                      {Array.from({\n                        length: Math.ceil(asset.developmentLevel * 5),\n                      }).map((_, i) => (\n                        <div\n                          key={i}\n                          className=\"absolute inset-0 rounded-full border\"\n                          style={{\n                            borderColor: `rgba(${\n                              color === 'cyan'\n                                ? '34, 211, 238'\n                                : color === 'orange'\n                                  ? '234, 88, 12'\n                                  : color === 'purple'\n                                    ? '147, 51, 234'\n                                    : color === 'emerald'\n                                      ? '16, 185, 129'\n                                      : '59, 130, 246'\n                            }, ${0.1 + (i / 5) * 0.2})`,\n                            transform: `scale(${1.2 + i * 0.2}) rotate(${i * 30}deg)`,\n                            animation: `spin ${10 + i * 5}s linear infinite`,\n                          }}\n                        />\n                      ))}\n                    </div>\n\n                    {/* Asset Label */}\n                    <div className=\"absolute left-1/2 top-full mt-2 -translate-x-1/2 text-center\">\n                      <div className={`text-${color}-200 font-medium`}>{asset.name}</div>\n                      {asset.population && (\n                        <div className={`text-${color}-300/70 text-sm`}>\n                          Pop: {asset.population.toLocaleString()}\n                        </div>\n                      )}\n                      {asset.status === 'constructing' && (\n                        <div className=\"flex items-center justify-center text-sm text-yellow-300/70\">\n                          <Zap className=\"mr-1 h-4 w-4\" />\n                          Power Required\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Hover Tooltip */}\n                    <div className=\"pointer-events-none absolute bottom-full left-1/2 mb-2 -translate-x-1/2 opacity-0 transition-opacity group-hover:opacity-100\">\n                      <div className=\"whitespace-nowrap rounded-lg border border-gray-700 bg-gray-800/95 px-3 py-2 backdrop-blur-sm\">\n                        {asset.resources && view.activeOverlays.includes('resources') && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            {asset.resources.map(resource => (\n                              <span key={resource} className=\"text-gray-300\">\n                                {resource}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Notifications */}\n        <div className=\"fixed bottom-6 left-6 space-y-2\">\n          {view.notifications.map(notification => (\n            <div\n              key={notification.id}\n              className={`flex items-center space-x-2 rounded-lg px-4 py-2 backdrop-blur-sm transition-all ${\n                notification.type === 'success'\n                  ? 'bg-green-900/80 text-green-200'\n                  : notification.type === 'warning'\n                    ? 'bg-yellow-900/80 text-yellow-200'\n                    : 'bg-blue-900/80 text-blue-200'\n              }`}\n              style={{\n                animation: 'slideIn 0.3s ease-out',\n              }}\n            >\n              {notification.type === 'success' && <Bell className=\"h-4 w-4\" />}\n              {notification.type === 'warning' && <AlertTriangle className=\"h-4 w-4\" />}\n              {notification.type === 'info' && <Database className=\"h-4 w-4\" />}\n              <span>{notification.message}</span>\n            </div>\n          ))}\n        </div>\n\n        <button\n          onClick={onToggleSprawlView}\n          className=\"group w-full rounded-lg border border-indigo-700/50 bg-gradient-to-r from-indigo-950/80 to-indigo-900/80 px-4 py-3 text-left backdrop-blur-sm transition-all hover:bg-indigo-800/30\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Map className=\"h-5 w-5 text-indigo-400\" />\n              <span className=\"font-medium text-indigo-100\">{empire.name} Map</span>\n            </div>\n            <span className=\"text-sm text-indigo-400 opacity-60 transition-opacity group-hover:opacity-100\">\n              Press S\n            </span>\n          </div>\n        </button>\n      </div>\n    </GameLayout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/TechTree.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/TooltipProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/VPRErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/VPRLoadingFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/VPRStarSystemView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/automation/AutomationVisualization.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":158,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":158,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3986,4033],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport {\n  GlobalAutomationManager,\n  GlobalRoutine,\n} from '../../../managers/automation/GlobalAutomationManager';\nimport '../../../styles/automation.css';\n\n// Define the routine type enum to match what's in GlobalAutomationManager\nenum RoutineType {\n  RESOURCE_BALANCING = 'RESOURCE_BALANCING',\n  PERFORMANCE_OPTIMIZATION = 'PERFORMANCE_OPTIMIZATION',\n  EMERGENCY_RESPONSE = 'EMERGENCY_RESPONSE',\n  SYSTEM_MAINTENANCE = 'SYSTEM_MAINTENANCE',\n}\n\n// Define SystemId type to match what's expected\ntype SystemId = string;\n\ninterface AutomationVisualizationProps {\n  automationManager?: GlobalAutomationManager;\n  className?: string;\n}\n\nexport const AutomationVisualization: React.FC<AutomationVisualizationProps> = ({\n  automationManager,\n  className = '',\n}) => {\n  const [routines, setRoutines] = useState<GlobalRoutine[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [filter, setFilter] = useState<{\n    type: string;\n    system: string;\n    status: string;\n    search: string;\n  }>({\n    type: 'all',\n    system: 'all',\n    status: 'all',\n    search: '',\n  });\n\n  // Get all available types and systems for filtering\n  const routineTypes = Object.values(RoutineType);\n  const systems = [\n    ...new Set(\n      routines.map(routine =>\n        Array.isArray(routine.systems) && routine.systems.length > 0\n          ? routine.systems[0]\n          : 'unknown'\n      )\n    ),\n  ];\n\n  useEffect(() => {\n    if (!automationManager) {\n      return;\n    }\n\n    // Initial load\n    loadRoutines();\n\n    // Subscribe to automation events\n    const unsubscribe = subscribeToAutomationEvents();\n\n    return () => {\n      unsubscribe();\n    };\n  }, [automationManager]);\n\n  const loadRoutines = () => {\n    if (!automationManager) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const allRoutines = automationManager.getAllRoutines();\n      setRoutines(allRoutines);\n    } catch (error) {\n      console.error('Failed to load automation routines:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const subscribeToAutomationEvents = () => {\n    if (!automationManager) {\n      return () => {};\n    }\n\n    // This would be implemented with the event system\n    // For now, we'll just return an empty function\n    return () => {};\n  };\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setFilter(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleToggleRoutine = (routineId: string) => {\n    if (!automationManager) {\n      return;\n    }\n\n    const routine = routines.find(r => r.id === routineId);\n    if (!routine) {\n      return;\n    }\n\n    try {\n      if (routine.enabled) {\n        automationManager.disableRoutine(routineId);\n      } else {\n        automationManager.enableRoutine(routineId);\n      }\n\n      // Update local state\n      setRoutines(prev => prev.map(r => (r.id === routineId ? { ...r, enabled: !r.enabled } : r)));\n    } catch (error) {\n      console.error(`Failed to toggle routine ${routineId}:`, error);\n    }\n  };\n\n  const handleRemoveRoutine = (routineId: string) => {\n    if (!automationManager) {\n      return;\n    }\n\n    try {\n      automationManager.unregisterRoutine(routineId);\n\n      // Update local state\n      setRoutines(prev => prev.filter(r => r.id !== routineId));\n    } catch (error) {\n      console.error(`Failed to remove routine ${routineId}:`, error);\n    }\n  };\n\n  const handleRunRoutine = (routineId: string) => {\n    if (!automationManager) {\n      return;\n    }\n\n    try {\n      // Find the routine first\n      const routine = routines.find(r => r.id === routineId);\n      if (!routine) {\n        return;\n      }\n\n      // Manually trigger the routine execution\n      // Note: Since executeRoutine is private, we'll just update the UI\n      // In a real implementation, we would need a public method to execute a routine\n      console.log(`Executing routine: ${routineId}`);\n\n      // Update local state to reflect the routine was run\n      const now = new Date().getTime(); // Use number instead of string for lastRun\n      setRoutines(prev => prev.map(r => (r.id === routineId ? { ...r, lastRun: now } : r)));\n    } catch (error) {\n      console.error(`Failed to run routine ${routineId}:`, error);\n    }\n  };\n\n  // Filter routines based on current filter settings\n  const filteredRoutines = routines.filter(routine => {\n    const matchesType = filter.type === 'all' || routine.type === filter.type;\n    const matchesSystem =\n      filter.system === 'all' ||\n      (Array.isArray(routine.systems) &&\n        routine.systems.some(sys => sys === (filter.system as SystemId)));\n    const matchesStatus =\n      filter.status === 'all' ||\n      (filter.status === 'active' && routine.enabled) ||\n      (filter.status === 'inactive' && !routine.enabled);\n    const matchesSearch =\n      !filter.search ||\n      routine.name.toLowerCase().includes(filter.search.toLowerCase()) ||\n      routine.description.toLowerCase().includes(filter.search.toLowerCase()) ||\n      (Array.isArray(routine.tags) &&\n        routine.tags.some(tag => tag.toLowerCase().includes(filter.search.toLowerCase())));\n\n    return matchesType && matchesSystem && matchesStatus && matchesSearch;\n  });\n\n  // Get routine type icon based on type\n  const getRoutineTypeIcon = (type: string) => {\n    switch (type) {\n      case RoutineType.RESOURCE_BALANCING:\n        return '⚖️';\n      case RoutineType.PERFORMANCE_OPTIMIZATION:\n        return '⚡';\n      case RoutineType.EMERGENCY_RESPONSE:\n        return '🚨';\n      case RoutineType.SYSTEM_MAINTENANCE:\n        return '🔧';\n      default:\n        return '🤖';\n    }\n  };\n\n  // Format relative time\n  const formatRelativeTime = (timestamp: number | undefined) => {\n    if (!timestamp) {\n      return 'Never';\n    }\n\n    const now = new Date().getTime();\n    const diffMs = now - timestamp;\n    const diffSec = Math.floor(diffMs / 1000);\n\n    if (diffSec < 60) {\n      return `${diffSec}s ago`;\n    }\n    if (diffSec < 3600) {\n      return `${Math.floor(diffSec / 60)}m ago`;\n    }\n    if (diffSec < 86400) {\n      return `${Math.floor(diffSec / 3600)}h ago`;\n    }\n    return `${Math.floor(diffSec / 86400)}d ago`;\n  };\n\n  // Get priority label and color\n  const getPriorityLabel = (priority: number) => {\n    if (priority >= 90) {\n      return { label: 'Critical', color: '#f44336' };\n    }\n    if (priority >= 70) {\n      return { label: 'High', color: '#ff9800' };\n    }\n    if (priority >= 40) {\n      return { label: 'Medium', color: '#2196f3' };\n    }\n    if (priority >= 10) {\n      return { label: 'Low', color: '#4caf50' };\n    }\n    return { label: 'Background', color: '#9e9e9e' };\n  };\n\n  if (loading) {\n    return (\n      <div className={`automation-visualization automation-visualization--loading ${className}`}>\n        <div className=\"automation-visualization__loading-spinner\">\n          {/* Spinner component would go here */}\n          <div>Loading...</div>\n        </div>\n        <div className=\"automation-visualization__loading-text\">Loading automation routines...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`automation-visualization ${className}`}>\n      <div className=\"automation-visualization__header\">\n        <h2 className=\"automation-visualization__title\">\n          <span style={{ marginRight: '8px' }}>🤖</span>\n          Automation Routines\n        </h2>\n        <div className=\"automation-visualization__stats\">\n          <div className=\"automation-visualization__stat\">\n            <span className=\"automation-visualization__stat-label\">Total:</span>\n            <span className=\"automation-visualization__stat-value\">{routines.length}</span>\n          </div>\n          <div className=\"automation-visualization__stat\">\n            <span className=\"automation-visualization__stat-label\">Active:</span>\n            <span className=\"automation-visualization__stat-value\">\n              {routines.filter(r => r.enabled).length}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"automation-visualization__filters\">\n        <div className=\"automation-visualization__filter\">\n          <label className=\"automation-visualization__filter-label\">Type:</label>\n          <select\n            className=\"automation-visualization__filter-select\"\n            name=\"type\"\n            value={filter.type}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All Types</option>\n            {routineTypes.map(type => (\n              <option key={type} value={type}>\n                {type.replace(/_/g, ' ')}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"automation-visualization__filter\">\n          <label className=\"automation-visualization__filter-label\">System:</label>\n          <select\n            className=\"automation-visualization__filter-select\"\n            name=\"system\"\n            value={filter.system}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All Systems</option>\n            {systems.map(system => (\n              <option key={system} value={system}>\n                {system}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"automation-visualization__filter\">\n          <label className=\"automation-visualization__filter-label\">Status:</label>\n          <select\n            className=\"automation-visualization__filter-select\"\n            name=\"status\"\n            value={filter.status}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All Statuses</option>\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n          </select>\n        </div>\n\n        <input\n          type=\"text\"\n          className=\"automation-visualization__search\"\n          name=\"search\"\n          value={filter.search}\n          onChange={handleFilterChange}\n          placeholder=\"Search routines...\"\n        />\n      </div>\n\n      <div className=\"automation-visualization__routines\">\n        {filteredRoutines.length === 0 ? (\n          <div className=\"automation-visualization__empty\">\n            <div>No automation routines found</div>\n            <div>Try adjusting your filters or create a new routine</div>\n          </div>\n        ) : (\n          <div className=\"automation-visualization__routines-list\">\n            {filteredRoutines.map(routine => {\n              const priorityInfo = getPriorityLabel(routine.priority);\n              const systemName =\n                Array.isArray(routine.systems) && routine.systems.length > 0\n                  ? routine.systems[0]\n                  : 'unknown';\n\n              return (\n                <div\n                  key={routine.id}\n                  className={`automation-visualization__routine ${\n                    routine.enabled\n                      ? 'automation-visualization__routine--active'\n                      : 'automation-visualization__routine--inactive'\n                  }`}\n                >\n                  <div className=\"automation-visualization__routine-header\">\n                    <div className=\"automation-visualization__routine-type\">\n                      {getRoutineTypeIcon(routine.type)}\n                    </div>\n                    <div className=\"automation-visualization__routine-name\">{routine.name}</div>\n                    <div\n                      className=\"automation-visualization__routine-priority\"\n                      style={{ backgroundColor: priorityInfo.color }}\n                    >\n                      {priorityInfo.label}\n                    </div>\n                  </div>\n\n                  <div className=\"automation-visualization__routine-description\">\n                    {routine.description}\n                  </div>\n\n                  <div className=\"automation-visualization__routine-meta\">\n                    <div className=\"automation-visualization__routine-systems\">\n                      System: {systemName}\n                    </div>\n                    {routine.interval && (\n                      <div className=\"automation-visualization__routine-interval\">\n                        Interval: {routine.interval}ms\n                      </div>\n                    )}\n                    <div className=\"automation-visualization__routine-last-run\">\n                      Last run: {formatRelativeTime(routine.lastRun)}\n                    </div>\n                  </div>\n\n                  {Array.isArray(routine.tags) && routine.tags.length > 0 && (\n                    <div className=\"automation-visualization__routine-tags\">\n                      {routine.tags.map((tag, index) => (\n                        <div\n                          key={`${routine.id}-tag-${index}`}\n                          className=\"automation-visualization__routine-tag\"\n                        >\n                          {tag}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  <div className=\"automation-visualization__routine-controls\">\n                    <button\n                      className=\"automation-visualization__routine-control automation-visualization__routine-control--run\"\n                      onClick={() => handleRunRoutine(routine.id)}\n                      title=\"Run now\"\n                    >\n                      ▶️\n                    </button>\n                    <button\n                      className=\"automation-visualization__routine-control automation-visualization__routine-control--toggle\"\n                      onClick={() => handleToggleRoutine(routine.id)}\n                      title={routine.enabled ? 'Disable' : 'Enable'}\n                    >\n                      {routine.enabled ? '⏸️' : '▶️'}\n                    </button>\n                    <button\n                      className=\"automation-visualization__routine-control automation-visualization__routine-control--remove\"\n                      onClick={() => handleRemoveRoutine(routine.id)}\n                      title=\"Remove\"\n                    >\n                      🗑️\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <div className=\"automation-visualization__create\">\n        <button className=\"automation-visualization__create-button\">+ Create New Routine</button>\n      </div>\n    </div>\n  );\n};\n\nexport default AutomationVisualization;\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/buttons/AbilityButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleHUD.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleStatusDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleUpgradeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/ModuleUpgradeVisualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/modules/SubModuleHUD.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/status/StatusEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/ui/tooltip-context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponLoadout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponSpecialization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponSystem.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":32,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[727,815],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Crosshair } from 'lucide-react';\nimport {\n  CombatWeaponStats,\n  WEAPON_COLORS,\n  WeaponEffect,\n  WeaponSystemProps,\n  WeaponUpgrade,\n} from '../../types/weapons/WeaponTypes';\nimport {\n  WeaponEffectsDisplay,\n  WeaponHeader,\n  WeaponStatsDisplay,\n  WeaponUpgradeDisplay,\n} from './WeaponComponents';\n\nexport function WeaponSystem({\n  weapon,\n  availableUpgrades,\n  resources,\n  onFire,\n  onUpgrade,\n  onToggleEffect,\n}: WeaponSystemProps) {\n  const color = WEAPON_COLORS[weapon.config.category];\n\n  const handleUpgrade = (upgradeId: string, upgrade: WeaponUpgrade) => {\n    if (onUpgrade) {\n      const updatedStats: CombatWeaponStats = {\n        ...weapon.state.currentStats,\n        ...upgrade.stats,\n      };\n      console.debug(`[WeaponSystem] Applying upgrade ${upgradeId}, new stats:`, updatedStats);\n      onUpgrade(upgradeId);\n    }\n  };\n\n  const mapToWeaponEffect = (effect: WeaponEffect): WeaponEffect => ({\n    ...effect,\n    active: effect.active ?? true,\n    cooldown: effect.cooldown ?? 0,\n  });\n\n  return (\n    <div className={`bg-${color}-900/20 border border-${color}-700/30 rounded-lg p-6`}>\n      <WeaponHeader\n        name={weapon.config.name}\n        tier={weapon.config.tier}\n        type={weapon.config.category}\n        status={weapon.state.status}\n        color={color}\n      />\n\n      {/* Main Stats */}\n      <div className=\"mb-6 grid grid-cols-2 gap-4\">\n        <div>\n          <div className=\"mb-1 text-sm text-gray-400\">Damage</div>\n          <div className=\"flex items-baseline space-x-1\">\n            <span className=\"text-2xl font-bold text-white\">\n              {weapon.state.currentStats.damage}\n            </span>\n            <span className=\"text-sm text-gray-400\">DPS</span>\n          </div>\n        </div>\n        <div>\n          <div className=\"mb-1 text-sm text-gray-400\">Range</div>\n          <div className=\"flex items-baseline space-x-1\">\n            <span className=\"text-2xl font-bold text-white\">{weapon.state.currentStats.range}</span>\n            <span className=\"text-sm text-gray-400\">ly</span>\n          </div>\n        </div>\n      </div>\n\n      <WeaponStatsDisplay\n        stats={weapon.state.currentStats}\n        color={color}\n        showAmmo={weapon.state.currentAmmo !== undefined}\n        currentAmmo={weapon.state.currentAmmo}\n        maxAmmo={weapon.state.maxAmmo}\n      />\n\n      <WeaponEffectsDisplay\n        effects={weapon.state.effects.map(mapToWeaponEffect)}\n        color={color}\n        onToggle={onToggleEffect}\n      />\n\n      {/* Available Upgrades */}\n      {availableUpgrades && availableUpgrades.length > 0 && resources && (\n        <div className=\"mb-6 space-y-3\">\n          <h4 className=\"text-sm font-medium text-gray-300\">Available Upgrades</h4>\n          {availableUpgrades.map((upgrade: WeaponUpgrade) => (\n            <WeaponUpgradeDisplay\n              key={upgrade.id}\n              upgrade={upgrade}\n              currentStats={weapon.state.currentStats}\n              resources={resources}\n              onUpgrade={id => handleUpgrade(id, upgrade)}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Fire Control */}\n      <button\n        onClick={() => onFire?.(weapon.config.id)}\n        disabled={weapon.state.status !== 'ready'}\n        className={`flex w-full items-center justify-center space-x-2 rounded-lg px-4 py-3 ${\n          weapon.state.status === 'ready'\n            ? `bg-${color}-600 hover:bg-${color}-700 text-white`\n            : 'cursor-not-allowed bg-gray-700 text-gray-500'\n        }`}\n      >\n        <Crosshair className=\"h-5 w-5\" />\n        <span>Fire Weapon</span>\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/components/weapons/WeaponUpgradeSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/OfficerConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ShipBlueprints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/colonyRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/combatRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/explorationRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/hangarRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/automation/miningRules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/buildings/defaultBuildings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/combat/combatConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/combat/weaponConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/factions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/factions/factionConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/factions/factions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/game/gameConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/modules/defaultModuleConfigs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/modules/upgradePathsConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8524,8527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8524,8527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleUpgradePath } from '../../managers/module/ModuleUpgradeManager';\n\n/**\n * Sample upgrade paths for different module types\n */\nexport const moduleUpgradePaths: ModuleUpgradePath[] = [\n  // Radar module upgrade path\n  {\n    moduleType: 'radar',\n    levels: [\n      {\n        level: 2,\n        name: 'Enhanced Radar Array',\n        description: 'Improved scanning capabilities with extended range and better resolution.',\n        requirements: {\n          minLevel: 1,\n          resourceCosts: [\n            { type: 'minerals', amount: 100 },\n            { type: 'energy', amount: 50 },\n          ],\n          buildingLevel: 2,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'range',\n            value: 20,\n            isPercentage: true,\n            description: 'Increases radar range',\n          },\n          {\n            type: 'stat',\n            target: 'resolution',\n            value: 15,\n            isPercentage: true,\n            description: 'Improves scan resolution',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Larger radar dish',\n            value: 'medium',\n          },\n          {\n            type: 'color',\n            description: 'Enhanced emitter glow',\n            value: 'cyan',\n          },\n        ],\n      },\n      {\n        level: 3,\n        name: 'Advanced Sensor Suite',\n        description: 'Cutting-edge sensor technology with deep space scanning capabilities.',\n        requirements: {\n          minLevel: 2,\n          resourceCosts: [\n            { type: 'minerals', amount: 200 },\n            { type: 'energy', amount: 100 },\n            { type: 'plasma', amount: 50 },\n          ],\n          techRequirements: ['advanced_sensors'],\n          buildingLevel: 3,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'range',\n            value: 50,\n            isPercentage: true,\n            description: 'Greatly increases radar range',\n          },\n          {\n            type: 'stat',\n            target: 'resolution',\n            value: 30,\n            isPercentage: true,\n            description: 'Significantly improves scan resolution',\n          },\n          {\n            type: 'ability',\n            target: 'deep_scan',\n            value: 1,\n            isPercentage: false,\n            description: 'Unlocks deep space scanning',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Large radar array',\n            value: 'large',\n          },\n          {\n            type: 'color',\n            description: 'Advanced emitter glow',\n            value: 'blue',\n          },\n          {\n            type: 'effect',\n            description: 'Scanning beam effect',\n            value: 'pulse',\n          },\n        ],\n      },\n    ],\n  },\n\n  // Hangar module upgrade path\n  {\n    moduleType: 'hangar',\n    levels: [\n      {\n        level: 2,\n        name: 'Expanded Hangar Bay',\n        description: 'Larger hangar with improved ship maintenance facilities.',\n        requirements: {\n          minLevel: 1,\n          resourceCosts: [\n            { type: 'minerals', amount: 150 },\n            { type: 'energy', amount: 75 },\n          ],\n          buildingLevel: 2,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'capacity',\n            value: 2,\n            isPercentage: false,\n            description: 'Increases ship capacity',\n          },\n          {\n            type: 'stat',\n            target: 'maintenance_efficiency',\n            value: 15,\n            isPercentage: true,\n            description: 'Improves maintenance efficiency',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Wider hangar doors',\n            value: 'medium',\n          },\n          {\n            type: 'texture',\n            description: 'Reinforced plating',\n            value: 'metallic',\n          },\n        ],\n      },\n      {\n        level: 3,\n        name: 'Advanced Docking System',\n        description: 'State-of-the-art docking facilities with automated maintenance.',\n        requirements: {\n          minLevel: 2,\n          resourceCosts: [\n            { type: 'minerals', amount: 300 },\n            { type: 'energy', amount: 150 },\n            { type: 'plasma', amount: 75 },\n          ],\n          techRequirements: ['automated_docking'],\n          buildingLevel: 3,\n        },\n        effects: [\n          {\n            type: 'stat',\n            target: 'capacity',\n            value: 3,\n            isPercentage: false,\n            description: 'Further increases ship capacity',\n          },\n          {\n            type: 'stat',\n            target: 'maintenance_efficiency',\n            value: 30,\n            isPercentage: true,\n            description: 'Greatly improves maintenance efficiency',\n          },\n          {\n            type: 'ability',\n            target: 'auto_repair',\n            value: 1,\n            isPercentage: false,\n            description: 'Unlocks automated ship repairs',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Large hangar complex',\n            value: 'large',\n          },\n          {\n            type: 'texture',\n            description: 'Advanced composite plating',\n            value: 'composite',\n          },\n          {\n            type: 'effect',\n            description: 'Docking guidance beams',\n            value: 'beam',\n          },\n        ],\n      },\n    ],\n  },\n\n  // Mineral module upgrade path\n  {\n    moduleType: 'mineral',\n    levels: [\n      {\n        level: 2,\n        name: 'Enhanced Mining Facility',\n        description: 'Improved mining equipment with better extraction rates.',\n        requirements: {\n          minLevel: 1,\n          resourceCosts: [\n            { type: 'minerals', amount: 120 },\n            { type: 'energy', amount: 60 },\n          ],\n          buildingLevel: 2,\n        },\n        effects: [\n          {\n            type: 'resource',\n            target: 'minerals',\n            value: 25,\n            isPercentage: true,\n            description: 'Increases mineral production',\n          },\n          {\n            type: 'stat',\n            target: 'efficiency',\n            value: 15,\n            isPercentage: true,\n            description: 'Improves mining efficiency',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Larger mining equipment',\n            value: 'medium',\n          },\n          {\n            type: 'color',\n            description: 'Industrial coloring',\n            value: 'orange',\n          },\n        ],\n      },\n      {\n        level: 3,\n        name: 'Automated Mining Complex',\n        description: 'Fully automated mining operation with advanced extraction technology.',\n        requirements: {\n          minLevel: 2,\n          resourceCosts: [\n            { type: 'minerals', amount: 250 },\n            { type: 'energy', amount: 125 },\n            { type: 'plasma', amount: 60 },\n          ],\n          techRequirements: ['automated_mining'],\n          buildingLevel: 3,\n        },\n        effects: [\n          {\n            type: 'resource',\n            target: 'minerals',\n            value: 50,\n            isPercentage: true,\n            description: 'Greatly increases mineral production',\n          },\n          {\n            type: 'stat',\n            target: 'efficiency',\n            value: 30,\n            isPercentage: true,\n            description: 'Significantly improves mining efficiency',\n          },\n          {\n            type: 'ability',\n            target: 'deep_mining',\n            value: 1,\n            isPercentage: false,\n            description: 'Unlocks deep mining capabilities',\n          },\n        ],\n        visualChanges: [\n          {\n            type: 'size',\n            description: 'Large mining complex',\n            value: 'large',\n          },\n          {\n            type: 'color',\n            description: 'Advanced industrial coloring',\n            value: 'deep-orange',\n          },\n          {\n            type: 'effect',\n            description: 'Mining operation particles',\n            value: 'dust',\n          },\n        ],\n      },\n    ],\n  },\n];\n\n/**\n * Initialize module upgrade paths\n */\nexport function initializeModuleUpgradePaths(moduleUpgradeManager: any): void {\n  for (const path of moduleUpgradePaths) {\n    moduleUpgradeManager.registerUpgradePath(path);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/resource/ResourceConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/equatorHorizonShips.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TEMPORAL_EFFECT' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QUANTUM_EFFECT' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":34,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HARMONIC_EFFECT' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DamageEffect } from '../../effects/types_effects/WeaponEffects';\nimport {\n  DAMAGE_BOOST_EFFECT,\n  EXPLOSIVE_EFFECT,\n  GAUSS_EFFECT,\n  PLASMA_EFFECT,\n  SHIELD_FIELD_EFFECT,\n  SPEED_REDUCTION_EFFECT,\n  STEALTH_EFFECT,\n} from '../../effects/types_effects/shipEffects';\nimport { EquatorHorizonShipClass, FactionShipStats } from '../../types/ships/FactionShipTypes';\nimport {\n  WeaponInstance,\n  WeaponMountPosition,\n  WeaponMountSize,\n  WeaponStatus,\n} from '../../types/weapons/WeaponTypes';\n\n// Special weapon effects for Equator Horizon\nconst TEMPORAL_EFFECT = {\n  type: 'damage',\n  name: 'Temporal Disruption',\n  description: 'Time-warping energy damage',\n  magnitude: 80,\n  duration: 3,\n  active: true,\n  cooldown: 3.0,\n  damage: 80,\n  damageType: 'energy',\n  penetration: 0.3,\n  strength: 80,\n} as DamageEffect;\n\nconst QUANTUM_EFFECT = {\n  type: 'damage',\n  name: 'Quantum Collapse',\n  description: 'Reality-warping energy damage',\n  magnitude: 100,\n  duration: 2,\n  active: true,\n  cooldown: 4.0,\n  damage: 100,\n  damageType: 'energy',\n  penetration: 0.4,\n  strength: 100,\n} as DamageEffect;\n\nconst HARMONIC_EFFECT = {\n  type: 'damage',\n  name: 'Harmonic Resonance',\n  description: 'Shield-penetrating harmonic damage',\n  magnitude: 60,\n  duration: 4,\n  active: true,\n  cooldown: 2.5,\n  damage: 60,\n  damageType: 'energy',\n  penetration: 0.25,\n  strength: 60,\n} as DamageEffect;\n\nexport const EQUATOR_HORIZON_SHIPS: Record<EquatorHorizonShipClass, FactionShipStats> = {\n  celestialArbiter: {\n    health: 1500,\n    maxHealth: 1500,\n    shield: 1500,\n    maxShield: 1500,\n    energy: 1200,\n    maxEnergy: 1200,\n    speed: 90,\n    turnRate: 1.5,\n    cargo: 400,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'plasma-1',\n        size: 'large' as WeaponMountSize,\n        position: 'turret' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['plasmaCannon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-plasma',\n            name: 'Ancient Plasma Cannon',\n            category: 'plasmaCannon',\n            tier: 3,\n            baseStats: {\n              damage: 400,\n              range: 1200,\n              accuracy: 0.95,\n              rateOfFire: 2,\n              energyCost: 40,\n              cooldown: 5,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/plasma/ancient',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 60,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 400,\n              range: 1200,\n              accuracy: 0.95,\n              rateOfFire: 2,\n              energyCost: 40,\n              cooldown: 5,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 500,\n      shield: 1500,\n      evasion: 0.15,\n      regeneration: 15,\n    },\n    mobility: {\n      speed: 90,\n      turnRate: 1.5,\n      acceleration: 30,\n    },\n    abilities: [\n      {\n        name: 'Celestial Shield',\n        description: 'Creates an impenetrable energy barrier',\n        cooldown: 60,\n        duration: 12,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n  etherealGalleon: {\n    health: 1200,\n    maxHealth: 1200,\n    shield: 1800,\n    maxShield: 1800,\n    energy: 1500,\n    maxEnergy: 1500,\n    speed: 70,\n    turnRate: 1,\n    cargo: 600,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'beam-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['beamWeapon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-beam',\n            name: 'Ancient Beam Weapon',\n            category: 'beamWeapon',\n            tier: 3,\n            baseStats: {\n              damage: 600,\n              range: 1000,\n              accuracy: 1,\n              rateOfFire: 1,\n              energyCost: 100,\n              cooldown: 8,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/beam/ancient',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 80,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 600,\n              range: 1000,\n              accuracy: 1,\n              rateOfFire: 1,\n              energyCost: 100,\n              cooldown: 8,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 400,\n      shield: 1800,\n      evasion: 0.1,\n      regeneration: 20,\n    },\n    mobility: {\n      speed: 70,\n      turnRate: 1,\n      acceleration: 20,\n    },\n    abilities: [\n      {\n        name: 'Energy Surge',\n        description: 'Temporarily boosts weapon damage',\n        cooldown: 45,\n        duration: 15,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  stellarEquinox: {\n    health: 900,\n    maxHealth: 900,\n    shield: 1200,\n    maxShield: 1200,\n    energy: 1000,\n    maxEnergy: 1000,\n    speed: 120,\n    turnRate: 2,\n    cargo: 300,\n    tier: 2,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'pulse-1',\n        size: 'medium' as WeaponMountSize,\n        position: 'turret' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['pulseWeapon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-pulse',\n            name: 'Ancient Pulse Weapon',\n            category: 'pulseWeapon',\n            tier: 2,\n            baseStats: {\n              damage: 150,\n              range: 800,\n              accuracy: 0.9,\n              rateOfFire: 4,\n              energyCost: 20,\n              cooldown: 2,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/pulse/ancient',\n            mountRequirements: {\n              size: 'medium' as WeaponMountSize,\n              power: 40,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 150,\n              range: 800,\n              accuracy: 0.9,\n              rateOfFire: 4,\n              energyCost: 20,\n              cooldown: 2,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 300,\n      shield: 1200,\n      evasion: 0.3,\n      regeneration: 12,\n    },\n    mobility: {\n      speed: 120,\n      turnRate: 2,\n      acceleration: 50,\n    },\n    abilities: [\n      {\n        name: 'Time Dilation',\n        description: 'Slows nearby enemies',\n        cooldown: 40,\n        duration: 8,\n        active: false,\n        effect: SPEED_REDUCTION_EFFECT,\n      },\n    ],\n  },\n  chronosSentinel: {\n    health: 800,\n    maxHealth: 800,\n    shield: 1000,\n    maxShield: 1000,\n    energy: 800,\n    maxEnergy: 800,\n    speed: 140,\n    turnRate: 2.5,\n    cargo: 200,\n    tier: 2,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'disruptor-1',\n        size: 'medium' as WeaponMountSize,\n        position: 'turret' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['disruptor'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-disruptor',\n            name: 'Ancient Disruptor',\n            category: 'disruptor',\n            tier: 2,\n            baseStats: {\n              damage: 120,\n              range: 600,\n              accuracy: 0.85,\n              rateOfFire: 5,\n              energyCost: 15,\n              cooldown: 1,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/disruptor/ancient',\n            mountRequirements: {\n              size: 'medium' as WeaponMountSize,\n              power: 35,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 120,\n              range: 600,\n              accuracy: 0.85,\n              rateOfFire: 5,\n              energyCost: 15,\n              cooldown: 1,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 250,\n      shield: 1000,\n      evasion: 0.4,\n      regeneration: 10,\n    },\n    mobility: {\n      speed: 140,\n      turnRate: 2.5,\n      acceleration: 70,\n    },\n    abilities: [\n      {\n        name: 'Temporal Shield',\n        description: 'Creates a shield that absorbs damage',\n        cooldown: 30,\n        duration: 6,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n  nebulasJudgement: {\n    health: 1000,\n    maxHealth: 1000,\n    shield: 1400,\n    maxShield: 1400,\n    energy: 1100,\n    maxEnergy: 1100,\n    speed: 100,\n    turnRate: 1.8,\n    cargo: 350,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'ion-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['ionCannon'],\n        currentWeapon: {\n          config: {\n            id: 'ancient-ion',\n            name: 'Ancient Ion Cannon',\n            category: 'ionCannon',\n            tier: 3,\n            baseStats: {\n              damage: 300,\n              range: 1100,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 35,\n              cooldown: 4,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/ion/ancient',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 55,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 300,\n              range: 1100,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 35,\n              cooldown: 4,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 350,\n      shield: 1400,\n      evasion: 0.25,\n      regeneration: 14,\n    },\n    mobility: {\n      speed: 100,\n      turnRate: 1.8,\n      acceleration: 40,\n    },\n    abilities: [\n      {\n        name: 'Judgement Beam',\n        description: 'Fires a powerful beam of energy',\n        cooldown: 50,\n        duration: 3,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  aetherialHorizon: {\n    health: 1400,\n    maxHealth: 1400,\n    shield: 1300,\n    maxShield: 1300,\n    energy: 800,\n    maxEnergy: 800,\n    speed: 110,\n    turnRate: 3,\n    cargo: 300,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'rocket-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['rockets'],\n        currentWeapon: {\n          config: {\n            id: 'heavy-rockets',\n            name: 'Heavy Rockets',\n            category: 'rockets',\n            tier: 3,\n            baseStats: {\n              damage: 280,\n              range: 1600,\n              accuracy: 0.85,\n              rateOfFire: 2,\n              energyCost: 20,\n              cooldown: 4,\n              effects: [EXPLOSIVE_EFFECT],\n            },\n            visualAsset: 'weapons/rockets/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 45,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 280,\n              range: 1600,\n              accuracy: 0.85,\n              rateOfFire: 2,\n              energyCost: 20,\n              cooldown: 4,\n              effects: [EXPLOSIVE_EFFECT],\n            },\n            effects: [EXPLOSIVE_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 450,\n      shield: 1300,\n      evasion: 0.3,\n      regeneration: 10,\n    },\n    mobility: {\n      speed: 110,\n      turnRate: 3,\n      acceleration: 55,\n    },\n    abilities: [\n      {\n        name: 'First Contact',\n        description: 'Creates a massive protective shield',\n        cooldown: 55,\n        duration: 18,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n  cosmicCrusader: {\n    health: 1200,\n    maxHealth: 1200,\n    shield: 1000,\n    maxShield: 1000,\n    energy: 700,\n    maxEnergy: 700,\n    speed: 130,\n    turnRate: 3,\n    cargo: 280,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'gauss-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['gaussCannon'],\n        currentWeapon: {\n          config: {\n            id: 'gauss-cannon',\n            name: 'Gauss Cannon',\n            category: 'gaussCannon',\n            tier: 3,\n            baseStats: {\n              damage: 220,\n              range: 1400,\n              accuracy: 0.94,\n              rateOfFire: 3,\n              energyCost: 18,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            visualAsset: 'weapons/gauss/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 40,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 220,\n              range: 1400,\n              accuracy: 0.94,\n              rateOfFire: 3,\n              energyCost: 18,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            effects: [GAUSS_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 380,\n      shield: 1000,\n      evasion: 0.35,\n      regeneration: 9,\n    },\n    mobility: {\n      speed: 130,\n      turnRate: 3,\n      acceleration: 65,\n    },\n    abilities: [\n      {\n        name: 'Threat Neutralization',\n        description: 'Unleashes a devastating attack',\n        cooldown: 42,\n        duration: 12,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  balancekeepersWrath: {\n    health: 1600,\n    maxHealth: 1600,\n    shield: 1400,\n    maxShield: 1400,\n    energy: 900,\n    maxEnergy: 900,\n    speed: 70,\n    turnRate: 3,\n    cargo: 400,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'rail-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['railGun'],\n        currentWeapon: {\n          config: {\n            id: 'heavy-railgun',\n            name: 'Heavy Railgun',\n            category: 'railGun',\n            tier: 3,\n            baseStats: {\n              damage: 350,\n              range: 1800,\n              accuracy: 0.96,\n              rateOfFire: 2,\n              energyCost: 25,\n              cooldown: 4,\n              effects: [GAUSS_EFFECT],\n            },\n            visualAsset: 'weapons/railgun/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 50,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 350,\n              range: 1800,\n              accuracy: 0.96,\n              rateOfFire: 2,\n              energyCost: 25,\n              cooldown: 4,\n              effects: [GAUSS_EFFECT],\n            },\n            effects: [GAUSS_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 600,\n      shield: 1400,\n      evasion: 0.2,\n      regeneration: 12,\n    },\n    mobility: {\n      speed: 70,\n      turnRate: 3,\n      acceleration: 35,\n    },\n    abilities: [\n      {\n        name: 'Wrath of Balance',\n        description: 'Unleashes devastating area damage',\n        cooldown: 60,\n        duration: 20,\n        active: false,\n        effect: DAMAGE_BOOST_EFFECT,\n      },\n    ],\n  },\n  eclipticWatcher: {\n    health: 800,\n    maxHealth: 800,\n    shield: 1000,\n    maxShield: 1000,\n    energy: 600,\n    maxEnergy: 600,\n    speed: 180,\n    turnRate: 3,\n    cargo: 200,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'mgss-1',\n        size: 'medium' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['mgss'],\n        currentWeapon: {\n          config: {\n            id: 'mgss-cannon',\n            name: 'MGSS Cannon',\n            category: 'mgss',\n            tier: 3,\n            baseStats: {\n              damage: 100,\n              range: 1000,\n              accuracy: 0.92,\n              rateOfFire: 6,\n              energyCost: 10,\n              cooldown: 3,\n              effects: [PLASMA_EFFECT],\n            },\n            visualAsset: 'weapons/mgss/advanced',\n            mountRequirements: {\n              size: 'medium' as WeaponMountSize,\n              power: 25,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 100,\n              range: 1000,\n              accuracy: 0.92,\n              rateOfFire: 6,\n              energyCost: 10,\n              cooldown: 3,\n              effects: [PLASMA_EFFECT],\n            },\n            effects: [PLASMA_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 250,\n      shield: 1000,\n      evasion: 0.5,\n      regeneration: 8,\n    },\n    mobility: {\n      speed: 180,\n      turnRate: 3,\n      acceleration: 90,\n    },\n    abilities: [\n      {\n        name: 'Perfect Stealth',\n        description: 'Activates perfect stealth technology',\n        cooldown: 38,\n        duration: 10,\n        active: false,\n        effect: STEALTH_EFFECT,\n      },\n    ],\n  },\n  harmonysVanguard: {\n    health: 1300,\n    maxHealth: 1300,\n    shield: 1100,\n    maxShield: 1100,\n    energy: 800,\n    maxEnergy: 800,\n    speed: 140,\n    turnRate: 3,\n    cargo: 300,\n    tier: 3,\n    faction: 'equator-horizon',\n    weapons: [\n      {\n        id: 'gauss-1',\n        size: 'large' as WeaponMountSize,\n        position: 'front' as WeaponMountPosition,\n        rotation: 0,\n        allowedCategories: ['gaussCannon'],\n        currentWeapon: {\n          config: {\n            id: 'gauss-cannon',\n            name: 'Gauss Cannon',\n            category: 'gaussCannon',\n            tier: 3,\n            baseStats: {\n              damage: 240,\n              range: 1500,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 20,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            visualAsset: 'weapons/gauss/heavy',\n            mountRequirements: {\n              size: 'large' as WeaponMountSize,\n              power: 45,\n            },\n          },\n          state: {\n            status: 'ready' as WeaponStatus,\n            currentStats: {\n              damage: 240,\n              range: 1500,\n              accuracy: 0.93,\n              rateOfFire: 3,\n              energyCost: 20,\n              cooldown: 3,\n              effects: [GAUSS_EFFECT],\n            },\n            effects: [GAUSS_EFFECT],\n          },\n        } as WeaponInstance,\n      },\n    ],\n    defense: {\n      armor: 420,\n      shield: 1100,\n      evasion: 0.35,\n      regeneration: 10,\n    },\n    mobility: {\n      speed: 140,\n      turnRate: 3,\n      acceleration: 70,\n    },\n    abilities: [\n      {\n        name: 'Order from Chaos',\n        description: 'Creates a powerful shield field',\n        cooldown: 48,\n        duration: 15,\n        active: false,\n        effect: SHIELD_FIELD_EFFECT,\n      },\n    ],\n  },\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/lostNovaShips.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/shipStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/config/ships/spaceRatsShips.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/GameContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ModuleContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'module' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cost' is defined but never used. Allowed unused args must match /^_/u.","line":189,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, ReactNode, useContext, useEffect, useReducer } from 'react';\nimport { useGame } from '../contexts/GameContext';\nimport { moduleManager } from '../managers/module/ModuleManager';\nimport { BaseModule, ModularBuilding, ModuleType } from '../types/buildings/ModuleTypes';\nimport { Position } from '../types/core/GameTypes';\n\n// State interface\ninterface ModuleState {\n  activeModules: BaseModule[];\n  buildings: ModularBuilding[];\n  selectedModuleId?: string;\n  selectedBuildingId?: string;\n}\n\n// Action types\ntype ModuleAction =\n  | { type: 'CREATE_MODULE'; moduleType: ModuleType; position: Position }\n  | { type: 'ATTACH_MODULE'; moduleId: string; buildingId: string; attachmentPointId: string }\n  | { type: 'UPGRADE_MODULE'; moduleId: string }\n  | { type: 'SET_MODULE_ACTIVE'; moduleId: string; active: boolean }\n  | { type: 'SELECT_MODULE'; moduleId: string }\n  | { type: 'SELECT_BUILDING'; buildingId: string }\n  | { type: 'REGISTER_BUILDING'; building: ModularBuilding }\n  | { type: 'UPDATE_ACTIVE_MODULES'; modules: BaseModule[] };\n\n// Initial state\nconst initialState: ModuleState = {\n  activeModules: [],\n  buildings: [],\n  selectedModuleId: undefined,\n  selectedBuildingId: undefined,\n};\n\n// Reducer\nfunction moduleReducer(state: ModuleState, action: ModuleAction): ModuleState {\n  switch (action.type) {\n    case 'CREATE_MODULE': {\n      const module = moduleManager.createModule(action.moduleType, action.position);\n      return {\n        ...state,\n        activeModules: moduleManager.getActiveModules(),\n      };\n    }\n\n    case 'ATTACH_MODULE': {\n      moduleManager.attachModule(action.moduleId, action.buildingId, action.attachmentPointId);\n      return {\n        ...state,\n        buildings: Array.from(state.buildings),\n      };\n    }\n\n    case 'UPGRADE_MODULE': {\n      moduleManager.upgradeModule(action.moduleId);\n      return {\n        ...state,\n        activeModules: moduleManager.getActiveModules(),\n      };\n    }\n\n    case 'SET_MODULE_ACTIVE': {\n      moduleManager.setModuleActive(action.moduleId, action.active);\n      return {\n        ...state,\n        activeModules: moduleManager.getActiveModules(),\n      };\n    }\n\n    case 'SELECT_MODULE':\n      return {\n        ...state,\n        selectedModuleId: action.moduleId,\n      };\n\n    case 'SELECT_BUILDING':\n      return {\n        ...state,\n        selectedBuildingId: action.buildingId,\n      };\n\n    case 'REGISTER_BUILDING': {\n      moduleManager.registerBuilding(action.building);\n      return {\n        ...state,\n        buildings: [...state.buildings, action.building],\n      };\n    }\n\n    case 'UPDATE_ACTIVE_MODULES':\n      return {\n        ...state,\n        activeModules: action.modules,\n      };\n\n    default:\n      return state;\n  }\n}\n\n// Context\ninterface ModuleContextType {\n  state: ModuleState;\n  dispatch: React.Dispatch<ModuleAction>;\n}\n\nconst ModuleContext = createContext<ModuleContextType | undefined>(undefined);\n\n// Provider\ninterface ModuleProviderProps {\n  children: ReactNode;\n}\n\nexport function ModuleProvider({ children }: ModuleProviderProps) {\n  const [state, dispatch] = useReducer(moduleReducer, initialState);\n\n  // Initialize state with default buildings\n  useEffect(() => {\n    const buildings = moduleManager.getBuildings();\n    if (buildings.length > 0) {\n      buildings.forEach(building => {\n        dispatch({\n          type: 'REGISTER_BUILDING',\n          building,\n        });\n      });\n    }\n  }, []);\n\n  return <ModuleContext.Provider value={{ state, dispatch }}>{children}</ModuleContext.Provider>;\n}\n\n// Hook\nexport function useModules() {\n  const context = useContext(ModuleContext);\n  if (context === undefined) {\n    throw new Error('useModules must be used within a ModuleProvider');\n  }\n  return context;\n}\n\n// Helper hooks\nexport function useSelectedModule() {\n  const { state } = useModules();\n  return state.selectedModuleId ? moduleManager.getModule(state.selectedModuleId) : undefined;\n}\n\nexport function useSelectedBuilding() {\n  const { state } = useModules();\n  return state.selectedBuildingId ? moduleManager.getBuilding(state.selectedBuildingId) : undefined;\n}\n\nexport function useModulesByType(type: ModuleType) {\n  return moduleManager.getModulesByType(type);\n}\n\nexport function useBuildingModules(buildingId: string) {\n  return moduleManager.getBuildingModules(buildingId);\n}\n\n// Helper functions\nexport function canBuildModule(\n  moduleType: ModuleType,\n  cost: { minerals?: number; energy?: number }\n) {\n  const { state } = useGame();\n  const { state: moduleState } = useModules();\n\n  // Check resources\n  const hasResources =\n    (cost.minerals || 0) <= state.resources.minerals &&\n    (cost.energy || 0) <= state.resources.energy;\n\n  if (!hasResources) {\n    return false;\n  }\n\n  // Find a suitable building and attachment point\n  for (const building of moduleState.buildings) {\n    for (const point of building.attachmentPoints) {\n      if (point.allowedTypes.includes(moduleType) && !point.currentModule) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function buildModule(moduleType: ModuleType, cost: { minerals?: number; energy?: number }) {\n  const { dispatch, state } = useModules();\n\n  // Find a suitable building and attachment point\n  let targetBuilding: ModularBuilding | undefined;\n  let targetPoint: string | undefined;\n\n  for (const building of state.buildings) {\n    for (const point of building.attachmentPoints) {\n      if (point.allowedTypes.includes(moduleType) && !point.currentModule) {\n        targetBuilding = building;\n        targetPoint = point.id;\n        break;\n      }\n    }\n    if (targetBuilding) {\n      break;\n    }\n  }\n\n  if (!targetBuilding || !targetPoint) {\n    console.error('No suitable attachment point found for module:', moduleType);\n    return;\n  }\n\n  // Create and attach the module\n  const position = targetBuilding.attachmentPoints.find(p => p.id === targetPoint)?.position || {\n    x: 0,\n    y: 0,\n  };\n\n  dispatch({\n    type: 'CREATE_MODULE',\n    moduleType,\n    position,\n  });\n\n  // Get the newly created module's ID (it will be the last one created)\n  const newModule = moduleManager.getModulesByType(moduleType).pop();\n  if (!newModule) {\n    console.error('Failed to create module:', moduleType);\n    return;\n  }\n\n  // Attach the module\n  dispatch({\n    type: 'ATTACH_MODULE',\n    moduleId: newModule.id,\n    buildingId: targetBuilding.id,\n    attachmentPointId: targetPoint,\n  });\n\n  // Activate the module\n  dispatch({\n    type: 'SET_MODULE_ACTIVE',\n    moduleId: newModule.id,\n    active: true,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ShipContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ThresholdContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/contexts/ThresholdTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/BackgroundEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/BuildingUpgradeEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/CapitalShipEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/CentralMothership.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ColonyStarStation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/CombatAutomationEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/EngineTrailEffect.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[927,1011],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":40,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1371,1418],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\nimport { VisualEffect, VisualEffectConfig } from './VisualEffect';\n\ninterface EngineTrailConfig extends VisualEffectConfig {\n  engineSize: number;\n  enginePower: number;\n  velocity: Position;\n}\n\n/**\n * Visual effect for ship engine trails\n */\nexport class EngineTrailEffect extends VisualEffect {\n  protected override config: EngineTrailConfig;\n  private trailPoints: Array<{\n    position: Position;\n    size: number;\n    opacity: number;\n    rotation: number;\n    time: number;\n  }> = [];\n  private lastEmitTime: number = 0;\n  private emitInterval: number = 50; // ms\n\n  constructor(config: EngineTrailConfig) {\n    super(config);\n    this.config = config;\n  }\n\n  protected getEffectType(): string {\n    return 'engine-trail';\n  }\n\n  protected onStart(): void {\n    this.lastEmitTime = Date.now();\n    console.debug(`[EngineTrailEffect] Started with power: ${this.config.enginePower}`);\n  }\n\n  protected onUpdate(progress: number): void {\n    const now = Date.now();\n\n    // Emit new particles\n    if (now - this.lastEmitTime >= this.emitInterval) {\n      this.emitParticles();\n      this.lastEmitTime = now;\n    }\n\n    // Update existing particles\n    this.updateParticles();\n  }\n\n  protected onComplete(): void {\n    this.trailPoints = [];\n    console.debug('[EngineTrailEffect] Completed');\n  }\n\n  protected onReset(): void {\n    this.trailPoints = [];\n    this.lastEmitTime = 0;\n  }\n\n  protected updateRendering(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      return;\n    }\n\n    // Render core engine glow\n    this.renderEngineCore(batcher);\n\n    // Render trail particles\n    this.renderTrail(batcher);\n  }\n\n  private emitParticles(): void {\n    const baseSize = this.config.engineSize;\n    const particleCount = Math.ceil(this.config.enginePower * 3);\n\n    for (let i = 0; i < particleCount; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const spread = this.config.engineSize * 0.3;\n      const offset = {\n        x: Math.cos(angle) * spread,\n        y: Math.sin(angle) * spread,\n      };\n\n      this.trailPoints.push({\n        position: {\n          x: this.config.position.x + offset.x,\n          y: this.config.position.y + offset.y,\n        },\n        size: baseSize * (0.5 + Math.random() * 0.5),\n        opacity: 0.8 + Math.random() * 0.2,\n        rotation: angle,\n        time: Date.now(),\n      });\n    }\n\n    // Limit total particles\n    while (this.trailPoints.length > 100) {\n      this.trailPoints.shift();\n    }\n  }\n\n  private updateParticles(): void {\n    const now = Date.now();\n    const deltaTime = 1 / 60; // Assume 60fps for physics\n\n    this.trailPoints = this.trailPoints.filter(point => {\n      // Update position based on velocity\n      point.position.x -= this.config.velocity.x * deltaTime;\n      point.position.y -= this.config.velocity.y * deltaTime;\n\n      // Add some turbulence\n      const age = (now - point.time) / 1000;\n      const turbulence = Math.sin(age * 10 + point.rotation) * 2;\n      point.position.x += Math.cos(point.rotation) * turbulence * deltaTime;\n      point.position.y += Math.sin(point.rotation) * turbulence * deltaTime;\n\n      // Fade out based on age\n      point.opacity = Math.max(0, point.opacity - deltaTime);\n\n      // Keep particle if still visible\n      return point.opacity > 0;\n    });\n  }\n\n  private renderEngineCore(batcher: RenderBatcher): void {\n    const time = Date.now() / 1000;\n    const pulse = Math.sin(time * 10) * 0.2 + 0.8;\n    const coreSize = this.config.engineSize * this.config.enginePower;\n\n    // Core glow\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-core`,\n      position: this.config.position,\n      size: { width: coreSize * 2, height: coreSize * 2 },\n      rotation: 0,\n      opacity: 0.8 * pulse,\n      color: this.config.color || '#00ffff',\n      shader: 'additive',\n    });\n\n    // Inner core\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-inner`,\n      position: this.config.position,\n      size: { width: coreSize, height: coreSize },\n      rotation: time * 2,\n      opacity: 1,\n      color: '#ffffff',\n      shader: 'additive',\n    });\n  }\n\n  private renderTrail(batcher: RenderBatcher): void {\n    this.trailPoints.forEach((point, index) => {\n      const time = Date.now() / 1000;\n      const flicker = Math.sin(time * 20 + index) * 0.2 + 0.8;\n\n      // Trail particle\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: point.position,\n        size: { width: point.size, height: point.size },\n        rotation: point.rotation + time,\n        opacity: point.opacity * flicker,\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n\n      // Particle glow\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-glow-${index}`,\n        position: point.position,\n        size: { width: point.size * 2, height: point.size * 2 },\n        rotation: -point.rotation + time,\n        opacity: point.opacity * 0.5 * flicker,\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ExplorationHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ExplosionEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/FormationTransitionEffect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'particleCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentX' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":85,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentY' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":86,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Position } from '../../types/core/GameTypes';\n\ninterface FormationTransitionEffectProps {\n  sourcePositions: Position[];\n  targetPositions: Position[];\n  duration: number;\n  easingFunction: 'linear' | 'easeInOut' | 'easeIn' | 'easeOut';\n  quality: 'low' | 'medium' | 'high';\n  pattern: 'offensive' | 'defensive' | 'balanced';\n  onComplete?: () => void;\n}\n\ninterface ParticleProps {\n  x: number;\n  y: number;\n  size: number;\n  opacity: number;\n  color: string;\n}\n\nexport function FormationTransitionEffect({\n  sourcePositions,\n  targetPositions,\n  duration,\n  easingFunction,\n  quality,\n  pattern,\n  onComplete,\n}: FormationTransitionEffectProps) {\n  const [progress, setProgress] = useState(0);\n  const [particles, setParticles] = useState<ParticleProps[]>([]);\n\n  // Quality-based settings\n  const particleCount = quality === 'high' ? 16 : quality === 'medium' ? 8 : 4;\n  const trailLength = quality === 'high' ? 8 : quality === 'medium' ? 4 : 2;\n  const glowIntensity = quality === 'high' ? '12px' : quality === 'medium' ? '8px' : '4px';\n\n  // Pattern-based colors\n  const getPatternColor = () => {\n    switch (pattern) {\n      case 'offensive':\n        return 'rgb(239, 68, 68)'; // red-500\n      case 'defensive':\n        return 'rgb(59, 130, 246)'; // blue-500\n      case 'balanced':\n        return 'rgb(168, 85, 247)'; // purple-500\n    }\n  };\n\n  // Easing functions\n  const getEasedProgress = (p: number) => {\n    switch (easingFunction) {\n      case 'easeIn':\n        return p * p;\n      case 'easeOut':\n        return 1 - (1 - p) * (1 - p);\n      case 'easeInOut':\n        return p < 0.5 ? 2 * p * p : 1 - Math.pow(-2 * p + 2, 2) / 2;\n      default:\n        return p;\n    }\n  };\n\n  useEffect(() => {\n    const startTime = Date.now();\n    const color = getPatternColor();\n\n    const updateFrame = () => {\n      const elapsed = Date.now() - startTime;\n      const rawProgress = Math.min(1, elapsed / duration);\n      const easedProgress = getEasedProgress(rawProgress);\n      setProgress(easedProgress);\n\n      // Update particle effects\n      const newParticles: ParticleProps[] = [];\n\n      sourcePositions.forEach((source, index) => {\n        const target = targetPositions[index];\n        if (!target) {\n          return;\n        }\n\n        // Calculate current position\n        const currentX = source.x + (target.x - source.x) * easedProgress;\n        const currentY = source.y + (target.y - source.y) * easedProgress;\n\n        // Add trail particles\n        for (let i = 0; i < trailLength; i++) {\n          const trailProgress = Math.max(0, easedProgress - (i / trailLength) * 0.2);\n          const trailX = source.x + (target.x - source.x) * trailProgress;\n          const trailY = source.y + (target.y - source.y) * trailProgress;\n\n          newParticles.push({\n            x: trailX,\n            y: trailY,\n            size: 4 * (1 - i / trailLength),\n            opacity: 0.3 * (1 - i / trailLength),\n            color,\n          });\n        }\n      });\n\n      setParticles(newParticles);\n\n      if (rawProgress < 1) {\n        requestAnimationFrame(updateFrame);\n      } else {\n        onComplete?.();\n      }\n    };\n\n    const frameId = requestAnimationFrame(updateFrame);\n    return () => cancelAnimationFrame(frameId);\n  }, [sourcePositions, targetPositions, duration, easingFunction, quality, pattern, onComplete]);\n\n  return (\n    <div className=\"pointer-events-none absolute inset-0\">\n      {/* Formation Lines */}\n      <svg className=\"absolute inset-0\">\n        {sourcePositions.map((source, index) => {\n          const target = targetPositions[index];\n          if (!target) {\n            return null;\n          }\n\n          const currentX = source.x + (target.x - source.x) * progress;\n          const currentY = source.y + (target.y - source.y) * progress;\n\n          return (\n            <line\n              key={index}\n              x1={source.x}\n              y1={source.y}\n              x2={currentX}\n              y2={currentY}\n              stroke={getPatternColor()}\n              strokeWidth=\"2\"\n              strokeDasharray=\"4 4\"\n              className=\"opacity-30\"\n            />\n          );\n        })}\n      </svg>\n\n      {/* Particles */}\n      {particles.map((particle, index) => (\n        <div\n          key={`particle-${index}`}\n          className=\"absolute rounded-full transition-all duration-100\"\n          style={{\n            left: particle.x,\n            top: particle.y,\n            width: particle.size,\n            height: particle.size,\n            backgroundColor: particle.color,\n            opacity: particle.opacity,\n            transform: 'translate(-50%, -50%)',\n            filter: `blur(${glowIntensity})`,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/HabitableWorld.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/MineralProcessing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ModuleUpgradeTransition.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/PopulationIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ProgressionEffects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ShieldEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ShieldImpactEffect.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[930,1018],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":48,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1276,1331],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\nimport { VisualEffect, VisualEffectConfig } from './VisualEffect';\n\ninterface ShieldImpactConfig extends VisualEffectConfig {\n  radius: number;\n  damage: number;\n  shieldStrength: number;\n}\n\n/**\n * Visual effect for shield impacts\n */\nexport class ShieldImpactEffect extends VisualEffect {\n  protected override config: ShieldImpactConfig;\n  private ripplePoints: Position[] = [];\n  private hexagonPoints: Position[] = [];\n  private crackPoints: Position[] = [];\n\n  constructor(config: ShieldImpactConfig) {\n    super(config);\n    this.config = config;\n  }\n\n  protected getEffectType(): string {\n    return 'shield-impact';\n  }\n\n  protected onStart(): void {\n    // Create initial points\n    this.createRipplePoints();\n    this.createHexagonPoints();\n    this.createCrackPoints();\n\n    // Debug logging\n    console.debug(`[ShieldImpactEffect] Started effect with damage: ${this.config.damage}`);\n  }\n\n  protected onUpdate(progress: number): void {\n    // No additional update needed as points are transformed during rendering\n  }\n\n  protected onComplete(): void {\n    this.ripplePoints = [];\n    this.hexagonPoints = [];\n    this.crackPoints = [];\n\n    console.debug('[ShieldImpactEffect] Completed effect');\n  }\n\n  protected onReset(): void {\n    this.ripplePoints = [];\n    this.hexagonPoints = [];\n    this.crackPoints = [];\n  }\n\n  protected updateRendering(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      return;\n    }\n\n    // Render shield components\n    this.renderRipple(batcher);\n    this.renderHexGrid(batcher);\n    this.renderCracks(batcher);\n  }\n\n  private createRipplePoints(): void {\n    const segments = 32;\n    for (let i = 0; i < segments; i++) {\n      const angle = (i / segments) * Math.PI * 2;\n      this.ripplePoints.push({\n        x: Math.cos(angle) * this.config.radius,\n        y: Math.sin(angle) * this.config.radius,\n      });\n    }\n  }\n\n  private createHexagonPoints(): void {\n    // Create hexagonal grid pattern\n    const hexRadius = 20;\n    const rows = Math.ceil(this.config.radius / (hexRadius * 1.5));\n    const cols = Math.ceil(this.config.radius / (hexRadius * Math.sqrt(3)));\n\n    for (let row = -rows; row <= rows; row++) {\n      for (let col = -cols; col <= cols; col++) {\n        const x = col * hexRadius * Math.sqrt(3);\n        const y = row * hexRadius * 1.5 + (col % 2) * hexRadius * 0.75;\n\n        // Only add points within shield radius\n        if (Math.sqrt(x * x + y * y) <= this.config.radius) {\n          this.hexagonPoints.push({ x, y });\n        }\n      }\n    }\n  }\n\n  private createCrackPoints(): void {\n    if (this.config.damage <= 0) {\n      return;\n    }\n\n    // Create crack pattern based on damage\n    const crackCount = Math.ceil((this.config.damage / this.config.shieldStrength) * 5);\n    const angleStep = (Math.PI * 2) / crackCount;\n\n    for (let i = 0; i < crackCount; i++) {\n      const baseAngle = angleStep * i;\n      let currentPoint = {\n        x: Math.cos(baseAngle) * this.config.radius * 0.2,\n        y: Math.sin(baseAngle) * this.config.radius * 0.2,\n      };\n\n      // Create branching cracks\n      for (let j = 0; j < 5; j++) {\n        const angle = baseAngle + ((Math.random() - 0.5) * Math.PI) / 4;\n        const length = Math.random() * this.config.radius * 0.3;\n\n        const endPoint = {\n          x: currentPoint.x + Math.cos(angle) * length,\n          y: currentPoint.y + Math.sin(angle) * length,\n        };\n\n        this.crackPoints.push(currentPoint, endPoint);\n        currentPoint = endPoint;\n      }\n    }\n  }\n\n  private renderRipple(batcher: RenderBatcher): void {\n    const time = Date.now() / 1000;\n    const baseRadius = this.config.radius;\n    const rippleStrength = Math.max(0, 1 - this.progress * 2);\n\n    // Render expanding ripple\n    this.ripplePoints.forEach((point, index) => {\n      const angle = (index / this.ripplePoints.length) * Math.PI * 2;\n      const rippleOffset = Math.sin(time * 5 + angle * 3) * 10 * rippleStrength;\n      const radius = baseRadius + rippleOffset;\n\n      const position = {\n        x: this.config.position.x + Math.cos(angle) * radius,\n        y: this.config.position.y + Math.sin(angle) * radius,\n      };\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-ripple-${index}`,\n        position,\n        size: { width: 4, height: 4 },\n        rotation: angle,\n        opacity: rippleStrength * 0.5,\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderHexGrid(batcher: RenderBatcher): void {\n    const time = Date.now() / 1000;\n    const hexOpacity = Math.max(0, 1 - this.progress * 3);\n\n    this.hexagonPoints.forEach((point, index) => {\n      const distance = Math.sqrt(point.x * point.x + point.y * point.y);\n      const distanceRatio = distance / this.config.radius;\n      const pulse = Math.sin(time * 3 + distanceRatio * 5) * 0.3 + 0.7;\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-hex-${index}`,\n        position: {\n          x: this.config.position.x + point.x,\n          y: this.config.position.y + point.y,\n        },\n        size: { width: 30, height: 30 },\n        rotation: time + index,\n        opacity: hexOpacity * pulse * (1 - distanceRatio),\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderCracks(batcher: RenderBatcher): void {\n    if (this.crackPoints.length === 0) {\n      return;\n    }\n\n    const crackOpacity = Math.max(0, 1 - this.progress * 4);\n    const time = Date.now() / 1000;\n\n    for (let i = 0; i < this.crackPoints.length; i += 2) {\n      const start = this.crackPoints[i];\n      const end = this.crackPoints[i + 1];\n\n      const centerX = (start.x + end.x) / 2;\n      const centerY = (start.y + end.y) / 2;\n      const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n      const angle = Math.atan2(end.y - start.y, end.x - start.x);\n\n      // Render crack line\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-crack-${i}`,\n        position: {\n          x: this.config.position.x + centerX,\n          y: this.config.position.y + centerY,\n        },\n        size: { width: length, height: 2 },\n        rotation: angle,\n        opacity: crackOpacity * (0.8 + Math.sin(time * 10 + i) * 0.2),\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n\n      // Render glow\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-crack-glow-${i}`,\n        position: {\n          x: this.config.position.x + centerX,\n          y: this.config.position.y + centerY,\n        },\n        size: { width: length, height: 6 },\n        rotation: angle,\n        opacity: crackOpacity * 0.5 * (0.8 + Math.sin(time * 10 + i) * 0.2),\n        color: this.config.color || '#00ffff',\n        shader: 'additive',\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ShipPathEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/SmokeTrailEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/StarSystemBackdrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/ThrusterEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/TradeRouteEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/VisualEffect.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":27,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":27,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[718,787],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1405,1476],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\n\nexport interface VisualEffectConfig {\n  id?: string;\n  position: Position;\n  color?: string;\n  duration?: number;\n}\n\nexport abstract class VisualEffect {\n  protected id: string;\n  protected config: VisualEffectConfig;\n  protected progress: number = 0;\n  protected batchId: string | null = null;\n  protected startTime: number;\n  protected isComplete: boolean = false;\n\n  constructor(config: VisualEffectConfig) {\n    this.id = config.id || Math.random().toString(36).substring(7);\n    this.config = config;\n    this.startTime = Date.now();\n  }\n\n  public start(): void {\n    this.onStart();\n    console.debug(`[${this.getEffectType()}] Started effect ${this.id}`);\n  }\n\n  public update(): void {\n    if (this.isComplete) return;\n\n    const elapsed = Date.now() - this.startTime;\n    const duration = this.config.duration || 1000;\n    this.progress = Math.min(elapsed / duration, 1);\n\n    this.onUpdate(this.progress);\n\n    if (this.progress >= 1) {\n      this.complete();\n    }\n  }\n\n  public render(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      this.batchId = batcher.createBatch(this.getEffectType());\n    }\n    this.updateRendering(batcher);\n  }\n\n  public complete(): void {\n    if (this.isComplete) return;\n    this.isComplete = true;\n    this.onComplete();\n    console.debug(`[${this.getEffectType()}] Completed effect ${this.id}`);\n  }\n\n  public reset(): void {\n    this.progress = 0;\n    this.startTime = Date.now();\n    this.isComplete = false;\n    this.onReset();\n  }\n\n  public isFinished(): boolean {\n    return this.isComplete;\n  }\n\n  protected abstract getEffectType(): string;\n  protected abstract onStart(): void;\n  protected abstract onUpdate(progress: number): void;\n  protected abstract updateRendering(batcher: RenderBatcher): void;\n  protected abstract onComplete(): void;\n  protected abstract onReset(): void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/component_effects/WeaponEffect.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":304,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10393,10460],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":335,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":335,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[11298,11367],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useSpring } from '@react-spring/three';\nimport { Trail } from '@react-three/drei';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { useRef } from 'react';\nimport * as THREE from 'three';\nimport { RenderBatcher } from '../../lib/optimization/RenderBatcher';\nimport { Position } from '../../types/core/Position';\nimport { WeaponCategory } from '../../types/weapons/WeaponTypes';\nimport { VisualEffect, VisualEffectConfig } from './VisualEffect';\n\n// Props and Config Types\ninterface WeaponEffectProps {\n  type:\n    | 'machineGun'\n    | 'railGun'\n    | 'gaussCannon'\n    | 'rockets'\n    | 'mgss'\n    | 'pointDefense'\n    | 'plasmaCannon'\n    | 'beamWeapon'\n    | 'pulseWeapon'\n    | 'disruptor'\n    | 'ionCannon';\n  color: string;\n  position: { x: number; y: number };\n  rotation: number;\n  firing: boolean;\n}\n\ninterface WeaponEffectConfig extends VisualEffectConfig {\n  type: WeaponCategory;\n  target?: Position;\n  damage?: number;\n  impactSize?: number;\n  opacity?: number;\n  color?: string;\n  duration?: number;\n}\n\n// React Components\nfunction WeaponBeam({ type, color, firing }: Omit<WeaponEffectProps, 'position' | 'rotation'>) {\n  const materialRef = useRef<THREE.ShaderMaterial>(null);\n  const timeRef = useRef(0);\n\n  const { intensity } = useSpring({\n    intensity: firing ? 1 : 0,\n    config: { tension: 280, friction: 60 },\n  });\n\n  // Create shader material directly\n  const shader = {\n    uniforms: {\n      time: { value: 0 },\n      color: { value: new THREE.Color(color) },\n      intensity: { value: 0 },\n      weaponType: { value: 0 },\n    },\n    vertexShader: `\n      varying vec2 vUv;\n      varying vec3 vPosition;\n      varying vec3 vNormal;\n      \n      void main() {\n        vUv = uv;\n        vPosition = position;\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n    fragmentShader: `\n      uniform float time;\n      uniform vec3 color;\n      uniform float intensity;\n      uniform int weaponType;\n      \n      varying vec2 vUv;\n      varying vec3 vPosition;\n      varying vec3 vNormal;\n      \n      float noise(vec2 p) {\n        return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);\n      }\n      \n      float fbm(vec2 p) {\n        float v = 0.0;\n        float a = 0.5;\n        vec2 shift = vec2(100.0);\n        mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n        for (int i = 0; i < 5; ++i) {\n          v += a * noise(p);\n          p = rot * p * 2.0 + shift;\n          a *= 0.5;\n        }\n        return v;\n      }\n\n      void main() {\n        vec2 uv = vUv;\n        float alpha = 0.0;\n        vec3 finalColor = color;\n        \n        // Edge glow\n        float fresnel = pow(1.0 - abs(dot(vNormal, vec3(0.0, 0.0, 1.0))), 3.0);\n        \n        if (weaponType == 0) { // Machine Gun\n          float bulletPattern = smoothstep(0.48, 0.52, abs(uv.x - 0.5));\n          float trailFade = smoothstep(0.0, 1.0, uv.y);\n          float energyPulse = sin(uv.y * 30.0 - time * 15.0) * 0.5 + 0.5;\n          alpha = (1.0 - bulletPattern) * (1.0 - trailFade) * intensity;\n          alpha *= mix(0.8, 1.0, energyPulse);\n          finalColor = mix(color, vec3(1.0), fresnel * 0.5);\n        }\n        else if (weaponType == 1) { // Rail Gun\n          float beam = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float energyPulse = sin(uv.y * 20.0 - time * 10.0) * 0.5 + 0.5;\n          float distortion = fbm(uv * 5.0 + time * 0.5);\n          alpha = (1.0 - beam) * (energyPulse + distortion * 0.5) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.7 + energyPulse * 0.3);\n        }\n        else if (weaponType == 2) { // Gauss Cannon\n          float core = smoothstep(0.4, 0.6, abs(uv.x - 0.5));\n          float plasma = fbm(uv * 8.0 + time * 2.0);\n          float rings = sin(uv.y * 50.0 + time * 5.0) * 0.5 + 0.5;\n          alpha = (1.0 - core) * (plasma + rings * 0.3) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.8 + plasma * 0.4);\n        }\n        else if (weaponType == 3) { // Rockets\n          float rocketCore = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float exhaust = fbm(vec2(uv.x * 5.0, uv.y * 2.0 - time * 3.0));\n          float sparkles = noise(uv * 20.0 + time * 4.0);\n          alpha = (1.0 - rocketCore) * (exhaust + sparkles * 0.2) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.6 + exhaust * 0.3);\n        }\n        else if (weaponType == 4) { // MGSS\n          float beamCore = smoothstep(0.47, 0.53, abs(uv.x - 0.5));\n          float swirl = sin(uv.y * 40.0 + time * 8.0 + uv.x * 5.0) * 0.5 + 0.5;\n          float energyField = fbm(uv * 6.0 + time * 1.5);\n          alpha = (1.0 - beamCore) * (swirl + energyField * 0.4) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.9 + swirl * 0.3);\n        }\n        else if (weaponType == 5) { // Point Defense\n          float pointDefense = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float energyPulse = sin(uv.y * 30.0 - time * 15.0) * 0.5 + 0.5;\n          alpha = (1.0 - pointDefense) * (energyPulse + 0.5) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.5);\n        }\n        else if (weaponType == 6) { // Plasma Cannon\n          float plasmaCore = smoothstep(0.45, 0.55, abs(uv.x - 0.5));\n          float plasmaField = fbm(uv * 10.0 + time * 3.0);\n          float energyRings = sin(uv.y * 60.0 + time * 8.0) * 0.5 + 0.5;\n          alpha = (1.0 - plasmaCore) * (plasmaField + energyRings * 0.4) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.9 + plasmaField * 0.5);\n        }\n        else if (weaponType == 7) { // Beam Weapon\n          float beamCore = smoothstep(0.48, 0.52, abs(uv.x - 0.5));\n          float energyField = fbm(uv * 12.0 + time * 4.0);\n          float beamPulse = sin(uv.y * 80.0 - time * 20.0) * 0.5 + 0.5;\n          alpha = (1.0 - beamCore) * (energyField + beamPulse * 0.6) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.95 + beamPulse * 0.4);\n        }\n        else if (weaponType == 8) { // Pulse Weapon\n          float pulseCore = smoothstep(0.46, 0.54, abs(uv.x - 0.5));\n          float pulseWave = sin(uv.y * 40.0 - time * 12.0) * 0.5 + 0.5;\n          float energyField = fbm(uv * 8.0 + time * 2.0);\n          alpha = (1.0 - pulseCore) * (pulseWave + energyField * 0.3) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.8 + pulseWave * 0.5);\n        }\n        else if (weaponType == 9) { // Disruptor\n          float disruptorCore = smoothstep(0.47, 0.53, abs(uv.x - 0.5));\n          float disruption = fbm(uv * 15.0 + time * 5.0);\n          float chaosField = noise(uv * 25.0 + time * 6.0);\n          alpha = (1.0 - disruptorCore) * (disruption + chaosField * 0.4) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.7 + disruption * 0.6);\n        }\n        else if (weaponType == 10) { // Ion Cannon\n          float ionCore = smoothstep(0.46, 0.54, abs(uv.x - 0.5));\n          float ionField = fbm(uv * 10.0 + time * 3.5);\n          float ionPulse = sin(uv.y * 70.0 - time * 15.0) * 0.5 + 0.5;\n          alpha = (1.0 - ionCore) * (ionField + ionPulse * 0.5) * intensity;\n          finalColor = mix(color, vec3(1.0), fresnel * 0.85 + ionPulse * 0.45);\n        }\n        \n        // Add global glow\n        alpha += fresnel * 0.3 * intensity;\n        \n        gl_FragColor = vec4(finalColor, alpha);\n      }\n    `,\n  };\n\n  useFrame((_state, delta) => {\n    if (materialRef.current) {\n      timeRef.current += delta;\n      materialRef.current.uniforms.time.value = timeRef.current;\n      materialRef.current.uniforms.intensity.value = intensity.get();\n      materialRef.current.uniforms.weaponType.value = typeMap[type];\n    }\n  });\n\n  const typeMap = {\n    machineGun: 0,\n    railGun: 1,\n    gaussCannon: 2,\n    rockets: 3,\n    mgss: 4,\n    pointDefense: 5,\n    plasmaCannon: 6,\n    beamWeapon: 7,\n    pulseWeapon: 8,\n    disruptor: 9,\n    ionCannon: 10,\n  };\n\n  return (\n    <mesh>\n      <planeGeometry args={[0.2, 1, 32, 32]} />\n      <shaderMaterial\n        ref={materialRef}\n        transparent\n        depthWrite={false}\n        blending={THREE.AdditiveBlending}\n        uniforms={shader.uniforms}\n        vertexShader={shader.vertexShader}\n        fragmentShader={shader.fragmentShader}\n      />\n      {type !== 'machineGun' && (\n        <Trail width={0.2} length={5} color={color} attenuation={(t: number) => t * t} />\n      )}\n    </mesh>\n  );\n}\n\nexport function WeaponEffectComponent({\n  type,\n  color,\n  position,\n  rotation,\n  firing,\n}: WeaponEffectProps) {\n  return (\n    <div\n      className=\"absolute\"\n      style={{\n        left: position.x,\n        top: position.y,\n        width: '100px',\n        height: '200px',\n        transform: `rotate(${rotation}deg)`,\n      }}\n    >\n      <Canvas camera={{ position: [0, 0, 2], fov: 75 }} style={{ background: 'transparent' }}>\n        <WeaponBeam type={type} color={color} firing={firing} />\n      </Canvas>\n\n      {/* Enhanced Glow Effect */}\n      {firing && (\n        <>\n          <div\n            className=\"pointer-events-none absolute inset-0\"\n            style={{\n              background: `radial-gradient(circle at 50% 0%, ${color}66 0%, ${color}00 70%)`,\n              filter: 'blur(8px)',\n              opacity: 0.8,\n              animation: 'pulse 1.5s ease-in-out infinite',\n            }}\n          />\n          <div\n            className=\"pointer-events-none absolute inset-0\"\n            style={{\n              background: `radial-gradient(circle at 50% 0%, ${color}33 0%, ${color}00 100%)`,\n              filter: 'blur(16px)',\n              opacity: 0.6,\n              animation: 'pulse 2s ease-in-out infinite reverse',\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\n// Visual Effect Class\nexport class WeaponEffectVisual extends VisualEffect {\n  protected override config: WeaponEffectConfig;\n  private trailPoints: Position[] = [];\n  private impactParticles: Position[] = [];\n  private impactStartTime: number = 0;\n\n  constructor(config: WeaponEffectConfig) {\n    super(config);\n    this.config = config;\n  }\n\n  protected getEffectType(): string {\n    return `weapon-${this.config.type}`;\n  }\n\n  protected onStart(): void {\n    // Initialize trail points\n    this.trailPoints = [this.config.position];\n\n    // Debug logging\n    console.debug(`[WeaponEffect] Started ${this.config.type} effect`);\n  }\n\n  protected onUpdate(progress: number): void {\n    // Update trail points\n    if (this.config.target) {\n      const currentPoint = {\n        x: this.config.position.x + (this.config.target.x - this.config.position.x) * progress,\n        y: this.config.position.y + (this.config.target.y - this.config.position.y) * progress,\n      };\n\n      this.trailPoints.push(currentPoint);\n\n      // Keep only recent points\n      while (this.trailPoints.length > 10) {\n        this.trailPoints.shift();\n      }\n\n      // Create impact when projectile reaches target\n      if (progress >= 1 && !this.impactStartTime) {\n        this.impactStartTime = Date.now();\n        this.createImpactParticles();\n      }\n    }\n  }\n\n  protected onComplete(): void {\n    this.trailPoints = [];\n    this.impactParticles = [];\n    this.impactStartTime = 0;\n\n    console.debug(`[WeaponEffect] Completed ${this.config.type} effect`);\n  }\n\n  protected onReset(): void {\n    this.trailPoints = [];\n    this.impactParticles = [];\n    this.impactStartTime = 0;\n  }\n\n  protected updateRendering(batcher: RenderBatcher): void {\n    if (!this.batchId) {\n      return;\n    }\n\n    // Render trail\n    this.renderTrail(batcher);\n\n    // Render impact\n    if (this.impactStartTime) {\n      this.renderImpact(batcher);\n    }\n  }\n\n  private renderTrail(batcher: RenderBatcher): void {\n    // Different trail rendering based on weapon type\n    switch (this.config.type) {\n      case 'machineGun':\n        this.renderProjectileTrail(batcher);\n        break;\n      case 'gaussCannon':\n      case 'railGun':\n        this.renderBeamTrail(batcher);\n        break;\n      case 'mgss':\n        this.renderEnergyTrail(batcher);\n        break;\n      case 'rockets':\n        this.renderRocketTrail(batcher);\n        break;\n      case 'harmonicCannon':\n        this.renderHarmonicTrail(batcher);\n        break;\n      case 'temporalCannon':\n        this.renderTemporalTrail(batcher);\n        break;\n      case 'quantumCannon':\n        this.renderQuantumTrail(batcher);\n        break;\n    }\n  }\n\n  private renderProjectileTrail(batcher: RenderBatcher): void {\n    // Simple projectile with small trail\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: point,\n        size: { width: 4, height: 4 },\n        rotation: 0,\n        opacity,\n        color: this.config.color || '#ffff00',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderBeamTrail(batcher: RenderBatcher): void {\n    // Solid beam with glow\n    if (this.trailPoints.length < 2) {\n      return;\n    }\n\n    const start = this.trailPoints[0];\n    const end = this.trailPoints[this.trailPoints.length - 1];\n    const angle = Math.atan2(end.y - start.y, end.x - start.x);\n    const length = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n\n    // Core beam\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-beam`,\n      position: {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2,\n      },\n      size: { width: length, height: 4 },\n      rotation: angle,\n      opacity: this.config.opacity || 1,\n      color: this.config.color || '#00ffff',\n      shader: 'additive',\n    });\n\n    // Glow effect\n    batcher.addItem(this.batchId!, {\n      id: `${this.id}-glow`,\n      position: {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2,\n      },\n      size: { width: length, height: 12 },\n      rotation: angle,\n      opacity: (this.config.opacity || 1) * 0.5,\n      color: this.config.color || '#00ffff',\n      shader: 'additive',\n    });\n  }\n\n  private renderEnergyTrail(batcher: RenderBatcher): void {\n    // Pulsing energy trail\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const pulse = Math.sin(Date.now() / 100 + index) * 0.3 + 0.7;\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: point,\n        size: { width: 6, height: 6 },\n        rotation: 0,\n        opacity: opacity * pulse,\n        color: this.config.color || '#ff00ff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderRocketTrail(batcher: RenderBatcher): void {\n    // Rocket with smoke trail\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n\n      // Smoke\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-smoke-${index}`,\n        position: point,\n        size: { width: 8, height: 8 },\n        rotation: Math.random() * Math.PI * 2,\n        opacity: opacity * 0.3,\n        color: '#888888',\n        shader: 'normal',\n      });\n\n      // Fire\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-fire-${index}`,\n        position: point,\n        size: { width: 6, height: 6 },\n        rotation: 0,\n        opacity: opacity,\n        color: this.config.color || '#ff4400',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderHarmonicTrail(batcher: RenderBatcher): void {\n    // Harmonic wave pattern\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const wave = Math.sin(Date.now() / 200 + index);\n      const offset = wave * 10;\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-trail-${index}`,\n        position: {\n          x: point.x + offset,\n          y: point.y + offset,\n        },\n        size: { width: 8, height: 8 },\n        rotation: wave * Math.PI,\n        opacity: opacity,\n        color: this.config.color || '#00ff88',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private renderTemporalTrail(batcher: RenderBatcher): void {\n    // Time distortion effect\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const time = Date.now() / 1000;\n      const distortion = Math.sin(time * 2 + index);\n\n      for (let i = 0; i < 3; i++) {\n        const offset = distortion * (i + 1) * 5;\n        batcher.addItem(this.batchId!, {\n          id: `${this.id}-trail-${index}-${i}`,\n          position: {\n            x: point.x + offset,\n            y: point.y + offset,\n          },\n          size: { width: 6 - i * 2, height: 6 - i * 2 },\n          rotation: time + (i * Math.PI) / 3,\n          opacity: opacity * (1 - i * 0.2),\n          color: this.config.color || '#8800ff',\n          shader: 'additive',\n        });\n      }\n    });\n  }\n\n  private renderQuantumTrail(batcher: RenderBatcher): void {\n    // Quantum tunneling effect\n    this.trailPoints.forEach((point, index) => {\n      const opacity = index / this.trailPoints.length;\n      const time = Date.now() / 1000;\n\n      // Phase shift effect\n      for (let i = 0; i < 4; i++) {\n        const phase = (time + (i * Math.PI) / 2) % (Math.PI * 2);\n        const shift = Math.sin(phase) * 10;\n\n        batcher.addItem(this.batchId!, {\n          id: `${this.id}-trail-${index}-${i}`,\n          position: {\n            x: point.x + Math.cos(phase) * shift,\n            y: point.y + Math.sin(phase) * shift,\n          },\n          size: { width: 5, height: 5 },\n          rotation: phase,\n          opacity: opacity * Math.abs(Math.sin(phase)),\n          color: this.config.color || '#0088ff',\n          shader: 'additive',\n        });\n      }\n    });\n  }\n\n  private renderImpact(batcher: RenderBatcher): void {\n    const impactProgress = Math.min(\n      1,\n      (Date.now() - this.impactStartTime) / (this.config.duration || 1000)\n    );\n\n    // Update impact particles\n    this.impactParticles.forEach((particle, index) => {\n      const particleProgress = impactProgress * (1 + index * 0.1);\n      if (particleProgress >= 1) {\n        return;\n      }\n\n      batcher.addItem(this.batchId!, {\n        id: `${this.id}-impact-${index}`,\n        position: particle,\n        size: {\n          width: (this.config.impactSize || 20) * (1 - particleProgress),\n          height: (this.config.impactSize || 20) * (1 - particleProgress),\n        },\n        rotation: (index * Math.PI) / 4,\n        opacity: 1 - particleProgress,\n        color: this.config.color || '#ffffff',\n        shader: 'additive',\n      });\n    });\n  }\n\n  private createImpactParticles(): void {\n    if (!this.config.target) {\n      return;\n    }\n\n    // Create particles in a circular pattern\n    const particleCount = 8;\n    for (let i = 0; i < particleCount; i++) {\n      const angle = (i / particleCount) * Math.PI * 2;\n      const distance = (this.config.impactSize || 20) / 2;\n\n      this.impactParticles.push({\n        x: this.config.target.x + Math.cos(angle) * distance,\n        y: this.config.target.y + Math.sin(angle) * distance,\n      });\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/types_effects/EffectTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/types_effects/WeaponEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/types_effects/shipEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/effects/util_effects/effectUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/factories/ships/ShipClassFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/automation/useAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/automation/useGlobalAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/combat/useCombatAI.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nodeId' is defined but never used. Allowed unused args must match /^_/u.","line":51,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { behaviorTreeManager } from '../../managers/ai/BehaviorTreeManager';\nimport { combatManager } from '../../managers/combat/combatManager';\nimport { CombatUnit } from '../../types/combat/CombatTypes';\nimport { FactionId } from '../../types/ships/FactionTypes';\nimport { convertToCombatTypesUnit } from '../../utils/typeConversions';\n\ninterface CombatAIState {\n  isActive: boolean;\n  currentBehavior: string;\n  lastAction: string;\n  performance: {\n    successRate: number;\n    actionsPerMinute: number;\n    damageDealt: number;\n    damageTaken: number;\n  };\n}\n\n// Define formation interface to replace any type\ninterface UnitFormation {\n  type: 'offensive' | 'defensive' | 'balanced';\n  spacing: number;\n  facing: number;\n}\n\n// Extend CombatUnit with faction property\ninterface ExtendedCombatUnit extends CombatUnit {\n  faction: FactionId;\n  formation?: UnitFormation;\n}\n\nexport function useCombatAI(unitId: string, factionId: FactionId) {\n  const [state, setState] = useState<CombatAIState>({\n    isActive: false,\n    currentBehavior: 'idle',\n    lastAction: '',\n    performance: {\n      successRate: 0,\n      actionsPerMinute: 0,\n      damageDealt: 0,\n      damageTaken: 0,\n    },\n  });\n\n  useEffect(() => {\n    let actionCount = 0;\n    let successCount = 0;\n    const startTime = Date.now();\n\n    const handleNodeExecuted = ({ nodeId, success }: { nodeId: string; success: boolean }) => {\n      successCount += success ? 1 : 0;\n      const totalExecutions = successCount + (actionCount - successCount);\n      const successRate = totalExecutions > 0 ? successCount / totalExecutions : 0;\n\n      setState(prev => ({\n        ...prev,\n        performance: {\n          ...prev.performance,\n          successRate,\n        },\n      }));\n    };\n\n    const handleActionStarted = ({ actionType }: { actionType: string }) => {\n      actionCount++;\n      const elapsedMinutes = (Date.now() - startTime) / 60000;\n\n      setState(prev => ({\n        ...prev,\n        lastAction: actionType,\n        performance: {\n          ...prev.performance,\n          actionsPerMinute: actionCount / elapsedMinutes,\n        },\n      }));\n    };\n\n    behaviorTreeManager.on('nodeExecuted', handleNodeExecuted);\n    behaviorTreeManager.on('actionStarted', handleActionStarted);\n\n    // Update AI context periodically\n    const updateInterval = setInterval(() => {\n      const managerUnit = combatManager.getUnitStatus(unitId);\n      if (!managerUnit) {\n        return;\n      }\n\n      // Convert to CombatTypes.CombatUnit\n      const unit = convertToCombatTypesUnit(managerUnit) as ExtendedCombatUnit;\n\n      const nearbyUnits = combatManager\n        .getUnitsInRange(unit.position, 500)\n        .map(convertToCombatTypesUnit) as ExtendedCombatUnit[];\n      const nearbyEnemies = nearbyUnits.filter(u => u.faction !== factionId);\n      const nearbyAllies = nearbyUnits.filter(u => u.faction === factionId);\n\n      // Calculate fleet strength and threat level\n      const fleetStrength = calculateFleetStrength(unit, nearbyAllies);\n      const threatLevel = calculateThreatLevel(nearbyEnemies);\n\n      // Update behavior tree context\n      behaviorTreeManager.updateContext(unitId, {\n        unit,\n        factionId,\n        fleetStrength,\n        threatLevel,\n        nearbyEnemies,\n        nearbyAllies,\n        currentFormation: unit.formation || {\n          type: 'balanced',\n          spacing: 100,\n          facing: 0,\n        },\n        cooldowns: {},\n      });\n\n      // Evaluate behavior tree\n      const treeId = `${factionId}-combat`;\n      const success = behaviorTreeManager.evaluateTree(unitId, treeId);\n\n      setState(prev => ({\n        ...prev,\n        isActive: true,\n        currentBehavior: success ? 'executing' : 'idle',\n      }));\n    }, 250); // Fast updates for combat\n\n    return () => {\n      clearInterval(updateInterval);\n      behaviorTreeManager.off('nodeExecuted', handleNodeExecuted);\n      behaviorTreeManager.off('actionStarted', handleActionStarted);\n    };\n  }, [unitId, factionId]);\n\n  return state;\n}\n\nfunction calculateFleetStrength(unit: CombatUnit, allies: CombatUnit[]): number {\n  const unitStrength =\n    (unit.stats.health / unit.stats.maxHealth) * (unit.stats.shield / unit.stats.maxShield);\n  const allyStrength = allies.reduce((sum, ally) => {\n    return (\n      sum + (ally.stats.health / ally.stats.maxHealth) * (ally.stats.shield / ally.stats.maxShield)\n    );\n  }, 0);\n\n  return (unitStrength + allyStrength) / (1 + allies.length);\n}\n\nfunction calculateThreatLevel(enemies: CombatUnit[]): number {\n  if (enemies.length === 0) {\n    return 0;\n  }\n\n  return (\n    enemies.reduce((sum, enemy) => {\n      const baseStrength =\n        (enemy.stats.health / enemy.stats.maxHealth) * (enemy.stats.shield / enemy.stats.maxShield);\n      const weaponStrength = enemy.weapons.reduce((total, w) => total + w.damage, 0) / 100;\n      return sum + baseStrength * (1 + weaponStrength);\n    }, 0) / enemies.length\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/combat/useCombatSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useAdaptiveAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useDiplomacy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useEnemyAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useFactionAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useFactionBehavior.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/factions/useFleetAI.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useAssets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useGameState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useGlobalEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/game/useScalingSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleAutomation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1664,1667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1664,1667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport {\n  ExtendedModuleStatus,\n  ModuleStatusDetails,\n  moduleStatusManager,\n} from '../../managers/module/ModuleStatusManager';\n\n/**\n * Hook for tracking and managing module status\n */\nexport function useModuleStatus(moduleId?: string) {\n  const [statusDetails, setStatusDetails] = useState<ModuleStatusDetails | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load status details\n  useEffect(() => {\n    if (!moduleId) {\n      setStatusDetails(null);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const details = moduleStatusManager.getModuleStatusDetails(moduleId);\n\n      if (details) {\n        setStatusDetails(details);\n      } else {\n        // Initialize status tracking if not already done\n        moduleStatusManager.initializeModuleStatus(moduleId);\n        const newDetails = moduleStatusManager.getModuleStatusDetails(moduleId);\n        setStatusDetails(newDetails || null);\n      }\n\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading module status: ${err}`);\n      setIsLoading(false);\n    }\n  }, [moduleId]);\n\n  // Subscribe to status events\n  useEffect(() => {\n    if (!moduleId) {\n      return;\n    }\n\n    const handleStatusChanged = (event: any) => {\n      if (event.moduleId === moduleId) {\n        const details = moduleStatusManager.getModuleStatusDetails(moduleId);\n        setStatusDetails(details || null);\n      }\n    };\n\n    const handleErrorOccurred = (event: any) => {\n      if (event.moduleId === moduleId) {\n        const details = moduleStatusManager.getModuleStatusDetails(moduleId);\n        setStatusDetails(details || null);\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeStatus = moduleEventBus.subscribe(\n      'STATUS_CHANGED' as ModuleEventType,\n      handleStatusChanged\n    );\n    const unsubscribeError = moduleEventBus.subscribe(\n      'ERROR_OCCURRED' as ModuleEventType,\n      handleErrorOccurred\n    );\n\n    return () => {\n      if (typeof unsubscribeStatus === 'function') {\n        unsubscribeStatus();\n      }\n      if (typeof unsubscribeError === 'function') {\n        unsubscribeError();\n      }\n    };\n  }, [moduleId]);\n\n  // Update module status\n  const updateStatus = useCallback(\n    (status: ExtendedModuleStatus, reason?: string) => {\n      if (!moduleId) {\n        return false;\n      }\n      return moduleStatusManager.updateModuleStatus(moduleId, status, reason);\n    },\n    [moduleId]\n  );\n\n  // Add an alert\n  const addAlert = useCallback(\n    (level: 'info' | 'warning' | 'error' | 'critical', message: string) => {\n      if (!moduleId) {\n        return;\n      }\n      moduleStatusManager.addAlert(moduleId, level, message);\n    },\n    [moduleId]\n  );\n\n  // Acknowledge an alert\n  const acknowledgeAlert = useCallback(\n    (alertIndex: number) => {\n      if (!moduleId) {\n        return false;\n      }\n      return moduleStatusManager.acknowledgeAlert(moduleId, alertIndex);\n    },\n    [moduleId]\n  );\n\n  // Get status color\n  const getStatusColor = useCallback((status?: ExtendedModuleStatus): string => {\n    if (!status) {\n      return 'gray';\n    }\n\n    switch (status) {\n      case 'active':\n        return 'green';\n      case 'constructing':\n        return 'yellow';\n      case 'inactive':\n        return 'gray';\n      case 'optimized':\n        return 'blue';\n      case 'boost':\n        return 'purple';\n      case 'degraded':\n        return 'orange';\n      case 'overloaded':\n        return 'orange';\n      case 'maintenance':\n      case 'upgrading':\n      case 'repairing':\n        return 'yellow';\n      case 'error':\n        return 'red';\n      case 'critical':\n        return 'darkred';\n      case 'offline':\n        return 'black';\n      case 'standby':\n        return 'lightblue';\n      case 'powersave':\n        return 'teal';\n      default:\n        return 'gray';\n    }\n  }, []);\n\n  // Get alert color\n  const getAlertColor = useCallback((level: 'info' | 'warning' | 'error' | 'critical'): string => {\n    switch (level) {\n      case 'info':\n        return 'blue';\n      case 'warning':\n        return 'orange';\n      case 'error':\n        return 'red';\n      case 'critical':\n        return 'darkred';\n      default:\n        return 'gray';\n    }\n  }, []);\n\n  // Format uptime\n  const formatUptime = useCallback((uptime: number): string => {\n    const seconds = Math.floor(uptime / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) {\n      return `${days}d ${hours % 24}h`;\n    }\n\n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    }\n\n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n\n    return `${seconds}s`;\n  }, []);\n\n  return {\n    // State\n    statusDetails,\n    isLoading,\n    error,\n\n    // Current status\n    currentStatus: statusDetails?.currentStatus,\n    previousStatus: statusDetails?.previousStatus,\n    history: statusDetails?.history || [],\n    metrics: statusDetails?.metrics,\n    alerts: statusDetails?.alerts || [],\n\n    // Actions\n    updateStatus,\n    addAlert,\n    acknowledgeAlert,\n\n    // Utilities\n    getStatusColor,\n    getAlertColor,\n    formatUptime,\n  };\n}\n\n/**\n * Hook for tracking modules with specific status or alerts\n */\nexport function useModulesWithStatus(\n  status?: ExtendedModuleStatus,\n  alertLevel?: 'info' | 'warning' | 'error' | 'critical'\n) {\n  const [moduleIds, setModuleIds] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load modules with status or alerts\n  useEffect(() => {\n    try {\n      let ids: string[] = [];\n\n      if (status) {\n        ids = moduleStatusManager.getModulesByStatus(status);\n      } else if (alertLevel) {\n        ids = moduleStatusManager.getModulesWithAlerts(alertLevel);\n      } else {\n        // Get all modules with any alerts\n        ids = moduleStatusManager.getModulesWithAlerts();\n      }\n\n      setModuleIds(ids);\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading modules: ${err}`);\n      setIsLoading(false);\n    }\n  }, [status, alertLevel]);\n\n  // Subscribe to status events\n  useEffect(() => {\n    const handleStatusChanged = () => {\n      try {\n        let ids: string[] = [];\n\n        if (status) {\n          ids = moduleStatusManager.getModulesByStatus(status);\n        } else if (alertLevel) {\n          ids = moduleStatusManager.getModulesWithAlerts(alertLevel);\n        } else {\n          // Get all modules with any alerts\n          ids = moduleStatusManager.getModulesWithAlerts();\n        }\n\n        setModuleIds(ids);\n      } catch (err) {\n        setError(`Error updating modules: ${err}`);\n      }\n    };\n\n    const handleErrorOccurred = () => {\n      if (alertLevel || !status) {\n        try {\n          const ids = alertLevel\n            ? moduleStatusManager.getModulesWithAlerts(alertLevel)\n            : moduleStatusManager.getModulesWithAlerts();\n\n          setModuleIds(ids);\n        } catch (err) {\n          setError(`Error updating modules: ${err}`);\n        }\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeStatus = moduleEventBus.subscribe(\n      'STATUS_CHANGED' as ModuleEventType,\n      handleStatusChanged\n    );\n    const unsubscribeError = moduleEventBus.subscribe(\n      'ERROR_OCCURRED' as ModuleEventType,\n      handleErrorOccurred\n    );\n\n    return () => {\n      if (typeof unsubscribeStatus === 'function') {\n        unsubscribeStatus();\n      }\n      if (typeof unsubscribeError === 'function') {\n        unsubscribeError();\n      }\n    };\n  }, [status, alertLevel]);\n\n  return {\n    moduleIds,\n    isLoading,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useModuleUpgrade.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ModuleEventData' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused caught errors must match /^_/u.","line":104,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\nimport { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { moduleManager } from '../../managers/module/ModuleManager';\nimport {\n  ModuleUpgradeEffect,\n  moduleUpgradeManager,\n  ModuleUpgradeStatus,\n} from '../../managers/module/ModuleUpgradeManager';\n\n/**\n * Interface for module event data\n */\ninterface ModuleEventData {\n  moduleId: string;\n  [key: string]: unknown;\n}\n\n/**\n * Hook for managing module upgrades\n * @param moduleId The ID of the module to manage upgrades for\n */\nexport function useModuleUpgrade(moduleId?: string) {\n  const [upgradeStatus, setUpgradeStatus] = useState<ModuleUpgradeStatus | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load upgrade status\n  useEffect(() => {\n    if (!moduleId) {\n      setUpgradeStatus(null);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n      setUpgradeStatus(status || null);\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading upgrade status: ${err}`);\n      setIsLoading(false);\n    }\n  }, [moduleId]);\n\n  // Subscribe to module events\n  useEffect(() => {\n    if (!moduleId) {\n      return;\n    }\n\n    const handleModuleUpgraded = (event: ModuleEvent) => {\n      if (event.moduleId === moduleId) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          setError(`Error updating upgrade status: ${err}`);\n        }\n      }\n    };\n\n    const handleUpgradeStarted = (event: ModuleEvent) => {\n      if (event.moduleId === moduleId) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          setError(`Error updating upgrade status: ${err}`);\n        }\n      }\n    };\n\n    const handleUpgradeCancelled = (event: ModuleEvent) => {\n      if (event.moduleId === moduleId) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          setError(`Error updating upgrade status: ${err}`);\n        }\n      }\n    };\n\n    // Subscribe to events\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'MODULE_UPGRADED' as ModuleEventType,\n      handleModuleUpgraded\n    );\n    const unsubscribeStarted = moduleEventBus.subscribe(\n      'MODULE_UPGRADE_STARTED' as ModuleEventType,\n      handleUpgradeStarted\n    );\n    const unsubscribeCancelled = moduleEventBus.subscribe(\n      'MODULE_UPGRADE_CANCELLED' as ModuleEventType,\n      handleUpgradeCancelled\n    );\n\n    // Set up progress update interval for active upgrades\n    const progressInterval = setInterval(() => {\n      if (upgradeStatus?.upgradeProgress !== undefined) {\n        try {\n          const status = moduleUpgradeManager.getUpgradeStatus(moduleId);\n          setUpgradeStatus(status || null);\n        } catch (err) {\n          // Silently ignore errors during progress updates\n        }\n      }\n    }, 1000); // Update every second\n\n    return () => {\n      // Unsubscribe from events\n      if (typeof unsubscribeUpgraded === 'function') {\n        unsubscribeUpgraded();\n      }\n      if (typeof unsubscribeStarted === 'function') {\n        unsubscribeStarted();\n      }\n      if (typeof unsubscribeCancelled === 'function') {\n        unsubscribeCancelled();\n      }\n\n      // Clear interval\n      clearInterval(progressInterval);\n    };\n  }, [moduleId, upgradeStatus?.upgradeProgress]);\n\n  // Start upgrade\n  const startUpgrade = useCallback(() => {\n    if (!moduleId) {\n      return false;\n    }\n    return moduleUpgradeManager.startUpgrade(moduleId);\n  }, [moduleId]);\n\n  // Cancel upgrade\n  const cancelUpgrade = useCallback(() => {\n    if (!moduleId) {\n      return false;\n    }\n    return moduleUpgradeManager.cancelUpgrade(moduleId);\n  }, [moduleId]);\n\n  // Format time remaining\n  const formatTimeRemaining = useCallback((milliseconds: number): string => {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes % 60}m`;\n    }\n\n    if (minutes > 0) {\n      return `${minutes}m ${seconds % 60}s`;\n    }\n\n    return `${seconds}s`;\n  }, []);\n\n  // Get effect description\n  const getEffectDescription = useCallback((effect: ModuleUpgradeEffect): string => {\n    const sign = effect.value >= 0 ? '+' : '';\n    const valueStr = effect.isPercentage ? `${sign}${effect.value}%` : `${sign}${effect.value}`;\n\n    return `${effect.description} (${valueStr})`;\n  }, []);\n\n  return {\n    // State\n    upgradeStatus,\n    isLoading,\n    error,\n\n    // Current status\n    currentLevel: upgradeStatus?.currentLevel,\n    maxLevel: upgradeStatus?.maxLevel,\n    nextLevel: upgradeStatus?.nextLevel,\n    upgradeAvailable: upgradeStatus?.upgradeAvailable,\n    requirementsMet: upgradeStatus?.requirementsMet,\n    missingRequirements: upgradeStatus?.missingRequirements,\n    upgradeProgress: upgradeStatus?.upgradeProgress,\n    estimatedTimeRemaining: upgradeStatus?.estimatedTimeRemaining,\n    effects: upgradeStatus?.effects,\n\n    // Actions\n    startUpgrade,\n    cancelUpgrade,\n\n    // Utilities\n    formatTimeRemaining,\n    getEffectDescription,\n  };\n}\n\n/**\n * Hook for tracking modules with available upgrades\n */\nexport function useModulesWithAvailableUpgrades() {\n  const [moduleIds, setModuleIds] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load modules with available upgrades\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Get all modules\n      const modules = moduleManager.getActiveModules();\n\n      // Filter modules with available upgrades\n      const availableUpgrades = modules.filter(module => {\n        const status = moduleUpgradeManager.getUpgradeStatus(module.id);\n        return status?.upgradeAvailable && status?.requirementsMet;\n      });\n\n      setModuleIds(availableUpgrades.map(module => module.id));\n      setIsLoading(false);\n    } catch (err) {\n      setError(`Error loading modules with available upgrades: ${err}`);\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Subscribe to module events\n  useEffect(() => {\n    const handleModuleUpgraded = () => {\n      try {\n        // Get all modules\n        const modules = moduleManager.getActiveModules();\n\n        // Filter modules with available upgrades\n        const availableUpgrades = modules.filter(module => {\n          const status = moduleUpgradeManager.getUpgradeStatus(module.id);\n          return status?.upgradeAvailable && status?.requirementsMet;\n        });\n\n        setModuleIds(availableUpgrades.map(module => module.id));\n      } catch (err) {\n        setError(`Error updating modules with available upgrades: ${err}`);\n      }\n    };\n\n    const handleResourceChanged = () => {\n      // Resource changes might affect upgrade availability\n      handleModuleUpgraded();\n    };\n\n    // Subscribe to events\n    const unsubscribeUpgraded = moduleEventBus.subscribe(\n      'MODULE_UPGRADED' as ModuleEventType,\n      handleModuleUpgraded\n    );\n    const unsubscribeResourceChanged = moduleEventBus.subscribe(\n      'RESOURCE_CHANGED' as ModuleEventType,\n      handleResourceChanged\n    );\n\n    return () => {\n      // Unsubscribe from events\n      if (typeof unsubscribeUpgraded === 'function') {\n        unsubscribeUpgraded();\n      }\n      if (typeof unsubscribeResourceChanged === 'function') {\n        unsubscribeResourceChanged();\n      }\n    };\n  }, []);\n\n  return {\n    moduleIds,\n    isLoading,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/modules/useSubModules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/resources/useResourceManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'time' is defined but never used. Allowed unused args must match /^_/u.","line":61,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { resourceManager } from '../../managers/game/ResourceManager';\nimport {\n  ResourceIntegration,\n  createResourceIntegration,\n} from '../../managers/resource/ResourceIntegration';\nimport { ResourceState, ResourceType } from '../../types/resources/ResourceTypes';\n\n// Singleton instance of the resource integration\nlet resourceIntegrationInstance: ResourceIntegration | null = null;\n\n/**\n * Initialize the resource integration if it hasn't been initialized yet\n */\nfunction getResourceIntegration(): ResourceIntegration {\n  if (!resourceIntegrationInstance) {\n    resourceIntegrationInstance = createResourceIntegration(resourceManager);\n  }\n\n  if (!resourceIntegrationInstance) {\n    throw new Error('Failed to create resource integration instance');\n  }\n\n  return resourceIntegrationInstance;\n}\n\n/**\n * Hook for accessing the resource management system\n */\nexport function useResourceManagement() {\n  const [resourceStates, setResourceStates] = useState<Map<ResourceType, ResourceState>>(new Map());\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Get or create the resource integration\n  const integration = useMemo(() => getResourceIntegration(), []);\n\n  // Initialize the resource states\n  useEffect(() => {\n    // Get all resource types\n    const resourceTypes = Array.from(resourceManager['resources'].keys()) as ResourceType[];\n\n    // Create a map of resource states\n    const states = new Map<ResourceType, ResourceState>();\n    resourceTypes.forEach(type => {\n      const state = resourceManager.getResourceState(type);\n      if (state) {\n        states.set(type, state);\n      }\n    });\n\n    setResourceStates(states);\n    setIsInitialized(true);\n  }, []);\n\n  // Update the resource integration on each frame\n  useEffect(() => {\n    if (!isInitialized) {\n      return;\n    }\n\n    const frameId = requestAnimationFrame(time => {\n      integration.update(1000 / 60); // Assume 60 FPS\n    });\n\n    return () => {\n      cancelAnimationFrame(frameId);\n    };\n  }, [integration, isInitialized]);\n\n  // Clean up the resource integration when the component unmounts\n  useEffect(() => {\n    return () => {\n      if (resourceIntegrationInstance) {\n        resourceIntegrationInstance.cleanup();\n        resourceIntegrationInstance = null;\n      }\n    };\n  }, []);\n\n  // Get a resource state\n  const getResourceState = useCallback(\n    (type: ResourceType): ResourceState | undefined => {\n      return resourceStates.get(type);\n    },\n    [resourceStates]\n  );\n\n  // Get all resource states\n  const getAllResourceStates = useCallback((): Map<ResourceType, ResourceState> => {\n    return resourceStates;\n  }, [resourceStates]);\n\n  // Get resource amount\n  const getResourceAmount = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.current || 0;\n    },\n    [resourceStates]\n  );\n\n  // Check if a resource is available\n  const hasResource = useCallback(\n    (type: ResourceType, amount: number): boolean => {\n      const state = resourceStates.get(type);\n      return state ? state.current >= amount : false;\n    },\n    [resourceStates]\n  );\n\n  // Check if multiple resources are available\n  const hasResources = useCallback(\n    (resources: Array<{ type: ResourceType; amount: number }>): boolean => {\n      return resources.every(({ type, amount }) => hasResource(type, amount));\n    },\n    [hasResource]\n  );\n\n  // Consume a resource\n  const consumeResource = useCallback(\n    (type: ResourceType, amount: number): boolean => {\n      if (!hasResource(type, amount)) {\n        return false;\n      }\n\n      resourceManager.removeResource(type, amount);\n      return true;\n    },\n    [hasResource]\n  );\n\n  // Consume multiple resources\n  const consumeResources = useCallback(\n    (resources: Array<{ type: ResourceType; amount: number }>): boolean => {\n      if (!hasResources(resources)) {\n        return false;\n      }\n\n      resources.forEach(({ type, amount }) => {\n        resourceManager.removeResource(type, amount);\n      });\n\n      return true;\n    },\n    [hasResources]\n  );\n\n  // Add a resource\n  const addResource = useCallback((type: ResourceType, amount: number): void => {\n    resourceManager.addResource(type, amount);\n  }, []);\n\n  // Add multiple resources\n  const addResources = useCallback(\n    (resources: Array<{ type: ResourceType; amount: number }>): void => {\n      resources.forEach(({ type, amount }) => {\n        resourceManager.addResource(type, amount);\n      });\n    },\n    []\n  );\n\n  // Get resource production rate\n  const getProductionRate = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.production || 0;\n    },\n    [resourceStates]\n  );\n\n  // Get resource consumption rate\n  const getConsumptionRate = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.consumption || 0;\n    },\n    [resourceStates]\n  );\n\n  // Set resource production rate\n  const setProductionRate = useCallback((type: ResourceType, rate: number): void => {\n    resourceManager.setResourceProduction(type, rate);\n  }, []);\n\n  // Set resource consumption rate\n  const setConsumptionRate = useCallback((type: ResourceType, rate: number): void => {\n    resourceManager.setResourceConsumption(type, rate);\n  }, []);\n\n  // Get resource capacity\n  const getResourceCapacity = useCallback(\n    (type: ResourceType): number => {\n      return resourceStates.get(type)?.max || 0;\n    },\n    [resourceStates]\n  );\n\n  // Get resource percentage\n  const getResourcePercentage = useCallback(\n    (type: ResourceType): number => {\n      const state = resourceStates.get(type);\n      if (!state || state.max === 0) {\n        return 0;\n      }\n      return (state.current / state.max) * 100;\n    },\n    [resourceStates]\n  );\n\n  return {\n    // Resource state\n    getResourceState,\n    getAllResourceStates,\n    getResourceAmount,\n    hasResource,\n    hasResources,\n\n    // Resource modification\n    consumeResource,\n    consumeResources,\n    addResource,\n    addResources,\n\n    // Resource rates\n    getProductionRate,\n    getConsumptionRate,\n    setProductionRate,\n    setConsumptionRate,\n\n    // Resource capacity\n    getResourceCapacity,\n    getResourcePercentage,\n\n    // Initialization state\n    isInitialized,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/resources/useResourceTracking.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'enableAlerts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":92,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateTotals' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":594,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":594,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculatePercentages' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":631,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":631,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  ResourceTotals,\n  SerializedResource,\n  SerializedResourceState,\n  SerializedThreshold,\n  isSerializedResourceState,\n  serializeResourceMap,\n  validateResourceState,\n} from '../../types/resources/ResourceSerializationTypes';\nimport {\n  ResourceAlert,\n  ResourceState,\n  ResourceThreshold,\n  ResourceTransfer,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\n\n/**\n * Resource tracking options\n */\nexport interface ResourceTrackingOptions {\n  types?: ResourceType[];\n  updateInterval?: number;\n  historyLimit?: number;\n  enableAlerts?: boolean;\n  enableThresholds?: boolean;\n}\n\n/**\n * Resource tracking state\n */\nexport interface ResourceTrackingState {\n  resources: Map<ResourceType, ResourceState>;\n  history: ResourceTransfer[];\n  alerts: ResourceAlert[];\n  lastUpdated: number;\n  thresholds: Map<ResourceType, ResourceThreshold[]>;\n}\n\n/**\n * Resource tracking result\n */\nexport interface ResourceTrackingResult {\n  // Resource states\n  resources: Map<ResourceType, ResourceState>;\n  resourceList: Array<{ type: ResourceType; state: ResourceState }>;\n  getResource: (type: ResourceType) => ResourceState | undefined;\n\n  // Resource history\n  history: ResourceTransfer[];\n  getHistoryByType: (type: ResourceType) => ResourceTransfer[];\n  clearHistory: () => void;\n\n  // Resource alerts\n  alerts: ResourceAlert[];\n  getAlertsByType: (type: ResourceType) => ResourceAlert[];\n  clearAlerts: () => void;\n  dismissAlert: (id: string) => void;\n\n  // Resource thresholds\n  setThreshold: (type: ResourceType, threshold: ResourceThreshold) => void;\n  removeThreshold: (type: ResourceType) => void;\n\n  // Resource updates\n  updateResource: (type: ResourceType, update: Partial<ResourceState>) => void;\n  incrementResource: (type: ResourceType, amount: number) => void;\n  decrementResource: (type: ResourceType, amount: number) => void;\n  transferResource: (transfer: ResourceTransfer) => boolean;\n\n  // Utility functions\n  getTotalResources: () => number;\n  getResourcePercentage: (type: ResourceType) => number;\n  getResourcesAboveThreshold: (percentage: number) => ResourceType[];\n  getResourcesBelowThreshold: (percentage: number) => ResourceType[];\n\n  // Metadata\n  lastUpdated: number;\n  isLoading: boolean;\n  error: Error | null;\n}\n\n/**\n * Hook for tracking resources globally\n */\nexport function useResourceTracking(options: ResourceTrackingOptions = {}): ResourceTrackingResult {\n  // Default options\n  const {\n    types = ['minerals', 'energy', 'population', 'research', 'plasma', 'gas', 'exotic'],\n    updateInterval = 1000,\n    historyLimit = 100,\n    enableAlerts = true,\n    enableThresholds = true,\n  } = options;\n\n  // State\n  const [state, setState] = useState<ResourceTrackingState>({\n    resources: new Map(),\n    history: [],\n    alerts: [],\n    lastUpdated: Date.now(),\n    thresholds: new Map(),\n  });\n\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Initialize resources\n  useEffect(() => {\n    const initialResources = new Map<ResourceType, ResourceState>();\n    const initialThresholds = new Map<ResourceType, ResourceThreshold[]>();\n\n    // Initialize with default values\n    for (const type of types) {\n      initialResources.set(type, {\n        current: 0,\n        min: 0,\n        max: 100,\n        production: 0,\n        consumption: 0,\n      });\n      initialThresholds.set(type, []);\n    }\n\n    // Try to load from storage\n    try {\n      const savedResources = localStorage.getItem('resources');\n      if (savedResources) {\n        const parsed = JSON.parse(savedResources);\n\n        // Validate the parsed data\n        if (isSerializedResourceState(parsed) && validateResourceState(parsed)) {\n          // Convert serialized resources to Map with proper type conversion\n          const resourceMap = new Map<ResourceType, ResourceState>();\n\n          // Process each resource entry with proper conversion\n          for (const [key, value] of Object.entries(parsed.resources)) {\n            if (types.includes(key as ResourceType)) {\n              const serializedResource = value as SerializedResource;\n              resourceMap.set(key as ResourceType, {\n                current: serializedResource.current,\n                min: 0, // Default value\n                max: serializedResource.capacity || 100, // Use capacity or default\n                production: serializedResource.production,\n                consumption: serializedResource.consumption,\n              });\n            }\n          }\n\n          // Convert serialized thresholds to Map\n          const thresholdMap = new Map<ResourceType, ResourceThreshold[]>();\n          for (const [key, thresholds] of Object.entries(parsed.thresholds)) {\n            if (types.includes(key as ResourceType)) {\n              thresholdMap.set(key as ResourceType, thresholds as ResourceThreshold[]);\n            }\n          }\n\n          setState(prev => ({\n            ...prev,\n            resources: resourceMap,\n            thresholds: thresholdMap,\n            alerts: parsed.alerts || [],\n            lastUpdated: parsed.timestamp || Date.now(),\n          }));\n        } else {\n          console.warn('Invalid resource data in localStorage, using defaults');\n          setState(prev => ({\n            ...prev,\n            resources: initialResources,\n            thresholds: initialThresholds,\n            lastUpdated: Date.now(),\n          }));\n        }\n      } else {\n        setState(prev => ({\n          ...prev,\n          resources: initialResources,\n          thresholds: initialThresholds,\n          lastUpdated: Date.now(),\n        }));\n      }\n\n      setIsLoading(false);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to load resources'));\n      setIsLoading(false);\n    }\n  }, [types]);\n\n  // Save resources to storage\n  useEffect(() => {\n    if (isLoading) {\n      return;\n    }\n\n    try {\n      // Serialize the state\n      const serializedState: SerializedResourceState = {\n        resources: serializeResourceMap(state.resources) as Record<\n          ResourceType,\n          SerializedResource\n        >,\n        thresholds: serializeResourceMap(state.thresholds) as Record<string, SerializedThreshold[]>,\n        alerts: state.alerts,\n        timestamp: Date.now(),\n      };\n\n      localStorage.setItem('resources', JSON.stringify(serializedState));\n    } catch (err) {\n      console.error('Failed to save resources:', err);\n    }\n  }, [state, isLoading]);\n\n  // Check thresholds\n  useEffect(() => {\n    if (!enableThresholds || isLoading) {\n      return;\n    }\n\n    const checkThresholds = () => {\n      const newAlerts: ResourceAlert[] = [];\n\n      // Convert Map entries to array to avoid MapIterator error\n      const thresholdEntries = Array.from(state.thresholds.entries());\n      for (const [type, thresholdList] of thresholdEntries) {\n        const resourceState = state.resources.get(type);\n        if (!resourceState) {\n          continue;\n        }\n\n        for (const threshold of thresholdList) {\n          // Check min threshold\n          if (threshold.min !== undefined && resourceState.current < threshold.min) {\n            newAlerts.push({\n              id: `${type}-min-${Date.now()}`,\n              type,\n              threshold,\n              message: `${type} is below minimum threshold (${resourceState.current} < ${threshold.min})`,\n              severity: 'critical',\n            });\n          }\n\n          // Check max threshold\n          if (threshold.max !== undefined && resourceState.current > threshold.max) {\n            newAlerts.push({\n              id: `${type}-max-${Date.now()}`,\n              type,\n              threshold,\n              message: `${type} is above maximum threshold (${resourceState.current} > ${threshold.max})`,\n              severity: 'medium',\n            });\n          }\n\n          // Check target threshold\n          if (threshold.target !== undefined) {\n            const deviation = Math.abs(resourceState.current - threshold.target);\n            const maxDeviation = threshold.target * 0.2; // 20% deviation\n\n            if (deviation > maxDeviation) {\n              newAlerts.push({\n                id: `${type}-target-${Date.now()}`,\n                type,\n                threshold,\n                message: `${type} is deviating from target (${resourceState.current} vs ${threshold.target})`,\n                severity: 'low',\n              });\n            }\n          }\n        }\n      }\n\n      if (newAlerts.length > 0) {\n        setState(prev => ({\n          ...prev,\n          alerts: [...prev.alerts, ...newAlerts],\n        }));\n      }\n    };\n\n    // Check thresholds initially\n    checkThresholds();\n\n    // Set up interval for checking thresholds\n    const intervalId = setInterval(checkThresholds, updateInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [enableThresholds, isLoading, state.resources, state.thresholds, updateInterval]);\n\n  // Update resource\n  const updateResource = useCallback((type: ResourceType, update: Partial<ResourceState>) => {\n    setState(prev => {\n      const resources = new Map(prev.resources);\n      const current = resources.get(type) || {\n        current: 0,\n        min: 0,\n        max: 100,\n        production: 0,\n        consumption: 0,\n      };\n\n      resources.set(type, {\n        ...current,\n        ...update,\n      });\n\n      return {\n        ...prev,\n        resources,\n        lastUpdated: Date.now(),\n      };\n    });\n  }, []);\n\n  // Increment resource\n  const incrementResource = useCallback(\n    (type: ResourceType, amount: number) => {\n      if (amount <= 0) {\n        return;\n      }\n\n      setState(prev => {\n        const resources = new Map(prev.resources);\n        const current = resources.get(type) || {\n          current: 0,\n          min: 0,\n          max: 100,\n          production: 0,\n          consumption: 0,\n        };\n\n        const newValue = Math.min(current.current + amount, current.max);\n\n        resources.set(type, {\n          ...current,\n          current: newValue,\n        });\n\n        // Add to history\n        const transfer: ResourceTransfer = {\n          type,\n          source: 'production',\n          target: 'storage',\n          amount,\n          timestamp: Date.now(),\n        };\n\n        const history = [transfer, ...prev.history].slice(0, historyLimit);\n\n        return {\n          ...prev,\n          resources,\n          history,\n          lastUpdated: Date.now(),\n        };\n      });\n    },\n    [historyLimit]\n  );\n\n  // Decrement resource\n  const decrementResource = useCallback(\n    (type: ResourceType, amount: number) => {\n      if (amount <= 0) {\n        return;\n      }\n\n      setState(prev => {\n        const resources = new Map(prev.resources);\n        const current = resources.get(type) || {\n          current: 0,\n          min: 0,\n          max: 100,\n          production: 0,\n          consumption: 0,\n        };\n\n        const newValue = Math.max(current.current - amount, current.min);\n\n        resources.set(type, {\n          ...current,\n          current: newValue,\n        });\n\n        // Add to history\n        const transfer: ResourceTransfer = {\n          type,\n          source: 'storage',\n          target: 'consumption',\n          amount,\n          timestamp: Date.now(),\n        };\n\n        const history = [transfer, ...prev.history].slice(0, historyLimit);\n\n        return {\n          ...prev,\n          resources,\n          history,\n          lastUpdated: Date.now(),\n        };\n      });\n    },\n    [historyLimit]\n  );\n\n  // Transfer resource\n  const transferResource = useCallback(\n    (transfer: ResourceTransfer): boolean => {\n      if (transfer.amount <= 0) {\n        return false;\n      }\n\n      let success = false;\n\n      setState(prev => {\n        const resources = new Map(prev.resources);\n\n        // Get source resource\n        const sourceResource = resources.get(transfer.type);\n        if (!sourceResource || sourceResource.current < transfer.amount) {\n          return prev; // Not enough resources\n        }\n\n        // Update source\n        resources.set(transfer.type, {\n          ...sourceResource,\n          current: sourceResource.current - transfer.amount,\n        });\n\n        // Add to history\n        const history = [transfer, ...prev.history].slice(0, historyLimit);\n\n        success = true;\n\n        return {\n          ...prev,\n          resources,\n          history,\n          lastUpdated: Date.now(),\n        };\n      });\n\n      return success;\n    },\n    [historyLimit]\n  );\n\n  // Set threshold\n  const setThreshold = useCallback(\n    (type: ResourceType, threshold: ResourceThreshold) => {\n      const thresholds = new Map(state.thresholds);\n      const currentThresholds = thresholds.get(type) || [];\n      thresholds.set(type, [...currentThresholds, threshold]);\n      setState(prev => ({ ...prev, thresholds }));\n    },\n    [state.thresholds]\n  );\n\n  // Remove threshold\n  const removeThreshold = useCallback(\n    (type: ResourceType) => {\n      const thresholds = new Map(state.thresholds);\n      thresholds.set(type, []);\n      setState(prev => ({ ...prev, thresholds }));\n    },\n    [state.thresholds]\n  );\n\n  // Get resource\n  const getResource = useCallback(\n    (type: ResourceType) => {\n      return state.resources.get(type);\n    },\n    [state.resources]\n  );\n\n  // Get history by type\n  const getHistoryByType = useCallback(\n    (type: ResourceType) => {\n      return state.history.filter(item => item.type === type);\n    },\n    [state.history]\n  );\n\n  // Clear history\n  const clearHistory = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      history: [],\n    }));\n  }, []);\n\n  // Get alerts by type\n  const getAlertsByType = useCallback(\n    (type: ResourceType) => {\n      return state.alerts.filter(alert => alert.type === type);\n    },\n    [state.alerts]\n  );\n\n  // Clear alerts\n  const clearAlerts = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      alerts: [],\n    }));\n  }, []);\n\n  // Dismiss alert\n  const dismissAlert = useCallback((id: string) => {\n    setState(prev => ({\n      ...prev,\n      alerts: prev.alerts.filter(alert => alert.id !== id),\n    }));\n  }, []);\n\n  // Get total resources\n  const getTotalResources = useCallback(() => {\n    let total = 0;\n\n    // Convert Map entries to array to avoid MapIterator error\n    const resourceValues = Array.from(state.resources.values());\n    for (const resource of resourceValues) {\n      total += resource.current;\n    }\n\n    return total;\n  }, [state.resources]);\n\n  // Get resource percentage\n  const getResourcePercentage = useCallback(\n    (type: ResourceType) => {\n      const resource = state.resources.get(type);\n      if (!resource) {\n        return 0;\n      }\n\n      return (resource.current / resource.max) * 100;\n    },\n    [state.resources]\n  );\n\n  // Get resources above threshold\n  const getResourcesAboveThreshold = useCallback(\n    (percentage: number) => {\n      const result: ResourceType[] = [];\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(state.resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        const resourcePercentage = (resource.current / resource.max) * 100;\n\n        if (resourcePercentage >= percentage) {\n          result.push(type);\n        }\n      }\n\n      return result;\n    },\n    [state.resources]\n  );\n\n  // Get resources below threshold\n  const getResourcesBelowThreshold = useCallback(\n    (percentage: number) => {\n      const result: ResourceType[] = [];\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(state.resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        const resourcePercentage = (resource.current / resource.max) * 100;\n\n        if (resourcePercentage <= percentage) {\n          result.push(type);\n        }\n      }\n\n      return result;\n    },\n    [state.resources]\n  );\n\n  // Create resource list\n  const resourceList = useMemo(() => {\n    return Array.from(state.resources.entries()).map(([type, state]) => ({\n      type,\n      state,\n    }));\n  }, [state.resources]);\n\n  // Calculate resource totals\n  const calculateTotals = useCallback(\n    (resources: Map<ResourceType, ResourceState>): ResourceTotals => {\n      const totals: ResourceTotals = {\n        production: 0,\n        consumption: 0,\n        net: 0,\n        amounts: {} as Record<ResourceType, number>,\n        capacities: {} as Record<ResourceType, number>,\n        rates: {} as Record<ResourceType, number>,\n      };\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        totals.production += resource.production;\n        totals.consumption += resource.consumption;\n\n        if (totals.amounts) {\n          totals.amounts[type] = resource.current;\n        }\n\n        if (totals.capacities) {\n          totals.capacities[type] = resource.max;\n        }\n\n        if (totals.rates) {\n          totals.rates[type] = resource.production - resource.consumption;\n        }\n      }\n\n      totals.net = totals.production - totals.consumption;\n      return totals;\n    },\n    []\n  );\n\n  // Calculate resource percentages\n  const calculatePercentages = useCallback(\n    (resources: Map<ResourceType, ResourceState>): Record<ResourceType, number> => {\n      const percentages: Record<ResourceType, number> = {} as Record<ResourceType, number>;\n\n      // Convert Map entries to array to avoid MapIterator error\n      const resourceEntries = Array.from(resources.entries());\n      for (const [type, resource] of resourceEntries) {\n        if (resource.max > 0) {\n          percentages[type] = (resource.current / resource.max) * 100;\n        } else {\n          percentages[type] = 0;\n        }\n      }\n\n      return percentages;\n    },\n    []\n  );\n\n  return {\n    // Resource states\n    resources: state.resources,\n    resourceList,\n    getResource,\n\n    // Resource history\n    history: state.history,\n    getHistoryByType,\n    clearHistory,\n\n    // Resource alerts\n    alerts: state.alerts,\n    getAlertsByType,\n    clearAlerts,\n    dismissAlert,\n\n    // Resource thresholds\n    setThreshold,\n    removeThreshold,\n\n    // Resource updates\n    updateResource,\n    incrementResource,\n    decrementResource,\n    transferResource,\n\n    // Utility functions\n    getTotalResources,\n    getResourcePercentage,\n    getResourcesAboveThreshold,\n    getResourcesBelowThreshold,\n\n    // Metadata\n    lastUpdated: state.lastUpdated,\n    isLoading,\n    error,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ships/useShipActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ships/useShipClassManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ships/useShipEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useDebugOverlay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useTooltip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useVPR.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":46,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1186,1240],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface AnimationSet {\n  idle: string;\n  active: string;\n  impact: string;\n}\n\n// Define a specific interface for VPR state\ninterface VPRState {\n  active: boolean;\n  animationState?: 'idle' | 'active' | 'impact';\n  intensity?: number;\n  duration?: number;\n  customClass?: string;\n}\n\nexport function useVPR() {\n  const getVPRAnimationSet = (type: string, tier: number): AnimationSet => {\n    // Base animations\n    const baseSet: AnimationSet = {\n      idle: 'animate-pulse',\n      active: 'animate-float',\n      impact: 'animate-impact',\n    };\n\n    // Enhance animations based on tier\n    switch (tier) {\n      case 2:\n        return {\n          idle: `${baseSet.idle} opacity-80`,\n          active: `${baseSet.active} scale-110`,\n          impact: `${baseSet.impact} duration-700`,\n        };\n      case 3:\n        return {\n          idle: `${baseSet.idle} opacity-90 scale-110`,\n          active: `${baseSet.active} scale-125`,\n          impact: `${baseSet.impact} duration-500`,\n        };\n      default:\n        return baseSet;\n    }\n  };\n\n  const updateVPR = (elementId: string, newState: VPRState) => {\n    // This would be used to update VPR state in a real implementation\n    console.log('Updating VPR for:', elementId, newState);\n  };\n\n  return {\n    getVPRAnimationSet,\n    updateVPR,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useVPRInteractivity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/ui/useVPRSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/hooks/useGameState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/automationSystemInit.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[862,865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[862,865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/eventSystemInit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/gameSystemsIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/moduleFrameworkInit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/initialization/moduleUpgradeInit.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":8,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[272,340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":13,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[427,507],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { initializeModuleUpgradePaths } from '../config/modules/upgradePathsConfig';\nimport { moduleUpgradeManager } from '../managers/module/ModuleUpgradeManager';\n\n/**\n * Initialize the module upgrade system\n */\nexport function initializeModuleUpgradeSystem(): void {\n  console.log('[Initialization] Setting up module upgrade system...');\n\n  // Register upgrade paths\n  initializeModuleUpgradePaths(moduleUpgradeManager);\n\n  console.log('[Initialization] Module upgrade system initialized successfully.');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/ai/behaviorTree.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/ai/shipBehavior.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/ai/shipMovement.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/automation/ConditionChecker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RuntimeCondition' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'condition' is defined but never used. Allowed unused args must match /^_/u.","line":141,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4524,4527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4524,4527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Subject } from 'rxjs';\nimport { thresholdEvents } from '../../contexts/ThresholdTypes';\nimport { AutomationCondition } from '../../managers/game/AutomationManager';\nimport { MiningShipManagerImpl } from '../../managers/mining/MiningShipManagerImpl';\nimport { moduleManager } from '../../managers/module/ModuleManager';\n\n// Create a subject to handle condition state\nconst conditionState = new Subject<{\n  resourceId: string;\n  currentAmount: number;\n  thresholds: { min: number; max: number };\n}>();\n\n/**\n * Extended condition type with runtime state\n */\ninterface RuntimeCondition extends AutomationCondition {\n  lastChecked?: number;\n}\n\nexport class ConditionChecker {\n  private lastCheckedTimes: Map<string, number> = new Map();\n  private miningManager?: MiningShipManagerImpl;\n\n  constructor(miningManager?: MiningShipManagerImpl) {\n    this.miningManager = miningManager;\n\n    // Subscribe to threshold events\n    thresholdEvents.subscribe(event => {\n      if (event.type === 'THRESHOLD_VIOLATED' || event.type === 'STORAGE_FULL') {\n        conditionState.next({\n          resourceId: event.resourceId,\n          currentAmount: event.details.current,\n          thresholds: {\n            min: event.details.min || 0,\n            max: event.details.max || Infinity,\n          },\n        });\n      }\n    });\n  }\n\n  private getConditionKey(condition: AutomationCondition): string {\n    return `${condition.type}-${condition.target || ''}-${condition.value || ''}-${condition.operator || ''}`;\n  }\n\n  /**\n   * Checks if a condition is met\n   */\n  public async checkCondition(condition: AutomationCondition): Promise<boolean> {\n    switch (condition.type) {\n      case 'RESOURCE_ABOVE':\n      case 'RESOURCE_BELOW':\n        return new Promise(resolve => {\n          const subscription = conditionState.subscribe(state => {\n            if (state.resourceId === condition.target) {\n              const threshold = Number(condition.value);\n              const result =\n                condition.type === 'RESOURCE_ABOVE'\n                  ? state.currentAmount > threshold\n                  : state.currentAmount < threshold;\n              subscription.unsubscribe();\n              resolve(result);\n            }\n          });\n\n          // Timeout after 1 second\n          setTimeout(() => {\n            subscription.unsubscribe();\n            resolve(false);\n          }, 1000);\n        });\n\n      case 'MODULE_ACTIVE':\n      case 'MODULE_INACTIVE':\n        return this.checkModuleCondition(condition);\n\n      case 'TIME_ELAPSED':\n        return this.checkTimeCondition(condition);\n\n      case 'EVENT_OCCURRED':\n        return this.checkEventCondition(condition);\n\n      case 'STATUS_EQUALS':\n        return this.checkStatusCondition(condition);\n\n      default:\n        console.warn(`Unknown condition type: ${condition.type}`);\n        return false;\n    }\n  }\n\n  /**\n   * Checks a module-based condition\n   */\n  private checkModuleCondition(condition: AutomationCondition): boolean {\n    if (!condition.target) {\n      return false;\n    }\n\n    const module = moduleManager.getModule(condition.target);\n    if (!module) {\n      return false;\n    }\n\n    if (condition.type === 'MODULE_ACTIVE') {\n      return module.isActive;\n    } else {\n      return !module.isActive;\n    }\n  }\n\n  /**\n   * Checks a time-based condition\n   */\n  private checkTimeCondition(condition: AutomationCondition): boolean {\n    if (!condition.value) {\n      return false;\n    }\n\n    const now = Date.now();\n    const key = this.getConditionKey(condition);\n    const lastChecked = this.lastCheckedTimes.get(key) || 0;\n    const elapsed = now - lastChecked;\n\n    // Update last checked time\n    this.lastCheckedTimes.set(key, now);\n\n    if (condition.operator === 'greater') {\n      return elapsed > condition.value;\n    } else if (condition.operator === 'less') {\n      return elapsed < condition.value;\n    }\n\n    return elapsed >= Number(condition.value);\n  }\n\n  /**\n   * Checks an event-based condition\n   */\n  private checkEventCondition(condition: AutomationCondition): boolean {\n    // TODO: Implement event checking using moduleEventBus\n    return false;\n  }\n\n  /**\n   * Checks a status-based condition\n   */\n  private checkStatusCondition(condition: AutomationCondition): boolean {\n    if (!condition.target || !condition.value) {\n      return false;\n    }\n\n    const module = moduleManager.getModule(condition.target);\n    if (!module) {\n      return false;\n    }\n\n    // Get module status from metadata\n    const status = (module as any).metadata?.status;\n    if (!status) {\n      return false;\n    }\n\n    switch (condition.operator) {\n      case 'equals':\n        return status === condition.value;\n      case 'not_equals':\n        return status !== condition.value;\n      case 'contains':\n        return status.includes(String(condition.value));\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Checks if all conditions in a set are met\n   */\n  public async checkConditions(conditions: AutomationCondition[]): Promise<boolean> {\n    try {\n      const results = await Promise.all(\n        conditions.map(condition => this.checkCondition(condition))\n      );\n      return results.every(result => result);\n    } catch (error) {\n      console.error('Error checking conditions:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Resets a condition's last checked time\n   */\n  public resetCondition(condition: AutomationCondition): void {\n    const key = this.getConditionKey(condition);\n    this.lastCheckedTimes.delete(key);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/modules/ModuleEvents.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1620,1623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1620,1623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleType } from '../../types/buildings/ModuleTypes';\n\n/**\n * Module event types\n */\nexport type ModuleEventType =\n  // Lifecycle events\n  | 'MODULE_CREATED'\n  | 'MODULE_ATTACHED'\n  | 'MODULE_DETACHED'\n  | 'MODULE_UPGRADED'\n  | 'MODULE_ACTIVATED'\n  | 'MODULE_DEACTIVATED'\n  | 'MODULE_UPDATED'\n  // Attachment events\n  | 'ATTACHMENT_STARTED'\n  | 'ATTACHMENT_CANCELLED'\n  | 'ATTACHMENT_COMPLETED'\n  | 'ATTACHMENT_PREVIEW_SHOWN'\n  // Resource events\n  | 'RESOURCE_PRODUCED'\n  | 'RESOURCE_CONSUMED'\n  | 'RESOURCE_TRANSFERRED'\n  | 'RESOURCE_PRODUCTION_REGISTERED'\n  | 'RESOURCE_PRODUCTION_UNREGISTERED'\n  | 'RESOURCE_CONSUMPTION_REGISTERED'\n  | 'RESOURCE_CONSUMPTION_UNREGISTERED'\n  | 'RESOURCE_FLOW_REGISTERED'\n  | 'RESOURCE_FLOW_UNREGISTERED'\n  | 'RESOURCE_SHORTAGE'\n  | 'RESOURCE_UPDATED'\n  // Automation events\n  | 'AUTOMATION_STARTED'\n  | 'AUTOMATION_STOPPED'\n  | 'AUTOMATION_CYCLE_COMPLETE'\n  // Status events\n  | 'STATUS_CHANGED'\n  | 'ERROR_OCCURRED'\n  // Mission events\n  | 'MISSION_STARTED'\n  | 'MISSION_COMPLETED'\n  | 'MISSION_FAILED'\n  | 'MISSION_PROGRESS_UPDATED'\n  | 'MISSION_REWARD_CLAIMED'\n  // Sub-module events\n  | 'SUB_MODULE_CREATED'\n  | 'SUB_MODULE_ATTACHED'\n  | 'SUB_MODULE_DETACHED'\n  | 'SUB_MODULE_UPGRADED'\n  | 'SUB_MODULE_ACTIVATED'\n  | 'SUB_MODULE_DEACTIVATED'\n  | 'SUB_MODULE_EFFECT_APPLIED'\n  | 'SUB_MODULE_EFFECT_REMOVED'\n  // Combat events\n  | 'COMBAT_UPDATED'\n  // Tech events\n  | 'TECH_UNLOCKED'\n  | 'TECH_UPDATED';\n\n/**\n * Module event interface\n */\nexport interface ModuleEvent {\n  type: ModuleEventType;\n  moduleId: string;\n  moduleType: ModuleType;\n  timestamp: number;\n  data?: any;\n}\n\n/**\n * Event listener type\n */\ntype ModuleEventListener = (event: ModuleEvent) => void;\n\n/**\n * Module event bus for handling module communication\n */\nexport class ModuleEventBus {\n  private listeners: Map<ModuleEventType, Set<ModuleEventListener>>;\n  private history: ModuleEvent[];\n  private maxHistorySize: number;\n\n  constructor(maxHistorySize = 1000) {\n    this.listeners = new Map();\n    this.history = [];\n    this.maxHistorySize = maxHistorySize;\n  }\n\n  /**\n   * Subscribe to module events\n   */\n  subscribe(type: ModuleEventType, listener: ModuleEventListener): () => void {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, new Set());\n    }\n\n    this.listeners.get(type)!.add(listener);\n\n    // Return unsubscribe function\n    return () => {\n      const typeListeners = this.listeners.get(type);\n      if (typeListeners) {\n        typeListeners.delete(listener);\n        if (typeListeners.size === 0) {\n          this.listeners.delete(type);\n        }\n      }\n    };\n  }\n\n  /**\n   * Emit a module event\n   */\n  emit(event: ModuleEvent): void {\n    // Add to history\n    this.history.push(event);\n    if (this.history.length > this.maxHistorySize) {\n      this.history.shift();\n    }\n\n    // Notify listeners\n    const typeListeners = this.listeners.get(event.type);\n    if (typeListeners) {\n      typeListeners.forEach(listener => {\n        try {\n          listener(event);\n        } catch (error) {\n          console.error('Error in module event listener:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get event history\n   */\n  getHistory(): ModuleEvent[] {\n    return [...this.history];\n  }\n\n  /**\n   * Get event history for a specific module\n   */\n  getModuleHistory(moduleId: string): ModuleEvent[] {\n    return this.history.filter(event => event.moduleId === moduleId);\n  }\n\n  /**\n   * Get event history for a specific type\n   */\n  getEventTypeHistory(type: ModuleEventType): ModuleEvent[] {\n    return this.history.filter(event => event.type === type);\n  }\n\n  /**\n   * Clear event history\n   */\n  clearHistory(): void {\n    this.history = [];\n  }\n}\n\n// Export singleton instance\nexport const moduleEventBus = new ModuleEventBus();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/EntityPool.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[973,1062],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":109,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":109,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[2373,2416],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from '../utils/EventEmitter';\n\nexport interface PooledEntity {\n  reset(): void;\n}\n\ninterface PoolEvents<T extends PooledEntity> {\n  entityActivated: { entity: T };\n  entityDeactivated: { entity: T };\n  poolExpanded: { newSize: number };\n}\n\n/**\n * Generic entity pool for efficient object reuse\n */\nexport class EntityPool<T extends PooledEntity> extends EventEmitter<PoolEvents<T>> {\n  private available: T[];\n  private inUse: Set<T>;\n  private factory: () => T;\n  private maxSize: number;\n  private expandSize: number;\n\n  constructor(\n    factory: () => T,\n    initialSize: number,\n    maxSize: number = 1000,\n    expandSize: number = 50\n  ) {\n    super();\n    this.factory = factory;\n    this.maxSize = maxSize;\n    this.expandSize = expandSize;\n    this.available = [];\n    this.inUse = new Set();\n\n    // Pre-allocate initial pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(factory());\n    }\n\n    // Debug logging\n    console.debug(`[EntityPool] Initialized with ${initialSize} entities (max: ${maxSize})`);\n  }\n\n  /**\n   * Get an inactive entity from the pool\n   */\n  public acquire(): T | undefined {\n    let entity: T;\n    if (this.available.length > 0) {\n      entity = this.available.pop()!;\n    } else {\n      entity = this.factory();\n    }\n\n    entity.reset();\n    this.inUse.add(entity);\n    this.emit('entityActivated', { entity });\n    return entity;\n  }\n\n  /**\n   * Return an entity to the pool\n   */\n  public release(entity: T): void {\n    if (this.inUse.has(entity)) {\n      this.inUse.delete(entity);\n      entity.reset();\n      this.available.push(entity);\n      this.emit('entityDeactivated', { entity });\n    }\n  }\n\n  /**\n   * Get all active entities\n   */\n  public getActiveEntities(): T[] {\n    return Array.from(this.inUse);\n  }\n\n  /**\n   * Get total number of entities in pool\n   */\n  public getTotalCount(): number {\n    return this.available.length + this.inUse.size;\n  }\n\n  /**\n   * Get number of active entities\n   */\n  public getActiveCount(): number {\n    return this.inUse.size;\n  }\n\n  /**\n   * Get number of available entities\n   */\n  public getAvailableCount(): number {\n    return this.available.length;\n  }\n\n  /**\n   * Clear all entities from pool\n   */\n  public clear(): void {\n    this.available = [];\n    this.inUse.clear();\n    this.emit('entityDeactivated', { entity: null });\n    console.debug('[EntityPool] Pool cleared');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/QuadTree.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/RenderBatcher.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[432,435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[432,435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Position } from '../../types/core/Position';\nimport { EventEmitter } from '../utils/EventEmitter';\n\ninterface RenderBatch {\n  id: string;\n  type: string;\n  zIndex: number;\n  items: RenderItem[];\n}\n\ninterface RenderItem {\n  id: string;\n  position: Position;\n  size: { width: number; height: number };\n  rotation: number;\n  opacity: number;\n  color: string;\n  texture?: string;\n  shader?: string;\n  uniforms?: Record<string, any>;\n}\n\ninterface RenderBatcherEvents {\n  batchCreated: { batch: RenderBatch };\n  batchUpdated: { batch: RenderBatch };\n  batchRemoved: { batchId: string };\n  frameStarted: { timestamp: number };\n  frameEnded: { timestamp: number; drawCalls: number };\n}\n\nexport declare class RenderBatcher extends EventEmitter<RenderBatcherEvents> {\n  createBatch(type: string, zIndex?: number): string;\n  addItem(batchId: string, item: RenderItem): void;\n  removeItem(batchId: string, itemId: string): void;\n  removeBatch(batchId: string): void;\n  beginFrame(timestamp: number): void;\n  render(ctx: CanvasRenderingContext2D): void;\n  endFrame(timestamp: number): void;\n  cleanup(): void;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/optimization/RenderBatcher.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1046,1091],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":138,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Position } from '../../types/core/Position';\nimport { EventEmitter } from '../utils/EventEmitter';\n\nexport interface RenderBatch {\n  id: string;\n  type: string;\n  zIndex: number;\n  items: RenderItem[];\n}\n\nexport interface RenderItem {\n  id: string;\n  position: Position;\n  size: { width: number; height: number };\n  rotation: number;\n  opacity: number;\n  color: string;\n  texture?: string;\n  shader?: string;\n  uniforms?: Record<string, any>;\n}\n\nexport interface RenderBatcherEvents {\n  batchCreated: { batch: RenderBatch };\n  batchUpdated: { batch: RenderBatch };\n  batchRemoved: { batchId: string };\n  frameStarted: { timestamp: number };\n  frameEnded: { timestamp: number; drawCalls: number };\n}\n\n/**\n * Manages render batching for optimized drawing\n */\nexport class RenderBatcher extends EventEmitter<RenderBatcherEvents> {\n  private batches: Map<string, RenderBatch> = new Map();\n  private sortedBatches: RenderBatch[] = [];\n  private needsSort: boolean = false;\n  private drawCalls: number = 0;\n\n  constructor() {\n    super();\n    console.debug('[RenderBatcher] Initialized');\n  }\n\n  /**\n   * Create a new render batch\n   */\n  public createBatch(type: string, zIndex: number = 0): string {\n    const id = `batch-${type}-${Date.now()}`;\n    const batch: RenderBatch = {\n      id,\n      type,\n      zIndex,\n      items: [],\n    };\n\n    this.batches.set(id, batch);\n    this.needsSort = true;\n    this.emit('batchCreated', { batch });\n\n    return id;\n  }\n\n  /**\n   * Add item to a batch\n   */\n  public addItem(batchId: string, item: RenderItem): void {\n    const batch = this.batches.get(batchId);\n    if (batch) {\n      batch.items.push(item);\n      this.emit('batchUpdated', { batch });\n    }\n  }\n\n  /**\n   * Remove item from a batch\n   */\n  public removeItem(batchId: string, itemId: string): void {\n    const batch = this.batches.get(batchId);\n    if (batch) {\n      const index = batch.items.findIndex(item => item.id === itemId);\n      if (index !== -1) {\n        batch.items.splice(index, 1);\n        this.emit('batchUpdated', { batch });\n      }\n    }\n  }\n\n  /**\n   * Remove a batch\n   */\n  public removeBatch(batchId: string): void {\n    if (this.batches.delete(batchId)) {\n      this.needsSort = true;\n      this.emit('batchRemoved', { batchId });\n    }\n  }\n\n  /**\n   * Sort batches by z-index\n   */\n  private sortBatches(): void {\n    if (!this.needsSort) {\n      return;\n    }\n\n    this.sortedBatches = Array.from(this.batches.values()).sort((a, b) => a.zIndex - b.zIndex);\n    this.needsSort = false;\n  }\n\n  /**\n   * Begin frame\n   */\n  public beginFrame(timestamp: number): void {\n    this.drawCalls = 0;\n    this.emit('frameStarted', { timestamp });\n  }\n\n  /**\n   * Render all batches\n   */\n  public render(ctx: CanvasRenderingContext2D): void {\n    this.sortBatches();\n\n    // Group items by shader and texture to minimize state changes\n    this.sortedBatches.forEach(batch => {\n      const byShader = new Map<string, RenderItem[]>();\n\n      batch.items.forEach(item => {\n        const key = `${item.shader || 'default'}-${item.texture || 'none'}`;\n        if (!byShader.has(key)) {\n          byShader.set(key, []);\n        }\n        byShader.get(key)!.push(item);\n      });\n\n      // Render each group\n      byShader.forEach((items, key) => {\n        // Set up shader and texture once for the group\n        this.setupShaderAndTexture(ctx, items[0]);\n        this.drawCalls++;\n\n        // Render all items in the group\n        items.forEach(item => {\n          this.renderItem(ctx, item);\n        });\n      });\n    });\n  }\n\n  /**\n   * Set up shader and texture for a group\n   */\n  private setupShaderAndTexture(ctx: CanvasRenderingContext2D, item: RenderItem): void {\n    // Set global alpha\n    ctx.globalAlpha = item.opacity;\n\n    // Set blend mode based on shader\n    if (item.shader === 'additive') {\n      ctx.globalCompositeOperation = 'lighter';\n    } else {\n      ctx.globalCompositeOperation = 'source-over';\n    }\n\n    // Set color\n    ctx.fillStyle = item.color;\n    ctx.strokeStyle = item.color;\n  }\n\n  /**\n   * Render a single item\n   */\n  private renderItem(ctx: CanvasRenderingContext2D, item: RenderItem): void {\n    ctx.save();\n\n    // Transform\n    ctx.translate(item.position.x, item.position.y);\n    ctx.rotate(item.rotation);\n\n    // Draw\n    if (item.texture) {\n      // Draw textured quad\n      ctx.fillRect(-item.size.width / 2, -item.size.height / 2, item.size.width, item.size.height);\n    } else {\n      // Draw colored quad\n      ctx.fillRect(-item.size.width / 2, -item.size.height / 2, item.size.width, item.size.height);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * End frame\n   */\n  public endFrame(timestamp: number): void {\n    this.emit('frameEnded', {\n      timestamp,\n      drawCalls: this.drawCalls,\n    });\n  }\n\n  /**\n   * Clean up\n   */\n  public cleanup(): void {\n    this.batches.clear();\n    this.sortedBatches = [];\n    this.needsSort = false;\n    this.drawCalls = 0;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/lib/utils/EventEmitter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[99,102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[99,102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[121,124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[121,124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Generic event emitter implementation\n */\nexport class EventEmitter<T extends Record<string, any> = Record<string, any>> {\n  private events: Map<keyof T, Array<(data: T[keyof T]) => void>> = new Map();\n\n  /**\n   * Subscribe to an event\n   */\n  public on<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)?.push(callback as (data: T[keyof T]) => void);\n  }\n\n  /**\n   * Emit an event with data\n   */\n  public emit<K extends keyof T>(event: K, data: T[K]): void {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => callback(data as T[keyof T]));\n    }\n  }\n\n  /**\n   * Unsubscribe from an event\n   */\n  public off<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback as (data: T[keyof T]) => void);\n      if (index !== -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Subscribe to an event (alias for on)\n   */\n  public subscribe<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    this.on(event, callback);\n  }\n\n  /**\n   * Unsubscribe from an event (alias for off)\n   */\n  public unsubscribe<K extends keyof T>(event: K, callback: (data: T[K]) => void): void {\n    this.off(event, callback);\n  }\n\n  /**\n   * Remove all listeners for an event\n   */\n  public removeAllListeners<K extends keyof T>(event?: K): void {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/ai/BehaviorTreeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/automation/GlobalAutomationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/colony/ColonyManagerImpl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/combat/WarShipManagerImpl.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3203,3206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3203,3206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3558,3561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3558,3561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4588,4591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4588,4591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { EventEmitter } from '../../lib/utils/EventEmitter';\nimport { combatManager } from '../../managers/combat/combatManager';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { Position } from '../../types/core/GameTypes';\nimport { CommonShipCapabilities } from '../../types/ships/CommonShipTypes';\nimport { WeaponConfig, WeaponState } from '../../types/weapons/WeaponTypes';\n\ninterface WarShip {\n  id: string;\n  name: string;\n  type:\n    | 'spitflare'\n    | 'starSchooner'\n    | 'orionFrigate'\n    | 'harbringerGalleon'\n    | 'midwayCarrier'\n    | 'motherEarthRevenge';\n  tier: 1 | 2 | 3;\n  status: 'idle' | 'patrolling' | 'engaging' | 'returning' | 'damaged' | 'retreating' | 'disabled';\n  position: Position;\n  health: number;\n  maxHealth: number;\n  shield: number;\n  maxShield: number;\n  energy: number;\n  maxEnergy: number;\n  capabilities: CommonShipCapabilities;\n  weapons: {\n    id: string;\n    config: WeaponConfig;\n    state: WeaponState;\n  }[];\n  specialAbilities?: {\n    name: string;\n    description: string;\n    cooldown: number;\n    active: boolean;\n    effectiveness?: number;\n  }[];\n  techBonuses?: {\n    weaponEfficiency: number;\n    shieldRegeneration: number;\n    energyEfficiency: number;\n  };\n  combatStats: {\n    damageDealt: number;\n    damageReceived: number;\n    killCount: number;\n    assistCount: number;\n  };\n}\n\ninterface CombatTask {\n  id: string;\n  type: 'combat';\n  target: {\n    id: string;\n    position: Position;\n  };\n  priority: number;\n  assignedAt: number;\n  status: 'queued' | 'in-progress' | 'completed' | 'failed';\n  formation?: {\n    type: 'offensive' | 'defensive' | 'balanced';\n    spacing: number;\n    facing: number;\n  };\n}\n\nexport class WarShipManagerImpl extends EventEmitter {\n  private ships: Map<string, WarShip> = new Map();\n  private tasks: Map<string, CombatTask> = new Map();\n  private formations: Map<\n    string,\n    {\n      type: 'offensive' | 'defensive' | 'balanced';\n      ships: string[];\n      leader?: string;\n      spacing: number;\n      facing: number;\n    }\n  > = new Map();\n\n  constructor() {\n    super();\n    this.initializeAutomationHandlers();\n  }\n\n  private initializeAutomationHandlers(): void {\n    moduleEventBus.subscribe('AUTOMATION_STARTED', (event: ModuleEvent) => {\n      if (event.moduleType === 'hangar' && event.data?.type) {\n        const ship = this.ships.get(event.moduleId);\n        if (ship) {\n          switch (event.data.type) {\n            case 'formation':\n              this.handleFormationChange(ship, event.data);\n              break;\n            case 'engagement':\n              this.handleEngagement(ship, event.data);\n              break;\n            case 'repair':\n              this.handleRepair(ship);\n              break;\n            case 'shield':\n              this.handleShieldBoost(ship);\n              break;\n            case 'attack':\n              this.handleAttack(ship, event.data);\n              break;\n            case 'retreat':\n              this.handleRetreat(ship);\n              break;\n          }\n        }\n      }\n    });\n  }\n\n  private handleFormationChange(ship: WarShip, data: any): void {\n    const { formation } = data;\n    if (formation) {\n      const formationId = `formation-${Date.now()}`;\n      this.formations.set(formationId, {\n        type: formation.type,\n        ships: [ship.id],\n        spacing: formation.spacing,\n        facing: formation.facing,\n      });\n    }\n  }\n\n  private handleEngagement(ship: WarShip, data: any): void {\n    const { targetId } = data;\n    if (targetId) {\n      const task: CombatTask = {\n        id: `combat-${targetId}`,\n        type: 'combat',\n        target: {\n          id: targetId,\n          position: { x: 0, y: 0 }, // Position will be updated in the update loop\n        },\n        priority: this.getPriorityForShipType(ship.type),\n        assignedAt: Date.now(),\n        status: 'in-progress',\n      };\n      this.tasks.set(ship.id, task);\n      this.updateShipStatus(ship.id, 'engaging');\n    }\n  }\n\n  private handleRepair(ship: WarShip): void {\n    if (ship.health < ship.maxHealth) {\n      ship.health = Math.min(ship.maxHealth, ship.health + ship.maxHealth * 0.2);\n      if (ship.health > ship.maxHealth * 0.3) {\n        this.updateShipStatus(ship.id, 'idle');\n      }\n    }\n  }\n\n  private handleShieldBoost(ship: WarShip): void {\n    if (ship.shield < ship.maxShield) {\n      ship.shield = Math.min(ship.maxShield, ship.shield + ship.maxShield * 0.3);\n    }\n  }\n\n  private handleAttack(ship: WarShip, data: any): void {\n    const { targetId } = data;\n    if (targetId) {\n      const readyWeapon = ship.weapons.find(w => w.state.status === 'ready');\n      if (readyWeapon) {\n        readyWeapon.state.status = 'cooling';\n        readyWeapon.state.currentStats.cooldown = Date.now();\n        ship.energy -=\n          readyWeapon.config.baseStats.energyCost * (ship.techBonuses?.energyEfficiency || 1);\n\n        // Update combat stats\n        ship.combatStats.damageDealt +=\n          readyWeapon.config.baseStats.damage * (ship.techBonuses?.weaponEfficiency || 1);\n      }\n    }\n  }\n\n  private handleRetreat(ship: WarShip): void {\n    this.updateShipStatus(ship.id, 'retreating');\n    const task = this.tasks.get(ship.id);\n    if (task) {\n      task.status = 'failed';\n      this.tasks.delete(ship.id);\n    }\n  }\n\n  public registerShip(ship: WarShip): void {\n    if (ship.capabilities.canJump) {\n      this.ships.set(ship.id, ship);\n\n      // Emit events\n      this.emit('shipRegistered', { shipId: ship.id });\n      moduleEventBus.emit({\n        type: 'MODULE_ACTIVATED',\n        moduleId: ship.id,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n        data: { ship },\n      });\n    }\n  }\n\n  public unregisterShip(shipId: string): void {\n    if (this.ships.has(shipId)) {\n      // Remove from formations\n      this.formations.forEach(formation => {\n        const index = formation.ships.indexOf(shipId);\n        if (index !== -1) {\n          formation.ships.splice(index, 1);\n          if (formation.leader === shipId) {\n            formation.leader = formation.ships[0];\n          }\n        }\n      });\n\n      this.ships.delete(shipId);\n      this.tasks.delete(shipId);\n\n      // Emit events\n      this.emit('shipUnregistered', { shipId });\n      moduleEventBus.emit({\n        type: 'MODULE_DEACTIVATED',\n        moduleId: shipId,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  public assignCombatTask(\n    shipId: string,\n    targetId: string,\n    position: Position,\n    formation?: {\n      type: 'offensive' | 'defensive' | 'balanced';\n      spacing: number;\n      facing: number;\n    }\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (!ship || ship.status === 'disabled') {\n      return;\n    }\n\n    const task: CombatTask = {\n      id: `combat-${targetId}`,\n      type: 'combat',\n      target: {\n        id: targetId,\n        position,\n      },\n      priority: this.getPriorityForShipType(ship.type),\n      assignedAt: Date.now(),\n      status: 'queued',\n      formation,\n    };\n\n    this.tasks.set(shipId, task);\n    this.updateShipStatus(shipId, 'engaging');\n\n    // Emit events\n    this.emit('taskAssigned', { shipId, task });\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: shipId,\n      moduleType: 'war' as ModuleType,\n      timestamp: Date.now(),\n      data: { task },\n    });\n  }\n\n  public completeTask(shipId: string): void {\n    const task = this.tasks.get(shipId);\n    const ship = this.ships.get(shipId);\n\n    if (task && ship) {\n      this.tasks.delete(shipId);\n      this.updateShipStatus(shipId, 'returning');\n\n      // Emit events\n      this.emit('taskCompleted', { shipId, task });\n      moduleEventBus.emit({\n        type: 'AUTOMATION_CYCLE_COMPLETE',\n        moduleId: shipId,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n        data: { task, combatStats: ship.combatStats },\n      });\n    }\n  }\n\n  public updateShipTechBonuses(\n    shipId: string,\n    bonuses: { weaponEfficiency: number; shieldRegeneration: number; energyEfficiency: number }\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.techBonuses = bonuses;\n      this.emit('techBonusesUpdated', { shipId, bonuses });\n    }\n  }\n\n  public createFormation(\n    type: 'offensive' | 'defensive' | 'balanced',\n    shipIds: string[],\n    spacing: number = 100\n  ): string {\n    const formationId = `formation-${Date.now()}`;\n    const validShips = shipIds.filter(id => this.ships.has(id));\n\n    if (validShips.length > 0) {\n      this.formations.set(formationId, {\n        type,\n        ships: validShips,\n        leader: validShips[0],\n        spacing,\n        facing: 0,\n      });\n\n      // Update tasks with formation info\n      validShips.forEach(shipId => {\n        const task = this.tasks.get(shipId);\n        if (task) {\n          task.formation = {\n            type,\n            spacing,\n            facing: 0,\n          };\n        }\n      });\n\n      this.emit('formationCreated', { formationId, type, ships: validShips });\n    }\n\n    return formationId;\n  }\n\n  private updateShipStatus(shipId: string, status: WarShip['status']): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.status = status;\n\n      // Emit events\n      this.emit('shipStatusUpdated', { shipId, status });\n      moduleEventBus.emit({\n        type: 'STATUS_CHANGED',\n        moduleId: shipId,\n        moduleType: 'war' as ModuleType,\n        timestamp: Date.now(),\n        data: { status },\n      });\n    }\n  }\n\n  private getPriorityForShipType(type: WarShip['type']): number {\n    switch (type) {\n      case 'motherEarthRevenge':\n        return 5;\n      case 'midwayCarrier':\n        return 4;\n      case 'harbringerGalleon':\n        return 3;\n      case 'orionFrigate':\n        return 2;\n      case 'starSchooner':\n      case 'spitflare':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  // Update method for periodic tasks\n  public update(deltaTime: number): void {\n    // Update formations\n    this.formations.forEach(formation => {\n      if (formation.ships.length > 0) {\n        const leader = this.ships.get(formation.leader!);\n        if (leader) {\n          // Update formation facing based on leader's target\n          const task = this.tasks.get(leader.id);\n          if (task?.target) {\n            const dx = task.target.position.x - leader.position.x;\n            const dy = task.target.position.y - leader.position.y;\n            formation.facing = Math.atan2(dy, dx);\n          }\n\n          // Update formation positions\n          formation.ships.forEach((shipId, index) => {\n            if (shipId !== formation.leader) {\n              const ship = this.ships.get(shipId);\n              if (ship) {\n                // Calculate formation position\n                const angle = formation.facing + index * (Math.PI / 4);\n                const targetPos = {\n                  x: leader.position.x + Math.cos(angle) * formation.spacing,\n                  y: leader.position.y + Math.sin(angle) * formation.spacing,\n                };\n\n                // Move ship towards formation position\n                combatManager.moveUnit(shipId, targetPos);\n              }\n            }\n          });\n        }\n      }\n    });\n\n    // Update ships\n    this.ships.forEach(ship => {\n      // Update weapon cooldowns\n      ship.weapons.forEach(weapon => {\n        if (weapon.state.status === 'cooling') {\n          const timeSinceFired = Date.now() - (weapon.state.currentStats.cooldown || 0);\n          if (timeSinceFired >= weapon.config.baseStats.cooldown) {\n            weapon.state.status = 'ready';\n          }\n        }\n      });\n\n      // Handle combat tasks\n      const task = this.tasks.get(ship.id);\n      if (task?.status === 'in-progress') {\n        const target = combatManager\n          .getUnitsInRange(ship.position, ship.weapons[0].config.baseStats.range)\n          .find(unit => unit.id === task.target.id);\n\n        if (target) {\n          // Find ready weapon in range\n          const readyWeapon = ship.weapons.find(weapon => {\n            const distance = Math.sqrt(\n              Math.pow(target.position.x - ship.position.x, 2) +\n                Math.pow(target.position.y - ship.position.y, 2)\n            );\n            return weapon.state.status === 'ready' && distance <= weapon.config.baseStats.range;\n          });\n\n          if (readyWeapon) {\n            // Fire weapon\n            readyWeapon.state.status = 'cooling';\n            readyWeapon.state.currentStats.cooldown = Date.now();\n            ship.energy -=\n              readyWeapon.config.baseStats.energyCost * (ship.techBonuses?.energyEfficiency || 1);\n\n            // Update combat stats\n            ship.combatStats.damageDealt +=\n              readyWeapon.config.baseStats.damage * (ship.techBonuses?.weaponEfficiency || 1);\n          }\n        }\n      }\n\n      // Regenerate shields\n      if (ship.shield < ship.maxShield) {\n        ship.shield = Math.min(\n          ship.maxShield,\n          ship.shield + deltaTime * 0.1 * (ship.techBonuses?.shieldRegeneration || 1)\n        );\n      }\n\n      // Check for critical damage\n      if (ship.health < ship.maxHealth * 0.3 && ship.status !== 'retreating') {\n        this.updateShipStatus(ship.id, 'retreating');\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/combat/combatManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/effects/EffectLifecycleManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/effects/ParticleSystemManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is defined but never used. Allowed unused args must match /^_/u.","line":272,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":272,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  AdditiveBlending,\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  PerspectiveCamera,\n  Points,\n  Scene,\n  ShaderMaterial,\n  WebGLRenderer,\n} from 'three';\nimport { EntityPool, PooledEntity } from '../../lib/optimization/EntityPool';\nimport { Position } from '../../types/core/GameTypes';\n\ninterface Particle extends PooledEntity {\n  id: string;\n  active: boolean;\n  position: Position;\n  velocity: Position;\n  acceleration: Position;\n  size: number;\n  color: string;\n  opacity: number;\n  life: number;\n  maxLife: number;\n  reset(): void;\n}\n\ninterface ParticleSystemConfig {\n  maxParticles: number;\n  spawnRate: number;\n  position: Position;\n  spread: number;\n  initialVelocity: {\n    min: Position;\n    max: Position;\n  };\n  acceleration: Position;\n  size: {\n    min: number;\n    max: number;\n  };\n  life: {\n    min: number;\n    max: number;\n  };\n  color: string | string[];\n  blendMode?: 'normal' | 'additive';\n  quality: 'low' | 'medium' | 'high';\n}\n\nexport class ParticleSystemManager {\n  private static instance: ParticleSystemManager;\n  private particlePools: Map<string, Map<number, EntityPool<Particle>>>;\n  private systems: Map<string, ParticleSystem>;\n  private renderer: WebGLRenderer;\n  private scene: Scene;\n  private camera: PerspectiveCamera;\n  private frameCount: number = 0;\n  private readonly FRAME_SKIP_THRESHOLD = 2;\n\n  private constructor() {\n    this.particlePools = new Map();\n    this.systems = new Map();\n    this.renderer = new WebGLRenderer({ antialias: true });\n    this.scene = new Scene();\n    this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    this.camera.position.z = 5;\n    this.initializeRenderer();\n\n    // Start cleanup interval\n    setInterval(() => this.cleanupInactiveSystems(), 5000);\n  }\n\n  public static getInstance(): ParticleSystemManager {\n    if (!ParticleSystemManager.instance) {\n      ParticleSystemManager.instance = new ParticleSystemManager();\n    }\n    return ParticleSystemManager.instance;\n  }\n\n  private initializeRenderer(): void {\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  private getPoolSizeForQuality(quality: 'low' | 'medium' | 'high'): number {\n    switch (quality) {\n      case 'low':\n        return 100;\n      case 'medium':\n        return 500;\n      case 'high':\n        return 1000;\n      default:\n        return 500;\n    }\n  }\n\n  private getOrCreatePool(\n    systemId: string,\n    particleSize: number,\n    quality: 'low' | 'medium' | 'high'\n  ): EntityPool<Particle> {\n    if (!this.particlePools.has(systemId)) {\n      this.particlePools.set(systemId, new Map());\n    }\n\n    const sizePools = this.particlePools.get(systemId)!;\n    if (!sizePools.has(particleSize)) {\n      const poolSize = this.getPoolSizeForQuality(quality);\n      sizePools.set(particleSize, new EntityPool<Particle>(() => this.createParticle(), poolSize));\n    }\n\n    return sizePools.get(particleSize)!;\n  }\n\n  private createParticle(): Particle {\n    return {\n      id: `particle-${Date.now()}-${Math.random()}`,\n      active: false,\n      position: { x: 0, y: 0 },\n      velocity: { x: 0, y: 0 },\n      acceleration: { x: 0, y: 0 },\n      size: 1,\n      color: '#ffffff',\n      opacity: 1,\n      life: 1,\n      maxLife: 1,\n      reset(): void {\n        this.active = false;\n        this.position = { x: 0, y: 0 };\n        this.velocity = { x: 0, y: 0 };\n        this.acceleration = { x: 0, y: 0 };\n        this.opacity = 1;\n        this.life = this.maxLife;\n      },\n    };\n  }\n\n  public createParticleSystem(id: string, config: ParticleSystemConfig): void {\n    const pool = this.getOrCreatePool(id, config.size.max, config.quality);\n    const geometry = new BufferGeometry();\n    const material = this.createParticleMaterial(config);\n    const points = new Points(geometry, material);\n\n    const system = new ParticleSystem(pool, config, points, this.scene);\n    this.systems.set(id, system);\n    this.scene.add(points);\n  }\n\n  private createParticleMaterial(config: ParticleSystemConfig): ShaderMaterial {\n    return new ShaderMaterial({\n      uniforms: {\n        time: { value: 0 },\n        color: { value: new Color(config.color as string) },\n      },\n      vertexShader: `\n        attribute float size;\n        attribute float opacity;\n        attribute vec3 color;\n        varying float vOpacity;\n        varying vec3 vColor;\n        \n        void main() {\n          vOpacity = opacity;\n          vColor = color;\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_PointSize = size * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        varying float vOpacity;\n        varying vec3 vColor;\n        \n        void main() {\n          vec2 xy = gl_PointCoord.xy - vec2(0.5);\n          float r = length(xy);\n          if (r > 0.5) discard;\n          \n          float glow = exp(-r * 3.0);\n          gl_FragColor = vec4(vColor, vOpacity * glow);\n        }\n      `,\n      transparent: true,\n      blending: config.blendMode === 'additive' ? AdditiveBlending : undefined,\n      depthWrite: false,\n    });\n  }\n\n  public update(deltaTime: number): void {\n    this.frameCount++;\n\n    // Skip frames for low priority systems when under performance pressure\n    const shouldUpdate = this.frameCount % this.FRAME_SKIP_THRESHOLD === 0;\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.systems.forEach(system => system.update(deltaTime));\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  private cleanupInactiveSystems(): void {\n    const now = Date.now();\n    this.systems.forEach((system, id) => {\n      if (!system.hasActiveParticles() && now - system.getLastUpdateTime() > 5000) {\n        this.removeSystem(id);\n      }\n    });\n  }\n\n  public removeSystem(id: string): void {\n    const system = this.systems.get(id);\n    if (system) {\n      system.cleanup();\n      this.systems.delete(id);\n\n      // Clean up size-based pools\n      const sizePools = this.particlePools.get(id);\n      if (sizePools) {\n        sizePools.forEach(pool => pool.clear());\n        this.particlePools.delete(id);\n      }\n    }\n  }\n\n  public cleanup(): void {\n    this.systems.forEach(system => system.cleanup());\n    this.systems.clear();\n    this.particlePools.forEach(sizePools => {\n      sizePools.forEach(pool => pool.clear());\n    });\n    this.particlePools.clear();\n    this.renderer.dispose();\n    this.scene.clear();\n  }\n}\n\nclass ParticleSystem {\n  private pool: EntityPool<Particle>;\n  private config: ParticleSystemConfig;\n  private points: Points;\n  private scene: Scene;\n  private particles: Set<Particle>;\n  private lastSpawnTime: number;\n  private lastUpdateTime: number;\n\n  constructor(\n    pool: EntityPool<Particle>,\n    config: ParticleSystemConfig,\n    points: Points,\n    scene: Scene\n  ) {\n    this.pool = pool;\n    this.config = config;\n    this.points = points;\n    this.scene = scene;\n    this.particles = new Set();\n    this.lastSpawnTime = 0;\n    this.lastUpdateTime = Date.now();\n  }\n\n  public update(deltaTime: number): void {\n    this.lastUpdateTime = Date.now();\n    this.spawnParticles(deltaTime);\n    this.updateParticles(deltaTime);\n    this.updateGeometry();\n  }\n\n  private spawnParticles(deltaTime: number): void {\n    const now = performance.now();\n    const spawnInterval = 1000 / this.config.spawnRate;\n\n    while (\n      now - this.lastSpawnTime >= spawnInterval &&\n      this.particles.size < this.config.maxParticles\n    ) {\n      this.spawnParticle();\n      this.lastSpawnTime += spawnInterval;\n    }\n  }\n\n  private spawnParticle(): void {\n    const particle = this.pool.acquire();\n    if (!particle) {\n      return;\n    }\n\n    particle.active = true;\n    particle.position = { ...this.config.position };\n    particle.velocity = {\n      x:\n        this.config.initialVelocity.min.x +\n        Math.random() * (this.config.initialVelocity.max.x - this.config.initialVelocity.min.x),\n      y:\n        this.config.initialVelocity.min.y +\n        Math.random() * (this.config.initialVelocity.max.y - this.config.initialVelocity.min.y),\n    };\n    particle.acceleration = { ...this.config.acceleration };\n    particle.size =\n      this.config.size.min + Math.random() * (this.config.size.max - this.config.size.min);\n    particle.life =\n      this.config.life.min + Math.random() * (this.config.life.max - this.config.life.min);\n    particle.maxLife = particle.life;\n\n    this.particles.add(particle);\n  }\n\n  private updateParticles(deltaTime: number): void {\n    this.particles.forEach(particle => {\n      particle.life -= deltaTime;\n      if (particle.life <= 0) {\n        this.particles.delete(particle);\n        this.pool.release(particle);\n        return;\n      }\n\n      particle.velocity.x += particle.acceleration.x * deltaTime;\n      particle.velocity.y += particle.acceleration.y * deltaTime;\n      particle.position.x += particle.velocity.x * deltaTime;\n      particle.position.y += particle.velocity.y * deltaTime;\n      particle.opacity = particle.life / particle.maxLife;\n    });\n  }\n\n  private updateGeometry(): void {\n    const positions = new Float32Array(this.particles.size * 3);\n    const sizes = new Float32Array(this.particles.size);\n    const opacities = new Float32Array(this.particles.size);\n    const colors = new Float32Array(this.particles.size * 3);\n\n    let i = 0;\n    this.particles.forEach(particle => {\n      positions[i * 3] = particle.position.x;\n      positions[i * 3 + 1] = particle.position.y;\n      positions[i * 3 + 2] = 0;\n\n      sizes[i] = particle.size;\n      opacities[i] = particle.opacity;\n\n      const color = new Color(particle.color);\n      colors[i * 3] = color.r;\n      colors[i * 3 + 1] = color.g;\n      colors[i * 3 + 2] = color.b;\n\n      i++;\n    });\n\n    const geometry = this.points.geometry as BufferGeometry;\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    geometry.setAttribute('size', new BufferAttribute(sizes, 1));\n    geometry.setAttribute('opacity', new BufferAttribute(opacities, 1));\n    geometry.setAttribute('color', new BufferAttribute(colors, 3));\n  }\n\n  public hasActiveParticles(): boolean {\n    return this.particles.size > 0;\n  }\n\n  public getLastUpdateTime(): number {\n    return this.lastUpdateTime;\n  }\n\n  public cleanup(): void {\n    this.particles.forEach(particle => {\n      this.pool.release(particle);\n    });\n    this.particles.clear();\n    this.scene.remove(this.points);\n    this.points.geometry.dispose();\n    (this.points.material as ShaderMaterial).dispose();\n  }\n}\n\n// Export singleton instance\nexport const particleSystemManager = ParticleSystemManager.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/exploration/ReconShipManagerImpl.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":336,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9979,9982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9979,9982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'severityLevels' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":373,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":373,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport { Position } from '../../types/core/GameTypes';\nimport { CommonShipCapabilities } from '../../types/ships/CommonShipTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { combatManager } from '../combat/combatManager';\n\ninterface Anomaly {\n  id: string;\n  type: 'artifact' | 'signal' | 'phenomenon';\n  severity: 'low' | 'medium' | 'high';\n  description: string;\n  investigated: boolean;\n}\n\ninterface Threat {\n  id: string;\n  position: Position;\n  severity: number;\n  type: string;\n}\n\ninterface ReconShipEvents {\n  shipRegistered: { shipId: string };\n  shipUnregistered: { shipId: string };\n  taskAssigned: { shipId: string; task: ExplorationTask };\n  taskCompleted: { shipId: string; task: ExplorationTask };\n  techBonusesUpdated: {\n    shipId: string;\n    bonuses: {\n      scanSpeed: number;\n      stealthEfficiency: number;\n      detectionRange: number;\n    };\n  };\n  stealthToggled: { shipId: string; active: boolean };\n  shipStatusUpdated: { shipId: string; status: ReconShip['status'] };\n  threatDetected: { shipId: string; threatLevel: number; position: Position };\n  anomalyDiscovered: { shipId: string; anomaly: Anomaly; position: Position };\n}\n\ninterface ReconShip {\n  id: string;\n  name: string;\n  type: 'AC27G' | 'PathFinder' | 'VoidSeeker';\n  status: 'idle' | 'scanning' | 'investigating' | 'returning';\n  targetSector?: string;\n  experience: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  efficiency: number;\n  position: Position;\n  capabilities: CommonShipCapabilities;\n  stealth: {\n    active: boolean;\n    level: number;\n    cooldown: number;\n  };\n  sensors: {\n    range: number;\n    accuracy: number;\n    anomalyDetection: number;\n  };\n  discoveries: {\n    mappedSectors: number;\n    anomaliesFound: number;\n    resourcesLocated: number;\n  };\n  techBonuses?: {\n    scanSpeed: number;\n    stealthEfficiency: number;\n    detectionRange: number;\n  };\n}\n\ninterface ExplorationTask {\n  id: string;\n  type: 'explore' | 'investigate' | 'evade';\n  target: {\n    id: string;\n    position: Position;\n  };\n  priority: number;\n  assignedAt: number;\n  specialization: 'mapping' | 'anomaly' | 'resource';\n  status: 'queued' | 'in-progress' | 'completed' | 'failed';\n  progress?: number;\n  threatLevel?: number;\n}\n\nexport class ReconShipManagerImpl extends EventEmitter<ReconShipEvents> {\n  private ships: Map<string, ReconShip> = new Map();\n  private tasks: Map<string, ExplorationTask> = new Map();\n  private sectors: Map<\n    string,\n    {\n      id: string;\n      position: Position;\n      explored: boolean;\n      anomalies: Anomaly[];\n      resources: number;\n    }\n  > = new Map();\n\n  public registerShip(ship: ReconShip): void {\n    if (ship.capabilities.canScan) {\n      this.ships.set(ship.id, ship);\n\n      // Emit events\n      this.emit('shipRegistered', { shipId: ship.id });\n      moduleEventBus.emit({\n        type: 'MODULE_ACTIVATED',\n        moduleId: ship.id,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n        data: { ship },\n      });\n    }\n  }\n\n  public unregisterShip(shipId: string): void {\n    if (this.ships.has(shipId)) {\n      this.ships.delete(shipId);\n      this.tasks.delete(shipId);\n\n      // Emit events\n      this.emit('shipUnregistered', { shipId });\n      moduleEventBus.emit({\n        type: 'MODULE_DEACTIVATED',\n        moduleId: shipId,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  public assignExplorationTask(\n    shipId: string,\n    sectorId: string,\n    position: Position,\n    specialization: 'mapping' | 'anomaly' | 'resource'\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (!ship || !ship.capabilities.canScan) {\n      return;\n    }\n\n    // Check for threats before assigning task\n    const threats = this.getNearbyThreats(position, ship.sensors.range);\n    const threatLevel = this.calculateThreatLevel(threats, ship);\n\n    if (threatLevel > 0.7) {\n      // High threat - initiate evasion\n      this.assignEvasionTask(shipId, position, threats);\n      return;\n    }\n\n    const task: ExplorationTask = {\n      id: `explore-${sectorId}`,\n      type: threatLevel > 0.3 ? 'investigate' : 'explore',\n      target: {\n        id: sectorId,\n        position,\n      },\n      priority: this.getPriorityForSpecialization(specialization),\n      assignedAt: Date.now(),\n      specialization,\n      status: 'queued',\n      threatLevel,\n    };\n\n    this.tasks.set(shipId, task);\n    this.updateShipStatus(shipId, 'scanning');\n\n    // Emit events\n    this.emit('taskAssigned', { shipId, task });\n    moduleEventBus.emit({\n      type: 'AUTOMATION_STARTED',\n      moduleId: shipId,\n      moduleType: 'radar' as ModuleType,\n      timestamp: Date.now(),\n      data: { task },\n    });\n  }\n\n  private assignEvasionTask(shipId: string, position: Position, threats: Threat[]): void {\n    const ship = this.ships.get(shipId);\n    if (!ship) return;\n\n    // Calculate safe position away from threats\n    const safePosition = this.calculateSafePosition(position, threats);\n\n    const task: ExplorationTask = {\n      id: `evade-${Date.now()}`,\n      type: 'evade',\n      target: {\n        id: 'safe-zone',\n        position: safePosition,\n      },\n      priority: 10, // Highest priority for evasion\n      assignedAt: Date.now(),\n      specialization: 'mapping',\n      status: 'queued',\n      threatLevel: 1,\n    };\n\n    this.tasks.set(shipId, task);\n    this.updateShipStatus(shipId, 'returning');\n    this.toggleShipStealth(shipId, true);\n\n    this.emit('taskAssigned', { shipId, task });\n  }\n\n  private calculateSafePosition(position: Position, threats: Threat[]): Position {\n    // Calculate vector away from threats\n    const escapeVector = threats.reduce(\n      (vec, threat) => {\n        const dx = position.x - threat.position.x;\n        const dy = position.y - threat.position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        return {\n          x: vec.x + (dx / distance) * threat.severity,\n          y: vec.y + (dy / distance) * threat.severity,\n        };\n      },\n      { x: 0, y: 0 }\n    );\n\n    // Normalize and scale\n    const magnitude = Math.sqrt(escapeVector.x * escapeVector.x + escapeVector.y * escapeVector.y);\n    const safeDistance = 500; // Base safe distance\n\n    return {\n      x: position.x + (escapeVector.x / magnitude) * safeDistance,\n      y: position.y + (escapeVector.y / magnitude) * safeDistance,\n    };\n  }\n\n  public completeTask(shipId: string): void {\n    const task = this.tasks.get(shipId);\n    const ship = this.ships.get(shipId);\n\n    if (task && ship) {\n      // Update sector data\n      const sector = this.sectors.get(task.target.id);\n      if (sector) {\n        sector.explored = true;\n        ship.discoveries.mappedSectors++;\n\n        // Enhanced specialization handling\n        if (task.specialization === 'anomaly') {\n          const anomalies = this.generateAnomalies(ship.sensors.anomalyDetection);\n          sector.anomalies = anomalies;\n          ship.discoveries.anomaliesFound += anomalies.length;\n\n          // Emit anomaly discoveries\n          anomalies.forEach(anomaly => {\n            this.emit('anomalyDiscovered', {\n              shipId,\n              anomaly,\n              position: task.target.position,\n            });\n          });\n\n          // Emit mission event\n          moduleEventBus.emit({\n            type: 'MISSION_COMPLETED',\n            moduleId: shipId,\n            moduleType: 'radar' as ModuleType,\n            timestamp: Date.now(),\n            data: {\n              type: 'anomaly',\n              sector: task.target.id,\n              importance: anomalies.some(a => a.severity === 'high')\n                ? 'high'\n                : anomalies.some(a => a.severity === 'medium')\n                  ? 'medium'\n                  : 'low',\n              description: `Discovered ${anomalies.length} anomalies in ${task.target.id}`,\n              xpGained: this.calculateExperienceGain(task, ship),\n              anomalyDetails: anomalies.map(a => ({\n                type: a.type,\n                severity: a.severity,\n                investigated: a.investigated,\n              })),\n            },\n          });\n        } else if (task.specialization === 'resource') {\n          sector.resources = Math.floor(Math.random() * 5) + 1;\n          ship.discoveries.resourcesLocated += sector.resources;\n\n          // Emit mission event\n          moduleEventBus.emit({\n            type: 'MISSION_COMPLETED',\n            moduleId: shipId,\n            moduleType: 'radar' as ModuleType,\n            timestamp: Date.now(),\n            data: {\n              type: 'discovery',\n              sector: task.target.id,\n              importance: sector.resources > 3 ? 'high' : sector.resources > 1 ? 'medium' : 'low',\n              description: `Located ${sector.resources} resource deposits in ${task.target.id}`,\n              xpGained: this.calculateExperienceGain(task, ship),\n              resourcesFound: [{ type: 'Unknown', amount: sector.resources }],\n            },\n          });\n        }\n      }\n\n      // Enhanced experience calculation\n      const experienceGained = this.calculateExperienceGain(task, ship);\n      ship.experience += experienceGained;\n\n      // Apply tech bonuses based on experience\n      this.updateTechBonuses(ship);\n\n      this.tasks.delete(shipId);\n      this.updateShipStatus(shipId, 'returning');\n\n      // Emit events\n      this.emit('taskCompleted', { shipId, task });\n      moduleEventBus.emit({\n        type: 'AUTOMATION_CYCLE_COMPLETE',\n        moduleId: shipId,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n        data: {\n          task,\n          discoveries: ship.discoveries,\n          experienceGained,\n          heatMapValue: this.calculateHeatMapValue(sector),\n        },\n      });\n    }\n  }\n\n  private calculateHeatMapValue(sector: any): number {\n    if (!sector) return 0;\n\n    let heatValue = 0;\n\n    // Resource potential contribution (40%)\n    heatValue += (sector.resources || 0) * 0.4;\n\n    // Anomaly contribution (30%)\n    if (sector.anomalies) {\n      const anomalyHeat = sector.anomalies.reduce((sum: number, anomaly: Anomaly) => {\n        return (\n          sum + (anomaly.severity === 'high' ? 0.3 : anomaly.severity === 'medium' ? 0.2 : 0.1)\n        );\n      }, 0);\n      heatValue += anomalyHeat;\n    }\n\n    // Habitability contribution (30%)\n    if (sector.habitabilityScore) {\n      heatValue += sector.habitabilityScore * 0.3;\n    }\n\n    // Age decay\n    if (sector.lastScanned) {\n      const hoursSinceLastScan = (Date.now() - sector.lastScanned) / (1000 * 60 * 60);\n      const ageFactor = Math.max(0, 1 - hoursSinceLastScan / 168); // 168 hours = 1 week\n      heatValue *= ageFactor;\n    }\n\n    return Math.min(1, heatValue);\n  }\n\n  private generateAnomalies(detectionSkill: number): Anomaly[] {\n    const count = Math.floor(Math.random() * 3 * detectionSkill) + 1;\n    const anomalies: Anomaly[] = [];\n    const anomalyTypes = ['artifact', 'signal', 'phenomenon'] as const;\n    const severityLevels = ['high', 'medium', 'low'] as const;\n\n    for (let i = 0; i < count; i++) {\n      const type = anomalyTypes[Math.floor(Math.random() * anomalyTypes.length)];\n      const severity = Math.random() < 0.2 ? 'high' : Math.random() < 0.5 ? 'medium' : 'low';\n\n      anomalies.push({\n        id: `anomaly-${Date.now()}-${i}`,\n        type,\n        severity,\n        description: this.generateAnomalyDescription(type, severity),\n        investigated: false,\n      });\n    }\n\n    return anomalies;\n  }\n\n  private generateAnomalyDescription(\n    type: 'artifact' | 'signal' | 'phenomenon',\n    severity: 'low' | 'medium' | 'high'\n  ): string {\n    const descriptions = {\n      artifact: {\n        high: 'Ancient technological marvel of immense power',\n        medium: 'Mysterious alien artifacts with unknown purpose',\n        low: 'Scattered remnants of past civilizations',\n      },\n      signal: {\n        high: 'Powerful energy signature of unknown origin',\n        medium: 'Recurring patterns in subspace frequencies',\n        low: 'Faint echoes of distant transmissions',\n      },\n      phenomenon: {\n        high: 'Dangerous spatial anomaly requiring immediate attention',\n        medium: 'Unusual gravitational fluctuations detected',\n        low: 'Minor disturbances in local space-time',\n      },\n    } as const;\n\n    return descriptions[type][severity];\n  }\n\n  private calculateExperienceGain(task: ExplorationTask, ship: ReconShip): number {\n    const baseXP = 100;\n    const timeFactor = (Date.now() - task.assignedAt) / 1000 / 60; // Minutes\n\n    // Specialization bonus\n    const specializationBonus = task.specialization === ship.specialization ? 1.5 : 1.2;\n\n    // Threat bonus\n    const threatBonus = task.threatLevel ? 1 + task.threatLevel : 1;\n\n    // Efficiency bonus\n    const efficiencyBonus = ship.efficiency;\n\n    // Discovery bonus\n    const discoveryBonus =\n      ship.discoveries.anomaliesFound * 0.1 + ship.discoveries.resourcesLocated * 0.05;\n\n    return Math.floor(\n      baseXP *\n        timeFactor *\n        specializationBonus *\n        threatBonus *\n        efficiencyBonus *\n        (1 + discoveryBonus)\n    );\n  }\n\n  private updateTechBonuses(ship: ReconShip): void {\n    const experienceLevel = Math.floor(ship.experience / 1000);\n    const bonuses = {\n      scanSpeed: 1 + experienceLevel * 0.1,\n      stealthEfficiency: 1 + experienceLevel * 0.15,\n      detectionRange: 1 + experienceLevel * 0.05,\n    };\n\n    this.emit('techBonusesUpdated', { shipId: ship.id, bonuses });\n  }\n\n  public updateShipTechBonuses(\n    shipId: string,\n    bonuses: { scanSpeed: number; stealthEfficiency: number; detectionRange: number }\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.techBonuses = bonuses;\n      this.emit('techBonusesUpdated', { shipId, bonuses });\n    }\n  }\n\n  public toggleShipStealth(shipId: string, active: boolean): void {\n    const ship = this.ships.get(shipId);\n    if (ship && ship.stealth.cooldown <= 0) {\n      ship.stealth.active = active;\n      this.emit('stealthToggled', { shipId, active: ship.stealth.active });\n    }\n  }\n\n  private updateShipStatus(\n    shipId: string,\n    status: 'idle' | 'scanning' | 'investigating' | 'returning'\n  ): void {\n    const ship = this.ships.get(shipId);\n    if (ship) {\n      ship.status = status;\n\n      // Emit events\n      this.emit('shipStatusUpdated', { shipId, status });\n      moduleEventBus.emit({\n        type: 'STATUS_CHANGED',\n        moduleId: shipId,\n        moduleType: 'radar' as ModuleType,\n        timestamp: Date.now(),\n        data: { status },\n      });\n    }\n  }\n\n  private getPriorityForSpecialization(specialization: 'mapping' | 'anomaly' | 'resource'): number {\n    switch (specialization) {\n      case 'anomaly':\n        return 3;\n      case 'resource':\n        return 2;\n      case 'mapping':\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  // Add method to get ship efficiency with tech bonuses\n  public getShipEfficiency(shipId: string): number {\n    const ship = this.ships.get(shipId);\n    if (!ship) {\n      return 0;\n    }\n\n    const baseEfficiency = ship.efficiency;\n    const techBonus = ship.techBonuses?.scanSpeed || 1;\n\n    return baseEfficiency * techBonus;\n  }\n\n  // Update method for periodic tasks\n  public update(deltaTime: number): void {\n    this.ships.forEach(ship => {\n      // Update stealth cooldown\n      if (ship.stealth.cooldown > 0) {\n        ship.stealth.cooldown = Math.max(0, ship.stealth.cooldown - deltaTime);\n      }\n\n      // Apply tech bonuses to sensor range\n      if (ship.techBonuses) {\n        ship.sensors.range *= ship.techBonuses.detectionRange;\n      }\n\n      // Handle automatic stealth activation near threats\n      if (this.isNearThreat(ship) && !ship.stealth.active && ship.stealth.cooldown <= 0) {\n        this.toggleShipStealth(ship.id, true);\n      }\n    });\n  }\n\n  private isNearThreat(ship: ReconShip): boolean {\n    // Get threats within ship's sensor range\n    const threats = combatManager.getThreatsInRange(ship.position, ship.sensors.range);\n\n    if (threats.length === 0) {\n      return false;\n    }\n\n    // Calculate threat level based on proximity and severity\n    const threatLevel = threats.reduce((total, threat) => {\n      const distance = Math.sqrt(\n        Math.pow(threat.position.x - ship.position.x, 2) +\n          Math.pow(threat.position.y - ship.position.y, 2)\n      );\n\n      // Scale threat by distance and severity\n      const distanceFactor = 1 - Math.min(distance / ship.sensors.range, 1);\n      const severityFactor =\n        threat.severity === 'high' ? 1 : threat.severity === 'medium' ? 0.6 : 0.3;\n\n      // Apply sensor accuracy to detection reliability\n      const detectionChance = ship.sensors.accuracy * (ship.techBonuses?.detectionRange || 1);\n\n      return total + distanceFactor * severityFactor * detectionChance;\n    }, 0);\n\n    // Return true if threat level exceeds threshold\n    // Scale threshold based on ship's stealth capabilities\n    const stealthFactor = (ship.stealth.level / 100) * (ship.techBonuses?.stealthEfficiency || 1);\n    const baseThreshold = 0.3; // Base threshold for threat response\n\n    return threatLevel > baseThreshold * (1 + stealthFactor);\n  }\n\n  private getNearbyThreats(position: Position, range: number): Threat[] {\n    return combatManager.getThreatsInRange(position, range).map(threat => ({\n      id: threat.id,\n      position: threat.position,\n      severity: threat.severity === 'high' ? 1 : threat.severity === 'medium' ? 0.6 : 0.3,\n      type: threat.type,\n    }));\n  }\n\n  private calculateThreatLevel(threats: Threat[], ship: ReconShip): number {\n    if (threats.length === 0) return 0;\n\n    return threats.reduce((total, threat) => {\n      const distance = Math.sqrt(\n        Math.pow(threat.position.x - ship.position.x, 2) +\n          Math.pow(threat.position.y - ship.position.y, 2)\n      );\n\n      const distanceFactor = 1 - Math.min(distance / ship.sensors.range, 1);\n      const detectionChance = ship.sensors.accuracy * (ship.techBonuses?.detectionRange || 1);\n\n      return total + distanceFactor * threat.severity * detectionChance;\n    }, 0);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/factions/FactionRelationshipManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/factions/factionManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/AsteroidFieldManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/AutomationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/GameLoopManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":404,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":404,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[10783,11028],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEventType, moduleEventBus } from '../../lib/modules/ModuleEvents';\n\n/**\n * Update priority levels\n */\nexport enum UpdatePriority {\n  CRITICAL = 0, // Run every frame, no matter what (physics, core game state)\n  HIGH = 1, // Run most frames, can be skipped occasionally (AI, combat)\n  NORMAL = 2, // Run regularly, can be skipped more often (resource updates)\n  LOW = 3, // Run occasionally (visual effects, non-critical updates)\n  BACKGROUND = 4, // Run when there's spare time (analytics, cleanup)\n}\n\n/**\n * Update callback type\n */\nexport type UpdateCallback = (deltaTime: number, elapsedTime: number) => void;\n\n/**\n * Update registration interface\n */\nexport interface UpdateRegistration {\n  id: string;\n  callback: UpdateCallback;\n  priority: UpdatePriority;\n  interval?: number; // Optional interval in ms (for fixed timestep updates)\n  lastUpdate?: number; // Last time this was updated\n}\n\n/**\n * Game loop statistics\n */\nexport interface GameLoopStats {\n  fps: number;\n  frameTime: number;\n  updateTime: number;\n  renderTime: number;\n  idleTime: number;\n  elapsedTime: number;\n  frameCount: number;\n  skippedFrames: number;\n  priorityStats: Record<\n    UpdatePriority,\n    {\n      count: number;\n      totalTime: number;\n      averageTime: number;\n    }\n  >;\n}\n\n/**\n * Game loop manager configuration\n */\nexport interface GameLoopConfig {\n  targetFPS: number;\n  maxDeltaTime: number;\n  priorityThrottling: boolean;\n  fixedTimestep: boolean;\n  throttlePriorities: UpdatePriority[];\n  statsInterval: number;\n  enableStats: boolean;\n}\n\n/**\n * Game loop manager for centralized timing and updates\n */\nexport class GameLoopManager {\n  private updates: Map<string, UpdateRegistration> = new Map();\n  private running: boolean = false;\n  private lastFrameTime: number = 0;\n  private frameCount: number = 0;\n  private skippedFrames: number = 0;\n  private elapsedTime: number = 0;\n  private animationFrameId: number | null = null;\n  private statsInterval: number | null = null;\n  private stats: GameLoopStats;\n  private config: GameLoopConfig;\n\n  constructor(config: Partial<GameLoopConfig> = {}) {\n    // Default configuration\n    this.config = {\n      targetFPS: 60,\n      maxDeltaTime: 1000 / 30, // Cap at 30 FPS equivalent\n      priorityThrottling: true,\n      fixedTimestep: false,\n      throttlePriorities: [UpdatePriority.LOW, UpdatePriority.BACKGROUND],\n      statsInterval: 1000, // 1 second\n      enableStats: true,\n      ...config,\n    };\n\n    // Initialize stats\n    this.stats = {\n      fps: 0,\n      frameTime: 0,\n      updateTime: 0,\n      renderTime: 0,\n      idleTime: 0,\n      elapsedTime: 0,\n      frameCount: 0,\n      skippedFrames: 0,\n      priorityStats: {\n        [UpdatePriority.CRITICAL]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.HIGH]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.NORMAL]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.LOW]: { count: 0, totalTime: 0, averageTime: 0 },\n        [UpdatePriority.BACKGROUND]: { count: 0, totalTime: 0, averageTime: 0 },\n      },\n    };\n  }\n\n  /**\n   * Start the game loop\n   */\n  public start(): void {\n    if (this.running) {\n      return;\n    }\n\n    this.running = true;\n    this.lastFrameTime = performance.now();\n    this.frameCount = 0;\n    this.skippedFrames = 0;\n    this.elapsedTime = 0;\n\n    // Start the game loop\n    this.animationFrameId = requestAnimationFrame(this.gameLoop);\n\n    // Start stats reporting if enabled\n    if (this.config.enableStats) {\n      this.statsInterval = window.setInterval(() => {\n        this.reportStats();\n      }, this.config.statsInterval);\n    }\n\n    // Emit game loop started event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_STARTED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { config: this.config },\n    });\n  }\n\n  /**\n   * Stop the game loop\n   */\n  public stop(): void {\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n\n    // Stop the animation frame\n    if (this.animationFrameId !== null) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n\n    // Stop stats reporting\n    if (this.statsInterval !== null) {\n      clearInterval(this.statsInterval);\n      this.statsInterval = null;\n    }\n\n    // Emit game loop stopped event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_STOPPED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { stats: this.stats },\n    });\n  }\n\n  /**\n   * Register an update callback\n   */\n  public registerUpdate(\n    id: string,\n    callback: UpdateCallback,\n    priority: UpdatePriority = UpdatePriority.NORMAL,\n    interval?: number\n  ): void {\n    this.updates.set(id, {\n      id,\n      callback,\n      priority,\n      interval,\n      lastUpdate: performance.now(),\n    });\n\n    // Emit update registered event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_UPDATE_REGISTERED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { id, priority, interval },\n    });\n  }\n\n  /**\n   * Unregister an update callback\n   */\n  public unregisterUpdate(id: string): void {\n    if (this.updates.has(id)) {\n      this.updates.delete(id);\n\n      // Emit update unregistered event\n      moduleEventBus.emit({\n        type: 'GAME_LOOP_UPDATE_UNREGISTERED' as ModuleEventType,\n        moduleId: 'game-loop-manager',\n        moduleType: 'resource-manager',\n        timestamp: Date.now(),\n        data: { id },\n      });\n    }\n  }\n\n  /**\n   * Get the current game loop stats\n   */\n  public getStats(): GameLoopStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Update the game loop configuration\n   */\n  public updateConfig(config: Partial<GameLoopConfig>): void {\n    this.config = {\n      ...this.config,\n      ...config,\n    };\n\n    // Emit config updated event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_CONFIG_UPDATED' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: { config: this.config },\n    });\n  }\n\n  /**\n   * The main game loop\n   */\n  private gameLoop = (timestamp: number): void => {\n    if (!this.running) {\n      return;\n    }\n\n    // Schedule the next frame\n    this.animationFrameId = requestAnimationFrame(this.gameLoop);\n\n    // Calculate delta time\n    const now = timestamp;\n    let deltaTime = now - this.lastFrameTime;\n    this.lastFrameTime = now;\n\n    // Cap delta time to prevent spiral of death\n    if (deltaTime > this.config.maxDeltaTime) {\n      deltaTime = this.config.maxDeltaTime;\n      this.skippedFrames++;\n    }\n\n    // Update elapsed time\n    this.elapsedTime += deltaTime;\n    this.frameCount++;\n\n    // Update frame time stats\n    this.stats.frameTime = deltaTime;\n\n    // Start update timing\n    const updateStartTime = performance.now();\n\n    // Process updates by priority\n    this.processUpdates(deltaTime, this.elapsedTime);\n\n    // End update timing\n    const updateEndTime = performance.now();\n    this.stats.updateTime = updateEndTime - updateStartTime;\n\n    // Calculate idle time (time left in the frame)\n    const targetFrameTime = 1000 / this.config.targetFPS;\n    const currentFrameTime = performance.now() - now;\n    this.stats.idleTime = Math.max(0, targetFrameTime - currentFrameTime);\n\n    // Update FPS stats\n    this.stats.fps = 1000 / deltaTime;\n    this.stats.elapsedTime = this.elapsedTime;\n    this.stats.frameCount = this.frameCount;\n    this.stats.skippedFrames = this.skippedFrames;\n  };\n\n  /**\n   * Process all registered updates\n   */\n  private processUpdates(deltaTime: number, elapsedTime: number): void {\n    // Group updates by priority\n    const priorityGroups: Map<UpdatePriority, UpdateRegistration[]> = new Map();\n\n    for (const update of this.updates.values()) {\n      if (!priorityGroups.has(update.priority)) {\n        priorityGroups.set(update.priority, []);\n      }\n      priorityGroups.get(update.priority)!.push(update);\n    }\n\n    // Process each priority group\n    for (\n      let priority = UpdatePriority.CRITICAL;\n      priority <= UpdatePriority.BACKGROUND;\n      priority++\n    ) {\n      const updates = priorityGroups.get(priority) || [];\n\n      // Skip throttled priorities if enabled\n      if (\n        this.config.priorityThrottling &&\n        this.config.throttlePriorities.includes(priority) &&\n        this.frameCount % (priority + 1) !== 0\n      ) {\n        continue;\n      }\n\n      // Process all updates in this priority group\n      for (const update of updates) {\n        // Skip if interval is set and not enough time has passed\n        if (update.interval && update.lastUpdate) {\n          const timeSinceLastUpdate = elapsedTime - update.lastUpdate;\n          if (timeSinceLastUpdate < update.interval) {\n            continue;\n          }\n        }\n\n        // Update the last update time\n        update.lastUpdate = elapsedTime;\n\n        // Measure update time\n        const startTime = performance.now();\n\n        try {\n          // Call the update callback\n          update.callback(deltaTime, elapsedTime);\n        } catch (error) {\n          console.error(`Error in update ${update.id}:`, error);\n\n          // Emit error event\n          moduleEventBus.emit({\n            type: 'ERROR_OCCURRED' as ModuleEventType,\n            moduleId: 'game-loop-manager',\n            moduleType: 'resource-manager',\n            timestamp: Date.now(),\n            data: {\n              error,\n              updateId: update.id,\n              priority: update.priority,\n            },\n          });\n        }\n\n        // Update stats\n        const endTime = performance.now();\n        const updateTime = endTime - startTime;\n\n        this.stats.priorityStats[priority].count++;\n        this.stats.priorityStats[priority].totalTime += updateTime;\n        this.stats.priorityStats[priority].averageTime =\n          this.stats.priorityStats[priority].totalTime / this.stats.priorityStats[priority].count;\n      }\n    }\n  }\n\n  /**\n   * Report game loop stats\n   */\n  private reportStats(): void {\n    // Calculate average FPS\n    const avgFps = this.frameCount / (this.config.statsInterval / 1000);\n\n    // Reset frame count for next interval\n    this.frameCount = 0;\n\n    // Emit stats event\n    moduleEventBus.emit({\n      type: 'GAME_LOOP_STATS' as ModuleEventType,\n      moduleId: 'game-loop-manager',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: {\n        ...this.stats,\n        avgFps,\n      },\n    });\n\n    // Log stats if in development\n    if (process.env.NODE_ENV === 'development') {\n      console.debug('[GameLoop] Stats:', {\n        fps: avgFps.toFixed(2),\n        updateTime: this.stats.updateTime.toFixed(2) + 'ms',\n        idleTime: this.stats.idleTime.toFixed(2) + 'ms',\n        skippedFrames: this.stats.skippedFrames,\n      });\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.stop();\n    this.updates.clear();\n  }\n}\n\n// Export singleton instance\nexport const gameLoopManager = new GameLoopManager();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/ParticleSystemManager.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1112,1199],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\nimport { EntityPool } from '../../lib/optimization/EntityPool';\nimport { Position } from '../../types/core/GameTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\ninterface Particle {\n  id: string;\n  active: boolean;\n  position: Position;\n  velocity: Position;\n  acceleration: Position;\n  size: number;\n  color: string;\n  opacity: number;\n  life: number;\n  maxLife: number;\n  reset(): void;\n}\n\ninterface ParticleSystemEvents {\n  particleSpawned: { particle: Particle };\n  particleUpdated: { particle: Particle };\n  particleDied: { particle: Particle };\n  systemUpdated: { activeCount: number };\n}\n\n/**\n * Manages particle systems with efficient pooling\n */\nexport class ParticleSystemManager extends EventEmitter<ParticleSystemEvents> {\n  private particlePool: EntityPool<Particle>;\n  private systems: Map<string, ParticleSystem> = new Map();\n  private lastUpdate: number = 0;\n\n  constructor(initialPoolSize: number = 1000) {\n    super();\n    this.particlePool = new EntityPool<Particle>(() => this.createParticle(), initialPoolSize);\n\n    // Debug logging\n    console.debug(`[ParticleSystemManager] Initialized with pool size ${initialPoolSize}`);\n  }\n\n  /**\n   * Create a new particle\n   */\n  private createParticle(): Particle {\n    return {\n      id: uuidv4(),\n      active: false,\n      position: { x: 0, y: 0 },\n      velocity: { x: 0, y: 0 },\n      acceleration: { x: 0, y: 0 },\n      size: 1,\n      color: '#ffffff',\n      opacity: 1,\n      life: 1,\n      maxLife: 1,\n      reset(): void {\n        this.active = false;\n        this.position = { x: 0, y: 0 };\n        this.velocity = { x: 0, y: 0 };\n        this.acceleration = { x: 0, y: 0 };\n        this.size = 1;\n        this.color = '#ffffff';\n        this.opacity = 1;\n        this.life = 1;\n        this.maxLife = 1;\n      },\n    };\n  }\n\n  /**\n   * Create a new particle system\n   */\n  public createSystem(config: ParticleSystemConfig): string {\n    const id = uuidv4();\n    this.systems.set(id, new ParticleSystem(this.particlePool, config));\n    return id;\n  }\n\n  /**\n   * Remove a particle system\n   */\n  public removeSystem(id: string): void {\n    const system = this.systems.get(id);\n    if (system) {\n      system.cleanup();\n      this.systems.delete(id);\n    }\n  }\n\n  /**\n   * Update all particle systems\n   */\n  public update(timestamp: number): void {\n    const deltaTime = this.lastUpdate ? (timestamp - this.lastUpdate) / 1000 : 0;\n    this.lastUpdate = timestamp;\n\n    let totalActiveParticles = 0;\n\n    this.systems.forEach(system => {\n      system.update(deltaTime);\n      totalActiveParticles += system.getActiveParticleCount();\n    });\n\n    this.emit('systemUpdated', { activeCount: totalActiveParticles });\n  }\n\n  /**\n   * Clean up all systems\n   */\n  public cleanup(): void {\n    this.systems.forEach(system => system.cleanup());\n    this.systems.clear();\n    this.particlePool.clear();\n  }\n}\n\ninterface ParticleSystemConfig {\n  maxParticles: number;\n  spawnRate: number;\n  position: Position;\n  spread: number;\n  initialVelocity: {\n    min: Position;\n    max: Position;\n  };\n  acceleration: Position;\n  size: {\n    min: number;\n    max: number;\n  };\n  life: {\n    min: number;\n    max: number;\n  };\n  color: string | string[];\n  blendMode?: 'normal' | 'additive';\n}\n\n/**\n * Individual particle system instance\n */\nclass ParticleSystem {\n  private pool: EntityPool<Particle>;\n  private config: ParticleSystemConfig;\n  private particles: Set<Particle> = new Set();\n  private timeSinceLastSpawn: number = 0;\n\n  constructor(pool: EntityPool<Particle>, config: ParticleSystemConfig) {\n    this.pool = pool;\n    this.config = config;\n  }\n\n  /**\n   * Spawn a new particle\n   */\n  private spawnParticle(): void {\n    if (this.particles.size >= this.config.maxParticles) {\n      return;\n    }\n\n    const particle = this.pool.acquire();\n    if (!particle) {\n      return;\n    }\n\n    // Initialize particle properties\n    const angle = Math.random() * Math.PI * 2;\n    const distance = Math.random() * this.config.spread;\n\n    particle.position = {\n      x: this.config.position.x + Math.cos(angle) * distance,\n      y: this.config.position.y + Math.sin(angle) * distance,\n    };\n\n    particle.velocity = {\n      x:\n        this.config.initialVelocity.min.x +\n        Math.random() * (this.config.initialVelocity.max.x - this.config.initialVelocity.min.x),\n      y:\n        this.config.initialVelocity.min.y +\n        Math.random() * (this.config.initialVelocity.max.y - this.config.initialVelocity.min.y),\n    };\n\n    particle.acceleration = { ...this.config.acceleration };\n    particle.size =\n      this.config.size.min + Math.random() * (this.config.size.max - this.config.size.min);\n\n    particle.life =\n      this.config.life.min + Math.random() * (this.config.life.max - this.config.life.min);\n    particle.maxLife = particle.life;\n\n    if (Array.isArray(this.config.color)) {\n      const colorIndex = Math.floor(Math.random() * this.config.color.length);\n      particle.color = this.config.color[colorIndex];\n    } else {\n      particle.color = this.config.color;\n    }\n\n    this.particles.add(particle);\n  }\n\n  /**\n   * Update particle system\n   */\n  public update(deltaTime: number): void {\n    // Spawn new particles\n    this.timeSinceLastSpawn += deltaTime;\n    const spawnInterval = 1 / this.config.spawnRate;\n\n    while (this.timeSinceLastSpawn >= spawnInterval) {\n      this.spawnParticle();\n      this.timeSinceLastSpawn -= spawnInterval;\n    }\n\n    // Update existing particles\n    this.particles.forEach(particle => {\n      // Update life\n      particle.life -= deltaTime;\n      if (particle.life <= 0) {\n        this.particles.delete(particle);\n        this.pool.release(particle);\n        return;\n      }\n\n      // Update physics\n      particle.velocity.x += particle.acceleration.x * deltaTime;\n      particle.velocity.y += particle.acceleration.y * deltaTime;\n      particle.position.x += particle.velocity.x * deltaTime;\n      particle.position.y += particle.velocity.y * deltaTime;\n\n      // Update opacity based on life\n      particle.opacity = particle.life / particle.maxLife;\n    });\n  }\n\n  /**\n   * Get number of active particles\n   */\n  public getActiveParticleCount(): number {\n    return this.particles.size;\n  }\n\n  /**\n   * Clean up particle system\n   */\n  public cleanup(): void {\n    this.particles.forEach(particle => {\n      this.pool.release(particle);\n    });\n    this.particles.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/ResourceManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/animationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/assetManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/gameManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/salvageManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/game/techTreeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/mining/MiningResourceIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/mining/MiningShipManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/mining/MiningShipManagerImpl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleAttachmentManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleStatusManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ModuleUpgradeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/OfficerManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":644,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":644,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17640,17643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17640,17643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\nimport { OFFICER_TRAITS, SQUAD_CONFIG, TRAINING_CONFIG } from '../../config/OfficerConfig';\nimport { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { techTreeManager } from '../../managers/game/techTreeManager';\nimport type { ModuleType } from '../../types/buildings/ModuleTypes';\nimport type {\n  OfficerManager as IOfficerManager,\n  Officer,\n  OfficerEvents,\n  OfficerRole,\n  OfficerSkills,\n  OfficerSpecialization,\n  OfficerTier,\n  Squad,\n  TrainingProgram,\n} from '../../types/officers/OfficerTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\ntype TechNodeUnlockedEvent = {\n  nodeId: string;\n  node: {\n    type: string;\n    tier: number;\n  };\n};\n\n/**\n * Implementation of the Officer Manager\n * Handles officer hiring, training, assignment, squad management, and progression\n */\nexport class OfficerManager extends EventEmitter<OfficerEvents> implements IOfficerManager {\n  private officers: Map<string, Officer> = new Map();\n  private squads: Map<string, Squad> = new Map();\n  private trainingPrograms: Map<string, TrainingProgram> = new Map();\n  private currentTier: OfficerTier = 1;\n  private moduleId: string = 'academy'; // Default module ID for academy\n\n  constructor() {\n    super();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Set up event listeners for tech tree unlocks and other relevant events\n   */\n  private setupEventListeners(): void {\n    techTreeManager.on('nodeUnlocked', (event: TechNodeUnlockedEvent) => {\n      if (event.node.type === 'academy') {\n        this.handleAcademyUpgrade(event.node.tier as OfficerTier);\n      }\n    });\n\n    moduleEventBus.subscribe('MODULE_ACTIVATED', (event: ModuleEvent) => {\n      if (event.moduleType === 'academy') {\n        this.moduleId = event.moduleId;\n        this.emit('academyActivated', { moduleId: event.moduleId });\n      }\n    });\n  }\n\n  /**\n   * Handle academy tier upgrades\n   */\n  private handleAcademyUpgrade(tier: OfficerTier): void {\n    if (tier > this.currentTier) {\n      this.currentTier = tier;\n      this.emit('tierUpgraded', { tier });\n      moduleEventBus.emit({\n        type: 'MODULE_UPGRADED',\n        moduleId: this.moduleId,\n        moduleType: 'academy',\n        timestamp: Date.now(),\n        data: { tier },\n      });\n    }\n  }\n\n  /**\n   * Generate base stats for a new officer based on role and specialization\n   */\n  private generateBaseStats(\n    role: OfficerRole,\n    specialization: OfficerSpecialization\n  ): OfficerSkills {\n    const baseStats: OfficerSkills = {\n      combat: 1,\n      leadership: 1,\n      technical: 1,\n    };\n\n    // Adjust based on role\n    if (role === 'Squad Leader') {\n      baseStats.leadership += 2;\n    }\n\n    // Adjust based on specialization\n    switch (specialization) {\n      case 'War':\n        baseStats.combat += 2;\n        break;\n      case 'Recon':\n        baseStats.technical += 1;\n        baseStats.combat += 1;\n        break;\n      case 'Mining':\n        baseStats.technical += 2;\n        break;\n    }\n\n    return baseStats;\n  }\n\n  /**\n   * Generate random traits for a new officer\n   */\n  private generateTraits(): string[] {\n    const numTraits = Math.floor(Math.random() * 2) + 1; // 1-2 traits\n    const availableTraits = [...OFFICER_TRAITS];\n    const selectedTraits: string[] = [];\n\n    for (let i = 0; i < numTraits; i++) {\n      if (availableTraits.length === 0) {\n        break;\n      }\n      const index = Math.floor(Math.random() * availableTraits.length);\n      selectedTraits.push(availableTraits[index].id);\n      availableTraits.splice(index, 1);\n    }\n\n    return selectedTraits;\n  }\n\n  /**\n   * Apply trait effects to an officer's stats\n   */\n  private applyTraitEffects(officer: Officer): void {\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.skills) {\n        Object.entries(trait.effects.skills).forEach(([skill, value]) => {\n          officer.skills[skill as keyof typeof officer.skills] += value;\n        });\n      }\n    });\n  }\n\n  /**\n   * Calculate training duration based on officer and program\n   */\n  private calculateTrainingDuration(\n    officer: Officer,\n    specialization: OfficerSpecialization\n  ): number {\n    let duration = TRAINING_CONFIG.baseTime;\n\n    // Apply level modifier\n    duration *= 1 - (officer.level - 1) * TRAINING_CONFIG.levelModifier;\n\n    // Apply specialization modifier\n    if (officer.specialization === specialization) {\n      duration *= 1 - TRAINING_CONFIG.specializationModifier;\n    }\n\n    // Apply trait modifiers\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.trainingSpeed) {\n        duration *= 1 - trait.effects.bonuses.trainingSpeed;\n      }\n    });\n\n    return Math.max(duration, TRAINING_CONFIG.baseTime * 0.5); // Minimum 50% of base time\n  }\n\n  /**\n   * Calculate XP multiplier based on officer traits and current activity\n   */\n  private calculateXpMultiplier(officer: Officer, activity?: string): number {\n    let multiplier = TRAINING_CONFIG.xpMultiplier;\n\n    // Apply trait bonuses\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.xpGain) {\n        multiplier *= 1 + trait.effects.bonuses.xpGain;\n      }\n    });\n\n    // Apply activity-specific bonuses\n    if (activity === 'training') {\n      multiplier *= 1.5; // 50% bonus XP during training\n    } else if (activity === 'combat') {\n      multiplier *= 2.0; // 100% bonus XP during combat\n    }\n\n    return multiplier;\n  }\n\n  /**\n   * Calculate next level XP requirement using a progressive scale\n   */\n  private calculateNextLevelXp(currentLevel: number): number {\n    return Math.floor(100 * Math.pow(1.5, currentLevel - 1));\n  }\n\n  /**\n   * Improve officer skills based on level up and specialization\n   */\n  private improveSkills(officer: Officer): void {\n    // Base skill improvements\n    const improvements: OfficerSkills = {\n      combat: 0,\n      leadership: 0,\n      technical: 0,\n    };\n\n    // Specialization-based improvements\n    switch (officer.specialization) {\n      case 'War':\n        improvements.combat += 2;\n        improvements.leadership += 1;\n        break;\n      case 'Recon':\n        improvements.technical += 1;\n        improvements.combat += 1;\n        improvements.leadership += 1;\n        break;\n      case 'Mining':\n        improvements.technical += 2;\n        improvements.leadership += 1;\n        break;\n    }\n\n    // Role-based improvements\n    if (officer.role === 'Squad Leader') {\n      improvements.leadership += 1;\n    }\n\n    // Apply improvements\n    Object.entries(improvements).forEach(([skill, value]) => {\n      officer.skills[skill as keyof OfficerSkills] += value;\n    });\n\n    // Update stats to match skills\n    officer.stats = { ...officer.skills };\n  }\n\n  /**\n   * Hire a new officer\n   */\n  public hireOfficer(role: OfficerRole, specialization: OfficerSpecialization): Officer {\n    const id = uuidv4();\n    const baseStats = this.generateBaseStats(role, specialization);\n    const traits = this.generateTraits();\n\n    const officer: Officer = {\n      id,\n      name: `Officer-${id.substring(0, 4)}`, // Temporary name generation\n      portrait: '', // TODO: Implement portrait generation\n      level: 1,\n      xp: 0,\n      nextLevelXp: 100,\n      role,\n      status: 'available',\n      specialization,\n      skills: { ...baseStats },\n      traits,\n      stats: { ...baseStats },\n    };\n\n    this.applyTraitEffects(officer);\n    this.officers.set(id, officer);\n    this.emit('officerHired', { officer });\n    this.emitModuleEvent('MODULE_CREATED', { officer });\n    return officer;\n  }\n\n  /**\n   * Start training an officer\n   */\n  public startTraining(officerId: string, specialization: OfficerSpecialization): void {\n    const officer = this.officers.get(officerId);\n    if (!officer || officer.status !== 'available') {\n      return;\n    }\n\n    const duration = this.calculateTrainingDuration(officer, specialization);\n    const program: TrainingProgram = {\n      id: uuidv4(),\n      officerId,\n      specialization,\n      progress: 0,\n      startTime: Date.now(),\n      duration,\n      bonuses: {\n        xpMultiplier: this.calculateXpMultiplier(officer, 'training'),\n        skillGainRate: TRAINING_CONFIG.skillGainRate,\n      },\n    };\n\n    officer.status = 'training';\n    officer.trainingProgress = 0;\n    this.trainingPrograms.set(program.id, program);\n    this.officers.set(officerId, officer);\n\n    this.emit('trainingStarted', {\n      officerId,\n      program,\n    });\n    this.emitModuleEvent('AUTOMATION_STARTED', { officerId, program });\n  }\n\n  /**\n   * Assign an officer to a task or location\n   */\n  public assignOfficer(officerId: string, assignmentId: string): void {\n    const officer = this.officers.get(officerId);\n    if (!officer || officer.status !== 'available') {\n      return;\n    }\n\n    officer.status = 'assigned';\n    officer.assignedTo = assignmentId;\n    this.officers.set(officerId, officer);\n\n    this.emit('officerAssigned', {\n      officerId,\n      assignmentId,\n    });\n    this.emitModuleEvent('STATUS_CHANGED', { officerId, assignmentId, status: 'assigned' });\n  }\n\n  /**\n   * Create a new squad\n   */\n  public createSquad(name: string, specialization: OfficerSpecialization): Squad {\n    const squad: Squad = {\n      id: uuidv4(),\n      name,\n      members: [],\n      specialization,\n      bonuses: {\n        combat: 0,\n        efficiency: 0,\n        survival: 0,\n      },\n    };\n\n    this.squads.set(squad.id, squad);\n    this.emit('squadCreated', { squad });\n    this.emitModuleEvent('MODULE_CREATED', { squad });\n    return squad;\n  }\n\n  /**\n   * Assign an officer to a squad\n   */\n  public assignToSquad(officerId: string, squadId: string): void {\n    const officer = this.officers.get(officerId);\n    const squad = this.squads.get(squadId);\n\n    if (!officer || !squad || officer.status !== 'available') {\n      return;\n    }\n\n    // Check squad size limit\n    if (squad.members.length >= SQUAD_CONFIG.maxSize) {\n      return;\n    }\n\n    // If officer is Squad Leader and squad has no leader\n    if (officer.role === 'Squad Leader' && !squad.leader) {\n      squad.leader = officer;\n    }\n\n    squad.members.push(officer);\n    officer.status = 'assigned';\n    officer.assignedTo = squadId;\n\n    this.updateSquadBonuses(squad);\n    this.emit('squadUpdated', { squadId, officer: officerId });\n    this.emitModuleEvent('STATUS_CHANGED', { squadId, officer: officerId });\n  }\n\n  /**\n   * Update squad bonuses based on member skills and traits\n   */\n  private updateSquadBonuses(squad: Squad): void {\n    const baseBonuses = {\n      combat: 0,\n      efficiency: 0,\n      survival: 0,\n    };\n\n    // Add leader bonuses if present\n    if (squad.leader) {\n      const leaderBonus = this.calculateLeaderBonus(squad.leader);\n      baseBonuses.combat += leaderBonus;\n      baseBonuses.efficiency += leaderBonus;\n      baseBonuses.survival += leaderBonus;\n    }\n\n    // Add member bonuses\n    squad.members.forEach(member => {\n      if (member !== squad.leader) {\n        const memberBonus = this.calculateMemberBonus(member);\n        baseBonuses.combat += memberBonus;\n        baseBonuses.efficiency += memberBonus;\n        baseBonuses.survival += memberBonus;\n      }\n    });\n\n    // Apply multipliers\n    squad.bonuses = {\n      combat: baseBonuses.combat * SQUAD_CONFIG.bonusMultipliers.combat,\n      efficiency: baseBonuses.efficiency * SQUAD_CONFIG.bonusMultipliers.efficiency,\n      survival: baseBonuses.survival * SQUAD_CONFIG.bonusMultipliers.survival,\n    };\n\n    // Update squad in storage\n    this.squads.set(squad.id, squad);\n    this.emitModuleEvent('STATUS_CHANGED', { squadId: squad.id, bonuses: squad.bonuses });\n  }\n\n  /**\n   * Calculate leadership bonus for squad leader\n   */\n  private calculateLeaderBonus(officer: Officer): number {\n    let bonus = officer.skills.leadership * SQUAD_CONFIG.leadershipBonus;\n\n    // Apply trait bonuses\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.squadBonus) {\n        bonus *= 1 + trait.effects.bonuses.squadBonus;\n      }\n    });\n\n    return bonus;\n  }\n\n  /**\n   * Calculate bonus contribution from squad member\n   */\n  private calculateMemberBonus(officer: Officer): number {\n    let bonus = 0;\n\n    // Add skill contributions\n    switch (officer.specialization) {\n      case 'War':\n        bonus += officer.skills.combat * 0.5;\n        break;\n      case 'Recon':\n        bonus += (officer.skills.combat + officer.skills.technical) * 0.25;\n        break;\n      case 'Mining':\n        bonus += officer.skills.technical * 0.5;\n        break;\n    }\n\n    // Apply trait bonuses\n    officer.traits.forEach(traitId => {\n      const trait = OFFICER_TRAITS.find(t => t.id === traitId);\n      if (trait?.effects.bonuses?.squadBonus) {\n        bonus *= 1 + trait.effects.bonuses.squadBonus;\n      }\n    });\n\n    return bonus;\n  }\n\n  /**\n   * Add experience to an officer and handle level ups\n   */\n  public addExperience(officerId: string, amount: number, activity?: string): void {\n    const officer = this.officers.get(officerId);\n    if (!officer) {\n      return;\n    }\n\n    const multiplier = this.calculateXpMultiplier(officer, activity);\n    const adjustedAmount = Math.floor(amount * multiplier);\n\n    officer.xp += adjustedAmount;\n\n    // Handle level ups\n    while (officer.xp >= officer.nextLevelXp) {\n      officer.xp -= officer.nextLevelXp;\n      officer.level += 1;\n      officer.nextLevelXp = this.calculateNextLevelXp(officer.level);\n      this.improveSkills(officer);\n\n      // Emit level up event\n      this.emit('officerLeveledUp', {\n        officerId,\n        newLevel: officer.level,\n        skills: officer.skills,\n      });\n    }\n\n    // Update officer in storage\n    this.officers.set(officerId, officer);\n\n    // Emit experience gained event\n    this.emit('experienceGained', {\n      officerId,\n      amount: adjustedAmount,\n      newTotal: officer.xp,\n      nextLevel: officer.nextLevelXp,\n    });\n    this.emitModuleEvent('STATUS_CHANGED', {\n      officerId,\n      amount: adjustedAmount,\n      newTotal: officer.xp,\n      nextLevel: officer.nextLevelXp,\n    });\n  }\n\n  /**\n   * Update training programs and apply experience\n   */\n  public update(deltaTime: number): void {\n    // Update training programs\n    this.trainingPrograms.forEach((program, programId) => {\n      const officer = this.officers.get(program.officerId);\n      if (!officer) {\n        this.trainingPrograms.delete(programId);\n        return;\n      }\n\n      program.progress += deltaTime;\n      if (program.progress >= program.duration) {\n        this.completeTraining(programId);\n      } else {\n        // Update training progress\n        officer.trainingProgress = program.progress / program.duration;\n        this.officers.set(officer.id, officer);\n      }\n    });\n\n    // Update squad bonuses\n    this.squads.forEach(squad => {\n      this.updateSquadBonuses(squad);\n    });\n  }\n\n  /**\n   * Complete a training program\n   */\n  private completeTraining(programId: string): void {\n    const program = this.trainingPrograms.get(programId);\n    if (!program) {\n      return;\n    }\n\n    const officer = this.officers.get(program.officerId);\n    if (!officer) {\n      this.trainingPrograms.delete(programId);\n      return;\n    }\n\n    // Apply training results\n    officer.status = 'available';\n    officer.trainingProgress = undefined;\n\n    // Improve skills based on training\n    const skillImprovement = Math.floor(\n      (program.duration * program.bonuses.skillGainRate) / TRAINING_CONFIG.baseTime\n    );\n\n    switch (program.specialization) {\n      case 'War':\n        officer.skills.combat += skillImprovement;\n        break;\n      case 'Recon':\n        officer.skills.combat += Math.floor(skillImprovement / 2);\n        officer.skills.technical += Math.floor(skillImprovement / 2);\n        break;\n      case 'Mining':\n        officer.skills.technical += skillImprovement;\n        break;\n    }\n\n    // Update stats\n    officer.stats = { ...officer.skills };\n\n    // Add experience\n    this.addExperience(officer.id, 100, 'training');\n\n    // Update storage\n    this.officers.set(officer.id, officer);\n    this.trainingPrograms.delete(programId);\n\n    // Emit completion event\n    this.emit('trainingCompleted', {\n      officerId: officer.id,\n      specialization: program.specialization,\n      skills: officer.skills,\n    });\n    this.emitModuleEvent('AUTOMATION_CYCLE_COMPLETE', {\n      officerId: officer.id,\n      specialization: program.specialization,\n      skills: officer.skills,\n    });\n  }\n\n  /**\n   * Get an officer by ID\n   */\n  public getOfficer(id: string): Officer | undefined {\n    return this.officers.get(id);\n  }\n\n  /**\n   * Get a squad by ID\n   */\n  public getSquad(id: string): Squad | undefined {\n    return this.squads.get(id);\n  }\n\n  /**\n   * Get all available officers\n   */\n  public getAvailableOfficers(): Officer[] {\n    return Array.from(this.officers.values()).filter(officer => officer.status === 'available');\n  }\n\n  /**\n   * Get all squads of a specific specialization\n   */\n  public getSquadsBySpecialization(specialization: OfficerSpecialization): Squad[] {\n    return Array.from(this.squads.values()).filter(\n      squad => squad.specialization === specialization\n    );\n  }\n\n  /**\n   * Get current academy tier\n   */\n  public getCurrentTier(): OfficerTier {\n    return this.currentTier;\n  }\n\n  private emitModuleEvent(type: ModuleEventType, data: any): void {\n    moduleEventBus.emit({\n      type,\n      moduleId: 'officer-manager',\n      moduleType: 'academy' as ModuleType,\n      timestamp: Date.now(),\n      data,\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/ShipHangarManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/module/SubModuleManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceCostManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceExchangeManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceFlowManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'converters' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":208,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":217,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'interval' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":424,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ResourceFlow,\n  ResourcePriority,\n  ResourceState,\n  ResourceTransfer,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport {\n  validateResourceFlow,\n  validateResourceTransfer,\n} from '../../utils/resources/resourceValidation';\n\n/**\n * Flow node type\n */\nexport type FlowNodeType = 'producer' | 'consumer' | 'storage' | 'converter';\n\n/**\n * Flow node interface\n */\nexport interface FlowNode {\n  id: string;\n  type: FlowNodeType;\n  resources: ResourceType[];\n  priority: ResourcePriority;\n  capacity?: number;\n  efficiency?: number;\n  active: boolean;\n}\n\n/**\n * Flow connection interface\n */\nexport interface FlowConnection {\n  id: string;\n  source: string;\n  target: string;\n  resourceType: ResourceType;\n  maxRate: number;\n  currentRate: number;\n  priority: ResourcePriority;\n  active: boolean;\n}\n\n/**\n * Flow network interface\n */\nexport interface FlowNetwork {\n  nodes: Map<string, FlowNode>;\n  connections: Map<string, FlowConnection>;\n  resourceStates: Map<ResourceType, ResourceState>;\n}\n\n/**\n * Flow optimization result\n */\nexport interface FlowOptimizationResult {\n  transfers: ResourceTransfer[];\n  updatedConnections: FlowConnection[];\n  bottlenecks: string[];\n  underutilized: string[];\n}\n\n/**\n * Resource Flow Manager\n * Manages and optimizes resource flows between producers, consumers, and storage\n */\nexport class ResourceFlowManager {\n  private network: FlowNetwork;\n  private lastOptimization: number;\n  private optimizationInterval: number;\n  private transferHistory: ResourceTransfer[];\n  private maxHistorySize: number;\n\n  constructor(optimizationInterval = 5000) {\n    this.network = {\n      nodes: new Map<string, FlowNode>(),\n      connections: new Map<string, FlowConnection>(),\n      resourceStates: new Map<ResourceType, ResourceState>(),\n    };\n    this.lastOptimization = 0;\n    this.optimizationInterval = optimizationInterval;\n    this.transferHistory = [];\n    this.maxHistorySize = 100;\n  }\n\n  /**\n   * Register a flow node\n   */\n  public registerNode(node: FlowNode): boolean {\n    if (!node.id || !node.resources || node.resources.length === 0) {\n      console.error('Invalid flow node:', node);\n      return false;\n    }\n\n    this.network.nodes.set(node.id, node);\n    return true;\n  }\n\n  /**\n   * Unregister a flow node\n   */\n  public unregisterNode(id: string): boolean {\n    if (!this.network.nodes.has(id)) {\n      return false;\n    }\n\n    // Remove all connections to/from this node\n    // Convert Map entries to array to avoid MapIterator error\n    const connectionEntries = Array.from(this.network.connections.entries());\n    for (const [connectionId, connection] of connectionEntries) {\n      if (connection.source === id || connection.target === id) {\n        this.network.connections.delete(connectionId);\n      }\n    }\n\n    this.network.nodes.delete(id);\n    return true;\n  }\n\n  /**\n   * Register a flow connection\n   */\n  public registerConnection(connection: FlowConnection): boolean {\n    if (!connection.id || !connection.source || !connection.target || !connection.resourceType) {\n      console.error('Invalid flow connection:', connection);\n      return false;\n    }\n\n    // Verify source and target nodes exist\n    if (!this.network.nodes.has(connection.source) || !this.network.nodes.has(connection.target)) {\n      console.error('Source or target node does not exist:', connection);\n      return false;\n    }\n\n    // Verify source node can provide the resource\n    const sourceNode = this.network.nodes.get(connection.source);\n    if (!sourceNode?.resources.includes(connection.resourceType)) {\n      console.error('Source node cannot provide resource:', connection);\n      return false;\n    }\n\n    // Verify target node can accept the resource\n    const targetNode = this.network.nodes.get(connection.target);\n    if (!targetNode?.resources.includes(connection.resourceType)) {\n      console.error('Target node cannot accept resource:', connection);\n      return false;\n    }\n\n    this.network.connections.set(connection.id, connection);\n    return true;\n  }\n\n  /**\n   * Unregister a flow connection\n   */\n  public unregisterConnection(id: string): boolean {\n    if (!this.network.connections.has(id)) {\n      return false;\n    }\n\n    this.network.connections.delete(id);\n    return true;\n  }\n\n  /**\n   * Update resource state\n   */\n  public updateResourceState(type: ResourceType, state: ResourceState): void {\n    this.network.resourceStates.set(type, state);\n  }\n\n  /**\n   * Get resource state\n   */\n  public getResourceState(type: ResourceType): ResourceState | undefined {\n    return this.network.resourceStates.get(type);\n  }\n\n  /**\n   * Optimize resource flows\n   */\n  public optimizeFlows(): FlowOptimizationResult {\n    const now = Date.now();\n\n    // Skip optimization if not enough time has passed\n    if (now - this.lastOptimization < this.optimizationInterval) {\n      return {\n        transfers: [],\n        updatedConnections: [],\n        bottlenecks: [],\n        underutilized: [],\n      };\n    }\n\n    this.lastOptimization = now;\n\n    // Get active nodes and connections\n    const activeNodes = Array.from(this.network.nodes.values()).filter(node => node.active);\n    const activeConnections = Array.from(this.network.connections.values()).filter(\n      conn => conn.active\n    );\n\n    // Group nodes by type\n    const producers = activeNodes.filter(node => node.type === 'producer');\n    const consumers = activeNodes.filter(node => node.type === 'consumer');\n    const storages = activeNodes.filter(node => node.type === 'storage');\n    const converters = activeNodes.filter(node => node.type === 'converter');\n\n    // Calculate resource availability and demand\n    const availability: Partial<Record<ResourceType, number>> = {};\n    const demand: Partial<Record<ResourceType, number>> = {};\n\n    // Initialize with current resource states\n    // Convert Map entries to array to avoid MapIterator error\n    const resourceStateEntries = Array.from(this.network.resourceStates.entries());\n    for (const [type, state] of resourceStateEntries) {\n      availability[type] = 0;\n      demand[type] = 0;\n    }\n\n    // Calculate production capacity\n    for (const producer of producers) {\n      for (const resourceType of producer.resources) {\n        // Find outgoing connections for this resource\n        const outgoingConnections = activeConnections.filter(\n          conn => conn.source === producer.id && conn.resourceType === resourceType\n        );\n\n        // Sum up max rates\n        const totalMaxRate = outgoingConnections.reduce((sum, conn) => sum + conn.maxRate, 0);\n\n        // Apply efficiency if available\n        const effectiveRate = producer.efficiency\n          ? totalMaxRate * producer.efficiency\n          : totalMaxRate;\n\n        availability[resourceType] = (availability[resourceType] || 0) + effectiveRate;\n      }\n    }\n\n    // Calculate consumption needs\n    for (const consumer of consumers) {\n      for (const resourceType of consumer.resources) {\n        // Find incoming connections for this resource\n        const incomingConnections = activeConnections.filter(\n          conn => conn.target === consumer.id && conn.resourceType === resourceType\n        );\n\n        // Sum up max rates\n        const totalMaxRate = incomingConnections.reduce((sum, conn) => sum + conn.maxRate, 0);\n\n        demand[resourceType] = (demand[resourceType] || 0) + totalMaxRate;\n      }\n    }\n\n    // Adjust for storage capacity\n    for (const storage of storages) {\n      for (const resourceType of storage.resources) {\n        const resourceState = this.network.resourceStates.get(resourceType);\n        if (!resourceState) {\n          continue;\n        }\n\n        // If storage is near capacity, reduce availability\n        if (resourceState.current > resourceState.max * 0.9) {\n          availability[resourceType] = Math.max(\n            0,\n            (availability[resourceType] || 0) - (resourceState.max - resourceState.current)\n          );\n        }\n\n        // If storage is near empty, increase demand\n        if (resourceState.current < resourceState.max * 0.1) {\n          demand[resourceType] = (demand[resourceType] || 0) + resourceState.max * 0.2;\n        }\n      }\n    }\n\n    // Identify bottlenecks and underutilized resources\n    const bottlenecks: string[] = [];\n    const underutilized: string[] = [];\n\n    for (const [type, availableAmount] of Object.entries(availability)) {\n      const demandAmount = demand[type as ResourceType] || 0;\n\n      if (availableAmount < demandAmount * 0.9) {\n        bottlenecks.push(type);\n      } else if (availableAmount > demandAmount * 1.5) {\n        underutilized.push(type);\n      }\n    }\n\n    // Optimize flow rates based on priorities\n    const updatedConnections: FlowConnection[] = [];\n\n    // Sort connections by priority (high to low)\n    const prioritizedConnections = [...activeConnections].sort(\n      (a, b) => Number(b.priority) - Number(a.priority)\n    );\n\n    // Adjust flow rates\n    for (const connection of prioritizedConnections) {\n      const { resourceType } = connection;\n      const availableForType = availability[resourceType] || 0;\n      const demandForType = demand[resourceType] || 0;\n\n      if (availableForType <= 0 || demandForType <= 0) {\n        // No flow possible\n        connection.currentRate = 0;\n      } else if (availableForType >= demandForType) {\n        // Full flow possible\n        connection.currentRate = Math.min(connection.maxRate, demandForType);\n      } else {\n        // Partial flow based on ratio\n        const ratio = availableForType / demandForType;\n        connection.currentRate = connection.maxRate * ratio;\n      }\n\n      updatedConnections.push({ ...connection });\n\n      // Update the actual connection in the network\n      this.network.connections.set(connection.id, connection);\n    }\n\n    // Generate transfer instructions\n    const transfers: ResourceTransfer[] = [];\n\n    for (const connection of updatedConnections) {\n      if (connection.currentRate <= 0) {\n        continue;\n      }\n\n      const transfer: ResourceTransfer = {\n        type: connection.resourceType,\n        source: connection.source,\n        target: connection.target,\n        amount: connection.currentRate,\n        timestamp: now,\n      };\n\n      if (validateResourceTransfer(transfer)) {\n        transfers.push(transfer);\n\n        // Add to history\n        this.addToTransferHistory(transfer);\n      }\n    }\n\n    return {\n      transfers,\n      updatedConnections,\n      bottlenecks,\n      underutilized,\n    };\n  }\n\n  /**\n   * Add a transfer to history\n   */\n  private addToTransferHistory(transfer: ResourceTransfer): void {\n    this.transferHistory.push(transfer);\n\n    // Trim history if needed\n    if (this.transferHistory.length > this.maxHistorySize) {\n      this.transferHistory = this.transferHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Get transfer history\n   */\n  public getTransferHistory(): ResourceTransfer[] {\n    return [...this.transferHistory];\n  }\n\n  /**\n   * Get transfer history for a specific resource type\n   */\n  public getTransferHistoryByType(type: ResourceType): ResourceTransfer[] {\n    return this.transferHistory.filter(transfer => transfer.type === type);\n  }\n\n  /**\n   * Get all nodes\n   */\n  public getNodes(): FlowNode[] {\n    return Array.from(this.network.nodes.values());\n  }\n\n  /**\n   * Get all connections\n   */\n  public getConnections(): FlowConnection[] {\n    return Array.from(this.network.connections.values());\n  }\n\n  /**\n   * Get node by ID\n   */\n  public getNode(id: string): FlowNode | undefined {\n    return this.network.nodes.get(id);\n  }\n\n  /**\n   * Get connection by ID\n   */\n  public getConnection(id: string): FlowConnection | undefined {\n    return this.network.connections.get(id);\n  }\n\n  /**\n   * Create a resource flow\n   */\n  public createFlow(flow: ResourceFlow): boolean {\n    if (!validateResourceFlow(flow)) {\n      console.error('Invalid resource flow:', flow);\n      return false;\n    }\n\n    // Extract resource type and other properties from flow\n    const resourceType = flow.resources[0]?.type;\n    const rate = flow.resources[0]?.amount || 0;\n    const interval = flow.resources[0]?.interval || 1000;\n    // Create a proper ResourcePriority object\n    const priority: ResourcePriority = {\n      type: resourceType,\n      priority: 1,\n      consumers: [],\n    };\n\n    if (!resourceType) {\n      console.error('Flow must have at least one resource');\n      return false;\n    }\n\n    // Create nodes if they don't exist\n    if (!this.network.nodes.has(flow.source)) {\n      this.registerNode({\n        id: flow.source,\n        type: 'producer',\n        resources: [resourceType],\n        priority: priority,\n        active: true,\n      });\n    }\n\n    if (!this.network.nodes.has(flow.target)) {\n      this.registerNode({\n        id: flow.target,\n        type: 'consumer',\n        resources: [resourceType],\n        priority: priority,\n        active: true,\n      });\n    }\n\n    // Create connection\n    const connectionId = `${flow.source}-${flow.target}-${resourceType}`;\n\n    return this.registerConnection({\n      id: connectionId,\n      source: flow.source,\n      target: flow.target,\n      resourceType: resourceType,\n      maxRate: rate,\n      currentRate: 0,\n      priority: priority,\n      active: true,\n    });\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.network.nodes.clear();\n    this.network.connections.clear();\n    this.network.resourceStates.clear();\n    this.transferHistory = [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceIntegration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourcePerformanceMonitor.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1267,1332],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":174,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":174,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[4998,5318],"text":""},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":201,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":201,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[5738,5815],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport { ResourceType } from '../../types/resources/ResourceTypes';\n\nexport interface PerformanceMetrics {\n  timestamp: number;\n  resourceType: ResourceType;\n  productionRate: number;\n  consumptionRate: number;\n  transferRate: number;\n  utilizationRate: number;\n  efficiency: number;\n}\n\nexport interface ResourcePerformanceSnapshot {\n  metrics: Map<ResourceType, PerformanceMetrics>;\n  systemLoad: number;\n  bottlenecks: ResourceType[];\n  recommendations: string[];\n}\n\n/**\n * Monitors and analyzes resource management performance\n */\nexport class ResourcePerformanceMonitor {\n  private metricsHistory: Map<ResourceType, PerformanceMetrics[]>;\n  private snapshotInterval: number;\n  private maxHistoryLength: number;\n  private lastSnapshotTime: number;\n\n  constructor(snapshotInterval = 5000, maxHistoryLength = 100) {\n    this.metricsHistory = new Map();\n    this.snapshotInterval = snapshotInterval;\n    this.maxHistoryLength = maxHistoryLength;\n    this.lastSnapshotTime = Date.now();\n\n    // Start monitoring\n    this.startMonitoring();\n  }\n\n  /**\n   * Starts the performance monitoring\n   */\n  private startMonitoring(): void {\n    setInterval(() => this.takeSnapshot(), this.snapshotInterval);\n    console.debug('[ResourcePerformanceMonitor] Started monitoring');\n  }\n\n  /**\n   * Records performance metrics for a resource\n   */\n  recordMetrics(\n    type: ResourceType,\n    productionRate: number,\n    consumptionRate: number,\n    transferRate: number,\n    utilizationRate: number\n  ): void {\n    const metrics: PerformanceMetrics = {\n      timestamp: Date.now(),\n      resourceType: type,\n      productionRate,\n      consumptionRate,\n      transferRate,\n      utilizationRate,\n      efficiency: this.calculateEfficiency(productionRate, consumptionRate, utilizationRate),\n    };\n\n    if (!this.metricsHistory.has(type)) {\n      this.metricsHistory.set(type, []);\n    }\n\n    const history = this.metricsHistory.get(type)!;\n    history.push(metrics);\n\n    // Trim history if needed\n    if (history.length > this.maxHistoryLength) {\n      history.shift();\n    }\n  }\n\n  /**\n   * Calculates resource efficiency\n   */\n  private calculateEfficiency(\n    production: number,\n    consumption: number,\n    utilization: number\n  ): number {\n    // Efficiency formula: balance between production matching consumption\n    // and good utilization (not too full, not too empty)\n    const productionBalance = consumption > 0 ? Math.min(production / consumption, 1.5) : 1.0;\n    const utilizationScore = 1 - Math.abs(0.5 - utilization);\n    return (productionBalance + utilizationScore) / 2;\n  }\n\n  /**\n   * Takes a performance snapshot\n   */\n  private takeSnapshot(): void {\n    const snapshot = this.generateSnapshot();\n    this.lastSnapshotTime = Date.now();\n\n    // Emit performance snapshot\n    moduleEventBus.emit({\n      type: 'STATUS_CHANGED',\n      moduleId: 'resource-performance-monitor',\n      moduleType: 'resource-manager',\n      timestamp: Date.now(),\n      data: {\n        type: 'performance_snapshot',\n        snapshot,\n      },\n    });\n\n    // Log performance insights\n    this.logPerformanceInsights(snapshot);\n  }\n\n  /**\n   * Generates a performance snapshot\n   */\n  private generateSnapshot(): ResourcePerformanceSnapshot {\n    const metrics = new Map<ResourceType, PerformanceMetrics>();\n    const bottlenecks: ResourceType[] = [];\n    const recommendations: string[] = [];\n\n    // Calculate current metrics for each resource\n    for (const [type, history] of this.metricsHistory) {\n      if (history.length === 0) {\n        continue;\n      }\n\n      const latest = history[history.length - 1];\n      metrics.set(type, latest);\n\n      // Identify bottlenecks\n      if (latest.efficiency < 0.6) {\n        bottlenecks.push(type);\n\n        // Generate recommendations\n        if (latest.productionRate < latest.consumptionRate) {\n          recommendations.push(\n            `Increase production rate for ${type} (current: ${latest.productionRate.toFixed(2)}, needed: ${latest.consumptionRate.toFixed(2)})`\n          );\n        } else if (latest.utilizationRate > 0.9) {\n          recommendations.push(\n            `Consider increasing storage capacity for ${type} (utilization: ${(latest.utilizationRate * 100).toFixed(1)}%)`\n          );\n        } else if (latest.utilizationRate < 0.1) {\n          recommendations.push(\n            `Optimize consumption or reduce production of ${type} (utilization: ${(latest.utilizationRate * 100).toFixed(1)}%)`\n          );\n        }\n      }\n    }\n\n    // Calculate system load (average utilization across all resources)\n    const systemLoad =\n      Array.from(metrics.values()).reduce((sum, m) => sum + m.utilizationRate, 0) /\n      Math.max(metrics.size, 1);\n\n    return {\n      metrics,\n      systemLoad,\n      bottlenecks,\n      recommendations,\n    };\n  }\n\n  /**\n   * Logs performance insights\n   */\n  private logPerformanceInsights(snapshot: ResourcePerformanceSnapshot): void {\n    console.debug(`[ResourcePerformanceMonitor] Performance Snapshot:\n      System Load: ${(snapshot.systemLoad * 100).toFixed(1)}%\n      Bottlenecks: ${snapshot.bottlenecks.join(', ') || 'None'}\n      \n      Recommendations:\n      ${snapshot.recommendations.map(r => `- ${r}`).join('\\n      ') || '- No recommendations'}`);\n  }\n\n  /**\n   * Gets performance history for a resource\n   */\n  getResourceHistory(type: ResourceType): PerformanceMetrics[] {\n    return [...(this.metricsHistory.get(type) || [])];\n  }\n\n  /**\n   * Gets the latest snapshot\n   */\n  getLatestSnapshot(): ResourcePerformanceSnapshot {\n    return this.generateSnapshot();\n  }\n\n  /**\n   * Cleans up the monitor\n   */\n  cleanup(): void {\n    this.metricsHistory.clear();\n    console.debug('[ResourcePerformanceMonitor] Cleaned up performance monitor');\n  }\n\n  /**\n   * Get all metrics history\n   */\n  public getAllMetricsHistory(): Record<ResourceType, PerformanceMetrics[]> {\n    const result: Record<ResourceType, PerformanceMetrics[]> = {} as Record<\n      ResourceType,\n      PerformanceMetrics[]\n    >;\n\n    for (const [type, metrics] of Array.from(this.metricsHistory)) {\n      result[type] = [...metrics];\n    }\n\n    return result;\n  }\n}\n\n// Export singleton instance\nexport const resourcePerformanceMonitor = new ResourcePerformanceMonitor();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourcePoolManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11133,11136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11133,11136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  ResourceContainer,\n  ResourcePool,\n  ResourceState,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport { isResourcePool } from '../../utils/resources/resourceValidation';\n\n/**\n * Pool allocation strategy\n */\nexport type PoolAllocationStrategy = 'equal' | 'priority' | 'demand-based' | 'custom';\n\n/**\n * Pool distribution rule\n */\nexport interface PoolDistributionRule {\n  id: string;\n  poolId: string;\n  targetIds: string[];\n  resourceType: ResourceType;\n  percentage: number;\n  minAmount?: number;\n  maxAmount?: number;\n  priority: number;\n  condition?: (state: ResourceState) => boolean;\n  enabled?: boolean;\n  sourceId?: string;\n  amount?: number;\n}\n\n/**\n * Pool allocation result\n */\nexport interface PoolAllocationResult {\n  poolId: string;\n  resourceType: ResourceType;\n  allocations: Array<{\n    targetId: string;\n    amount: number;\n    percentage: number;\n  }>;\n  timestamp: number;\n}\n\n/**\n * Resource Pool Manager\n * Manages resource pools, distribution, and allocation\n */\nexport class ResourcePoolManager {\n  private pools: Map<string, ResourcePool>;\n  private containers: Map<string, ResourceContainer>;\n  private distributionRules: Map<string, PoolDistributionRule>;\n  private resourceStates: Map<ResourceType, ResourceState>;\n  private allocationHistory: PoolAllocationResult[];\n  private allocationStrategy: PoolAllocationStrategy;\n  private maxHistorySize: number;\n  private lastDistribution: number;\n  private distributionInterval: number;\n\n  constructor(\n    allocationStrategy: PoolAllocationStrategy = 'priority',\n    distributionInterval = 5000,\n    maxHistorySize = 100\n  ) {\n    this.pools = new Map();\n    this.containers = new Map();\n    this.distributionRules = new Map();\n    this.resourceStates = new Map();\n    this.allocationHistory = [];\n    this.allocationStrategy = allocationStrategy;\n    this.maxHistorySize = maxHistorySize;\n    this.lastDistribution = 0;\n    this.distributionInterval = distributionInterval;\n  }\n\n  /**\n   * Update resource state\n   */\n  public updateResourceState(type: ResourceType, state: ResourceState): void {\n    this.resourceStates.set(type, state);\n  }\n\n  /**\n   * Register a resource pool\n   */\n  public registerPool(pool: ResourcePool): boolean {\n    if (!isResourcePool(pool)) {\n      console.error('Invalid resource pool:', pool);\n      return false;\n    }\n\n    this.pools.set(pool.id, pool);\n    return true;\n  }\n\n  /**\n   * Unregister a resource pool\n   */\n  public unregisterPool(id: string): boolean {\n    if (!this.pools.has(id)) {\n      return false;\n    }\n\n    // Remove all distribution rules for this pool\n    for (const [ruleId, rule] of this.distributionRules.entries()) {\n      if (rule.poolId === id) {\n        this.distributionRules.delete(ruleId);\n      }\n    }\n\n    this.pools.delete(id);\n    return true;\n  }\n\n  /**\n   * Register a container\n   */\n  public registerContainer(container: ResourceContainer): boolean {\n    if (!container.id) {\n      console.error('Invalid container:', container);\n      return false;\n    }\n\n    this.containers.set(container.id, container);\n    return true;\n  }\n\n  /**\n   * Unregister a container\n   */\n  public unregisterContainer(id: string): boolean {\n    if (!this.containers.has(id)) {\n      return false;\n    }\n\n    this.containers.delete(id);\n    return true;\n  }\n\n  /**\n   * Register a distribution rule\n   */\n  public registerDistributionRule(rule: PoolDistributionRule): boolean {\n    if (!rule.id || !rule.poolId || !rule.targetIds || rule.targetIds.length === 0) {\n      console.error('Invalid distribution rule:', rule);\n      return false;\n    }\n\n    // Verify pool exists\n    if (!this.pools.has(rule.poolId)) {\n      console.error(`Pool ${rule.poolId} does not exist`);\n      return false;\n    }\n\n    // Verify targets exist\n    for (const targetId of rule.targetIds) {\n      if (!this.containers.has(targetId)) {\n        console.error(`Target container ${targetId} does not exist`);\n        return false;\n      }\n    }\n\n    this.distributionRules.set(rule.id, rule);\n    return true;\n  }\n\n  /**\n   * Unregister a distribution rule\n   */\n  public unregisterDistributionRule(id: string): boolean {\n    if (!this.distributionRules.has(id)) {\n      return false;\n    }\n\n    this.distributionRules.delete(id);\n    return true;\n  }\n\n  /**\n   * Set allocation strategy\n   */\n  public setAllocationStrategy(strategy: PoolAllocationStrategy): void {\n    this.allocationStrategy = strategy;\n  }\n\n  /**\n   * Get allocation strategy\n   */\n  public getAllocationStrategy(): PoolAllocationStrategy {\n    return this.allocationStrategy;\n  }\n\n  /**\n   * Add resource to pool\n   */\n  public addToPool(poolId: string, type: ResourceType, amount: number): boolean {\n    const pool = this.pools.get(poolId);\n    if (!pool) {\n      console.error(`Pool ${poolId} does not exist`);\n      return false;\n    }\n\n    // Initialize resources map if it doesn't exist\n    if (!pool.resources) {\n      pool.resources = new Map<ResourceType, number>();\n    }\n\n    // Add resource to pool\n    const currentAmount = pool.resources.get(type) || 0;\n    pool.resources.set(type, currentAmount + amount);\n\n    return true;\n  }\n\n  /**\n   * Remove resource from pool\n   */\n  public removeFromPool(poolId: string, type: ResourceType, amount: number): boolean {\n    const pool = this.pools.get(poolId);\n    if (!pool || !pool.resources) {\n      console.error(`Pool ${poolId} does not exist or has no resources`);\n      return false;\n    }\n\n    const currentAmount = pool.resources.get(type) || 0;\n    if (currentAmount < amount) {\n      console.error(`Insufficient ${type} in pool ${poolId}`);\n      return false;\n    }\n\n    pool.resources.set(type, currentAmount - amount);\n    return true;\n  }\n\n  /**\n   * Transfer between pools\n   */\n  public transferBetweenPools(\n    sourcePoolId: string,\n    targetPoolId: string,\n    type: ResourceType,\n    amount: number\n  ): boolean {\n    // Remove from source pool\n    if (!this.removeFromPool(sourcePoolId, type, amount)) {\n      return false;\n    }\n\n    // Add to target pool\n    if (!this.addToPool(targetPoolId, type, amount)) {\n      // Rollback source pool removal\n      this.addToPool(sourcePoolId, type, amount);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Distribute resources from pools to containers\n   */\n  public distributeResources(now = Date.now()): PoolAllocationResult[] {\n    // Skip if not enough time has passed\n    if (now - this.lastDistribution < this.distributionInterval) {\n      return [];\n    }\n\n    this.lastDistribution = now;\n    const results: PoolAllocationResult[] = [];\n\n    // Sort rules by priority (high to low)\n    const sortedRules = Array.from(this.distributionRules.values()).sort(\n      (a, b) => b.priority - a.priority\n    );\n\n    // Process each rule\n    for (const rule of sortedRules) {\n      // Skip disabled rules\n      if (rule.enabled === false) {\n        continue;\n      }\n\n      const pool = this.pools.get(rule.poolId);\n      if (!pool || !pool.resources) {\n        continue;\n      }\n\n      const resourceAmount = pool.resources.get(rule.resourceType) || 0;\n      if (resourceAmount <= 0) {\n        continue;\n      }\n\n      // Check condition if provided\n      if (rule.condition) {\n        const resourceState = this.resourceStates.get(rule.resourceType);\n        if (!resourceState || !rule.condition(resourceState)) {\n          continue;\n        }\n      }\n\n      // Calculate amount to distribute\n      let amountToDistribute = resourceAmount * (rule.percentage / 100);\n\n      // Apply min/max constraints\n      if (rule.minAmount !== undefined && amountToDistribute < rule.minAmount) {\n        amountToDistribute = Math.min(rule.minAmount, resourceAmount);\n      }\n\n      if (rule.maxAmount !== undefined && amountToDistribute > rule.maxAmount) {\n        amountToDistribute = rule.maxAmount;\n      }\n\n      // Skip if amount is too small\n      if (amountToDistribute <= 0) {\n        continue;\n      }\n\n      // Allocate resources based on strategy\n      const allocations = this.allocateResources(\n        rule.targetIds,\n        rule.resourceType,\n        amountToDistribute\n      );\n\n      // Apply allocations\n      let totalAllocated = 0;\n      for (const allocation of allocations) {\n        const container = this.containers.get(allocation.targetId);\n        if (!container) {\n          continue;\n        }\n\n        // Initialize resources map if it doesn't exist\n        if (!container.resources) {\n          container.resources = new Map<ResourceType, number>();\n        }\n\n        // Add resource to container\n        const currentAmount = container.resources.get(rule.resourceType) || 0;\n        container.resources.set(rule.resourceType, currentAmount + allocation.amount);\n        totalAllocated += allocation.amount;\n      }\n\n      // Remove allocated amount from pool\n      if (totalAllocated > 0) {\n        pool.resources.set(rule.resourceType, resourceAmount - totalAllocated);\n\n        // Record allocation\n        const result: PoolAllocationResult = {\n          poolId: rule.poolId,\n          resourceType: rule.resourceType,\n          allocations,\n          timestamp: now,\n        };\n\n        results.push(result);\n        this.allocationHistory.push(result);\n\n        // Trim history if needed\n        if (this.allocationHistory.length > this.maxHistorySize) {\n          this.allocationHistory = this.allocationHistory.slice(-this.maxHistorySize);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Allocate resources based on strategy\n   */\n  private allocateResources(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    if (targetIds.length === 0 || amount <= 0) {\n      return [];\n    }\n\n    switch (this.allocationStrategy) {\n      case 'equal':\n        return this.allocateEqual(targetIds, amount);\n      case 'priority':\n        return this.allocatePriority(targetIds, resourceType, amount);\n      case 'demand-based':\n        return this.allocateDemandBased(targetIds, resourceType, amount);\n      case 'custom':\n        return this.allocateCustom(targetIds, resourceType, amount);\n      default:\n        return this.allocateEqual(targetIds, amount);\n    }\n  }\n\n  /**\n   * Allocate resources equally\n   */\n  private allocateEqual(\n    targetIds: string[],\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    const equalAmount = amount / targetIds.length;\n    const percentage = 100 / targetIds.length;\n\n    return targetIds.map(targetId => ({\n      targetId,\n      amount: equalAmount,\n      percentage,\n    }));\n  }\n\n  /**\n   * Allocate resources based on priority\n   */\n  private allocatePriority(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    // Get containers with priority\n    const containersWithPriority = targetIds\n      .map(id => {\n        const container = this.containers.get(id);\n        return {\n          id,\n          priority:\n            container && 'priority' in container ? ((container as any).priority as number) : 1,\n        };\n      })\n      .sort((a, b) => (b.priority as number) - (a.priority as number));\n\n    // Calculate total priority\n    const totalPriority = containersWithPriority.reduce(\n      (sum, container) => sum + (container.priority as number),\n      0\n    );\n\n    // Allocate based on priority\n    return containersWithPriority.map(container => {\n      const containerPercentage = ((container.priority as number) / totalPriority) * 100;\n      const containerAmount = ((container.priority as number) / totalPriority) * amount;\n\n      return {\n        targetId: container.id,\n        amount: containerAmount,\n        percentage: containerPercentage,\n      };\n    });\n  }\n\n  /**\n   * Allocate resources based on demand\n   */\n  private allocateDemandBased(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    // Calculate demand for each container\n    const containerDemands = targetIds.map(id => {\n      const container = this.containers.get(id);\n      if (!container) {\n        return { id, demand: 0 };\n      }\n\n      // Calculate demand based on capacity and current amount\n      let demand = 0;\n      if (container.capacity && container.resources) {\n        const currentAmount = container.resources.get(resourceType) || 0;\n        demand = Math.max(0, container.capacity - currentAmount);\n      }\n\n      return { id, demand };\n    });\n\n    // Calculate total demand\n    const totalDemand = containerDemands.reduce((sum, container) => sum + container.demand, 0);\n\n    // If no demand, allocate equally\n    if (totalDemand <= 0) {\n      return this.allocateEqual(targetIds, amount);\n    }\n\n    // Allocate based on demand\n    return containerDemands.map(container => {\n      const containerPercentage = (container.demand / totalDemand) * 100;\n      const containerAmount = (container.demand / totalDemand) * amount;\n\n      return {\n        targetId: container.id,\n        amount: containerAmount,\n        percentage: containerPercentage,\n      };\n    });\n  }\n\n  /**\n   * Allocate resources based on custom logic\n   */\n  private allocateCustom(\n    targetIds: string[],\n    resourceType: ResourceType,\n    amount: number\n  ): Array<{ targetId: string; amount: number; percentage: number }> {\n    // This is a placeholder for custom allocation logic\n    // In a real implementation, this would use more complex rules\n\n    // For now, we'll use a combination of priority and demand\n    const priorityAllocations = this.allocatePriority(targetIds, resourceType, amount);\n    const demandAllocations = this.allocateDemandBased(targetIds, resourceType, amount);\n\n    // Combine allocations (50% priority, 50% demand)\n    return targetIds.map(id => {\n      const priorityAllocation = priorityAllocations.find(a => a.targetId === id);\n      const demandAllocation = demandAllocations.find(a => a.targetId === id);\n\n      const combinedAmount =\n        (priorityAllocation?.amount || 0) * 0.5 + (demandAllocation?.amount || 0) * 0.5;\n\n      const combinedPercentage =\n        (priorityAllocation?.percentage || 0) * 0.5 + (demandAllocation?.percentage || 0) * 0.5;\n\n      return {\n        targetId: id,\n        amount: combinedAmount,\n        percentage: combinedPercentage,\n      };\n    });\n  }\n\n  /**\n   * Get pool by ID\n   */\n  public getPool(id: string): ResourcePool | undefined {\n    return this.pools.get(id);\n  }\n\n  /**\n   * Get all pools\n   */\n  public getAllPools(): ResourcePool[] {\n    return Array.from(this.pools.values());\n  }\n\n  /**\n   * Get pools by type\n   */\n  public getPoolsByType(type: ResourceType): ResourcePool[] {\n    return Array.from(this.pools.values()).filter(pool => pool.type === type);\n  }\n\n  /**\n   * Get distribution rules by pool ID\n   */\n  public getDistributionRulesByPool(poolId: string): PoolDistributionRule[] {\n    return Array.from(this.distributionRules.values()).filter(rule => rule.poolId === poolId);\n  }\n\n  /**\n   * Get allocation history\n   */\n  public getAllocationHistory(): PoolAllocationResult[] {\n    return [...this.allocationHistory];\n  }\n\n  /**\n   * Get allocation history by pool ID\n   */\n  public getAllocationHistoryByPool(poolId: string): PoolAllocationResult[] {\n    return this.allocationHistory.filter(result => result.poolId === poolId);\n  }\n\n  /**\n   * Get allocation history by resource type\n   */\n  public getAllocationHistoryByType(type: ResourceType): PoolAllocationResult[] {\n    return this.allocationHistory.filter(result => result.resourceType === type);\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.pools.clear();\n    this.containers.clear();\n    this.distributionRules.clear();\n    this.resourceStates.clear();\n    this.allocationHistory = [];\n  }\n\n  /**\n   * Transfer resources directly between containers\n   */\n  public transferDirectly(\n    sourceId: string,\n    targetId: string,\n    resourceType: ResourceType,\n    amount: number\n  ): boolean {\n    const sourceContainer = this.containers.get(sourceId);\n    const targetContainer = this.containers.get(targetId);\n\n    if (!sourceContainer || !targetContainer) {\n      console.error(`Source or target container not found: ${sourceId}, ${targetId}`);\n      return false;\n    }\n\n    // Initialize resources maps if they don't exist\n    if (!sourceContainer.resources) {\n      sourceContainer.resources = new Map<ResourceType, number>();\n    }\n\n    if (!targetContainer.resources) {\n      targetContainer.resources = new Map<ResourceType, number>();\n    }\n\n    // Check if source has enough resources\n    const sourceAmount = sourceContainer.resources.get(resourceType) || 0;\n    if (sourceAmount < amount) {\n      console.error(`Insufficient ${resourceType} in source container ${sourceId}`);\n      return false;\n    }\n\n    // Transfer resources\n    const targetAmount = targetContainer.resources.get(resourceType) || 0;\n\n    // Update source and target containers\n    sourceContainer.resources.set(resourceType, sourceAmount - amount);\n    targetContainer.resources.set(resourceType, targetAmount + amount);\n\n    return true;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceStorageManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used. Allowed unused args must match /^_/u.","line":435,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":435,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'amount' is defined but never used. Allowed unused args must match /^_/u.","line":435,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":435,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResourceState, ResourceTransfer, ResourceType } from '../../types/resources/ResourceTypes';\n\n/**\n * Storage allocation strategy\n */\nexport type StorageAllocationStrategy = 'balanced' | 'prioritized' | 'dedicated';\n\n/**\n * Storage container configuration\n */\nexport interface StorageContainerConfig {\n  id: string;\n  name: string;\n  type: 'container' | 'pool' | 'storage';\n  capacity: number;\n  resourceTypes: ResourceType[];\n  priority: number;\n  location?: string;\n  efficiency?: number;\n  accessSpeed?: number;\n  upgradeLevel?: number;\n  maxUpgradeLevel?: number;\n}\n\n/**\n * Storage container state\n */\nexport interface StorageContainerState {\n  config: StorageContainerConfig;\n  resources: Map<ResourceType, ResourceState>;\n  totalStored: number;\n  lastUpdated: number;\n}\n\n/**\n * Storage allocation\n */\nexport interface StorageAllocation {\n  containerId: string;\n  resourceType: ResourceType;\n  amount: number;\n  percentage: number;\n}\n\n/**\n * Storage overflow policy\n */\nexport type StorageOverflowPolicy = 'reject' | 'redistribute' | 'convert' | 'discard';\n\n/**\n * Storage manager configuration\n */\nexport interface StorageManagerConfig {\n  defaultAllocationStrategy: StorageAllocationStrategy;\n  overflowPolicy: StorageOverflowPolicy;\n  autoRebalance: boolean;\n  rebalanceThreshold: number;\n  priorityWeights: {\n    containerPriority: number;\n    resourcePriority: number;\n    fillPercentage: number;\n  };\n}\n\n/**\n * Resource Storage Manager\n * Manages resource storage containers, pools, and allocation strategies\n */\nexport class ResourceStorageManager {\n  private containers: Map<string, StorageContainerState>;\n  private resourcePriorities: Map<ResourceType, number>;\n  private config: StorageManagerConfig;\n  private transferHistory: ResourceTransfer[];\n  private maxHistorySize: number;\n\n  constructor(config?: Partial<StorageManagerConfig>) {\n    this.containers = new Map();\n    this.resourcePriorities = new Map();\n    this.transferHistory = [];\n    this.maxHistorySize = 100;\n\n    // Default configuration\n    this.config = {\n      defaultAllocationStrategy: 'balanced',\n      overflowPolicy: 'redistribute',\n      autoRebalance: true,\n      rebalanceThreshold: 0.2, // 20% imbalance triggers rebalance\n      priorityWeights: {\n        containerPriority: 0.4,\n        resourcePriority: 0.4,\n        fillPercentage: 0.2,\n      },\n      ...config,\n    };\n\n    // Set default resource priorities\n    this.setDefaultResourcePriorities();\n  }\n\n  /**\n   * Set default resource priorities\n   */\n  private setDefaultResourcePriorities(): void {\n    // Higher number = higher priority\n    this.resourcePriorities.set('energy', 10);\n    this.resourcePriorities.set('minerals', 8);\n    // Replace non-existent resource types with valid ones\n    this.resourcePriorities.set('population', 9);\n    this.resourcePriorities.set('research', 10);\n    this.resourcePriorities.set('plasma', 10);\n    this.resourcePriorities.set('gas', 7);\n    this.resourcePriorities.set('exotic', 6);\n    this.resourcePriorities.set('research', 5);\n    this.resourcePriorities.set('population', 10);\n  }\n\n  /**\n   * Register a storage container\n   */\n  public registerContainer(config: StorageContainerConfig): boolean {\n    if (!config.id || !config.resourceTypes || config.resourceTypes.length === 0) {\n      console.error('Invalid storage container configuration:', config);\n      return false;\n    }\n\n    // Initialize resource states\n    const resources = new Map<ResourceType, ResourceState>();\n\n    for (const type of config.resourceTypes) {\n      resources.set(type, {\n        current: 0,\n        min: 0,\n        max: config.capacity / config.resourceTypes.length, // Divide capacity equally by default\n        production: 0,\n        consumption: 0,\n      });\n    }\n\n    this.containers.set(config.id, {\n      config,\n      resources,\n      totalStored: 0,\n      lastUpdated: Date.now(),\n    });\n\n    return true;\n  }\n\n  /**\n   * Unregister a storage container\n   */\n  public unregisterContainer(id: string): boolean {\n    if (!this.containers.has(id)) {\n      return false;\n    }\n\n    this.containers.delete(id);\n    return true;\n  }\n\n  /**\n   * Get a storage container\n   */\n  public getContainer(id: string): StorageContainerState | undefined {\n    return this.containers.get(id);\n  }\n\n  /**\n   * Get all storage containers\n   */\n  public getAllContainers(): StorageContainerState[] {\n    return Array.from(this.containers.values());\n  }\n\n  /**\n   * Get containers by resource type\n   */\n  public getContainersByResourceType(type: ResourceType): StorageContainerState[] {\n    return Array.from(this.containers.values()).filter(container => container.resources.has(type));\n  }\n\n  /**\n   * Store resource in a specific container\n   */\n  public storeResource(containerId: string, type: ResourceType, amount: number): number {\n    const container = this.containers.get(containerId);\n    if (!container || !container.resources.has(type) || amount <= 0) {\n      return 0;\n    }\n\n    const resourceState = container.resources.get(type)!;\n    const availableSpace = resourceState.max - resourceState.current;\n\n    if (availableSpace <= 0) {\n      return 0;\n    }\n\n    const amountToStore = Math.min(amount, availableSpace);\n\n    resourceState.current += amountToStore;\n\n    container.totalStored += amountToStore;\n    container.lastUpdated = Date.now();\n\n    // Record transfer\n    this.recordTransfer({\n      type,\n      source: 'external',\n      target: containerId,\n      amount: amountToStore,\n      timestamp: Date.now(),\n    });\n\n    return amountToStore;\n  }\n\n  /**\n   * Retrieve resource from a specific container\n   */\n  public retrieveResource(containerId: string, type: ResourceType, amount: number): number {\n    const container = this.containers.get(containerId);\n    if (!container || !container.resources.has(type) || amount <= 0) {\n      return 0;\n    }\n\n    const resourceState = container.resources.get(type)!;\n\n    if (resourceState.current <= 0) {\n      return 0;\n    }\n\n    const amountToRetrieve = Math.min(amount, resourceState.current);\n\n    resourceState.current -= amountToRetrieve;\n\n    container.totalStored -= amountToRetrieve;\n    container.lastUpdated = Date.now();\n\n    // Record transfer\n    this.recordTransfer({\n      type,\n      source: containerId,\n      target: 'external',\n      amount: amountToRetrieve,\n      timestamp: Date.now(),\n    });\n\n    return amountToRetrieve;\n  }\n\n  /**\n   * Store resource in the best available container\n   */\n  public storeResourceOptimal(type: ResourceType, amount: number): number {\n    if (amount <= 0) {\n      return 0;\n    }\n\n    // Get all containers that can store this resource type\n    const availableContainers = this.getContainersByResourceType(type);\n\n    if (availableContainers.length === 0) {\n      return 0;\n    }\n\n    // Calculate scores for each container based on the allocation strategy\n    const containerScores = this.calculateContainerScores(availableContainers, type);\n\n    // Sort containers by score (highest first)\n    const sortedContainers = [...containerScores].sort((a, b) => b.score - a.score);\n\n    let remainingAmount = amount;\n    let totalStored = 0;\n\n    // Try to store in containers by score order\n    for (const { containerId, score: _ } of sortedContainers) {\n      if (remainingAmount <= 0) {\n        break;\n      }\n\n      const amountStored = this.storeResource(containerId, type, remainingAmount);\n      totalStored += amountStored;\n      remainingAmount -= amountStored;\n    }\n\n    // Handle overflow if needed\n    if (remainingAmount > 0 && this.config.overflowPolicy !== 'reject') {\n      totalStored += this.handleOverflow(type, remainingAmount);\n    }\n\n    // Check if rebalancing is needed\n    if (this.config.autoRebalance) {\n      this.checkAndRebalance(type);\n    }\n\n    return totalStored;\n  }\n\n  /**\n   * Retrieve resource from the best available container\n   */\n  public retrieveResourceOptimal(type: ResourceType, amount: number): number {\n    if (amount <= 0) {\n      return 0;\n    }\n\n    // Get all containers that store this resource type\n    const availableContainers = this.getContainersByResourceType(type);\n\n    if (availableContainers.length === 0) {\n      return 0;\n    }\n\n    // Calculate scores for each container based on the allocation strategy\n    // For retrieval, we want to prioritize containers with higher fill percentage\n    const containerScores = this.calculateContainerScores(availableContainers, type, true);\n\n    // Sort containers by score (highest first)\n    const sortedContainers = [...containerScores].sort((a, b) => b.score - a.score);\n\n    let remainingAmount = amount;\n    let totalRetrieved = 0;\n\n    // Try to retrieve from containers by score order\n    for (const { containerId, score: _ } of sortedContainers) {\n      if (remainingAmount <= 0) {\n        break;\n      }\n\n      const amountRetrieved = this.retrieveResource(containerId, type, remainingAmount);\n      totalRetrieved += amountRetrieved;\n      remainingAmount -= amountRetrieved;\n    }\n\n    return totalRetrieved;\n  }\n\n  /**\n   * Calculate container scores for allocation\n   */\n  private calculateContainerScores(\n    containers: StorageContainerState[],\n    resourceType: ResourceType,\n    forRetrieval = false\n  ): Array<{ containerId: string; score: number }> {\n    const { containerPriority, resourcePriority, fillPercentage } = this.config.priorityWeights;\n    const resourcePriorityValue = this.resourcePriorities.get(resourceType) || 5;\n\n    return containers.map(container => {\n      const resourceState = container.resources.get(resourceType)!;\n      const fillRatio = resourceState.current / resourceState.max;\n\n      // For storage, we prefer containers with lower fill percentage\n      // For retrieval, we prefer containers with higher fill percentage\n      const fillScore = forRetrieval ? fillRatio : 1 - fillRatio;\n\n      // Calculate weighted score\n      const score =\n        container.config.priority * containerPriority +\n        resourcePriorityValue * resourcePriority +\n        fillScore * fillPercentage;\n\n      return {\n        containerId: container.config.id,\n        score,\n      };\n    });\n  }\n\n  /**\n   * Handle overflow based on policy\n   */\n  private handleOverflow(type: ResourceType, amount: number): number {\n    switch (this.config.overflowPolicy) {\n      case 'redistribute':\n        return this.redistributeOverflow(type, amount);\n\n      case 'convert':\n        return this.convertOverflow(type, amount);\n\n      case 'discard':\n        // Just discard the overflow\n        return 0;\n\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Redistribute overflow by expanding container capacity\n   */\n  private redistributeOverflow(type: ResourceType, amount: number): number {\n    // Find containers that can store this resource type\n    const relevantContainers = this.getContainersByResourceType(type);\n\n    if (relevantContainers.length === 0) {\n      return 0;\n    }\n\n    // Sort by upgrade potential (containers with lower upgrade level first)\n    const upgradableContainers = relevantContainers\n      .filter(\n        container =>\n          container.config.upgradeLevel !== undefined &&\n          container.config.maxUpgradeLevel !== undefined &&\n          container.config.upgradeLevel < container.config.maxUpgradeLevel\n      )\n      .sort((a, b) => (a.config.upgradeLevel || 0) - (b.config.upgradeLevel || 0));\n\n    if (upgradableContainers.length === 0) {\n      return 0;\n    }\n\n    // Upgrade the first container\n    const containerToUpgrade = upgradableContainers[0];\n    const resourceState = containerToUpgrade.resources.get(type)!;\n\n    // Increase capacity by 20%\n    const capacityIncrease = resourceState.max * 0.2;\n    resourceState.max += capacityIncrease;\n\n    // Increment upgrade level\n    if (containerToUpgrade.config.upgradeLevel !== undefined) {\n      containerToUpgrade.config.upgradeLevel += 1;\n    }\n\n    // Try to store again\n    return this.storeResource(containerToUpgrade.config.id, type, amount);\n  }\n\n  /**\n   * Convert overflow to another resource type\n   */\n  private convertOverflow(type: ResourceType, amount: number): number {\n    // This is a placeholder for resource conversion logic\n    // In a real implementation, this would convert the resource to another type\n    // based on conversion rules\n\n    // For now, we'll just return 0 (no storage)\n    return 0;\n  }\n\n  /**\n   * Check if rebalancing is needed and perform it\n   */\n  private checkAndRebalance(type: ResourceType): void {\n    const containers = this.getContainersByResourceType(type);\n\n    if (containers.length <= 1) {\n      return;\n    }\n\n    // Calculate fill ratios\n    const fillRatios = containers.map(container => {\n      const resourceState = container.resources.get(type)!;\n      return {\n        id: container.config.id,\n        fillRatio: resourceState.current / resourceState.max,\n      };\n    });\n\n    // Find min and max fill ratios\n    const minFill = Math.min(...fillRatios.map(r => r.fillRatio));\n    const maxFill = Math.max(...fillRatios.map(r => r.fillRatio));\n\n    // Check if imbalance exceeds threshold\n    if (maxFill - minFill > this.config.rebalanceThreshold) {\n      this.rebalanceContainers(type, containers);\n    }\n  }\n\n  /**\n   * Rebalance resources between containers\n   */\n  private rebalanceContainers(type: ResourceType, containers: StorageContainerState[]): void {\n    // Calculate target fill ratio (average)\n    let totalCurrent = 0;\n    let totalMax = 0;\n\n    for (const container of containers) {\n      const resourceState = container.resources.get(type)!;\n      totalCurrent += resourceState.current;\n      totalMax += resourceState.max;\n    }\n\n    const targetFillRatio = totalCurrent / totalMax;\n\n    // Calculate transfers needed\n    for (const container of containers) {\n      const resourceState = container.resources.get(type)!;\n      const currentFillRatio = resourceState.current / resourceState.max;\n\n      if (Math.abs(currentFillRatio - targetFillRatio) < 0.05) {\n        // Close enough, skip\n        continue;\n      }\n\n      const targetAmount = resourceState.max * targetFillRatio;\n      const difference = targetAmount - resourceState.current;\n\n      if (difference > 0) {\n        // Need to add resources\n        // Find container with excess\n        const sourceContainer = containers.find(c => {\n          const rs = c.resources.get(type)!;\n          return rs.current / rs.max > targetFillRatio + 0.05;\n        });\n\n        if (sourceContainer) {\n          const sourceState = sourceContainer.resources.get(type)!;\n          const availableToTransfer = sourceState.current - sourceState.max * targetFillRatio;\n          const transferAmount = Math.min(difference, availableToTransfer);\n\n          // Transfer resources\n          this.transferBetweenContainers(\n            sourceContainer.config.id,\n            container.config.id,\n            type,\n            transferAmount\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Transfer resources between containers\n   */\n  public transferBetweenContainers(\n    sourceId: string,\n    targetId: string,\n    type: ResourceType,\n    amount: number\n  ): number {\n    if (amount <= 0 || sourceId === targetId) {\n      return 0;\n    }\n\n    // Retrieve from source\n    const retrievedAmount = this.retrieveResource(sourceId, type, amount);\n\n    if (retrievedAmount <= 0) {\n      return 0;\n    }\n\n    // Store in target\n    const storedAmount = this.storeResource(targetId, type, retrievedAmount);\n\n    // If not all was stored, return remainder to source\n    if (storedAmount < retrievedAmount) {\n      const remainder = retrievedAmount - storedAmount;\n      this.storeResource(sourceId, type, remainder);\n    }\n\n    // Record transfer\n    this.recordTransfer({\n      type,\n      source: sourceId,\n      target: targetId,\n      amount: storedAmount,\n      timestamp: Date.now(),\n    });\n\n    return storedAmount;\n  }\n\n  /**\n   * Record a transfer in history\n   */\n  private recordTransfer(transfer: ResourceTransfer): void {\n    this.transferHistory.push(transfer);\n\n    // Trim history if needed\n    if (this.transferHistory.length > this.maxHistorySize) {\n      this.transferHistory = this.transferHistory.slice(-this.maxHistorySize);\n    }\n  }\n\n  /**\n   * Get transfer history\n   */\n  public getTransferHistory(): ResourceTransfer[] {\n    return [...this.transferHistory];\n  }\n\n  /**\n   * Get transfer history for a specific resource type\n   */\n  public getTransferHistoryByType(type: ResourceType): ResourceTransfer[] {\n    return this.transferHistory.filter(transfer => transfer.type === type);\n  }\n\n  /**\n   * Get total stored amount of a resource type\n   */\n  public getTotalStored(type: ResourceType): number {\n    let total = 0;\n\n    for (const container of this.containers.values()) {\n      const resourceState = container.resources.get(type);\n      if (resourceState) {\n        total += resourceState.current;\n      }\n    }\n\n    return total;\n  }\n\n  /**\n   * Get total capacity for a resource type\n   */\n  public getTotalCapacity(type: ResourceType): number {\n    let total = 0;\n\n    for (const container of this.containers.values()) {\n      const resourceState = container.resources.get(type);\n      if (resourceState) {\n        total += resourceState.max;\n      }\n    }\n\n    return total;\n  }\n\n  /**\n   * Set resource priority\n   */\n  public setResourcePriority(type: ResourceType, priority: number): void {\n    this.resourcePriorities.set(type, priority);\n  }\n\n  /**\n   * Get resource priority\n   */\n  public getResourcePriority(type: ResourceType): number {\n    return this.resourcePriorities.get(type) || 5;\n  }\n\n  /**\n   * Update container configuration\n   */\n  public updateContainerConfig(id: string, config: Partial<StorageContainerConfig>): boolean {\n    const container = this.containers.get(id);\n    if (!container) {\n      return false;\n    }\n\n    // Update config\n    container.config = {\n      ...container.config,\n      ...config,\n    };\n\n    return true;\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.containers.clear();\n    this.resourcePriorities.clear();\n    this.transferHistory = [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceThresholdManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":190,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { ModuleType } from '../../types/buildings/ModuleTypes';\nimport {\n  ResourceAlert,\n  ResourceState,\n  ResourceThreshold,\n  ResourceType,\n} from '../../types/resources/ResourceTypes';\nimport { validateResourceThreshold } from '../../utils/resources/resourceValidation';\n\n// Map our custom event types to the standard ModuleEventType\nconst RESOURCE_UPDATE: ModuleEventType = 'RESOURCE_UPDATED';\nconst RESOURCE_THRESHOLD_TRIGGERED: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_THRESHOLD_RESOLVED: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_PRODUCTION_ADJUST: ModuleEventType = 'RESOURCE_PRODUCTION_REGISTERED';\nconst RESOURCE_CONSUMPTION_ADJUST: ModuleEventType = 'RESOURCE_CONSUMPTION_REGISTERED';\nconst RESOURCE_TRANSFER_REQUEST: ModuleEventType = 'RESOURCE_TRANSFERRED';\nconst NOTIFICATION_CREATE: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_ALERT_CREATED: ModuleEventType = 'STATUS_CHANGED';\nconst RESOURCE_ALERT_CLEARED: ModuleEventType = 'STATUS_CHANGED';\n\n// Resource manager module ID and type\nconst RESOURCE_MANAGER_ID = 'resource-threshold-manager';\nconst RESOURCE_MANAGER_TYPE: ModuleType = 'resource-manager';\n\n/**\n * Threshold action types\n */\nexport type ThresholdActionType = 'production' | 'consumption' | 'transfer' | 'notification';\n\n/**\n * Threshold action\n */\nexport interface ThresholdAction {\n  type: ThresholdActionType;\n  target: string;\n  amount?: number;\n  message?: string;\n  priority?: number;\n}\n\n/**\n * Threshold configuration\n */\nexport interface ThresholdConfig {\n  id: string;\n  threshold: ResourceThreshold;\n  actions: ThresholdAction[];\n  enabled: boolean;\n  autoResolve?: boolean;\n}\n\n/**\n * Threshold status\n */\nexport type ThresholdStatus = 'inactive' | 'warning' | 'critical' | 'resolved';\n\n/**\n * Threshold state\n */\nexport interface ThresholdState {\n  config: ThresholdConfig;\n  status: ThresholdStatus;\n  lastTriggered?: number;\n  lastResolved?: number;\n  actionsTaken: number;\n}\n\n/**\n * Resource Threshold Manager\n * Manages resource thresholds and triggers actions when thresholds are crossed\n */\nexport class ResourceThresholdManager {\n  private thresholds: Map<string, ThresholdConfig>;\n  private thresholdStates: Map<string, ThresholdState>;\n  private activeAlerts: Map<string, ResourceAlert>;\n  private resourceStates: Map<ResourceType, ResourceState>;\n  private checkInterval: number;\n  private intervalId: NodeJS.Timeout | null;\n  private lastCheck: number;\n\n  constructor(checkInterval = 1000) {\n    this.thresholds = new Map();\n    this.thresholdStates = new Map();\n    this.activeAlerts = new Map();\n    this.resourceStates = new Map();\n    this.checkInterval = checkInterval;\n    this.intervalId = null;\n    this.lastCheck = Date.now();\n\n    // Register event listeners\n    moduleEventBus.subscribe(RESOURCE_UPDATE, this.handleResourceUpdate);\n  }\n\n  /**\n   * Start threshold monitoring\n   */\n  public start(): void {\n    if (this.intervalId) {\n      return;\n    }\n\n    this.intervalId = setInterval(() => {\n      this.checkThresholds();\n    }, this.checkInterval);\n  }\n\n  /**\n   * Stop threshold monitoring\n   */\n  public stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  /**\n   * Register a threshold configuration\n   */\n  public registerThreshold(config: ThresholdConfig): boolean {\n    if (!config.id || !validateResourceThreshold(config.threshold)) {\n      console.error('Invalid threshold configuration:', config);\n      return false;\n    }\n\n    this.thresholds.set(config.id, config);\n    this.thresholdStates.set(config.id, {\n      config,\n      status: 'inactive',\n      actionsTaken: 0,\n    });\n\n    return true;\n  }\n\n  /**\n   * Unregister a threshold configuration\n   */\n  public unregisterThreshold(id: string): boolean {\n    if (!this.thresholds.has(id)) {\n      return false;\n    }\n\n    this.thresholds.delete(id);\n    this.thresholdStates.delete(id);\n    return true;\n  }\n\n  /**\n   * Enable a threshold\n   */\n  public enableThreshold(id: string): boolean {\n    const config = this.thresholds.get(id);\n    if (!config) {\n      return false;\n    }\n\n    config.enabled = true;\n    return true;\n  }\n\n  /**\n   * Disable a threshold\n   */\n  public disableThreshold(id: string): boolean {\n    const config = this.thresholds.get(id);\n    if (!config) {\n      return false;\n    }\n\n    config.enabled = false;\n    return true;\n  }\n\n  /**\n   * Update resource state\n   */\n  private handleResourceUpdate = (event: ModuleEvent): void => {\n    if (event.data && event.data.type && event.data.state) {\n      this.resourceStates.set(event.data.type, event.data.state);\n    }\n  };\n\n  /**\n   * Check all thresholds\n   */\n  private checkThresholds(): void {\n    const now = Date.now();\n    const deltaTime = now - this.lastCheck;\n    this.lastCheck = now;\n\n    // Convert Map entries to array to avoid MapIterator error\n    const thresholdEntries = Array.from(this.thresholds.entries());\n\n    for (let i = 0; i < thresholdEntries.length; i++) {\n      const [id, config] = thresholdEntries[i];\n\n      if (!config.enabled) {\n        continue;\n      }\n\n      const state = this.thresholdStates.get(id);\n      if (!state) {\n        continue;\n      }\n\n      const resourceState = this.resourceStates.get(config.threshold.type);\n      if (!resourceState) {\n        continue;\n      }\n\n      const isTriggered = this.isThresholdTriggered(config.threshold, resourceState);\n\n      if (isTriggered && state.status === 'inactive') {\n        // Threshold triggered\n        state.status = this.getThresholdSeverity(config.threshold, resourceState);\n        state.lastTriggered = now;\n        this.executeThresholdActions(config, state.status);\n        state.actionsTaken++;\n\n        // Create alert\n        this.createAlert(config, state.status);\n\n        // Emit event\n        moduleEventBus.emit({\n          type: RESOURCE_THRESHOLD_TRIGGERED,\n          moduleId: RESOURCE_MANAGER_ID,\n          moduleType: RESOURCE_MANAGER_TYPE,\n          timestamp: now,\n          data: {\n            id,\n            type: config.threshold.type,\n            status: state.status,\n            timestamp: now,\n            severity: state.status === 'critical' ? 'high' : 'medium',\n          },\n        });\n      } else if (!isTriggered && state.status !== 'inactive') {\n        // Threshold resolved\n        state.status = 'resolved';\n        state.lastResolved = now;\n\n        // Clear alert if auto-resolve is enabled\n        if (config.autoResolve) {\n          this.clearAlert(id);\n        }\n\n        // Emit event\n        moduleEventBus.emit({\n          type: RESOURCE_THRESHOLD_RESOLVED,\n          moduleId: RESOURCE_MANAGER_ID,\n          moduleType: RESOURCE_MANAGER_TYPE,\n          timestamp: now,\n          data: {\n            id,\n            type: config.threshold.type,\n            timestamp: now,\n            severity: 'info',\n          },\n        });\n\n        // Reset to inactive after a short delay\n        setTimeout(() => {\n          if (state.status === 'resolved') {\n            state.status = 'inactive';\n          }\n        }, 5000);\n      }\n    }\n  }\n\n  /**\n   * Check if a threshold is triggered\n   */\n  private isThresholdTriggered(threshold: ResourceThreshold, state: ResourceState): boolean {\n    if (threshold.min !== undefined && state.current < threshold.min) {\n      return true;\n    }\n\n    if (threshold.max !== undefined && state.current > threshold.max) {\n      return true;\n    }\n\n    if (threshold.target !== undefined) {\n      const deviation = Math.abs(state.current - threshold.target);\n      const maxDeviation = threshold.target * 0.1; // 10% deviation\n\n      if (deviation > maxDeviation) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get threshold severity based on how far the value is from the threshold\n   */\n  private getThresholdSeverity(\n    threshold: ResourceThreshold,\n    state: ResourceState\n  ): ThresholdStatus {\n    if (threshold.min !== undefined && state.current < threshold.min) {\n      const ratio = state.current / threshold.min;\n\n      if (ratio < 0.5) {\n        return 'critical';\n      } else {\n        return 'warning';\n      }\n    }\n\n    if (threshold.max !== undefined && state.current > threshold.max) {\n      const ratio = state.current / threshold.max;\n\n      if (ratio > 1.5) {\n        return 'critical';\n      } else {\n        return 'warning';\n      }\n    }\n\n    if (threshold.target !== undefined) {\n      const deviation = Math.abs(state.current - threshold.target);\n      const deviationRatio = deviation / threshold.target;\n\n      if (deviationRatio > 0.25) {\n        return 'critical';\n      } else {\n        return 'warning';\n      }\n    }\n\n    return 'warning';\n  }\n\n  /**\n   * Execute threshold actions\n   */\n  private executeThresholdActions(config: ThresholdConfig, status: ThresholdStatus): void {\n    const now = Date.now();\n\n    for (const action of config.actions) {\n      switch (action.type) {\n        case 'production':\n          moduleEventBus.emit({\n            type: RESOURCE_PRODUCTION_ADJUST,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: config.threshold.type,\n              target: action.target,\n              amount: action.amount || 0,\n              priority: action.priority || 1,\n              severity: 'info',\n            },\n          });\n          break;\n\n        case 'consumption':\n          moduleEventBus.emit({\n            type: RESOURCE_CONSUMPTION_ADJUST,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: config.threshold.type,\n              target: action.target,\n              amount: action.amount || 0,\n              priority: action.priority || 1,\n              severity: 'info',\n            },\n          });\n          break;\n\n        case 'transfer':\n          moduleEventBus.emit({\n            type: RESOURCE_TRANSFER_REQUEST,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: config.threshold.type,\n              target: action.target,\n              amount: action.amount || 0,\n              priority: action.priority || 1,\n              severity: 'info',\n            },\n          });\n          break;\n\n        case 'notification':\n          moduleEventBus.emit({\n            type: NOTIFICATION_CREATE,\n            moduleId: RESOURCE_MANAGER_ID,\n            moduleType: RESOURCE_MANAGER_TYPE,\n            timestamp: now,\n            data: {\n              type: 'resource',\n              message: action.message || `Resource ${config.threshold.type} threshold triggered`,\n              severity: status === 'critical' ? 'high' : 'medium',\n              timestamp: now,\n            },\n          });\n          break;\n      }\n    }\n  }\n\n  /**\n   * Create a resource alert\n   */\n  private createAlert(config: ThresholdConfig, status: ThresholdStatus): void {\n    const now = Date.now();\n    const alert: ResourceAlert = {\n      id: config.id,\n      type: config.threshold.type,\n      threshold: config.threshold,\n      message: `Resource ${config.threshold.type} threshold triggered`,\n      severity: status === 'critical' ? 'critical' : 'medium',\n      autoResolve: config.autoResolve,\n      actions: config.actions\n        .filter(action => action.type !== 'notification') // Filter out notification actions\n        .map(action => ({\n          type: action.type as 'production' | 'consumption' | 'transfer',\n          target: action.target,\n          amount: action.amount || 0,\n        })),\n    };\n\n    this.activeAlerts.set(config.id, alert);\n\n    moduleEventBus.emit({\n      type: RESOURCE_ALERT_CREATED,\n      moduleId: RESOURCE_MANAGER_ID,\n      moduleType: RESOURCE_MANAGER_TYPE,\n      timestamp: now,\n      data: {\n        ...alert,\n        severity: status === 'critical' ? 'high' : 'medium',\n      },\n    });\n  }\n\n  /**\n   * Clear a resource alert\n   */\n  private clearAlert(id: string): void {\n    const now = Date.now();\n    const alert = this.activeAlerts.get(id);\n    if (!alert) {\n      return;\n    }\n\n    this.activeAlerts.delete(id);\n\n    moduleEventBus.emit({\n      type: RESOURCE_ALERT_CLEARED,\n      moduleId: RESOURCE_MANAGER_ID,\n      moduleType: RESOURCE_MANAGER_TYPE,\n      timestamp: now,\n      data: {\n        id,\n        type: alert.type,\n        timestamp: now,\n        severity: 'info',\n      },\n    });\n  }\n\n  /**\n   * Get all active alerts\n   */\n  public getActiveAlerts(): ResourceAlert[] {\n    return Array.from(this.activeAlerts.values());\n  }\n\n  /**\n   * Get all threshold configurations\n   */\n  public getThresholdConfigs(): ThresholdConfig[] {\n    return Array.from(this.thresholds.values());\n  }\n\n  /**\n   * Get all threshold states\n   */\n  public getThresholdStates(): ThresholdState[] {\n    return Array.from(this.thresholdStates.values());\n  }\n\n  /**\n   * Get a specific threshold state\n   */\n  public getThresholdState(id: string): ThresholdState | undefined {\n    return this.thresholdStates.get(id);\n  }\n\n  /**\n   * Clean up resources\n   */\n  public cleanup(): void {\n    this.stop();\n    // Use the unsubscribe function returned by subscribe\n    moduleEventBus.subscribe(RESOURCE_UPDATE, this.handleResourceUpdate)();\n    this.thresholds.clear();\n    this.thresholdStates.clear();\n    this.activeAlerts.clear();\n    this.resourceStates.clear();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/resource/ResourceTransferManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/weapons/WeaponEffectManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/managers/weapons/WeaponUpgradeManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8453,8456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8453,8456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { moduleEventBus } from '../../lib/modules/ModuleEvents';\nimport {\n  CombatWeaponStats,\n  WeaponCategory,\n  WeaponInstance,\n  WeaponUpgrade,\n  WeaponUpgradeType,\n} from '../../types/weapons/WeaponTypes';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\ninterface WeaponUpgradeEvents {\n  upgradeApplied: { weaponId: string; upgradeId: string };\n  upgradeRemoved: { weaponId: string; upgradeId: string };\n  statsUpdated: { weaponId: string; stats: CombatWeaponStats };\n  specializationUnlocked: { weaponId: string; specializationType: string };\n  experienceGained: { weaponId: string; amount: number };\n}\n\ninterface WeaponSpecialization {\n  id: string;\n  name: string;\n  description: string;\n  requirements: {\n    level: number;\n    upgrades: string[];\n    experience: number;\n  };\n  bonuses: Partial<CombatWeaponStats>;\n  unlocked: boolean;\n}\n\ntype UpgradeTree = {\n  [key in WeaponCategory]: {\n    upgrades: WeaponUpgrade[];\n    specializations: WeaponSpecialization[];\n  };\n};\n\nconst WEAPON_CATEGORIES: WeaponCategory[] = [\n  'machineGun',\n  'gaussCannon',\n  'railGun',\n  'mgss',\n  'rockets',\n  'pointDefense',\n  'flakCannon',\n  'capitalLaser',\n  'torpedoes',\n  'harmonicCannon',\n  'temporalCannon',\n  'quantumCannon',\n  'plasmaCannon',\n  'beamWeapon',\n  'pulseWeapon',\n  'disruptor',\n  'ionCannon',\n];\n\nexport class WeaponUpgradeManager extends EventEmitter<WeaponUpgradeEvents> {\n  private static instance: WeaponUpgradeManager;\n  private upgradeTrees: UpgradeTree;\n  private weaponExperience: Map<string, number> = new Map();\n  private appliedUpgrades: Map<string, Set<string>> = new Map();\n\n  private constructor() {\n    super();\n    this.upgradeTrees = this.initializeUpgradeTrees();\n  }\n\n  public static getInstance(): WeaponUpgradeManager {\n    if (!WeaponUpgradeManager.instance) {\n      WeaponUpgradeManager.instance = new WeaponUpgradeManager();\n    }\n    return WeaponUpgradeManager.instance;\n  }\n\n  private initializeUpgradeTrees(): UpgradeTree {\n    const trees = {} as UpgradeTree;\n\n    // Initialize upgrade trees for each weapon category\n    WEAPON_CATEGORIES.forEach(category => {\n      trees[category] = {\n        upgrades: this.createUpgradesForCategory(category),\n        specializations: this.createSpecializationsForCategory(category),\n      };\n    });\n\n    return trees;\n  }\n\n  private createUpgradesForCategory(category: WeaponCategory): WeaponUpgrade[] {\n    const baseUpgrades: WeaponUpgrade[] = [\n      {\n        id: `${category}-damage-1`,\n        name: 'Enhanced Damage',\n        type: 'damage' as WeaponUpgradeType,\n        description: 'Increases weapon damage output',\n        stats: {\n          damage: 1.2,\n          effects: [], // Maintain the effects array\n        },\n        requirements: { tech: [], resources: [] },\n        unlocked: true,\n      },\n      {\n        id: `${category}-rate-1`,\n        name: 'Rapid Fire',\n        type: 'rate' as WeaponUpgradeType,\n        description: 'Increases rate of fire',\n        stats: {\n          rateOfFire: 1.2,\n          effects: [], // Maintain the effects array\n        },\n        requirements: { tech: [], resources: [] },\n        unlocked: true,\n      },\n      {\n        id: `${category}-accuracy-1`,\n        name: 'Targeting Enhancement',\n        type: 'accuracy' as WeaponUpgradeType,\n        description: 'Improves weapon accuracy',\n        stats: {\n          accuracy: 1.15,\n          effects: [], // Maintain the effects array\n        },\n        requirements: { tech: [], resources: [] },\n        unlocked: true,\n      },\n    ];\n\n    // Add category-specific upgrades\n    switch (category) {\n      case 'plasmaCannon':\n        baseUpgrades.push({\n          id: `${category}-plasma-overcharge`,\n          name: 'Plasma Overcharge',\n          type: 'plasma' as WeaponUpgradeType,\n          description: 'Enhances plasma damage and penetration',\n          stats: {\n            damage: 1.3,\n            effects: [], // Maintain the effects array\n            special: { armorPenetration: 0.4 },\n          },\n          requirements: { tech: [], resources: [] },\n          unlocked: false,\n        });\n        break;\n      case 'beamWeapon':\n        baseUpgrades.push({\n          id: `${category}-beam-focus`,\n          name: 'Beam Focus',\n          type: 'beam' as WeaponUpgradeType,\n          description: 'Increases beam weapon range and accuracy',\n          stats: {\n            range: 1.25,\n            accuracy: 1.2,\n            effects: [], // Maintain the effects array\n          },\n          requirements: { tech: [], resources: [] },\n          unlocked: false,\n        });\n        break;\n      // Add more category-specific upgrades\n    }\n\n    return baseUpgrades;\n  }\n\n  private createSpecializationsForCategory(category: WeaponCategory): WeaponSpecialization[] {\n    const baseSpecializations: WeaponSpecialization[] = [\n      {\n        id: `${category}-specialist`,\n        name: 'Weapon Specialist',\n        description: 'Master of this weapon type',\n        requirements: {\n          level: 3,\n          upgrades: [`${category}-damage-1`, `${category}-accuracy-1`],\n          experience: 1000,\n        },\n        bonuses: {\n          damage: 1.5,\n          accuracy: 1.3,\n          rateOfFire: 1.2,\n        },\n        unlocked: false,\n      },\n    ];\n\n    // Add category-specific specializations\n    switch (category) {\n      case 'plasmaCannon':\n        baseSpecializations.push({\n          id: `${category}-plasma-master`,\n          name: 'Plasma Master',\n          description: 'Expert in plasma weapon systems',\n          requirements: {\n            level: 5,\n            upgrades: [`${category}-plasma-overcharge`],\n            experience: 2000,\n          },\n          bonuses: {\n            damage: 2.0,\n            special: {\n              armorPenetration: 0.6,\n              shieldDamageBonus: 0.4,\n            },\n          },\n          unlocked: false,\n        });\n        break;\n      // Add more category-specific specializations\n    }\n\n    return baseSpecializations;\n  }\n\n  public applyUpgrade(weapon: WeaponInstance, upgradeId: string): boolean {\n    const { category } = weapon.config;\n    const upgrade = this.upgradeTrees[category].upgrades.find(u => u.id === upgradeId);\n\n    if (!upgrade || !upgrade.unlocked) {\n      return false;\n    }\n\n    // Get or create the set of applied upgrades for this weapon\n    let weaponUpgrades = this.appliedUpgrades.get(weapon.config.id);\n    if (!weaponUpgrades) {\n      weaponUpgrades = new Set();\n      this.appliedUpgrades.set(weapon.config.id, weaponUpgrades);\n    }\n\n    // Apply the upgrade\n    weaponUpgrades.add(upgradeId);\n    const updatedStats = this.calculateUpdatedStats(weapon, Array.from(weaponUpgrades));\n\n    // Emit events\n    this.emit('upgradeApplied', { weaponId: weapon.config.id, upgradeId });\n    this.emit('statsUpdated', { weaponId: weapon.config.id, stats: updatedStats });\n\n    // Check for specialization unlocks\n    this.checkSpecializationUnlocks(weapon);\n\n    return true;\n  }\n\n  private calculateUpdatedStats(\n    weapon: WeaponInstance,\n    appliedUpgradeIds: string[]\n  ): CombatWeaponStats {\n    // Create a new stats object with all required properties\n    const updatedStats: CombatWeaponStats = {\n      damage: weapon.config.baseStats.damage,\n      range: weapon.config.baseStats.range,\n      accuracy: weapon.config.baseStats.accuracy,\n      rateOfFire: weapon.config.baseStats.rateOfFire,\n      energyCost: weapon.config.baseStats.energyCost,\n      cooldown: weapon.config.baseStats.cooldown,\n      effects: [...weapon.config.baseStats.effects],\n      special: { ...weapon.config.baseStats.special },\n    };\n\n    const { category } = weapon.config;\n\n    // Get all applied upgrades\n    const appliedUpgrades = appliedUpgradeIds\n      .map(id => this.upgradeTrees[category].upgrades.find(u => u.id === id))\n      .filter((u): u is WeaponUpgrade => u !== undefined);\n\n    // Apply upgrades\n    appliedUpgrades.forEach(upgrade => {\n      Object.entries(upgrade.stats).forEach(([key, value]) => {\n        if (key === 'special' && value && typeof value === 'object') {\n          updatedStats.special = {\n            ...updatedStats.special,\n            ...value,\n          };\n        } else if (key === 'effects' && Array.isArray(value)) {\n          updatedStats.effects = [...updatedStats.effects, ...value];\n        } else if (key !== 'special' && key !== 'effects') {\n          const numericValue = value as number;\n          (updatedStats as any)[key] *= numericValue;\n        }\n      });\n    });\n\n    return updatedStats;\n  }\n\n  public addExperience(weaponId: string, amount: number): void {\n    const currentExp = this.weaponExperience.get(weaponId) || 0;\n    this.weaponExperience.set(weaponId, currentExp + amount);\n\n    // Emit event through module event bus\n    moduleEventBus.emit({\n      type: 'MODULE_UPGRADED',\n      moduleId: weaponId,\n      moduleType: 'hangar', // Changed from 'weapon' to 'hangar' as it's a valid ModuleType\n      timestamp: Date.now(),\n      data: { experience: currentExp + amount },\n    });\n  }\n\n  private checkSpecializationUnlocks(weapon: WeaponInstance): void {\n    const { category } = weapon.config;\n    const weaponId = weapon.config.id;\n    const experience = this.weaponExperience.get(weaponId) || 0;\n    const appliedUpgrades = Array.from(this.appliedUpgrades.get(weaponId) || []);\n\n    this.upgradeTrees[category].specializations.forEach(spec => {\n      if (!spec.unlocked && this.canUnlockSpecialization(spec, experience, appliedUpgrades)) {\n        spec.unlocked = true;\n        this.emit('specializationUnlocked', {\n          weaponId,\n          specializationType: spec.id,\n        });\n      }\n    });\n  }\n\n  private canUnlockSpecialization(\n    spec: WeaponSpecialization,\n    experience: number,\n    appliedUpgrades: string[]\n  ): boolean {\n    return (\n      experience >= spec.requirements.experience &&\n      spec.requirements.upgrades.every(required => appliedUpgrades.includes(required))\n    );\n  }\n\n  public getAvailableUpgrades(weapon: WeaponInstance): WeaponUpgrade[] {\n    const { category } = weapon.config;\n    return this.upgradeTrees[category].upgrades.filter(upgrade => upgrade.unlocked);\n  }\n\n  public getSpecializations(weapon: WeaponInstance): WeaponSpecialization[] {\n    const { category } = weapon.config;\n    return this.upgradeTrees[category].specializations;\n  }\n\n  public cleanup(): void {\n    this.weaponExperience.clear();\n    this.appliedUpgrades.clear();\n  }\n\n  public subscribe<K extends keyof WeaponUpgradeEvents>(\n    event: K,\n    handler: (data: WeaponUpgradeEvents[K]) => void\n  ) {\n    this.on(event, handler);\n    return {\n      unsubscribe: () => {\n        this.off(event, handler);\n      },\n    };\n  }\n\n  public getWeaponExperience(weaponId: string): number {\n    return this.weaponExperience.get(weaponId) || 0;\n  }\n\n  public addWeaponExperience(weaponId: string, amount: number): void {\n    const currentExp = this.getWeaponExperience(weaponId);\n    this.weaponExperience.set(weaponId, currentExp + amount);\n    this.emit('experienceGained', { weaponId, amount });\n  }\n}\n\nexport const weaponUpgradeManager = WeaponUpgradeManager.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/hooks/automation/useAutomation.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3681,3684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3681,3684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3740,3743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3740,3743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { act, renderHook } from '@testing-library/react';\nimport { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { useAutomation } from '../../../hooks/automation/useAutomation';\nimport { GlobalRoutine } from '../../../managers/automation/GlobalAutomationManager';\nimport { MessagePriority, SystemId } from '../../../utils/events/EventCommunication';\n\n// Mock the GlobalAutomationManager\nvi.mock('../../../managers/automation/GlobalAutomationManager', () => {\n  const mockRoutines: GlobalRoutine[] = [];\n\n  return {\n    GlobalRoutineType: {\n      'resource-balancing': 'resource-balancing',\n      'performance-optimization': 'performance-optimization',\n      'emergency-response': 'emergency-response',\n      'system-maintenance': 'system-maintenance',\n      'scheduled-task': 'scheduled-task',\n      custom: 'custom',\n    },\n    GlobalAutomationManager: vi.fn().mockImplementation(() => ({\n      initialize: vi.fn(),\n      getAllRoutines: vi.fn().mockImplementation(() => mockRoutines),\n      registerRoutine: vi.fn().mockImplementation((routine: GlobalRoutine) => {\n        mockRoutines.push(routine);\n        return routine.id;\n      }),\n      unregisterRoutine: vi.fn().mockImplementation((id: string) => {\n        const index = mockRoutines.findIndex(r => r.id === id);\n        if (index >= 0) {\n          mockRoutines.splice(index, 1);\n          return true;\n        }\n        return false;\n      }),\n      enableRoutine: vi.fn().mockImplementation((id: string) => {\n        const routine = mockRoutines.find(r => r.id === id);\n        if (routine) {\n          routine.enabled = true;\n          return true;\n        }\n        return false;\n      }),\n      disableRoutine: vi.fn().mockImplementation((id: string) => {\n        const routine = mockRoutines.find(r => r.id === id);\n        if (routine) {\n          routine.enabled = false;\n          return true;\n        }\n        return false;\n      }),\n      getRoutinesByType: vi.fn().mockImplementation((type: string) => {\n        return mockRoutines.filter(r => r.type === type);\n      }),\n      getRoutinesByTag: vi.fn().mockImplementation((tag: string) => {\n        return mockRoutines.filter(r => r.tags.includes(tag));\n      }),\n      getRoutinesBySystem: vi.fn().mockImplementation((system: SystemId) => {\n        return mockRoutines.filter(r => r.systems.includes(system));\n      }),\n      getActiveRoutines: vi.fn().mockImplementation(() => {\n        return mockRoutines.filter(r => r.enabled);\n      }),\n      cleanup: vi.fn(),\n    })),\n  };\n});\n\n// Mock the AutomationManager\nvi.mock('../../../managers/game/AutomationManager', () => ({\n  AutomationManager: vi.fn().mockImplementation(() => ({\n    registerRule: vi.fn(),\n    updateRule: vi.fn(),\n    removeRule: vi.fn(),\n    getRule: vi.fn(),\n    getRulesForModule: vi.fn().mockReturnValue([]),\n  })),\n}));\n\n// Mock the SystemId values\nvi.mock('../../../utils/events/EventCommunication', () => ({\n  MessagePriority: {\n    CRITICAL: 0,\n    HIGH: 1,\n    NORMAL: 2,\n    LOW: 3,\n    BACKGROUND: 4,\n  },\n  SystemId: {\n    'resource-system': 'resource-system',\n    'module-system': 'module-system',\n    'combat-system': 'combat-system',\n    'exploration-system': 'exploration-system',\n    'mining-system': 'mining-system',\n    'tech-system': 'tech-system',\n    'ui-system': 'ui-system',\n    'game-loop': 'game-loop',\n    'event-system': 'event-system',\n  },\n}));\n\ndescribe('useAutomation', () => {\n  // Define system IDs for tests\n  const resourceSystem = 'resource-system' as SystemId;\n  const moduleSystem = 'module-system' as SystemId;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n\n    // Reset the singleton instances\n    (useAutomation as any).globalAutomationManager = null;\n    (useAutomation as any).automationManagerInstance = null;\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it('should initialize the automation manager', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Verify that the hook initialized properly\n    expect(result.current.isInitialized).toBe(true);\n    expect(result.current.routines).toEqual([]);\n    expect(result.current.activeRoutines).toEqual([]);\n    expect(result.current.automationManager).toBeDefined();\n  });\n\n  it('should create a routine', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create a new routine\n    act(() => {\n      const newRoutine = result.current.createRoutine({\n        name: 'Test Routine',\n        type: 'resource-balancing',\n        description: 'A test routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n\n      // Verify that the routine was created\n      expect(newRoutine).toBeDefined();\n      expect(newRoutine?.name).toBe('Test Routine');\n    });\n\n    // Verify that the routines list was updated\n    expect(result.current.routines.length).toBe(1);\n    expect(result.current.routines[0].name).toBe('Test Routine');\n  });\n\n  it('should enable and disable a routine', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create a new routine (initially disabled)\n    act(() => {\n      result.current.createRoutine({\n        name: 'Test Routine',\n        type: 'resource-balancing',\n        description: 'A test routine',\n        enabled: false,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get the routine ID\n    const routineId = result.current.routines[0].id;\n\n    // Enable the routine\n    act(() => {\n      result.current.enableRoutine(routineId);\n    });\n\n    // Verify that the routine is enabled\n    expect(result.current.routines[0].enabled).toBe(true);\n    expect(result.current.activeRoutines.length).toBe(1);\n\n    // Disable the routine\n    act(() => {\n      result.current.disableRoutine(routineId);\n    });\n\n    // Verify that the routine is disabled\n    expect(result.current.routines[0].enabled).toBe(false);\n    expect(result.current.activeRoutines.length).toBe(0);\n  });\n\n  it('should remove a routine', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create a new routine\n    act(() => {\n      result.current.createRoutine({\n        name: 'Test Routine',\n        type: 'resource-balancing',\n        description: 'A test routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get the routine ID\n    const routineId = result.current.routines[0].id;\n\n    // Remove the routine\n    act(() => {\n      result.current.removeRoutine(routineId);\n    });\n\n    // Verify that the routine was removed\n    expect(result.current.routines.length).toBe(0);\n  });\n\n  it('should filter routines by type', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create routines of different types\n    act(() => {\n      result.current.createRoutine({\n        name: 'Resource Routine',\n        type: 'resource-balancing',\n        description: 'A resource routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n\n      result.current.createRoutine({\n        name: 'Performance Routine',\n        type: 'performance-optimization',\n        description: 'A performance routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get routines by type\n    const resourceRoutines = result.current.getRoutinesByType('resource-balancing');\n    const performanceRoutines = result.current.getRoutinesByType('performance-optimization');\n\n    // Verify the results\n    expect(resourceRoutines.length).toBe(1);\n    expect(resourceRoutines[0].name).toBe('Resource Routine');\n\n    expect(performanceRoutines.length).toBe(1);\n    expect(performanceRoutines[0].name).toBe('Performance Routine');\n  });\n\n  it('should filter routines by tag', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create routines with different tags\n    act(() => {\n      result.current.createRoutine({\n        name: 'Routine 1',\n        type: 'resource-balancing',\n        description: 'A routine with tag1',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['tag1', 'common'],\n      });\n\n      result.current.createRoutine({\n        name: 'Routine 2',\n        type: 'performance-optimization',\n        description: 'A routine with tag2',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['tag2', 'common'],\n      });\n    });\n\n    // Get routines by tag\n    const tag1Routines = result.current.getRoutinesByTag('tag1');\n    const tag2Routines = result.current.getRoutinesByTag('tag2');\n    const commonRoutines = result.current.getRoutinesByTag('common');\n\n    // Verify the results\n    expect(tag1Routines.length).toBe(1);\n    expect(tag1Routines[0].name).toBe('Routine 1');\n\n    expect(tag2Routines.length).toBe(1);\n    expect(tag2Routines[0].name).toBe('Routine 2');\n\n    expect(commonRoutines.length).toBe(2);\n  });\n\n  it('should filter routines by system', () => {\n    const { result } = renderHook(() => useAutomation());\n\n    // Create routines for different systems\n    act(() => {\n      result.current.createRoutine({\n        name: 'Resource System Routine',\n        type: 'resource-balancing',\n        description: 'A resource system routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [resourceSystem],\n        tags: ['test'],\n      });\n\n      result.current.createRoutine({\n        name: 'Module System Routine',\n        type: 'performance-optimization',\n        description: 'A module system routine',\n        enabled: true,\n        priority: MessagePriority.NORMAL,\n        interval: 5000,\n        conditions: [],\n        actions: [],\n        systems: [moduleSystem],\n        tags: ['test'],\n      });\n    });\n\n    // Get routines by system\n    const resourceSystemRoutines = result.current.getRoutinesBySystem(resourceSystem);\n    const moduleSystemRoutines = result.current.getRoutinesBySystem(moduleSystem);\n\n    // Verify the results\n    expect(resourceSystemRoutines.length).toBe(1);\n    expect(resourceSystemRoutines[0].name).toBe('Resource System Routine');\n\n    expect(moduleSystemRoutines.length).toBe(1);\n    expect(moduleSystemRoutines[0].name).toBe('Module System Routine');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/hooks/resources/useResourceTracking.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/automation/GlobalAutomationManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/game/GameLoopManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/module/ModuleManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/module/ModuleUpgradeManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/resource/ResourceFlowManager.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4242,4245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4242,4245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5588,5591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5588,5591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { ResourceFlowManager } from '../../../managers/resource/ResourceFlowManager';\nimport { ResourceFlow, ResourceState, ResourceType } from '../../../types/resources/ResourceTypes';\nimport { validateResourceFlow } from '../../../utils/resources/resourceValidation';\n\n// Import FlowNode and FlowConnection types\nimport type {\n  FlowConnection,\n  FlowNode,\n  FlowNodeType,\n} from '../../../managers/resource/ResourceFlowManager';\n\n// Mock the resourceValidation module\nvi.mock('../../../utils/resources/resourceValidation', () => ({\n  validateResourceFlow: vi.fn().mockImplementation(() => true),\n  validateResourceTransfer: vi.fn().mockImplementation(() => true),\n}));\n\ndescribe('ResourceFlowManager', () => {\n  let flowManager: ResourceFlowManager;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    flowManager = new ResourceFlowManager();\n  });\n\n  afterEach(() => {\n    flowManager.cleanup();\n  });\n\n  it('should create a new instance', () => {\n    expect(flowManager).toBeInstanceOf(ResourceFlowManager);\n  });\n\n  it('should register a node', () => {\n    const node: FlowNode = {\n      id: 'test-node',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerNode(node);\n    expect(result).toBe(true);\n\n    const nodes = flowManager.getNodes();\n    expect(nodes.length).toBe(1);\n    expect(nodes[0].id).toBe('test-node');\n  });\n\n  it('should not register an invalid node', () => {\n    const invalidNode: FlowNode = {\n      id: '',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerNode(invalidNode);\n    expect(result).toBe(false);\n\n    const nodes = flowManager.getNodes();\n    expect(nodes.length).toBe(0);\n  });\n\n  it('should register a connection', () => {\n    // Register nodes first\n    flowManager.registerNode({\n      id: 'source-node',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    flowManager.registerNode({\n      id: 'target-node',\n      type: 'consumer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    const connection: FlowConnection = {\n      id: 'test-connection',\n      source: 'source-node',\n      target: 'target-node',\n      resourceType: 'energy' as ResourceType,\n      maxRate: 10,\n      currentRate: 0,\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerConnection(connection);\n    expect(result).toBe(true);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(1);\n    expect(connections[0].id).toBe('test-connection');\n  });\n\n  it('should not register an invalid connection', () => {\n    const invalidConnection: FlowConnection = {\n      id: '',\n      source: 'source-node',\n      target: 'target-node',\n      resourceType: 'energy' as ResourceType,\n      maxRate: 10,\n      currentRate: 0,\n      priority: 1,\n      active: true,\n    };\n\n    const result = flowManager.registerConnection(invalidConnection);\n    expect(result).toBe(false);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(0);\n  });\n\n  it('should create a flow', () => {\n    const flow: ResourceFlow = {\n      source: 'source-node',\n      target: 'target-node',\n      resources: [\n        {\n          type: 'energy' as ResourceType,\n          amount: 10,\n          interval: 1000,\n        },\n      ],\n    };\n\n    const result = flowManager.createFlow(flow);\n    expect(result).toBe(true);\n\n    // Verify that nodes and connection were created\n    const nodes = flowManager.getNodes();\n    expect(nodes.length).toBe(2);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(1);\n    expect(connections[0].resourceType).toBe('energy');\n    expect(connections[0].maxRate).toBe(10);\n  });\n\n  it('should not create an invalid flow', () => {\n    // Mock validateResourceFlow to return false for this test\n    (validateResourceFlow as any).mockReturnValueOnce(false);\n\n    const invalidFlow = {\n      source: '',\n      target: 'target-node',\n      resources: [],\n    } as ResourceFlow;\n\n    const result = flowManager.createFlow(invalidFlow);\n    expect(result).toBe(false);\n\n    const connections = flowManager.getConnections();\n    expect(connections.length).toBe(0);\n  });\n\n  it('should optimize flows', () => {\n    // Register nodes\n    flowManager.registerNode({\n      id: 'producer-1',\n      type: 'producer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    flowManager.registerNode({\n      id: 'consumer-1',\n      type: 'consumer' as FlowNodeType,\n      resources: ['energy' as ResourceType],\n      priority: 1,\n      active: true,\n    });\n\n    // Register connection\n    flowManager.registerConnection({\n      id: 'connection-1',\n      source: 'producer-1',\n      target: 'consumer-1',\n      resourceType: 'energy' as ResourceType,\n      maxRate: 10,\n      currentRate: 0,\n      priority: 1,\n      active: true,\n    });\n\n    // Set resource state using the network property\n    const resourceState: ResourceState = {\n      current: 50,\n      min: 0,\n      max: 100,\n      production: 10,\n      consumption: 5,\n    };\n\n    // Access the network property directly to set the resource state\n    (flowManager as any).network.resourceStates.set('energy', resourceState);\n\n    // Optimize flows\n    const result = flowManager.optimizeFlows();\n\n    expect(result.transfers.length).toBe(1);\n    expect(result.updatedConnections.length).toBe(1);\n    expect(result.transfers[0].type).toBe('energy');\n    expect(result.transfers[0].amount).toBe(10); // maxRate\n  });\n\n  it('should handle transfer history', () => {\n    // Add a transfer to history\n    const transfer = {\n      type: 'energy' as ResourceType,\n      source: 'producer-1',\n      target: 'consumer-1',\n      amount: 10,\n      timestamp: Date.now(),\n    };\n\n    flowManager.addToTransferHistory(transfer);\n\n    const history = flowManager.getTransferHistory();\n    expect(history.length).toBe(1);\n    expect(history[0].type).toBe('energy');\n    expect(history[0].amount).toBe(10);\n  });\n\n  it('should limit transfer history size', () => {\n    // Set a small history size\n    flowManager = new ResourceFlowManager(1000, 5); // 5 history items max\n\n    // Add multiple transfers\n    for (let i = 0; i < 10; i++) {\n      flowManager.addToTransferHistory({\n        type: 'energy' as ResourceType,\n        source: 'producer-1',\n        target: 'consumer-1',\n        amount: i,\n        timestamp: Date.now() + i,\n      });\n    }\n\n    const history = flowManager.getTransferHistory();\n    expect(history.length).toBe(5); // Limited to 5 items\n    expect(history[0].amount).toBe(9); // Most recent first\n    expect(history[4].amount).toBe(5);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/resource/ResourceStorageManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/managers/resource/ResourceThresholdManager.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventCommunication.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventDispatcher.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventFilteringBasic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/EventFilteringComprehensive.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/tests/utils/events/rxjsIntegration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/buildings/ModuleTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/buildings/ShipHangarTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/combat/CombatTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/combat/HazardTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/combat/SalvageTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/common.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/core/GameTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/core/Position.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/debug/DebugTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/events/moduleEventBus.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/officers/OfficerTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2133,2136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2133,2136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Officer system types and interfaces\n * @module OfficerTypes\n */\n\n// Base Types\n// ------------------------------------------------------------\n\n/**\n * Officer roles\n */\nexport type OfficerRole = 'Squad Leader' | 'Captain';\n\n/**\n * Officer specializations\n */\nexport type OfficerSpecialization = 'War' | 'Recon' | 'Mining';\n\n/**\n * Officer status\n */\nexport type OfficerStatus = 'available' | 'training' | 'assigned';\n\n/**\n * Officer tier\n */\nexport type OfficerTier = 1 | 2 | 3;\n\n/**\n * Officer skills\n */\nexport interface OfficerSkills {\n  combat: number;\n  leadership: number;\n  technical: number;\n}\n\n// Core Interfaces\n// ------------------------------------------------------------\n\n/**\n * Base officer interface\n */\nexport interface Officer {\n  id: string;\n  name: string;\n  portrait: string;\n  level: number;\n  xp: number;\n  nextLevelXp: number;\n  role: OfficerRole;\n  status: OfficerStatus;\n  specialization: OfficerSpecialization;\n  skills: OfficerSkills;\n  assignedTo?: string;\n  trainingProgress?: number;\n  traits: string[];\n  stats: OfficerSkills;\n}\n\n/**\n * Squad interface\n */\nexport interface Squad {\n  id: string;\n  name: string;\n  leader?: Officer;\n  members: Officer[];\n  specialization: OfficerSpecialization;\n  bonuses: {\n    combat: number;\n    efficiency: number;\n    survival: number;\n  };\n}\n\n/**\n * Training program interface\n */\nexport interface TrainingProgram {\n  id: string;\n  officerId: string;\n  specialization: OfficerSpecialization;\n  progress: number;\n  startTime: number;\n  duration: number;\n  bonuses: {\n    xpMultiplier: number;\n    skillGainRate: number;\n  };\n}\n\n// Event Types\n// ------------------------------------------------------------\n\n/**\n * Officer event types\n */\nexport type OfficerEventType =\n  | 'officerHired'\n  | 'officerAssigned'\n  | 'trainingStarted'\n  | 'trainingCompleted'\n  | 'experienceGained'\n  | 'officerLeveledUp'\n  | 'squadCreated'\n  | 'squadUpdated'\n  | 'squadBonusesUpdated'\n  | 'tierUpgraded'\n  | 'academyActivated';\n\n/**\n * Officer event interface\n */\nexport interface OfficerEvent {\n  type: OfficerEventType;\n  officerId?: string;\n  squadId?: string;\n  data?: any;\n  timestamp: number;\n}\n\n// Manager Interface\n// ------------------------------------------------------------\n\n/**\n * Officer manager interface\n */\nexport interface OfficerManager {\n  hireOfficer(role: OfficerRole, specialization: OfficerSpecialization): Officer;\n  startTraining(officerId: string, specialization: OfficerSpecialization): void;\n  assignOfficer(officerId: string, assignmentId: string): void;\n  createSquad(name: string, specialization: OfficerSpecialization): Squad;\n  assignToSquad(officerId: string, squadId: string): void;\n  addExperience(officerId: string, amount: number, activity?: string): void;\n  update(deltaTime: number): void;\n  getOfficer(id: string): Officer | undefined;\n  getSquad(id: string): Squad | undefined;\n  getAvailableOfficers(): Officer[];\n  getSquadsBySpecialization(specialization: OfficerSpecialization): Squad[];\n  getCurrentTier(): OfficerTier;\n}\n\n// Configuration Types\n// ------------------------------------------------------------\n\n/**\n * Officer trait configuration\n */\nexport interface OfficerTrait {\n  id: string;\n  name: string;\n  description: string;\n  effects: {\n    skills?: Partial<OfficerSkills>;\n    bonuses?: {\n      xpGain?: number;\n      trainingSpeed?: number;\n      squadBonus?: number;\n    };\n  };\n}\n\n/**\n * Training configuration\n */\nexport interface TrainingConfig {\n  baseTime: number;\n  levelModifier: number;\n  specializationModifier: number;\n  xpMultiplier: number;\n  skillGainRate: number;\n}\n\n/**\n * Squad configuration\n */\nexport interface SquadConfig {\n  maxSize: number;\n  bonusMultipliers: {\n    combat: number;\n    efficiency: number;\n    survival: number;\n  };\n  leadershipBonus: number;\n}\n\nexport interface OfficerEvents {\n  officerHired: {\n    officer: Officer;\n  };\n  officerLeveledUp: {\n    officerId: string;\n    newLevel: number;\n    skills: OfficerSkills;\n  };\n  experienceGained: {\n    officerId: string;\n    amount: number;\n    newTotal: number;\n    nextLevel: number;\n  };\n  trainingStarted: {\n    officerId: string;\n    program: TrainingProgram;\n  };\n  trainingCompleted: {\n    officerId: string;\n    specialization: OfficerSpecialization;\n    skills: OfficerSkills;\n  };\n  officerAssigned: {\n    officerId: string;\n    assignmentId: string;\n  };\n  squadCreated: {\n    squad: Squad;\n  };\n  squadUpdated: {\n    squadId: string;\n    officer: string;\n  };\n  tierUpgraded: {\n    tier: OfficerTier;\n  };\n  academyActivated: {\n    moduleId: string;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/resources/ResourcePoolTypes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1696,1699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1696,1699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2075,2078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2075,2078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResourceState, ResourceType } from './ResourceTypes';\n\n/**\n * Pool allocation strategy\n */\nexport type PoolAllocationStrategy = 'equal' | 'priority' | 'demand-based' | 'custom';\n\n/**\n * Pool distribution rule\n */\nexport interface PoolDistributionRule {\n  id: string;\n  poolId: string;\n  targetIds: string[];\n  resourceType: ResourceType;\n  percentage: number;\n  minAmount?: number;\n  maxAmount?: number;\n  priority: number;\n  condition?: (state: ResourceState) => boolean;\n}\n\n/**\n * Pool allocation result\n */\nexport interface PoolAllocationResult {\n  poolId: string;\n  resourceType: ResourceType;\n  allocations: Array<{\n    targetId: string;\n    amount: number;\n    percentage: number;\n  }>;\n  timestamp: number;\n}\n\n/**\n * Pool allocation options\n */\nexport interface PoolAllocationOptions {\n  strategy?: PoolAllocationStrategy;\n  priorityMap?: Map<string, number>;\n  customAllocations?: Map<string, number>;\n  minAllocation?: number;\n  maxAllocation?: number;\n}\n\n/**\n * Pool distribution options\n */\nexport interface PoolDistributionOptions {\n  interval?: number;\n  maxHistory?: number;\n  autoDistribute?: boolean;\n  validateRules?: boolean;\n}\n\n/**\n * Pool target demand\n */\nexport interface PoolTargetDemand {\n  targetId: string;\n  resourceType: ResourceType;\n  currentAmount: number;\n  capacity: number;\n  priority: number;\n  demandFactor: number;\n}\n\n/**\n * Pool resource summary\n */\nexport interface PoolResourceSummary {\n  poolId: string;\n  resourceType: ResourceType;\n  amount: number;\n  capacity: number;\n  percentage: number;\n  distributionRules: number;\n  lastDistribution?: number;\n}\n\n/**\n * Type guard for PoolDistributionRule\n */\nexport function isPoolDistributionRule(obj: any): obj is PoolDistributionRule {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    'id' in obj &&\n    'poolId' in obj &&\n    'targetIds' in obj &&\n    'resourceType' in obj &&\n    'percentage' in obj &&\n    'priority' in obj &&\n    Array.isArray(obj.targetIds)\n  );\n}\n\n/**\n * Type guard for PoolAllocationResult\n */\nexport function isPoolAllocationResult(obj: any): obj is PoolAllocationResult {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    'poolId' in obj &&\n    'resourceType' in obj &&\n    'allocations' in obj &&\n    'timestamp' in obj &&\n    Array.isArray(obj.allocations)\n  );\n}\n\n/**\n * Helper function to create a default distribution rule\n */\nexport function createDefaultDistributionRule(\n  poolId: string,\n  targetIds: string[],\n  resourceType: ResourceType\n): PoolDistributionRule {\n  return {\n    id: `rule-${poolId}-${resourceType}-${Date.now()}`,\n    poolId,\n    targetIds,\n    resourceType,\n    percentage: 100,\n    priority: 1,\n  };\n}\n\n/**\n * Helper function to calculate demand factor for a target\n */\nexport function calculateDemandFactor(currentAmount: number, capacity: number): number {\n  if (capacity <= 0) {\n    return 0;\n  }\n  const fillPercentage = (currentAmount / capacity) * 100;\n  return Math.max(0, 100 - fillPercentage) / 100;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/resources/ResourceSerializationTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/resources/ResourceTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/CommonShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/FactionShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/FactionTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/PlayerShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/Ship.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ships/ShipTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/ui/UITypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/weapons/WeaponTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/types/weapons/WeaponUpgrades.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/EventEmitter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/EventCommunication.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/EventDispatcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxHistorySize' is assigned a value but never used. Allowed unused args must match /^_/u.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","message":"Definition for rule 'react-hooks/exhaustive-deps' was not found.","line":165,"column":29,"endLine":165,"endColumn":79,"severity":2,"nodeType":null},{"ruleId":"react-hooks/exhaustive-deps","message":"Definition for rule 'react-hooks/exhaustive-deps' was not found.","line":190,"column":37,"endLine":190,"endColumn":87,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport { ModuleEvent, moduleEventBus, ModuleEventType } from '../../lib/modules/ModuleEvents';\n\n/**\n * Event dispatcher context interface\n */\ninterface EventDispatcherContextType {\n  // Event subscription\n  subscribe: (type: ModuleEventType, listener: (event: ModuleEvent) => void) => () => void;\n\n  // Event emission\n  emit: (event: ModuleEvent) => void;\n\n  // Event history\n  getHistory: () => ModuleEvent[];\n  getModuleHistory: (moduleId: string) => ModuleEvent[];\n  getEventTypeHistory: (type: ModuleEventType) => ModuleEvent[];\n  clearHistory: () => void;\n\n  // Event filtering\n  getFilteredEvents: (filter: (event: ModuleEvent) => boolean) => ModuleEvent[];\n\n  // Latest events by type\n  latestEvents: Map<ModuleEventType, ModuleEvent>;\n}\n\n/**\n * Event dispatcher provider props\n */\ninterface EventDispatcherProviderProps {\n  children: ReactNode;\n  maxHistorySize?: number;\n}\n\n// Create the context with a default value\nconst EventDispatcherContext = createContext<EventDispatcherContextType | null>(null);\n\n/**\n * Event dispatcher provider component\n */\nexport const EventDispatcherProvider: React.FC<EventDispatcherProviderProps> = ({\n  children,\n  maxHistorySize = 1000,\n}) => {\n  // Store the latest event of each type\n  const [latestEvents, setLatestEvents] = useState<Map<ModuleEventType, ModuleEvent>>(new Map());\n\n  // Subscribe to all module events\n  useEffect(() => {\n    // Create a handler for all events\n    const handleEvent = (event: ModuleEvent) => {\n      setLatestEvents(prev => {\n        const newMap = new Map(prev);\n        newMap.set(event.type, event);\n        return newMap;\n      });\n    };\n\n    // Get all possible event types\n    const eventTypes: ModuleEventType[] = [\n      'MODULE_CREATED',\n      'MODULE_ATTACHED',\n      'MODULE_DETACHED',\n      'MODULE_UPGRADED',\n      'MODULE_ACTIVATED',\n      'MODULE_DEACTIVATED',\n      'ATTACHMENT_STARTED',\n      'ATTACHMENT_CANCELLED',\n      'ATTACHMENT_COMPLETED',\n      'ATTACHMENT_PREVIEW_SHOWN',\n      'RESOURCE_PRODUCED',\n      'RESOURCE_CONSUMED',\n      'RESOURCE_TRANSFERRED',\n      'RESOURCE_PRODUCTION_REGISTERED',\n      'RESOURCE_PRODUCTION_UNREGISTERED',\n      'RESOURCE_CONSUMPTION_REGISTERED',\n      'RESOURCE_CONSUMPTION_UNREGISTERED',\n      'RESOURCE_FLOW_REGISTERED',\n      'RESOURCE_FLOW_UNREGISTERED',\n      'RESOURCE_SHORTAGE',\n      'AUTOMATION_STARTED',\n      'AUTOMATION_STOPPED',\n      'AUTOMATION_CYCLE_COMPLETE',\n      'STATUS_CHANGED',\n      'ERROR_OCCURRED',\n      'MISSION_STARTED',\n      'MISSION_COMPLETED',\n      'MISSION_FAILED',\n      'MISSION_PROGRESS_UPDATED',\n      'MISSION_REWARD_CLAIMED',\n      'SUB_MODULE_CREATED',\n      'SUB_MODULE_ATTACHED',\n      'SUB_MODULE_DETACHED',\n      'SUB_MODULE_UPGRADED',\n      'SUB_MODULE_ACTIVATED',\n      'SUB_MODULE_DEACTIVATED',\n      'SUB_MODULE_EFFECT_APPLIED',\n      'SUB_MODULE_EFFECT_REMOVED',\n    ];\n\n    // Subscribe to all event types\n    const unsubscribers = eventTypes.map(type => moduleEventBus.subscribe(type, handleEvent));\n\n    // Cleanup subscriptions\n    return () => {\n      unsubscribers.forEach(unsubscribe => {\n        if (typeof unsubscribe === 'function') {\n          unsubscribe();\n        }\n      });\n    };\n  }, []);\n\n  // Context value\n  const value: EventDispatcherContextType = {\n    // Event subscription - delegate to moduleEventBus\n    subscribe: (type, listener) => moduleEventBus.subscribe(type, listener),\n\n    // Event emission - delegate to moduleEventBus\n    emit: event => moduleEventBus.emit(event),\n\n    // Event history - delegate to moduleEventBus\n    getHistory: () => moduleEventBus.getHistory(),\n    getModuleHistory: moduleId => moduleEventBus.getModuleHistory(moduleId),\n    getEventTypeHistory: type => moduleEventBus.getEventTypeHistory(type),\n    clearHistory: () => moduleEventBus.clearHistory(),\n\n    // Event filtering\n    getFilteredEvents: filter => moduleEventBus.getHistory().filter(filter),\n\n    // Latest events by type\n    latestEvents,\n  };\n\n  return (\n    <EventDispatcherContext.Provider value={value}>{children}</EventDispatcherContext.Provider>\n  );\n};\n\n/**\n * Hook to use the event dispatcher\n */\nexport const useEventDispatcher = (): EventDispatcherContextType => {\n  const context = useContext(EventDispatcherContext);\n\n  if (!context) {\n    throw new Error('useEventDispatcher must be used within an EventDispatcherProvider');\n  }\n\n  return context;\n};\n\n/**\n * Hook to subscribe to specific event types\n */\nexport const useEventSubscription = <T extends ModuleEventType>(\n  eventType: T,\n  callback: (event: ModuleEvent) => void,\n  deps: React.DependencyList = []\n): void => {\n  const { subscribe } = useEventDispatcher();\n\n  useEffect(() => {\n    return subscribe(eventType, callback);\n  }, [eventType, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\n/**\n * Hook to get the latest event of a specific type\n */\nexport const useLatestEvent = <T extends ModuleEventType>(\n  eventType: T\n): ModuleEvent | undefined => {\n  const { latestEvents } = useEventDispatcher();\n  return latestEvents.get(eventType);\n};\n\n/**\n * Hook to get filtered events\n */\nexport const useFilteredEvents = (\n  filter: (event: ModuleEvent) => boolean,\n  deps: React.DependencyList = []\n): ModuleEvent[] => {\n  const { getFilteredEvents } = useEventDispatcher();\n  const [filteredEvents, setFilteredEvents] = useState<ModuleEvent[]>([]);\n\n  useEffect(() => {\n    setFilteredEvents(getFilteredEvents(filter));\n  }, [getFilteredEvents, ...deps]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return filteredEvents;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/EventFiltering.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'priority' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":87,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'priority' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":150,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, timer } from 'rxjs';\nimport { buffer, debounceTime, filter, groupBy, map, mergeMap } from 'rxjs/operators';\nimport { ModuleEvent, ModuleEventType } from '../../lib/modules/ModuleEvents';\nimport { MessagePriority, SystemMessage } from './EventCommunication';\n\n/**\n * Filter condition type for event filtering\n */\nexport type FilterCondition<T> = (event: T) => boolean;\n\n/**\n * Event batch processor type\n */\nexport type BatchProcessor<T, R> = (events: T[]) => R;\n\n/**\n * Event priority queue for handling events based on priority\n */\nexport class EventPriorityQueue<T extends { priority?: number }> {\n  private queues: Map<number, T[]> = new Map();\n  private processing = false;\n  private processingPromise: Promise<void> | null = null;\n  private processor: (event: T) => Promise<void> | void;\n\n  /**\n   * Create a new event priority queue\n   * @param processor Function to process each event\n   */\n  constructor(processor: (event: T) => Promise<void> | void) {\n    this.processor = processor;\n\n    // Initialize queues for each priority level\n    for (let i = 0; i <= 4; i++) {\n      this.queues.set(i, []);\n    }\n  }\n\n  /**\n   * Add an event to the queue\n   * @param event Event to add\n   */\n  public enqueue(event: T): void {\n    const priority = event.priority !== undefined ? event.priority : MessagePriority.NORMAL;\n    const queue = this.queues.get(priority);\n    if (queue) {\n      queue.push(event);\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Process the queue\n   */\n  private async processQueue(): Promise<void> {\n    if (this.processing) {\n      return;\n    }\n\n    this.processing = true;\n    this.processingPromise = this.processQueueInternal();\n    await this.processingPromise;\n    this.processingPromise = null;\n    this.processing = false;\n\n    // Check if new events were added during processing\n    let hasEvents = false;\n    // Convert Map entries to array to avoid MapIterator error\n    const queueValues = Array.from(this.queues.values());\n    for (const queue of queueValues) {\n      if (queue.length > 0) {\n        hasEvents = true;\n        break;\n      }\n    }\n\n    if (hasEvents) {\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Internal queue processing\n   */\n  private async processQueueInternal(): Promise<void> {\n    // Process all events in priority order\n    const queueEntries = Array.from(this.queues.entries());\n    for (const [priority, queue] of queueEntries) {\n      while (queue.length > 0) {\n        const event = queue.shift();\n        if (event) {\n          try {\n            const result = this.processor(event);\n            if (result instanceof Promise) {\n              await result;\n            }\n          } catch (error) {\n            console.error('Error processing event:', error);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the current queue sizes\n   */\n  public getQueueSizes(): Record<number, number> {\n    const sizes: Record<number, number> = {};\n    // Convert Map entries to array to avoid MapIterator error\n    const queueEntries = Array.from(this.queues.entries());\n    for (const [priority, queue] of queueEntries) {\n      sizes[priority] = queue.length;\n    }\n    return sizes;\n  }\n\n  /**\n   * Check if the queue is currently processing\n   */\n  public isProcessing(): boolean {\n    return this.processing;\n  }\n\n  /**\n   * Wait for all current processing to complete\n   */\n  public async waitForProcessing(): Promise<void> {\n    if (this.processingPromise) {\n      await this.processingPromise;\n    }\n  }\n\n  /**\n   * Clear all queues\n   */\n  public clear(): void {\n    // Convert Map entries to array to avoid MapIterator error\n    const queueValues = Array.from(this.queues.values());\n    for (const queue of queueValues) {\n      queue.length = 0;\n    }\n  }\n\n  /**\n   * Process all events in priority order\n   */\n  public processAll(): void {\n    // Convert Map entries to array to avoid MapIterator error\n    const queueEntries = Array.from(this.queues.entries());\n    for (const [priority, queue] of queueEntries) {\n      while (queue.length > 0) {\n        const event = queue.shift();\n        if (event) {\n          this.processor(event);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Create a filtered event stream\n * @param source Source observable\n * @param condition Filter condition\n */\nexport function createFilteredStream<T>(\n  source: Observable<T>,\n  condition: FilterCondition<T>\n): Observable<T> {\n  return source.pipe(filter(condition));\n}\n\n/**\n * Create a batched event stream\n * @param source Source observable\n * @param timeWindow Time window for batching in milliseconds\n * @param processor Batch processor function\n */\nexport function createBatchedStream<T, R>(\n  source: Observable<T>,\n  timeWindow: number,\n  processor: BatchProcessor<T, R>\n): Observable<R> {\n  return source.pipe(\n    buffer(timer(0, timeWindow)),\n    filter(events => events.length > 0),\n    map(events => processor(events))\n  );\n}\n\n/**\n * Create a grouped event stream\n * @param source Source observable\n * @param keySelector Function to select the key for grouping\n */\nexport function createGroupedStream<T, K>(\n  source: Observable<T>,\n  keySelector: (event: T) => K\n): Observable<{ key: K; events: T[] }> {\n  return source.pipe(\n    groupBy(keySelector),\n    mergeMap(group => {\n      return group.pipe(\n        buffer(group.pipe(debounceTime(100))),\n        map(events => ({ key: group.key, events }))\n      );\n    })\n  );\n}\n\n/**\n * Filter module events by type\n * @param events Module events observable\n * @param type Event type to filter\n */\nexport function filterEventsByType(\n  events: Observable<ModuleEvent>,\n  type: ModuleEventType\n): Observable<ModuleEvent> {\n  return events.pipe(filter(event => event.type === type));\n}\n\n/**\n * Filter module events by module ID\n * @param events Module events observable\n * @param moduleId Module ID to filter\n */\nexport function filterEventsByModuleId(\n  events: Observable<ModuleEvent>,\n  moduleId: string\n): Observable<ModuleEvent> {\n  return events.pipe(filter(event => event.moduleId === moduleId));\n}\n\n/**\n * Filter module events by module type\n * @param events Module events observable\n * @param moduleType Module type to filter\n */\nexport function filterEventsByModuleType(\n  events: Observable<ModuleEvent>,\n  moduleType: string\n): Observable<ModuleEvent> {\n  return events.pipe(filter(event => event.moduleType === moduleType));\n}\n\n/**\n * Filter system messages by type\n * @param messages System messages observable\n * @param type Message type to filter\n */\nexport function filterMessagesByType(\n  messages: Observable<SystemMessage>,\n  type: string\n): Observable<SystemMessage> {\n  return messages.pipe(filter(message => message.type === type));\n}\n\n/**\n * Filter system messages by source\n * @param messages System messages observable\n * @param source Source system ID to filter\n */\nexport function filterMessagesBySource(\n  messages: Observable<SystemMessage>,\n  source: string\n): Observable<SystemMessage> {\n  return messages.pipe(filter(message => message.source === source));\n}\n\n/**\n * Filter system messages by priority\n * @param messages System messages observable\n * @param priority Priority level to filter\n * @param comparison Comparison operator ('eq' | 'lt' | 'lte' | 'gt' | 'gte')\n */\nexport function filterMessagesByPriority(\n  messages: Observable<SystemMessage>,\n  priority: MessagePriority,\n  comparison: 'eq' | 'lt' | 'lte' | 'gt' | 'gte' = 'eq'\n): Observable<SystemMessage> {\n  return messages.pipe(\n    filter(message => {\n      const messagePriority = message.priority;\n      switch (comparison) {\n        case 'eq':\n          return messagePriority === priority;\n        case 'lt':\n          return messagePriority < priority;\n        case 'lte':\n          return messagePriority <= priority;\n        case 'gt':\n          return messagePriority > priority;\n        case 'gte':\n          return messagePriority >= priority;\n        default:\n          return messagePriority === priority;\n      }\n    })\n  );\n}\n\n/**\n * Create a conditional event processor\n * @param condition Condition to check\n * @param processor Processor function\n */\nexport function createConditionalProcessor<T>(\n  condition: FilterCondition<T>,\n  processor: (event: T) => void\n): (event: T) => void {\n  return (event: T) => {\n    if (condition(event)) {\n      processor(event);\n    }\n  };\n}\n\n/**\n * Create a debounced event processor\n * @param processor Processor function\n * @param debounceMs Debounce time in milliseconds\n */\nexport function createDebouncedProcessor<T>(\n  processor: (event: T) => void,\n  debounceMs: number\n): {\n  process: (event: T) => void;\n  flush: () => void;\n} {\n  let timeout: NodeJS.Timeout | null = null;\n  let lastEvent: T | null = null;\n\n  return {\n    process: (event: T) => {\n      lastEvent = event;\n\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(() => {\n        if (lastEvent) {\n          processor(lastEvent);\n          lastEvent = null;\n        }\n        timeout = null;\n      }, debounceMs);\n    },\n    flush: () => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      if (lastEvent) {\n        processor(lastEvent);\n        lastEvent = null;\n      }\n    },\n  };\n}\n\n/**\n * Create a throttled event processor\n * @param processor Processor function\n * @param throttleMs Throttle time in milliseconds\n */\nexport function createThrottledProcessor<T>(\n  processor: (event: T) => void,\n  throttleMs: number\n): (event: T) => void {\n  let lastProcessTime = 0;\n  let pending: T | null = null;\n  let timeout: NodeJS.Timeout | null = null;\n\n  return (event: T) => {\n    const now = Date.now();\n\n    if (now - lastProcessTime >= throttleMs) {\n      // Process immediately\n      lastProcessTime = now;\n      processor(event);\n    } else {\n      // Store for later processing\n      pending = event;\n\n      if (!timeout) {\n        timeout = setTimeout(\n          () => {\n            if (pending) {\n              processor(pending);\n              pending = null;\n            }\n            lastProcessTime = Date.now();\n            timeout = null;\n          },\n          throttleMs - (now - lastProcessTime)\n        );\n      }\n    }\n  };\n}\n\n/**\n * Create a batch event processor\n * @param batchProcessor Batch processor function\n * @param maxBatchSize Maximum batch size\n * @param maxWaitMs Maximum wait time in milliseconds\n */\nexport function createBatchProcessor<T, R>(\n  batchProcessor: BatchProcessor<T, R>,\n  maxBatchSize: number,\n  maxWaitMs: number\n): {\n  process: (event: T) => void;\n  flush: () => R | null;\n  onResult: (callback: (result: R) => void) => () => void;\n} {\n  const batch: T[] = [];\n  let timeout: NodeJS.Timeout | null = null;\n  const resultCallbacks: Set<(result: R) => void> = new Set();\n\n  const processCurrentBatch = (): R | null => {\n    if (batch.length === 0) {\n      return null;\n    }\n\n    const currentBatch = [...batch];\n    batch.length = 0;\n\n    const result = batchProcessor(currentBatch);\n\n    // Notify callbacks\n    resultCallbacks.forEach(callback => {\n      try {\n        callback(result);\n      } catch (error) {\n        console.error('Error in batch result callback:', error);\n      }\n    });\n\n    return result;\n  };\n\n  return {\n    process: (event: T) => {\n      batch.push(event);\n\n      if (batch.length >= maxBatchSize) {\n        // Process immediately if batch is full\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        processCurrentBatch();\n      } else if (!timeout) {\n        // Start timer for batch processing\n        timeout = setTimeout(() => {\n          timeout = null;\n          processCurrentBatch();\n        }, maxWaitMs);\n      }\n    },\n    flush: () => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      return processCurrentBatch();\n    },\n    onResult: (callback: (result: R) => void) => {\n      resultCallbacks.add(callback);\n      return () => {\n        resultCallbacks.delete(callback);\n      };\n    },\n  };\n}\n\n/**\n * Create a priority-based event processor\n * @param processors Map of processors by priority\n * @param defaultPriority Default priority if not specified\n */\nexport function createPriorityProcessor<T extends { priority?: number }>(\n  processors: Map<number, (event: T) => void>,\n  defaultPriority: number = MessagePriority.NORMAL\n): (event: T) => void {\n  return (event: T) => {\n    const priority = event.priority !== undefined ? event.priority : defaultPriority;\n    const processor = processors.get(priority);\n\n    if (processor) {\n      processor(event);\n    } else {\n      // Find the closest priority processor\n      let closestPriority: number | null = null;\n      let minDistance = Infinity;\n\n      for (const p of processors.keys()) {\n        const distance = Math.abs(p - priority);\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestPriority = p;\n        }\n      }\n\n      if (closestPriority !== null) {\n        const closestProcessor = processors.get(closestPriority);\n        if (closestProcessor) {\n          closestProcessor(event);\n        }\n      }\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/events/rxjsIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'T' is defined but never used. Allowed unused vars must match /^_/u.","line":127,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'debounceTime' is defined but never used. Allowed unused args must match /^_/u.","line":142,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'throttleTime' is defined but never used. Allowed unused args must match /^_/u.","line":156,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bufferTime' is defined but never used. Allowed unused args must match /^_/u.","line":170,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Observable, Subject, filter, map, share } from 'rxjs';\nimport { ModuleEvent, ModuleEventType, moduleEventBus } from '../../lib/modules/ModuleEvents';\n\n/**\n * Subject for all module events\n */\nexport const moduleEventSubject = new Subject<ModuleEvent>();\n\n/**\n * Observable for all module events\n */\nexport const moduleEvents$ = moduleEventSubject.asObservable().pipe(\n  share() // Share the observable to prevent multiple subscriptions\n);\n\n/**\n * Initialize the RxJS integration with the moduleEventBus\n */\nexport function initializeRxJSIntegration(): () => void {\n  // Subscribe to all module events and forward them to the subject\n  const unsubscribe = moduleEventBus.subscribe('MODULE_CREATED' as ModuleEventType, event => {\n    moduleEventSubject.next(event);\n  });\n\n  // Return a cleanup function\n  return () => {\n    if (typeof unsubscribe === 'function') {\n      unsubscribe();\n    }\n    moduleEventSubject.complete();\n  };\n}\n\n/**\n * Get an observable for a specific event type\n */\nexport function getEventsByType<T extends ModuleEventType>(eventType: T): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(event => event.type === eventType));\n}\n\n/**\n * Get an observable for events from a specific module\n */\nexport function getEventsByModule(moduleId: string): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(event => event.moduleId === moduleId));\n}\n\n/**\n * Get an observable for events with a specific data property\n */\nexport function getEventsByData<T>(\n  propertyName: string,\n  propertyValue: T\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(\n    filter(\n      event =>\n        event.data &&\n        event.data[propertyName] !== undefined &&\n        event.data[propertyName] === propertyValue\n    )\n  );\n}\n\n/**\n * Get an observable that maps events to their data\n */\nexport function getEventData<T>(eventType: ModuleEventType): Observable<T> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType),\n    map(event => event.data as T)\n  );\n}\n\n/**\n * Create a custom event observable with filtering\n */\nexport function createFilteredEventStream(\n  filterFn: (event: ModuleEvent) => boolean\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(filterFn));\n}\n\n/**\n * Emit an event through the RxJS subject and moduleEventBus\n */\nexport function emitEvent(event: ModuleEvent): void {\n  // Emit through the moduleEventBus\n  moduleEventBus.emit(event);\n\n  // Also emit through the RxJS subject\n  moduleEventSubject.next(event);\n}\n\n/**\n * Hook up a Subject to a specific event type\n */\nexport function createEventTypeSubject<T extends ModuleEventType>(\n  eventType: T\n): Subject<ModuleEvent> {\n  const subject = new Subject<ModuleEvent>();\n\n  // Subscribe to the event type and forward to the subject\n  const unsubscribe = moduleEventBus.subscribe(eventType, event => {\n    subject.next(event);\n  });\n\n  // Add cleanup method to the subject\n  interface SubjectWithCleanup<T> extends Subject<T> {\n    cleanup?: () => void;\n  }\n\n  const subjectWithCleanup = subject as SubjectWithCleanup<ModuleEvent>;\n  subjectWithCleanup.cleanup = () => {\n    if (typeof unsubscribe === 'function') {\n      unsubscribe();\n    }\n    subject.complete();\n  };\n\n  return subject;\n}\n\n/**\n * Create a specialized event stream with transformation\n */\nexport function createTransformedEventStream<T, R>(\n  eventType: ModuleEventType,\n  transformFn: (event: ModuleEvent) => R\n): Observable<R> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType),\n    map(transformFn)\n  );\n}\n\n/**\n * Create a debounced event stream\n */\nexport function createDebouncedEventStream(\n  eventType: ModuleEventType,\n  debounceTime: number\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType)\n    // We would normally use debounceTime here, but we're keeping it simple\n    // debounceTime(debounceTime)\n  );\n}\n\n/**\n * Create a throttled event stream\n */\nexport function createThrottledEventStream(\n  eventType: ModuleEventType,\n  throttleTime: number\n): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType)\n    // We would normally use throttleTime here, but we're keeping it simple\n    // throttleTime(throttleTime)\n  );\n}\n\n/**\n * Create a buffered event stream that collects events over time\n */\nexport function createBufferedEventStream(\n  eventType: ModuleEventType,\n  bufferTime: number\n): Observable<ModuleEvent[]> {\n  return moduleEvents$.pipe(\n    filter(event => event.type === eventType)\n    // We would normally use bufferTime here, but we're keeping it simple\n    // bufferTime(bufferTime)\n  ) as unknown as Observable<ModuleEvent[]>;\n}\n\n/**\n * Create a combined event stream from multiple event types\n */\nexport function createCombinedEventStream(eventTypes: ModuleEventType[]): Observable<ModuleEvent> {\n  return moduleEvents$.pipe(filter(event => eventTypes.includes(event.type)));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/geometry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/idGenerator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/math.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/modules/moduleValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/resources/resourceValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/ships/shipClassUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/ships/shipUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/typeConversions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/weapons/weaponEffectUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/utils/weapons/weaponTypeConversions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/deadcoast/CursorProjects/Galactic_Sprawl/src/workers/combatWorker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHazard' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[627,630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[627,630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Combat Web Worker\nimport { QuadTree } from '../lib/optimization/QuadTree';\nimport { CombatUnit } from '../types/combat/CombatTypes';\nimport { Hazard } from '../types/combat/HazardTypes';\nimport { Position } from '../types/core/GameTypes';\n\ninterface WorkerMessage {\n  type: string;\n  units: CombatUnit[];\n  hazards: Hazard[];\n  worldBounds: { width: number; height: number };\n}\n\ninterface BatchedUpdate {\n  weaponFires: Array<{\n    weaponId: string;\n    targetId: string;\n    weaponType: string;\n  }>;\n  unitMoves: Array<{\n    unitId: string;\n    position: Position;\n  }>;\n}\n\n// Type guard for Hazard\nfunction isHazard(obj: any): obj is Hazard {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    'id' in obj &&\n    'position' in obj &&\n    'radius' in obj &&\n    'type' in obj\n  );\n}\n\n// Combat state\nlet quadTree: QuadTree;\nlet lastUpdate = 0;\nconst UPDATE_INTERVAL = 16; // ~60fps\nconst BATCH_SIZE = 10;\nlet pendingUpdates: BatchedUpdate = {\n  weaponFires: [],\n  unitMoves: [],\n};\n\n// Handle combat calculations\nself.onmessage = (e: MessageEvent<WorkerMessage>) => {\n  const { type, units, hazards, worldBounds } = e.data;\n\n  if (type === 'UPDATE') {\n    const now = performance.now();\n    if (now - lastUpdate < UPDATE_INTERVAL) {\n      return; // Skip update if too soon\n    }\n    lastUpdate = now;\n\n    // Initialize or clear quadtree\n    if (!quadTree) {\n      quadTree = new QuadTree({ x: 0, y: 0, width: worldBounds.width, height: worldBounds.height });\n    } else {\n      quadTree.clear();\n    }\n\n    // Insert units into quadtree\n    units.forEach(unit => {\n      quadTree.insert({\n        id: unit.id,\n        position: unit.position,\n      });\n    });\n\n    // Process units in batches\n    for (let i = 0; i < units.length; i += BATCH_SIZE) {\n      const batch = units.slice(i, i + BATCH_SIZE);\n      processBatch(batch, hazards);\n    }\n\n    // Send batched updates\n    if (pendingUpdates.weaponFires.length > 0 || pendingUpdates.unitMoves.length > 0) {\n      self.postMessage({\n        type: 'BATCH_UPDATE',\n        updates: pendingUpdates,\n      });\n\n      // Clear pending updates\n      pendingUpdates = {\n        weaponFires: [],\n        unitMoves: [],\n      };\n    }\n  }\n};\n\nfunction processBatch(units: CombatUnit[], hazards: Hazard[]): void {\n  units.forEach(unit => {\n    // Check if unit status is an object with a main property\n    if (typeof unit.status === 'object' && unit.status.main === 'active') {\n      processEngagingUnit(unit, hazards);\n    }\n  });\n}\n\nfunction processEngagingUnit(unit: CombatUnit, hazards: Hazard[]): void {\n  // Find nearby hazards using quadtree\n  const searchBounds = {\n    x: unit.position.x - 500,\n    y: unit.position.y - 500,\n    width: 1000,\n    height: 1000,\n  };\n\n  const nearbyObjects = quadTree.retrieve(searchBounds) as Array<{\n    id: string;\n    position: Position;\n  }>;\n\n  // Create a filtered array of hazards instead of using Set\n  const nearbyHazards: Hazard[] = [];\n\n  hazards.forEach(hazard => {\n    if (\n      nearbyObjects.some(\n        obj =>\n          Math.abs(obj.position.x - hazard.position.x) < hazard.radius &&\n          Math.abs(obj.position.y - hazard.position.y) < hazard.radius\n      )\n    ) {\n      nearbyHazards.push(hazard);\n    }\n  });\n\n  // Find nearest hazard\n  let nearestHazard: Hazard | null = null;\n  let nearestDistance = Infinity;\n\n  // Iterate over the array directly\n  for (let i = 0; i < nearbyHazards.length; i++) {\n    const hazard = nearbyHazards[i];\n    const distance = calculateDistance(unit.position, hazard.position);\n    if (distance < nearestDistance) {\n      nearestDistance = distance;\n      nearestHazard = hazard;\n    }\n  }\n\n  // Check if we found a hazard\n  if (nearestHazard) {\n    // Check for ready weapon\n    const readyWeapon = unit.weapons.find(\n      weapon => weapon.status === 'ready' && nearestDistance <= weapon.range\n    );\n\n    if (readyWeapon) {\n      pendingUpdates.weaponFires.push({\n        weaponId: readyWeapon.id,\n        targetId: nearestHazard.id,\n        weaponType: readyWeapon.type,\n      });\n    }\n\n    // Calculate new position with smooth movement\n    const newPosition = calculateNewPosition(unit.position, nearestHazard.position);\n    pendingUpdates.unitMoves.push({\n      unitId: unit.id,\n      position: newPosition,\n    });\n  }\n}\n\nfunction calculateDistance(pos1: Position, pos2: Position): number {\n  const dx = pos2.x - pos1.x;\n  const dy = pos2.y - pos1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction calculateNewPosition(current: Position, target: Position): Position {\n  const dx = target.x - current.x;\n  const dy = target.y - current.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n\n  // Smooth movement with easing\n  const speed = 0.1;\n  const easing = 1 - Math.pow(0.95, distance);\n\n  return {\n    x: current.x + dx * speed * easing,\n    y: current.y + dy * speed * easing,\n  };\n}\n\n// Prevent TypeScript error about missing self\nexport {};\n","usedDeprecatedRules":[]}]
