# CURSORRULES

## Correction Guidelines

NEVER CORRECT CODE BY COMMENTING IT OUT WITH "\_". NEVER ADD WRAPPER FUNCTIONS AROUND EXISTING METHODS. NEVER ABSTRACT OR ALTER EXISTING FUNCTIONALITY. NEVER CREATE YOUR OWN IMPLEMENTATIONS OF EXISTING METHODS. NEVER MAKE ASSUMPTIONS ABOUT THE CODE - ALWAYS VERIFY FIRST. ONLY CREATE ACTUAL INSTANCES OF REAL CLASSES AND USE THEIR EXISTING METHODS DIRECTLY. AVOID CREATING NEW FILES WHEN ASKED TO CORRECT A FILE.

## Primary Context Source

### `.cursor/rules`

This file contains all essential codebase patterns, structures, interfaces, and relationships. Refer to this file first when seeking context for code generation, correction, or analysis. The document uses hashtag identifiers (#system_name) to mark major system sections.

ALWAYS REVIEW ENTRIES INTO `.cursor/rules` FOR DUPLICATES. ENSURE NO DUPLICATES ARE CREATED.

## Workflow & Instructions

1. **Context Retrieval Process**:

   - When analyzing or generating code, first search `.cursor/rules` for relevant system sections or commands using `@` identifiers
   - Look for code patterns, interfaces, and type structures in the identified sections
   - Verify implementation approaches against established patterns
   - If context is insufficient, ask the user for clarification

2. **Architecture Alignment**:

   - Ensure all implementations follow patterns documented in `.cursor/rules` and the `Notepad`
   - Maintain consistency with existing type structures and interfaces
   - Follow established naming conventions and implementation patterns
   - If context is missing, ask the user before implementing new patterns

3. **Incremental Implementation**:

   - Generate code in manageable steps aligned with patterns in `.cursor/rules`
   - Review implementations for consistency with documented patterns
   - Identify and resolve gaps between implementation and documentation

4. **Context Maintenance**:

   - When discovering new patterns or implementations, suggest updates to `.cursor/rules`
   - Format new context entries according to the established structure
   - Ensure new entries include concrete code examples, not explanations

5. **Scratchpad Usage**:
   Maintain a task list in thw Scratchpad section below in this format:

```
## Scratchpad

[X] Task 1 - Update progress markers as subtasks are completed

[ ] Task 2 - Use the Scratchpad to maintain implementation context and track progress
```

---

## `Scratchpad`

### `Tasklist` - [PRIORITY]

#### `Additional Tasklist` - [PRIORITY] - Missing System Integrations

- [ ] Effects System (#effects_system)

  - [ ] Review effects/ directory
  - [ ] Document visual effects implementation
  - [ ] Document component effect patterns
  - [ ] Extract effect coordination mechanisms

- [ ] Web Worker System (#web_worker_system)
  - [ ] Review workers/ directory
  - [ ] Document worker communication patterns
  - [ ] Document multi-threading architecture
  - [ ] Extract performance optimization techniques
