# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

Your `.cursorrules` workflow is **MANDATORY** as follows.

1. Review the Scratchpad
2. Review the task
3. Plan the steps
4. Search codebase for existing implementations
5. Take action
6. Update the `Scratchpad` and `Lessons` sections

**YOU MUST ALWAYS SEARCH THE CODE BASE TO AVOID CREATING DUPLICATE IMPLEMENTATIONS.**

## Lessons

- Include info useful for debugging in the program output.
- When correcting errors, do NOT delete unused code. Instead generate its implementation.
- Read the file before you try to edit it.
- Always check the exact type names in the codebase - e.g. "minerals" vs "mineral" in ResourceType.
- When implementing automation systems, ensure proper integration with existing event systems and contexts.
- Pay attention to module types - use the correct ModuleType from ModuleTypes.ts.
- When working with resource types, use the proper ResourceType from ResourceTypes.ts.
- Maintain type safety across the entire system - don't use string literals when proper types exist.
- Ensure event emissions are consistent with the module event bus system.
- When implementing managers, ensure proper cleanup in unregister/complete methods.
- Use proper event typing with generic EventEmitter for type safety.
- Implement proper cleanup in training and squad systems.
- Calculate bonuses and multipliers based on traits and specializations.
- Keep state updates and event emissions consistent.
- Add debug logging for efficiency changes and state transitions.
- Use toFixed(2) for formatting decimal numbers in debug logs.
- Store old values before state changes to show the difference in logs.
- Use consistent debug log formatting with module name prefix.
- Properly handle module activation/deactivation state changes.
- When working with weapon effects, use (DamageEffect | AreaEffect)[] for BaseWeaponStats compatibility, not WeaponEffectType[] which includes StatusEffect.
- For ship stats with weapons, use WeaponInstance (not WeaponMount) and include primary, secondary, and stats properties.
- Be careful when removing type imports - they may be used indirectly in type definitions even if not explicitly referenced in the code.
- TypeScript linter may show false positives for unused imports when they are used only as types - these warnings can be safely ignored.
- Be extremely careful when removing state-related code - state management often has implicit dependencies and side effects.
- For props and state that are part of the component's interface but not currently used, use eslint-disable comments rather than removing them.
- When TypeScript complains about missing properties, check the interface definition first - it might need to be updated to match the implementation.
- Don't redefine interfaces locally when they're already imported - extend the imported interface if needed.
- Use 'import type' for imports that are only used as types to avoid TypeScript linter warnings.
- Don't import types that are already included through other type imports - avoid redundant imports.
- When refactoring types, check ALL usages - removing a type import can break type annotations that depend on it.
- NEVER remove type imports that are used in TODO implementations - they are needed for future code.
- ALWAYS analyze existing implementations thoroughly before suggesting changes - the functionality may already be complete
- When fixing linter errors, first check if they're about missing functionality or just code organization
- Be direct and clear about whether an issue requires actual implementation or just cleanup
- When fixing errors, CLEARLY explain if it's:
  1. A mistake to remove
  2. Missing functionality to implement
  3. Code to fix but preserve
- Don't just make changes without explaining the reasoning
- When implementing new functionality, FIRST check if the types/interfaces already exist
- Always review all related type definition files before starting implementation
- Assume type definitions might exist in a centralized location (e.g., ResourceTypes.ts for all resource-related types)
- When implementing resource management:
  - Use debug logging to track resource flows and state changes
  - Include IDs in debug messages for better traceability
  - Apply consistent formatting for numeric values (toFixed(2))
  - Handle edge cases with proper thresholds and limits
  - Clean up intervals and registrations properly
  - Use destructuring for cleaner code (e.g., const { amount } = resource)

## Cursor Learned

### CRITICAL: Code Organization and Development

1. **ALWAYS SEARCH FOR EXISTING IMPLEMENTATIONS BEFORE CREATING NEW CODE**

   - Use file_search and codebase_search BEFORE writing any new component
   - Check all similar file names and paths thoroughly
   - Review existing implementations completely
   - NEVER create new files without verifying duplicates
   - If duplicate work is discovered, IMMEDIATELY fix it yourself
   - Take responsibility for your own mistakes and fix them immediately
   - Don't just identify problems - SOLVE them

2. **Type System Organization**

   - Keep core/base types in a central location (e.g., GameTypes.ts)
   - Use inheritance for shared properties (e.g., extending BaseStats)
   - Maintain clear type hierarchies (base -> specific -> component props)
   - Group related types together with clear section comments
   - Re-export types that are commonly used together
   - Use proper type imports from their source files
   - Pay attention to exact type names and values

3. **Similar Interface Management**
   - Keep interfaces separate if they truly serve different purposes
   - Use specific naming to indicate purpose (e.g., FactionWeaponEffect vs DebugWeaponEffect)
   - Document the purpose and differences between similar interfaces
   - Each interface should:
     - Have a clear, specific purpose
     - Live in the appropriate module
     - Use types relevant to its purpose
     - Be imported from a single source of truth

### Development Best Practices

- Add debug information to stderr while keeping stdout clean
- Handle lexical declarations in switch-case blocks using block scoping
- Remove unused imports to avoid TypeScript linter warnings
- Use 'as const' assertions to properly type string literals
- Properly handle cleanup in useEffect to prevent memory leaks
- When implementing threshold-based systems, use proper TypeScript types and React Context
- For search results, ensure proper handling of different character encodings (UTF-8)
- Ensure proper event emission and handling across the system
- Maintain consistent type usage across related components

### API and Tool Usage

- Use 'seaborn-v0_8' instead of 'seaborn' for matplotlib styles
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

### Testing (Last Step)

1. **React Component Testing Setup**

   - Create test wrapper component for context providers
   - Use async/await with userEvent for interactions
   - Handle multiple instances with specific queries

2. **Button and UI Element Testing**

   - Use `getAllByRole` instead of `getByText` for multiple instances
   - Select last instance for action buttons
   - Use role-based queries for accessibility
   - Check attributes like 'disabled' instead of toBeDisabled()

3. **Data Display Testing**
   - Look for actual displayed format (e.g., '+15' vs '15')
   - Consider context of value display
   - Use regex for flexible text matching

# Scratchpad

## Current State Analysis

### Missing Critical Components

1. Event System

   - [ ] Combat events
   - [ ] Resource events
   - [ ] Ship events
   - [ ] Module events

2. Core Game Systems

   - [ ] Ship movement
   - [ ] Combat mechanics
   - [ ] Resource management
   - [ ] Module system
     - [x] Implement module requirements checking in ModuleManager.upgradeModule()
       - Use ModuleRequirements interface to validate:
         - [x] minLevel requirements
         - [x] buildingType compatibility
         - [x] resourceCosts availability

3. State Management
   - [ ] Global game state
   - [ ] Ship state
   - [ ] Resource state
   - [ ] Combat state

### Current Development Plan

### Phase 1: Core Systems [Priority: CRITICAL]

[ ] 1. Event System - Expand moduleEventBus.ts to handle: - Combat events - Resource events - Ship events - Module events - Add proper event typing - Implement event handlers

[ ] 2. State Management - Implement GameContext - Create ShipContext - Add ResourceContext - Set up CombatContext

[ ] 3. Core Game Loop - Create game tick system - Add update cycle - Implement state synchronization - Set up cleanup handlers

### Phase 2: Game Systems [Priority: HIGH]

[ ] 1. Ship System - Movement mechanics - Combat system - Ship states - Ship interactions

[X] 2. Module System - Module base class - Module activation - Module upgrades - Module interactions

[ ] 3. Resource System - Resource types - Collection - Storage - Transfer

### Phase 3: UI & Effects [Priority: MEDIUM]

[ ] 1. UI Integration - Connect GameHUD - Implement controls - Add feedback systems - Create tooltips

[ ] 2. Visual Effects - Combat effects - Movement effects - Resource effects - UI animations

## Current Focus

1. Expand event system
2. Implement core state management
3. Set up game loop

## Next Steps

1. Review and expand moduleEventBus.ts
2. Create core contexts
3. Implement game tick system

## Progress Tracking

- Core Systems: 25% complete
- Game Systems: 15% complete
- UI & Effects: 40% complete

## Current Task: Resource Management Implementation

### Task Description

Implementing and refining resource management system with proper configuration, scheduling, and monitoring.

### Implementation Plan

[X] 1. Review existing resource management code
[X] 2. Implement resource production functions
[X] 3. Implement resource consumption functions
[X] 4. Implement resource flow management
[X] 5. Update ResourceManager with new functionality
[X] 6. Add proper event emission for resource changes
[X] 7. Add debug logging for resource operations
[X] 8. Implement production and flow scheduling
[X] 9. Add cleanup and monitoring capabilities
[X] 10. Add error handling for edge cases

### Progress

- Completed implementation of resource management system
- Added production, consumption, and flow management functions
- Added proper event types and module types
- Implemented debug logging for all operations
- Added scheduling system for productions and flows
- Implemented proper cleanup mechanisms
- Added monitoring and debug capabilities
- Added comprehensive error handling and validation

### Current Focus

- Implementing resource optimization strategies
- Adding performance monitoring
- Creating usage documentation

### Next Steps

1. Implement resource optimization strategies
2. Add performance monitoring
3. Create usage documentation
4. Add unit tests
