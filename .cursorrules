# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

## Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

- Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

- LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```bash
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```bash
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```bash
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```plaintext
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## Lessons

## User Specified Lessons

- You have a Knowledge on the Project. Use it before you start the task.
  - KNOWLEDGE_BASE_PATH="/Users/deadcoast/CursorProjects/Galactic_Sprawl/GalaxySprawlDocs"
- Include info useful for debugging in the program output.
- When correcting errors, do NOT delete unused code. Instead generate its implementation.
- Read the file before you try to edit it.

## Cursor learned

- CRITICAL: MANDATORY CHECKLIST BEFORE ANY ACTION:
  1. BEFORE TOUCHING ANY FILE:
     - Search ENTIRE codebase for similar files/components
     - Check directory structure to confirm correct location
     - Verify no duplicates exist
     - Document what I found in my response

  2. BEFORE CREATING ANY FILE:
     - Prove I searched and found no existing implementation
     - Show the exact directory where it belongs
     - Explain why it belongs there
     - Get explicit confirmation before creating

  3. BEFORE EDITING ANY FILE:
     - Show I read the full file
     - Show I understand where it lives in the structure
     - Prove I'm editing the RIGHT file
     - Explain what depends on this file

  4. IF I FIND A MISTAKE:
     - Stop IMMEDIATELY
     - Show where the mistake is
     - Explain how it breaks the structure
     - Fix it COMPLETELY before moving on

- CRITICAL: ALWAYS SEARCH FOR EXISTING IMPLEMENTATIONS BEFORE CREATING NEW CODE
  1. Use file_search and codebase_search BEFORE writing any new component
  2. Check all similar file names and paths thoroughly
  3. Review existing implementations completely
  4. NEVER create new files without verifying duplicates
  5. If duplicate work is discovered, IMMEDIATELY fix it yourself - don't leave it for others
  6. Take responsibility for your own mistakes and fix them immediately
  7. Don't just identify problems - SOLVE them

- CRITICAL: Type System Organization
  1. Found duplicate weapon type definitions:
     - src/types/ships/WeaponTypes.ts
     - src/types/weapons/WeaponTypes.ts
  2. These have incompatible structures:
     - ships/WeaponTypes uses Position from core/GameTypes
     - weapons/WeaponTypes uses WeaponMountPosition enum
  3. Need to consolidate these into a single source of truth
  4. Current fix: Use the types from weapons/WeaponTypes.ts as it has more specific weapon positioning

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When implementing threshold-based systems, use proper TypeScript types and React Context for global state management
- Handle lexical declarations in switch-case blocks by using block scoping with curly braces
- Remove unused imports to avoid TypeScript linter warnings
- Use 'as const' assertions to properly type string literals in TypeScript
- Properly handle cleanup in useEffect to prevent memory leaks with intervals
- When organizing TypeScript types in a game project:
  1. Keep core/base types in a central location (e.g., GameTypes.ts)
  2. Use inheritance for shared properties (e.g., extending BaseStats)
  3. Maintain clear type hierarchies (base -> specific -> component props)
  4. Group related types together with clear section comments
  5. Re-export types that are commonly used together

# Scratchpad

### Galactic Sprawl: Ship & Weapon System Reorganization Plan

1. COMPLETE.

2. **Weapon Mount System Refactoring**
   - [ ] Update all weapon mounts to use the `WeaponMountPosition` enum (e.g., "front", "side", "turret")
   - [ ] Remove legacy x/y positioning references
   - [ ] Remove deprecated crew requirements from mount configurations
   - [ ] Implement `WeaponMountSize` assertions

3. **Effects System Refactoring**
   - [ ] Migrate all weapon effects to use the `GameTypes Effect` type
   - [ ] Add required magnitude properties to all effects
   - [ ] Implement effects arrays in every `WeaponState` instance
   - [ ] Remove any custom effect types that do not match the core `Effect` type

4. **Ship Stats Update**
   - [ ] Add the missing evasion property to all defense stats
   - [ ] Update all weapon definitions to use the updated `WeaponMount` interface
   - [ ] Standardize MGSS references to use lowercase `mgss`
   - [ ] Add all missing required properties to ship stats

5. **File Updates (In Order)**
   - **a. `src/config/factions/factionShipStats.ts`**
     - [ ] Update all weapon positions to use `WeaponMountPosition` enum
     - [ ] Add evasion to defense stats
     - [ ] Update weapon effects to include the magnitude property
     - [ ] Remove crew requirements
     - [ ] Fix MGSS references (convert to `mgss`)
     - [ ] Add missing effects arrays
   - **b. `src/components/ships/FactionShips/FactionShipStats.tsx`**
     - [ ] Update weapon type imports
     - [ ] Fix weapon mapping logic
     - [ ] Add proper type assertions
   - **c. `src/components/weapons/WeaponLoadout.tsx`**
     - [ ] Update to use the new `mountRequirements` structure (crew requirements removed)
     - [ ] Fix weapon filtering logic
   - **d. `src/utils/shipUtils.ts`**
     - [ ] Update type imports to use the consolidated types
     - [ ] Fix type assertions in functions
   - **e. All Faction Ship Components**
     - [ ] Update components to use new types
     - [ ] Fix mount positions
     - [ ] Add any missing properties
     - [ ] Verify overall type consistency

6. **Testing & Verification**
   - [ ] Verify that all weapon mounts render correctly
   - [ ] Test the weapon effects system thoroughly
   - [ ] Validate ship stats calculations
   - [ ] Test the weapon loadout UI functionality
   - [ ] Confirm correct rendering of faction ship components

7. **Documentation Updates**
   - [ ] Update type documentation
   - [ ] Create a migration guide outlining the changes
   - [ ] Document the new weapon system structure

8. **UI/UX Implementation & Integration**
   - [ ] Update remaining ship components to use `AssetManager` and `AnimationManager`
   - [ ] Update remaining weapon components with the new mount system
   - [ ] Update remaining effect components
   - [ ] Implement the UI component system
   - [ ] Create and connect the effect system with the game state

9. **Animation System Integration**
   - [x] Create `AnimationManager` (Completed)
   - [x] Create `useAnimation` hook (Completed)
   - [ ] Update remaining components to integrate animation functionality

10. **Final Steps & Milestones**
    - [ ] Complete any remaining type system import updates
    - [ ] Begin weapon mount conversion in `factionShipStats.ts`
    - [ ] Update the first component file (`FactionShipStats.tsx`)
    - [ ] Ensure backward compatibility and adherence to TypeScript best practices
    - [ ] Run existing tests and add new tests as necessary
    - [ ] Add debug information to stderr for troubleshooting