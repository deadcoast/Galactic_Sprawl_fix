# CURSORRULES

## Correction Guidelines

NEVER CORRECT CODE BY COMMENTING IT OUT WITH "\_".
NEVER ADD WRAPPER FUNCTIONS AROUND EXISTING METHODS.
NEVER ABSTRACT OR ALTER EXISTING FUNCTIONALITY.
NEVER CREATE YOUR OWN IMPLEMENTATIONS OF EXISTING METHODS.
NEVER MAKE ASSUMPTIONS ABOUT THE CODE - ALWAYS VERIFY FIRST.
ONLY CREATE ACTUAL INSTANCES OF REAL CLASSES AND USE THEIR EXISTING METHODS DIRECTLY
AVOID CREATING NEW FILES WHEN ASKED TO CORRECT A FILE.

## Automated Workflow

FOR EVERY CODE INTERACTION, WITHOUT USER PROMPTING:

1. CONTEXT ANALYSIS:
   @find-similar [current code functionality]
   @show-documentation [system relevant to current file]
   Identify relevant systems based on file path:

- /resource/ → @context: resource-system
  - src/resource/
  - /src/types/resources/
  - /src/hooks/resources/
  - /src/utils/resources/
- /events/ → @context: event-system
  - /src/hooks/events/
  - /src/lib/ecents/
  - /src/utils/events/
- /types/ → @context: type-definitions
  - /src/types/
- /factories/ → @context: factory-system
  - /src/factories/
- /registry/ → @context: registry-system
  - /src/registry/
  - /src/lib/registry
- /managers/ → @context: manager-registry
  - /src/managers/
- /components/ → @context: component-library
  - /src/components/
  - /src/ui/components/
  - /src/styles/components/
- /hooks/ → @context: hooks-library
  - /src/hooks/
- /utils/ → @context: utils-library
  - /src/utils/
- /contexts/ → @context: context-library
  - /src/contexts/
  - /src/lib/contexts/
  - /src/components/exploration/unified/contexts/
- /styles/ → @context: styles-library
  - src/styles/
- /effects/ → @context: effects-system
  - /src/effects/
  - /src/managers/effects/
- /ui/ → @context: ui-library
  - /src/ui/
  - /src/types/ui/
  - /src/hooks/ui/
- /systems/ → @context: system-library
  - /src/systems/
  - /src/components/eploration/unified/system/
- /visualizations/ → @context: visualization-system
  - /src/visualization/
  - /src/types/visualization/
  - /src/component/visualization/
  - /src/component/ui/visualization/
  - /src/component/exploration/visualization/
- /managers/ → @context: manager-registry
  - /src/managers/
  - /src/lib/managers/
  - /src/types/managers/
- /lib/ → @context: library-system
  - /src/lib/
- /workers/ → @context: worker-system
  - /src/workers/
  - /src/utils/workers/

2. TYPE VERIFICATION:
   @verify-types [current code]
   @convert-to-enum [appropriate enum] for string literals
   @add-type-guards where runtime validation needed
   @show-interface [types used in current code]
   ENFORCE:

   - ResourceType/EventType enums instead of strings
   - Type guards for runtime validation
   - Safe extraction instead of direct property access
   - No unsafe type assertions

3. PATTERN COMPLIANCE:
   @check-pattern [current code]
   @implement-pattern singleton-pattern for managers
   @refactor-to-pattern manager-registry for manager access
   @implement-pattern factory-pattern for object creation
   ENFORCE:

   - Manager access through registry (getResourceManager())
   - Factory patterns for complex objects
   - Singleton pattern for manager classes
   - Typed event handling

4. SYSTEM INTEGRATION:
   @integrate-with [relevant system] for new components
   @add-manager-registry for new manager classes
   @refactor-to-pattern type-safe-event for event handling

## Context Awareness

Always assume code has reference tags based on file location, if the tags are missing, add them.

Example:

```
@context: resource-system for files in /src/resource/
```

## File Pattern Matching

USE THESE GLOB PATTERNS TO IDENTIFY FILE TYPES AND APPLY APPROPRIATE RULES:

- Resource Files: `src/**/resource*.{ts,tsx}`, `src/resources/**/*.{ts,tsx}`
  Apply resource-system patterns, ResourceType enums, resource state interfaces
- Event Files: `src/**/event*.{ts,tsx}`, `src/events/**/*.{ts,tsx}`
  Apply event-system patterns, EventType enums, event bus implementations
- Manager Files: `src/**/*Manager.{ts,tsx}`, `src/managers/**/*.{ts,tsx}`
  Apply singleton pattern, manager registry integration, error handling
- Factory Files: `src/**/*Factory.{ts,tsx}`, `src/factories/**/*.{ts,tsx}`
  Apply factory patterns, creation methods, validation checks
- Component Files: `src/components/**/*.{tsx,jsx}`
  Apply component integration patterns, event subscriptions, cleanup
- Hook Files: `src/hooks/**/*.{ts,tsx}`
  Apply resource access patterns, event subscriptions, cleanup
- Type Files: `src/types/**/*.{ts,tsx}`
  Apply type system standards, enum definitions, interface structures

## Notepads Reference

AUTOMATICALLY RETRIEVE CONTEXT FROM:

- GS-CORE-ARCHITECTURE.md - Core architecture patterns
- GS-RESOURCE-SYSTEM.md - Resource management patterns
- GS-TYPE-DEFINITIONS.md - Type system requirements
- GS-EVENT-SYSTEM.md - Event handling patterns
- GS-FACTORY-PATTERN-REFERENCE.md - Object creation
- GS-REGISTRY-PATTERN-REFERENCE.md - Registry usage
- GS-EVENT-HANDLING-PATTERN-REFERENCE.md - Event handling
- GS-SYSTEM-INTEGRATION-EXAMPLES.md - System integration
- GS-MIGRATION-PATTERN-LIBRARY.md - Migration patterns
- GS-CONTEXT-COMMANDS.md - Command reference
- GS-REFERENCE-TAGS-SYSTEM.md - Reference tags usage
- GS-PROGRESSIVE-IMPLEMENTATION-PROTOCOL.md - Implementation protocol

## Command Reference

Full Command documentation: `.cursor/command-sheet.md`

- @check-pattern [code] - Verify pattern compliance
- @verify-types [code] - Check type safety
- @find-similar [functionality] - Find similar implementations
- @implement-pattern [pattern-name] [params] - Generate pattern code
- @refactor-to-pattern [pattern-name] [code] - Refactor to pattern
- @show-documentation [system-name] - Show system docs
- @show-interface [type-name] - Show interface definition
- @convert-to-enum [enum-type] [code] - Convert strings to enums
- @add-type-guards [code] - Add type guards
- @integrate-with [system] [component] - Generate integration
- @add-manager-registry [manager-name] - Update Manager Registry

## System References

- architecture-core - Overall architecture
- type-definitions - Type system
- event-system - Event communication
- resource-system - Resource management
- factory-system - Object creation
- registry-system - Manager access
- manager-registry - Manager pattern
- resource-manager - Resource handling
- module-manager - Module lifecycle
- component-library - UI components
- visualization-system - Data visualization

## `Scratchpad` Tasklist Usage

Maintain a `Tasklist` in the Scratchpad section below in this format:

```
## Scratchpad

[X] Task 1 - Update progress markers as subtasks are completed

[ ] Task 2 - Use the Scratchpad to maintain implementation context and track progress
```

---

## Scratchpad

### Tasklist

- [ ]
