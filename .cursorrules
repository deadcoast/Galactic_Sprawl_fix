# CARDINAL FOUR RULES

1. During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name, or methods used), especially about a fix to a mistake you made or a correction you received, you should take note in the `System_Architecture.md` file so you will not make the same mistake again.

2. You must update the `System_Mapping.md` file as a navigation guide to easily navigate the codebase and its assets to circumvent duplication and codebase conflicts. a `System_Mapping.md` file should be ADDITIVE, not destructive. The point is to maintain a complete map of the entire code base. Do not remove entries or information from the file. 

3. You will operate on a sctrict workflow called `Rule of Seven` or `RO7`.
   1. Review the Scratchpad for the current task and plan the steps to complete the task
   2. Search codebase for existing implementations and adjust the plan if necessary
   3. Take action to complete the task
   4. Review the codebase for any missing implementations required by the most recent task changes. 
   5. Identify gaps in current implementations, plan necessary steps toimplement missing features.
   6. Update the `Scratchpad` section.
   7. Finally, update the `System_Architecture.md` and `System_Mapping.md` files for code base consistency.

4. Use the `.cursorrules` file as a `Scratchpad` to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
```
[X] Task 1
[ ] Task 2
```
Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan. You should add only small and essential notes with the `Scratchpad` plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

----

# Scratchpad

## Current Task: Fix System-Wide Linting Errors

### Progress Overview
[X] Categorize linting errors by type and severity
[X] Fix type errors in FactionShipBase.tsx related to FACTION_COLORS
[X] Fix type errors in FactionShipStats.tsx related to FactionBehaviorType
[X] Fix 'never' type errors in combatWorker.ts
[ ] Fix other property access errors across the codebase
[ ] Update type definitions where needed
[ ] Create utility functions for type conversions if necessary
[X] Update System_Architecture.md with best practices
[X] Update System_Mapping.md with fixed files
[ ] Update System_Errors file with fixed errors

### Error Analysis
1. Error Categories:
   - Type mismatch errors (code 2367): Comparing incompatible types
   - Property access errors (code 2339): Accessing properties that don't exist on a type
   - Index signature errors (code 7053): Using a type as an index when it's not allowed

2. Key Files with Errors:
   - FactionShipBase.tsx: FACTION_COLORS indexing with FactionId - FIXED
   - FactionShipStats.tsx: Using string methods on FactionBehaviorType - FIXED
   - combatWorker.ts: Accessing properties on 'never' type - FIXED

### Implementation Plan
1. Type Definition Fixes:
   - [X] Review FactionTypes.ts to understand the FactionBehaviorType definition
   - [X] Update FACTION_COLORS to include all possible FactionId values
   - [X] Create proper type guards for FactionBehaviorType

2. Component Fixes:
   - [X] Fix FactionShipBase.tsx by updating FACTION_COLORS or using type assertions
   - [X] Fix FactionShipStats.tsx by converting FactionBehaviorType to string before using string methods
   - [X] Add proper type checking before accessing properties

3. Worker Fixes:
   - [X] Fix combatWorker.ts by adding proper type guards
   - [X] Ensure proper typing for arrays and function parameters
   - [X] Add null/undefined checks where needed

4. Systematic Error Resolution:
   - [ ] Create a prioritized list of files to fix
   - [ ] Fix high-impact errors first (those affecting core functionality)
   - [ ] Address common patterns across multiple files
   - [ ] Create reusable utility functions for common operations

### Dependencies
- TypeScript type system
- FactionTypes.ts definitions
- FactionShipTypes.ts definitions
- Combat system type definitions

### Implementation Notes
- Many errors stem from type mismatches between string literals and complex types
- FactionBehaviorType is defined as an object but used as a string in some places
- Some errors indicate potential runtime issues with accessing properties
- The 'never' type errors in combatWorker.ts suggest array filtering issues
- Type assertions should be used carefully and only when necessary
- Consider creating utility functions for common type conversions
- Update type definitions to be more consistent across the codebase
- Document type relationships and conversions for future reference
- Fixed FactionShipBase.tsx by adding all possible FactionId values to FACTION_COLORS
- Fixed FactionShipStats.tsx by creating helper functions to convert FactionBehaviorType to string
- Fixed combatWorker.ts by replacing Set with Array and using direct array iteration instead of forEach
- The 'never' type errors in combatWorker.ts were caused by TypeScript's inability to properly type narrow when using Set.forEach

## Previous Task: TypeScript Configuration Update

### Progress Overview
[X] Update TypeScript configuration to fix MapIterator errors
[X] Add downlevelIteration option to tsconfig.json
[X] Create tsconfig.check.json for more targeted type checking
[X] Update build script in package.json to include --downlevelIteration flag
[X] Update vite.config.ts to set esbuild target to ES2020
[X] Fix MapIterator errors in ResourceThresholdManager.ts
[X] Fix MapIterator errors in ResourceFlowManager.ts
[X] Fix MapIterator errors in useResourceTracking.ts
[X] Fix MapIterator errors in EventFiltering.ts
[X] Fix MapIterator errors in ResourceExchangeManager.ts
[X] Fix MapIterator errors in ResourcePoolManager.ts
[X] Fix MapIterator errors in AsteroidFieldManager.ts
[X] Update System_Architecture.md with TypeScript best practices
[X] Update System_Mapping.md with build configuration details
[X] Update System_Errors file with fixed errors
[X] Verify fixes with TypeScript compiler

### Implementation Plan
1. Analysis of TypeScript Configuration:
   - [X] Review current tsconfig.json settings
   - [X] Identify issues with Map/Set iteration
   - [X] Research solutions for downlevel iteration

2. Update Configuration Files:
   - [X] Add downlevelIteration: true to tsconfig.json
   - [X] Create tsconfig.check.json with ES2015 target
   - [X] Update package.json scripts
   - [X] Configure vite.config.ts for proper build

3. Fix MapIterator Errors:
   - [X] Identify files with MapIterator errors
   - [X] Apply Array.from() pattern to convert Map entries
   - [X] Fix ResourceThresholdManager.ts
   - [X] Fix ResourceFlowManager.ts
   - [X] Fix useResourceTracking.ts
   - [X] Fix EventFiltering.ts
   - [X] Fix ResourceExchangeManager.ts
   - [X] Fix ResourcePoolManager.ts
   - [X] Fix AsteroidFieldManager.ts

4. Test Changes:
   - [X] Run TypeScript compiler on fixed files
   - [X] Verify MapIterator errors are resolved
   - [X] Note remaining type errors for future tasks

5. Document Updates:
   - [X] Update System_Architecture.md with best practices
   - [X] Update System_Mapping.md with configuration details
   - [X] Update System_Errors file with fixed errors
   - [X] Update .cursorrules with task progress

### Dependencies
- TypeScript compiler
- Vite build system
- NPM scripts

### Implementation Notes
- Project was previously using ES2020 target without downlevelIteration
- MapIterator errors occur when targeting below ES2015 without downlevelIteration
- Fixed errors by using Array.from() to convert Map entries to arrays before iteration
- Created tsconfig.check.json with ES2015 target for more accurate type checking
- Updated build script to include --downlevelIteration flag
- Remaining type errors are related to missing properties and type definitions
- Recommend using Array.from() pattern consistently for Map/Set iteration
- TypeScript configuration now properly supports iteration over Map and Set objects
- All MapIterator errors have been fixed in the specified files
- Some remaining type errors in ResourceExchangeManager.ts need to be addressed in a future task

## Previous Task: Linting Error Fixes

### Progress Overview
[X] Fix all linting errors in the codebase
[X] Remove fixed errors from System_Errors file
[X] Update type definitions where needed
[X] Ensure consistent usage of interfaces and types

### Implementation Plan
1. Categorize Linting Errors:
   - [X] Type compatibility errors
   - [X] Missing property errors
   - [X] Incorrect parameter usage
   - [X] Interface implementation errors
   - [X] Import/export errors

2. Fix Priority Areas:
   - [X] Resource management system errors
   - [X] Module framework errors
   - [X] Event system errors
   - [X] Test file errors
   - [X] Automation system errors

3. Systematic Error Resolution:
   - [X] Fix ResourceThresholdManager.ts errors
   - [X] Fix ResourceFlowManager.ts errors
   - [X] Fix ModuleManager.test.ts errors
   - [X] Fix ModuleUpgradeManager.test.ts errors
   - [X] Fix automationSystemInit.ts errors
   - [X] Fix useResourceManagement.tsx errors
   - [X] Fix remaining test file errors

### Dependencies
- TypeScript type system
- Module type definitions
- Resource type definitions
- Event system interfaces
- Test mocking utilities

### Implementation Notes
- Linting errors often indicate type incompatibilities that could cause runtime errors
- Many errors stem from incorrect usage of interfaces or missing properties
- Some errors are in test files that use outdated interfaces
- The ResourcePriority type is being used inconsistently across the codebase - FIXED by creating proper ResourcePriority objects instead of using numbers
- The ModuleEvent interface requires specific properties that are missing in some implementations - FIXED by adding missing properties to the data object instead of the event object
- Some test files are using properties that don't exist in the interfaces they're testing
- The useResourceManagement.tsx file had syntax errors that have been fixed by correcting the getResourceIntegration function
- Many MapIterator errors exist in the codebase due to TypeScript target configuration - FIXED in multiple files by using Array.from() to convert Map entries to an array before iteration
- Fixed ResourceThresholdManager.ts MapIterator error by using Array.from() to convert Map entries to an array before iteration
- Fixed ResourceFlowManager.ts MapIterator errors by using Array.from() to convert Map entries to an array before iteration
- Fixed useResourceTracking.ts MapIterator errors by using Array.from() to convert Map entries to an array before iteration
- Fixed EventFiltering.ts MapIterator errors by using Array.from() to convert Map entries to an array before iteration and fixed the processEvent method by using processor instead
- Fixed ResourceExchangeManager.ts MapIterator errors by using Array.from() to convert Map entries to an array before iteration
- Fixed ResourcePoolManager.ts MapIterator errors by using Array.from() to convert Map entries to an array before iteration
- Fixed AsteroidFieldManager.ts MapIterator errors by using Array.from() to convert Map entries to an array before iteration
- ModuleUpgradeManager.ts already uses Array.from() to convert Map entries to an array before iteration

## Previous Task: Unit Testing for Event and Automation Systems

### Progress Overview
[X] Create unit tests for event dispatcher
[X] Implement tests for RxJS integration
[X] Develop tests for game loop manager
[X] Create tests for automation system
[X] Implement tests for event communication
[X] Develop tests for event filtering

### Implementation Plan
1. Event Dispatcher Testing:
   - [X] Test context provider initialization
   - [X] Test event subscription mechanism
   - [X] Test event emission functionality
   - [X] Test history tracking

2. RxJS Integration Testing:
   - [X] Test Observable creation
   - [X] Test Subject-based event streams
   - [X] Test operators for event filtering
   - [X] Test subscription management

3. Game Loop Testing:
   - [X] Test timer initialization
   - [X] Test delta time calculation
   - [X] Test priority-based update system
   - [X] Test frame rate optimization

4. Automation System Testing:
   - [X] Test global automation manager
   - [X] Test routine registration and execution
   - [X] Test condition evaluation
   - [X] Test action execution
   - [X] Test React hook integration

5. Event Communication Testing:
   - [X] Test system-to-system messaging
   - [X] Test message priorities
   - [X] Test acknowledgment system
   - [X] Test error handling

6. Event Filtering Testing:
   - [X] Test type-based filtering
   - [X] Test priority-based handling
   - [X] Test conditional processing
   - [X] Test event batching

### Dependencies
- Vitest for test framework
- React Testing Library for component testing
- Mock implementations for external dependencies

### Implementation Notes
- Successfully implemented tests for GlobalAutomationManager with mocked dependencies
- Created comprehensive tests for useAutomation hook with React Testing Library
- Developed detailed tests for EventDispatcher component covering all major functionality
- Implemented comprehensive tests for RxJS integration covering:
  - Observable creation and subscription
  - Event filtering by type, module, and data
  - Event transformation and mapping
  - Subject-based event streams
  - Combined event streams
- Implemented comprehensive tests for GameLoopManager covering:
  - Initialization with default and custom configurations
  - Starting and stopping the game loop
  - Registering and unregistering update callbacks
  - Game loop execution with delta time and elapsed time
  - Error handling in update callbacks
  - Update intervals and delta time capping
  - Priority-based updates and throttling
  - Stats reporting and performance monitoring
- Implemented comprehensive tests for EventCommunication covering:
  - System-to-system messaging
  - Message priorities
  - Acknowledgment system
  - Error handling
  - Observable streams
  - Cleanup and resource management
- Implemented comprehensive tests for EventFiltering covering:
  - Priority queue with multiple priority levels
  - System message filtering by source and priority
  - Batch processor with max size and manual flushing
  - Priority-based processor with different handlers
  - Conditional processing with various conditions
- Fixed linter errors related to SystemId type in tests
- Used proper mocking techniques for moduleEventBus and other dependencies
- Updated System_Architecture.md with testing best practices
- Updated System_Mapping.md with test file locations and features

## Required Implementations from P-PHASE1

### I. Core Systems Priority Tasks

#### 1. Resource Management [High Priority] ✅
- Create `src/types/resources/ResourceTypes.ts` with comprehensive type definitions ✅
- Implement `src/managers/resource/ResourceThresholdManager.ts` for threshold management ✅
- Develop `src/utils/resources/resourceValidation.ts` for type validation ✅
- Create `src/managers/resource/ResourceFlowManager.ts` for flow optimization ✅
- Implement `src/managers/resource/ResourceStorageManager.ts` for storage management ✅
- Develop `src/hooks/resources/useResourceTracking.ts` for global tracking ✅

#### 2. Module Framework [Medium Priority] ✅
- Implement module attachment system in `src/managers/module/ModuleManager.ts` ✅
- Create module type validation in `src/utils/modules/moduleValidation.ts` ✅
- Develop dynamic HUD implementation in `src/components/ui/modules/ModuleHUD.tsx` ✅
- Implement automation hooks in `src/hooks/modules/useModuleAutomation.ts` ✅

#### 3. Event System [High Priority] ✅
- Create custom event dispatcher in `src/utils/events/EventDispatcher.tsx` ✅
- Implement RxJS integration in `src/utils/events/rxjsIntegration.ts` ✅
- Develop centralized timer in `src/managers/game/GameLoopManager.ts` ✅
- Implement global automation routines in `src/managers/automation/GlobalAutomationManager.ts` ✅
- Create event communication system in `src/utils/events/EventCommunication.ts` ✅
- Implement event filtering system in `src/utils/events/EventFiltering.ts` ✅
- Develop event system initialization in `src/initialization/eventSystemInit.ts` ✅
- Create automation system initialization in `src/initialization/automationSystemInit.ts` ✅
- Implement automation visualization in `src/components/ui/automation/AutomationVisualization.tsx` ✅
- Develop automation hook in `src/hooks/automation/useAutomation.ts` ✅
- Create game systems integration in `src/initialization/gameSystemsIntegration.ts` ✅

### II. Game Modules Priority Tasks

#### 1. Mining System [High Priority] ✅
- Implement enhanced visualization in `src/components/ui/mining/MiningVisualization.tsx`
- Create advanced priority management in `src/managers/mining/MiningPriorityManager.ts` ✅
- Develop resource flow optimization in `src/managers/mining/ResourceFlowOptimizer.ts` ✅
- Implement storage management in `src/managers/mining/MiningStorageManager.ts` ✅

#### 2. Combat System [Medium Priority]
- Create object detection system in `src/managers/combat/ObjectDetectionSystem.ts`
- Implement scan radius calculation in `src/utils/combat/scanRadiusUtils.ts`
- Develop threat assessment logic in `src/managers/combat/ThreatAssessmentManager.ts`
- Create combat mechanics core in `src/managers/combat/CombatMechanicsSystem.ts`

#### 3. Tech Tree System [Medium Priority]
- Implement enhanced visual feedback in `src/components/ui/tech/TechVisualFeedback.tsx`