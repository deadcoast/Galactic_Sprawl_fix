# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Project Overview: Galactic Sprawl

Key Components and Systems:

1. Core Game Structure:
- Mothership as central hub
- Empire naming and banner creation
- Basic camera and player control system

2. UI/Visual Systems:
- VPR (Visual Progress Representation) Star System View
- Global HUD with module-specific UI elements
- Civilization Sprawl View for empire overview
- Tech Tree with 3-tier progression system
- Local Galaxy Map with travel mechanics

3. Major Game Modules:
- Mothership & Colony Star Stations
- Exploration Hub & Mineral Processing
- Officer Academy & Ship Hangar
- Habitable Worlds
- Experience & Leveling System

4. Advanced Systems:
- Ship Arsenal & Combat
- Factions & Enemy AI
- Scaling & Visual Enhancements

Technical Stack:
- TypeScript & React (.tsx)
- Recommended libraries:
  - react-three-fiber for 3D
  - react-spring/Framer Motion for animations
  - d3.js for maps and layouts
  - Material-UI for consistent styling

Current Focus:
[X] Review project development plan
[X] Review GameplayLogic documentation
[X] Review Automation, Progression, and Visual systems
[ ] Continue with current task (BattleEnvironment.tsx implementation)

## Core Gameplay Logic Analysis

Key Architecture Requirements:

1. Global State & Event System:
- Use React Context/Redux for global state management
- Implement centralized event bus for module communication
- Automated timers/game loops for background processes
- TypeScript interfaces for all asset types

2. Module System Architecture:
- Each module (Mothership, Colony, etc.) operates autonomously
- Modules interact through global event system
- Visual feedback through VPR (Visual Progression Representation)
- Tiered progression (1-3) with Tech Tree integration

3. Core Modules Implementation:

### Mothership Core
- Central hub for resource tracking
- Global state integration for asset management
- Dynamic HUD with real-time stats
- Automated event initiation
- Visual upgrade system

### Colony Star Station
- Semi-autonomous operation
- Population & resource management
- Automated trade cycles (5s intervals)
- Visual trade routes with particle effects
- Expandable sub-modules

### Radar System
- Object detection within radius
- Event dispatch for detected objects
- Visual feedback (antenna/dish animation)
- Upgrade path for extended capabilities

### Ship Hangar
- Production queue management
- Automated ship deployment
- Visual docking bay representation
- Integration with global events

### Officer Academy
- XP and training system
- Automated progression
- Visual rank representation
- Fleet performance enhancement

### Mineral Processing
- Resource node management
- Automated mining dispatch
- Threshold-based automation
- Real-time resource visualization

### Exploration Hub
- Recon ship deployment
- Automated sector mapping
- Anomaly detection system
- Visual map progression

4. Technical Implementation Requirements:

UI/Visual:
- Framer Motion/react-spring for animations
- D3.js for data visualization
- react-konva for 2D canvas elements
- react-three-fiber for 3D elements
- Styled-components for theming

State/Events:
- Redux/Context for global state
- RxJS for event streams
- TypeScript interfaces for type safety
- Centralized automation system

Interaction:
- react-hotkeys for shortcuts
- react-tooltip for info display
- Custom scrollbars
- Modular menu system

## Current Task: Review BattleEnvironment.tsx Implementation

Checking implementation against GS_SC-ShipsAndCombat.md requirements:

[X] Review documentation
[X] Understand system integration requirements
[ ] Compare current implementation
[ ] Identify missing features
[ ] Propose necessary updates

Key Combat System Requirements:
- Hazard system integration
- Real-time ship-hazard collision detection
- Visual particle effects based on quality settings
- Dynamic movement and effect system
- Integration with global event system

Implementation Considerations:
1. Automation Integration:
- Auto-response to threats
- Hazard movement patterns
- Collision detection system

2. Progression Elements:
- Quality-based visual effects
- Hazard severity scaling
- Effect system evolution

3. Visual Feedback:
- Particle effects system
- Dynamic animations
- Quality-based rendering

## System Analysis & Integration Requirements

### 1. Automation System (from GS_GL-AutomationFunctions.md)

Key Concepts:
- **Automation Purpose (AP)** defines behavior for:
  - War: Auto attack/defend
  - Recon: Auto exploration
  - Mining: Auto resource extraction

Automated Processes:
1. Per-System Progress:
- Independent state management
- Background resource generation
- Progress persistence

2. Development & Expansion:
- Auto-colonization via tech tree
- Food/biodome growth systems
- Dynamic trade route formation

3. Fleet Behavior:
- War Ships: Auto-intercept and combat
- Recon Ships: Auto-mapping and exploration
- Mining Ships: Threshold-based extraction

Integration Requirements:
- React/TypeScript Architecture
- Component-based automation
- Global state synchronization
- Real-time visual feedback

### 2. Progression System (from GS_GL-ProgressionSystem.md)

Core Elements:
1. Visual Feedback:
- VPR for asset upgrades
- Dynamic UI transformations
- Real-time status indicators

2. Tech Tree Research (TTR):
- Three-tier progression system
- Interdependent upgrades
- Resource-based unlocks

3. Experience System:
- Ship/Officer leveling
- Performance improvements
- Visual rank indicators

Module Progression:
- Mothership: Central evolution
- Colony: Expandable modules
- Buildings: Tier-based upgrades
- Ships: Class-specific advancement

### 3. Visual Progress Representation (from GS_MV-VisualProgressRepresentationUIView.md)

Component Architecture:
1. Core Components:
- Star System Backdrop (parallax)
- Central Mothership VPR
- Colony/Module VPRs
- Interactive elements

2. Technical Stack:
- React components hierarchy
- State management (Context/Redux)
- Animation libraries integration
- Responsive design system

Visual Implementation:
- Framer Motion/react-spring for animations
- react-three-fiber for 3D elements
- D3.js for data visualization
- Particle effects for trade routes

## Integration Strategy

1. Component Relationships:
- Automation drives progression
- Progression updates visuals
- Visuals provide feedback

2. State Management:
- Global state for progression
- Local state for animations
- Event system for updates

3. Performance Optimization:
- Lazy loading for visuals
- Memoization for calculations
- Efficient update cycles

Current Focus:
[X] Review project development plan
[X] Review GameplayLogic documentation
[X] Review Automation, Progression, and Visual systems
[ ] Continue with current task (BattleEnvironment.tsx implementation)

## Current Task: Review BattleEnvironment.tsx Implementation

Checking implementation against GS_SC-ShipsAndCombat.md requirements:

[X] Review documentation
[X] Understand system integration requirements
[ ] Compare current implementation
[ ] Identify missing features
[ ] Propose necessary updates

Key Combat System Requirements:
- Hazard system integration
- Real-time ship-hazard collision detection
- Visual particle effects based on quality settings
- Dynamic movement and effect system
- Integration with global event system

Implementation Considerations:
1. Automation Integration:
- Auto-response to threats
- Hazard movement patterns
- Collision detection system

2. Progression Elements:
- Quality-based visual effects
- Hazard severity scaling
- Effect system evolution

3. Visual Feedback:
- Particle effects system
- Dynamic animations
- Quality-based rendering