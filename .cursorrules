# .cursorrules

This file contains all essential codebase patterns, structures, interfaces, and relationships.
Refer to this file first when seeking context for code generation, correction, or analysis.
BEGIN EVERY TASK BY CONSULTING .cursorcontext.md BEFORE IMPLEMENTING ANY SOLUTION.

## Correction and Code Implementation Guidelines

### DO NOT

- Implement solutions based solely on existing code examples
- Skip documentation review even when similar patterns exist elsewhere
- Assume pattern consistency without verification
- Add wrapper functions around existing methods
- Alter existing functionality
- Create your own implementations of existing methods
- Make assumptions about the code - always verify first
- Create actual instances of real classes and use their existing methods directly
- Avoid creating new files when asked to correct a file

### REQUIRED STEPS

1. Search .cursorcontext.md for relevant system patterns using #hashtag identifiers
2. Document in Scratchpad which patterns were found and will be applied
3. Only after documentation review, proceed with implementation
4. Verify implementation against documented patterns before submission

## Workflow & Instructions

### Context Source:

`.cursorcontext.md` is the primary source of truth for code patterns, structures, interfaces, and relationships. Always refer to this file first when seeking context for code generation, correction, or analysis.

### Context Retrieval Process:

- When analyzing or generating code, first search `.cursorcontext` for relevant system sections using `(#hashtag)` identifiers
- Look for code patterns, interfaces, and type structures in the identified sections
- Verify implementation approaches against established patterns
- If context is insufficient, ask the user for clarification

### Architecture Alignment:

- Ensure all implementations follow patterns in `.cursorcontext`
- Maintain consistency with existing type structures and interfaces
- Follow established naming conventions and implementation patterns
- If context is missing, ask the user before implementing new patterns

### Incremental Implementation:

- Generate code in manageable steps aligned with patterns in `.cursorcontext`
- Review implementations for consistency with documented patterns
- Identify and resolve gaps between implementation and documentation

### Context Maintenance:

- When discovering new patterns or implementations, suggest updates to `.cursorcontext`
- Format new context entries according to the established structure
- Ensure new entries include concrete code examples, not explanations

## `Scratchpad` Tasklist Usage

Maintain a `Tasklist` in the Scratchpad section below in this format:

## Scratchpad

- [ ] **Task 2: Implement Proper Type Definitions**

  - [ ] Defer `any`/`unknown` refinement in `src/hooks/ui/useComponentRegistration.ts` (Blocked by missing Context/Types)
  - [ ] Create concrete type definitions to replace all 'any' types (Remaining: Primarily D3 files under Task 10, and potentially others found later)
  - [ ] Implement strict type checking across all components
  - [ ] Add proper generic implementations for container classes
  - [ ] Create type utilities for complex type relationships

  **Primary Files with Any Types:**

  - [ ] `src/utils/performance/D3BatchedUpdates.ts`: (Deferred to Task 10)
  - [ ] `src/types/visualizations/D3SelectionTypes.ts`: (Deferred to Task 10)

- [ ] **Task 3: Implement Proper Null Checking**

  - [ ] Implement proper error handlers for null conditions
  - [ ] Add validation functions to ensure data structures are complete before access

- [ ] **Task 4: Implement Structured Logging System**

  - [ ] Implement environment-specific logging configuration
  - [ ] Add context information to all log messages

- [ ] **Task 5: Implement Proper Type Definitions for Ignored Cases**

  - [ ] Create proper interfaces for all @ts-ignore cases
  - [ ] Implement type utilities for complex type scenarios
  - [ ] Refactor code to properly handle edge cases with type safety
  - [ ] Create unit tests validating type correctness

- [ ] **Task 7: Complete System Integration**
  - [ ] Connect all implemented components to their respective systems
  - [ ] Implement all missing functionality in resource flow system
  - [ ] Complete event system implementation with proper type safety
  - [ ] Ensure full integration between worker system and main application

**Key Integration Files:**
`src/workers/ResourceFlowWorker.ts`

- [ ] No robust retry mechanism for failed operations

`src/workers/worker.ts`

- [ ] Missing proper task scheduling and prioritization
- [ ] Insufficient task cancellation implementation

**Additional Integration Required:**

- [ ] Complete entirely the event system implementation in src/lib/events/
- [ ] Complete the Missing connections between resource system components
- [ ] Complete Unfinished worker communication protocol
- [ ] Replace Incomplete error propagation across system boundaries with robust solution

- [ ] **Task 8: Global Type Safety & Validation:**

  - [ ] Replace remaining `any` types with concrete types or generics (excluding D3 files for now).

- [ ] **Task 9: Logging Strategy Implementation:**

  - [ ] Decide whether to extend `errorLoggingService` for `info`/`warn`/`debug` or adopt a different library/strategy.
  - [ ] Replace all remaining `console.error` calls with `errorLoggingService.logError`.
  - [ ] Ensure consistent logging context (service/module name, action) across the application.

- [ ] **Task 10: D3 Refactoring & Typing:**

  - [ ] Replace `any` types in `src/utils/performance/D3BatchedUpdates.ts` with proper types.
  - [ ] Replace `any` types in `src/types/visualizations/D3SelectionTypes.ts` with stricter interfaces.
  - [ ] Address `@ts-ignore` comments in D3-related files by implementing correct types or refactoring.
  - [ ] Fix `Font` / `FontFaceSet` issues in `src/types/declarations.d.ts`.

- [ ] **Task 12: Event System Consolidation:**

  - [ ] Analyze the different event buses/emitters (`moduleEventBus`, `systemCommunications`, potentially others).
  - [ ] Design a unified event bus strategy (e.g., using `EventPropagationService` more broadly or a dedicated global bus).
  - [x] Refactor code to use the chosen unified event system. -> _(Partially: ShipManagerImpl refactored)_
  - [x] Ensure consistent event type definitions (`EventType`, `ModuleEventType`) and address string literal usage (partially in `ResourceFlowDiagram.tsx`, `ResourceFlowSubsystem.ts`, `ShipHangar.tsx`).

- [ ] **Task 13: Worker System Enhancement:**

  - [x] Implement structured error reporting from workers (using `errorLoggingService` or similar) -> _Changed to use postMessage for consistency_.
  - [x] Add robust type checking/guards for `postMessage` data in `worker.ts` and `ResourceFlowManager.ts` -> _Input validation added in workers_.
  - [ ] Implement retry mechanisms for failed worker operations in `ResourceFlowWorker.ts`.
  - [ ] Implement task scheduling/prioritization and cancellation logic in `worker.ts`.

- [ ] **Task 14: Rule System Review:**
  - [ ] Clarify the contradiction between Service Implementation Anti-Pattern Rule #4 (`getInstance` override) and #5 (direct export). Update rules if necessary.
  - [x] Review Resource Types Rule and Event Types Rule for violations (addressed in `ResourceFlowSubsystem.ts`, `ResourceFlowDiagram.tsx`, `ShipHangar.tsx`).

**Task 15: Type System Standardization:**

- [ ] Consolidate ResourceType definitions into a single source of truth
- [ ] Create migration utilities for string-to-enum type conversion
- [ ] Document type system best practices in a central location
- [ ] Create type guard utilities for runtime validation
- [ ] Add safe extraction utilities for working with potentially undefined objects
- [x] Replace all `any` types with proper type definitions or `unknown` -> _(Progress made, excluding deferred/blocked)_
- [ ] Implement proper error handling with typed error objects
      **Task 16: Update Resource Type Usage:**
- [ ] Update all components and code currently using string-based resource types to use the standardized `ResourceType` enum.

**Task 17: Standardize Event Handling in Managers**

- [ ] `Standardizing Event Handling`: Updating managers to use the TypedEventEmitter standard (Task 1.3).
- [ ] `Consolodating Managers`: Consolodate overlapping functions from managers and remove legacy files.
- [ ] `Improving Type Safety`: Replacing any types, adding type guards, fixing implicit any errors, and ensuring correct payload types in managers and related components (Task 1.4, Task 8).
- [ ] `Resource Type Standardization`: Migrating managers away from string-based resource types to use the ResourceType enum (Task 1.2).
- [ ] `Integrating Logging`: Replacing console statements with the structured logging service (Task 4, Task 9).
- [ ] `Worker Communication`: Improving type checking and error handling in managers interacting with workers like ResourceFlowManager.ts (Task 13).
- [ ] `Eliminate `any` Type Usage:`
- [ ] Replace `any` with specific types, `unknown`, or generics, prioritizing visualization components, chart renderers, UI components, and type utilities. -> _(Progress made)_
- [ ] Create/use proper interfaces for complex data structures currently typed as `any`. -> _(Partial progress)_
- [ ] Implement type guards where necessary for runtime validation

**Task 18: Shared Types & Validation:**

- [ ] Create/consolidate shared type definitions (e.g., for D3 selections, event handlers). -> _(ShipManagerEvents created)_
- [ ] Create/consolidate type guard utilities for runtime validation.
- [ ] Define or identify a standardized `EventEmitter` base class/interface (`TypedEventEmitter` confirmed standard for manager-specific events).
- [ ] Update all manager classes to implement/use this standard interface.
- [ ] Add any missing standard event methods to manager classes. -> _(Likely relates to foundational managers)_
- [ ] Update components and hooks to use the standardized event methods type-safe keys/payloads.

`Manager Tree List`

```markdown
/src
├── [ ]components/
│ ├── [ ]buildings/
│ │ ├── [ ]colony/
│ │ │ └── [ ]AutomatedPopulationManager.tsx
│ │ └── [ ]modules/
│ │ └── [ ]MiningHub/
│ │ └── [ ]ThresholdManager.tsx
│ ├── [ ]exploration/
│ │ ├── [ ]AnalysisConfigManager.tsx
│ │ ├── [ ]DatasetManager.tsx
│ │ └── [ ]ExplorationDataManager.tsx
│ ├── [ ]factions/
│ │ └── [ ]FactionManager.tsx
│ └── [ ]ui/
│ └── [ ]performance/
│ └── [ ]AnimationFrameManagerDemo.tsx
├── [ ]hooks/
│ ├── [ ]integration/
│ │ └── [ ]useManagerRegistryIntegration.ts
│ ├── [ ]ships/
│ │ └── [ ]useShipClassManager.ts
│ └── [ ]useMemoryManager.ts
├── [ ]lib/
│ ├── [ ]managers/
│ │ └── [ ]BaseManager.ts
│ ├── [ ]optimization/
│ │ └── [ ]WebGLShaderManager.ts
│ └── [ ]visualization/
│ └── [ ]ChartCoordinationManager.ts
├── [ ]manager_tree.py
├── [ ]managers/
│ ├── [ ]ManagerRegistry.ts
│ ├── [ ]ai/
│ │ └── [ ]BehaviorTreeManager.ts
│ ├── [ ]automation/
│ │ └── [ ]GlobalAutomationManager.ts
│ ├── [X]colony/
│ │ └── [X]ColonyManagerImpl.ts
│ ├── [ ]combat/
│ │ ├── [ ]CombatManager.ts
│ │ ├── [ ]EnvironmentalHazardManager.ts
│ │ ├── [ ]ThreatAssessmentManager.ts
│ │ └── [X]CombatShipManagerImpl.ts
│ ├── [ ]effects/
│ │ ├── [ ]EffectLifecycleManager.ts
│ │ └── [ ]ParticleSystemManager.ts
│ ├── [ ]exploration/
│ │ ├── [ ]ExplorationManager.ts
│ │ ├── [ ]ExplorationManagerImpl.ts
│ │ └── [ ]ReconShipManagerImpl.ts
│ ├── [ ]factions/
│ │ ├── [ ]FactionBehaviorManager.ts
│ │ ├── [ ]FactionRelationshipManager.ts
│ │ └── [ ]factionManager.ts
│ ├── [ ]game/
│ │ ├── [ ]AsteroidFieldManager.ts
│ │ ├── [ ]AutomationManager.ts
│ │ ├── [ ]GameLoopManager.ts
│ │ ├── [ ]ParticleSystemManager.ts
│ │ ├── [ ]ResourceManager.ts
│ │ ├── [ ]animationManager.ts
│ │ ├── [ ]assetManager.ts
│ │ ├── [ ]gameManager.ts
│ │ ├── [ ]salvageManager.ts
│ │ └── [ ]techTreeManager.ts
│ ├── [ ]mining/
│ │ ├── [ ]MiningShipManager.ts
│ │ └── [ ]MiningShipManagerImpl.ts
│ ├── [X]module/
│ │ ├── [X]BaseModuleManager.ts
│ │ ├── [X]ModuleAttachmentManager.ts
│ │ ├── [X]ModuleManager.ts
│ │ ├── [X]ModuleManagerWrapper.ts
│ │ ├── [X]ModuleStatusManager.ts
│ │ ├── [X]ModuleUpgradeManager.ts
│ │ ├── [X]OfficerManager.ts
│ │ ├── [X]ShipHangarManager.ts
│ │ └── [X]SubModuleManager.ts
│ ├── [ ]resource/
│ │ ├── [ ]AdaptivePerformanceManager.ts
│ │ ├── [ ]ResourceConversionManager.ts
│ │ ├── [ ]ResourceCostManager.ts
│ │ ├── [ ]ResourceExchangeManager.ts
│ │ ├── [ ]ResourceFlowManager.ts
│ │ ├── [ ]ResourcePoolManager.ts
│ │ ├── [ ]ResourceStorageManager.ts
│ │ ├── [ ]ResourceThresholdManager.ts
│ │ └── [ ]ResourceTransferManager.tsx
│ ├── [ ]ships/
│ │ ├── [ ]ShipManagerImpl.ts
│ │ └── [ ]StandardShipHangarManager.ts
│ └── [ ]weapons/
│ ├── [ ]AdvancedWeaponEffectManager.ts
│ ├── [ ]WeaponEffectManager.ts
│ └── [ ]WeaponUpgradeManager.ts
├── types/
│ └── managers/
│ ├── [ ]MockManagerFactory.ts
│ └── [ ]SharedManagerTypes.ts
└── utils/
└── performance/
├── [ ]D3AnimationFrameManager.ts
├── [ ]D3AnimationQualityManager.ts
└── [ ]animationFrameManagerInstance.ts
```
