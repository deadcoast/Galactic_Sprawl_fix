# CURSORRULES

## System Reference Files - `SRF`

### `Agent Docs` - _Optimized Document Format for Agent Developer_

- `CodeBase_Docs/System_Architecture.md`- Phased restructuring plan with implementation priorities
- `CodeBase_Docs/System_Integration.md` - Current state architecture reference

### `Context Docs` - _Documents on prior Code Implementation_

- `CodeBase_Docs/System_Directory_Tree.md` - An outline of the entire CodeBase for contextual awareness
- `CodeBase_Docs/System_Development_History.md` - Comprehensive Documentation on the History of Development on each section of the code base. -`CodeBase_Docs/System_Scratchpad.md` - The Project Scratpad for TaskLists

## Workflow & Instructions- `WFI`

1. **Context First**: Review `System_Integration.md` file for the next steps the code base requires. Update the `System Scratchpad` with a concise list of only Taskslist. `System_Scratchpad.md`

- For Tasks on the Tasklist Review `System_Directory_Tree.md` to find relevant `Context Docs` before generating code. If you cannot find context still, provide a grep or command search on the `CodeBase_Context/` directory for relevant implementations.

2. **Architecture Alignment**: Ensure all implementations align with specifications in `System_integration.md` Documents. If you still cannot find proper context or current implementations, **ask the user** before generating a new implementation.

3. **Incremental Implementation**: Take action to complete the task
   Generate code in manageable steps, maintaining consistency with existing codebase.

- Review for missing implementations required by recent changes
- Identify implementation gaps and plan necessary steps

4. **Knowledge Management**: Document reusable components, fixes, and implementation decisions in `Sysntem_Archktecture.md` and `System_Integration.md`.

- Update System documents `System_Architecture.md` and `System_Integration` to maintain codebase consistency
- Update the `System_Scratchpad.md`, with progress

6. **`System_Scratchpad` Usage**: Maintain a task list in `System_Scratchpad.md` file following this format:

   ```
   ## Scratchpad

   [X] Task 1
   [ ] Task 2
   ```

> - Update progress markers as subtasks are completed. Use the Scratchpad to maintain implementation context and track progress.
> - These rules are absolute and must be followed without exception.
> - Mocking leads to brittle tests that don't verify actual functionality and create maintenance burdens.
> - All tests must use real implementations to ensure they're testing what users will actually experience.
