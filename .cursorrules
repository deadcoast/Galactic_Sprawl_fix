# CodeBase Document Index (`CDI`)

1. It is of the utmost importance you follow the workflow in this file for codebase consistency. I Have provided extensive documentation `CDI` on the development so far in @CodeBase_Docs . Before you generate code, you should see if there is any documentation to help the implementation and generation .

2. For each task, Ensure you are seeking context in the `CodeBase_Docs` directory to handle the task gracefully.

3. When you are Generating Code for a Task on the `Scratchpad` Tasklist, implement it in smaller managable steps over sever responses to ensure it is consistent with the CodeBase.

`CodeBase_Docs/CodeBase_Architecture.md` - For Specifics on the code base structure, methods, and architecture.
`CodeBase_Docs/CodeBase_Mapping` - A Living directory that is to be ONLY updated with specific files, their locations, and purpose to keep track of the code base.
`CodeBase_Docs/CodeBase_Error_Log.md` - A File to log common issues while debugging, to AVOID them later in development.
`CodeBase_Docs/CodeBase_Linting_Progress.md` - A Linter Log to document best practises, do's and donts to avoid future linting errors.

---

# Workflow & Instructions(`WFI`)

1. During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name, or methods used), especially about a fix to a mistake you made or a correction you received, you should take note in the `CodeBase_Docs/CodeBase_Architecture.md` file so you will not make the same mistake again.

2. You must update the `CodeBase_Docs/CodeBase_Mapping` file as a navigation guide to easily navigate the codebase and its assets to circumvent duplication and codebase conflicts. a `CodeBase_Docs/CodeBase_Mapping` file should be ADDITIVE, not destructive. The point is to maintain a complete map of the entire code base. Do not remove entries or information from the file.

3. You will operate on a sctrict workflow called `Rule of Seven` or `RO7`.

   1. Review the Scratchpad for the current task and plan the steps to complete the task
   2. Search `CodeBase_Docs/CodeBase_Mapping` for existing implementations, if none found search the codebase and adjust the plan if necessary
   3. Take action to complete the task
   4. Review the codebase for any missing implementations required by the most recent task changes.
   5. Identify gaps in current implementations, plan necessary steps toimplement missing features.
   6. Update the `Scratchpad` section.
   7. Finally, update the `CodeBase_Docs/CodeBase_Architecture.md` and `CodeBase_Docs/CodeBase_Mapping` files for code base consistency.

4. Use the `.cursorrules` file as a `Scratchpad` to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.

```
[X] Task 1
[ ] Task 2
```

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan. You should add only small and essential notes with the `Scratchpad` plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

---

# Scratchpad

## `PRIORITY TASKS` [HIGHEST-PRIORITY]

- Fix all failing tests to get the codebase running for testing
- Focus on making the existing code work before implementing new features
- Document all fixes in the appropriate documentation files

1. **Test Fixes** [CURRENT FOCUS]

- [ ] Fix Tool Test Files

  - [x] Fixed `src/tests/tools/setup-linting.test.js` - Completely rewrote the test file to use proper mocking
  - [x] Fixed `src/tests/tools/analyze-lint-errors.test.js` - Fixed node:timers mocking with importOriginal
    - [x] Fixed mock implementation for file system operations
    - [x] Fixed console mocking for error reporting
    - [x] Implemented proper timeout mocking
    - [x] Created comprehensive documentation of the fixes in Test_Fixes_March_2025.md
    - [x] Updated CodeBase_Architecture.md with best practices for mocking
  - [x] Improved `src/tests/tools/run-lint-workflow.test.js` - Updated mocks but still has failing tests
    - [x] Fixed readline interface mocking
    - [x] Fixed execSync mocking for command execution
    - [x] Implemented proper error handling in tests
  - [x] Improved `src/tests/tools/fix-eslint-by-rule.test.js` - Updated mocks but still needs work
    - [x] Fixed console mocking
    - [x] Fixed process.exit mocking
    - [x] Fixed error handling tests
  - [x] Improved `src/tests/tools/fix-typescript-any.test.js` - Updated mocks but still needs work
    - [x] Fixed execSync mocking
    - [x] Fixed readline interface mocking
    - [x] Fixed file system operation mocking

- [x] Fixed WebSocket Server Port Conflicts in E2E Tests

  - [x] Implemented dynamic port allocation with tracking
  - [x] Added port blacklist to avoid common ports
  - [x] Added persistence of used ports to prevent conflicts between test runs
  - [x] Added cleanup of old port entries

- [ ] Fix Game Loop Manager Tests

  - [x] Fixed error in `GameLoopManager.test.ts` related to error handling in update callbacks
  - [x] Improved test to verify that the game loop continues running despite errors
  - [ ] Ensure proper cleanup between tests to prevent interference

- [ ] Fix ResourceFlowManager Tests
  - [x] Improved the optimize flows test in ResourceFlowManager.test.ts
  - [ ] Address issues with batch processing tests
  - [ ] Ensure proper cleanup of resources between tests

2. **E2E Tests**

- [ ] Add more comprehensive E2E tests for critical user flows

3. **Fix Performance Tests**

- [x] Address issues with performance metrics calculation
  - [x] Fixed `src/tests/utils/testUtilsUsageExample.test.tsx` - replaced setTimeout with CPU-intensive operations
  - [x] Implemented more reliable assertions for timing tests
  - [x] Fixed loading state test to use direct re-rendering instead of React state changes
  - [x] Added proper cleanup after each test to prevent interference
  - [x] Documented the approach in Test_Fixes_March_2025.md
- [ ] Ensure benchmarks are meaningful and reliable

4. **Test Environment Improvements**

- [x] Fix linting errors in test files
  - [x] Fixed `src/tests/tools/fix-typescript-any.test.js`
  - [x] Fixed `src/tests/tools/run-lint-workflow.test.js`
  - [x] Fixed `src/tests/tools/setup-linting.test.js` - Completely rewrote the test file to use proper mocking
  - [x] Fixed `src/tests/tools/fix-eslint-by-rule.test.js`
  - [x] Fixed `src/tests/tools/analyze-lint-errors.test.js`
  - [x] Fixed `src/tests/utils/fixtureUtils.ts` - utilized unused resourceType parameter
  - [x] Fixed `src/tests/utils/testUtilsUsageExample.test.tsx` - improved reliability of performance tests
  - [x] Updated documentation in CodeBase_Error_Log.md
  - [x] Updated documentation in CodeBase_Linting_Progress.md
  - [x] Updated CodeBase_Architecture.md with best practices for handling unused variables
  - [x] Updated CodeBase_Mapping_Index.md with information about fixture utilities
  - [x] Created Test_Fixes_March_2025.md to document test fixes and patterns
  - [x] Updated CodeBase_Architecture.md with best practices for mocking in test files
- [ ] Configure test coverage reports

### Common Test Issues to Address

- [x] Mocking Issues

  - [x] Improve readline interface mocking to include all required methods (pause, resume, close, etc.)
  - [x] Create consistent mocking patterns for file system operations
  - [x] Implement proper mocking for child_process module
  - [x] Create helper functions for common mocking patterns
  - [x] Document best practices for mocking in CodeBase_Architecture.md

- [x] Test Isolation

  - [x] Ensure proper cleanup between tests
  - [x] Use unique identifiers for test resources
  - [x] Implement dynamic port allocation for services
  - [x] Reset global state between tests

- [x] Error Handling

  - [x] Improve error reporting in tests
  - [x] Add proper assertions for error conditions
  - [x] Implement graceful handling of expected errors

- [x] Documentation
  - [x] Document common testing patterns in Test_Fixes_March_2025.md
  - [x] Create examples of proper mocking in CodeBase_Architecture.md
  - [x] Document test environment setup and teardown in Test_Fixes_March_2025.md

### Next Steps After Tests Pass

- [ ] **Mining System**
  - [ ] Enhanced visualization of operations
- [x] **Tech Tree System**
  - [x] Enhanced visual feedback
  - [ ] Real-time progress tracking
  - [ ] Advanced synergy visualization
  - [ ] Detailed tech path planning
- [ ] **Exploration System**
  - [ ] Next task: Implement Recon ship coordination for the Exploration System
  - [ ] Implement a Data Analysis System

### III. Technical Implementation

- [ ] **Visual Systems**
  - [ ] Multi-layer parallax background
  - [ ] Depth effect implementation
  - [ ] Scroll speed variation
  - [ ] Evolution animations
  - [ ] Upgrade transitions
  - [ ] Interactive elements
  - [ ] Cosmic weather effects
  - [ ] Day/night cycle
  - [ ] Aurora animations
  - [ ] Solar wind effects
- [ ] **User Experience Improvements**
  - [ ] Add animations for state transitions
  - [ ] Improve error messages
  - [ ] Create better loading indicators
  - [ ] Implement touch-friendly controls
  - [ ] Add keyboard navigation
  - [ ] Implement screen reader support
  - [ ] Enhance color contrast
  - [ ] Implement Enhanced visualization of operations for the Mining System
  - [ ] Enhance visual feedback
  - [ ] Add animations for state transitions
  - [ ] Improve error messages
  - [ ] Create better loading indicators
- [ ] Improve accessibility
  - [ ] Add keyboard navigation
  - [ ] Implement screen reader support
  - [ ] Enhance color contrast

2. **Performance Monitoring** [LOW PRIORITY]

   - [ ] Optimize resource usage
     - [ ] Implement memory profiling
     - [ ] Add CPU usage monitoring
     - [ ] Optimize GPU utilization for effects
   - [ ] Enhance debugging tools
     - [ ] Create visual debuggers for complex systems
     - [ ] Add time-travel debugging for state
     - [ ] Implement conditional breakpoints for events

### Notes

- Focus on fixing tests first before implementing new features
- Document all fixes in the appropriate documentation files
- Ensure proper test isolation to prevent test interference
- Improve test error reporting for faster debugging
- Many tests appear to pass but are actually not testing anything meaningful - need to add proper assertions
- Some tests are being skipped entirely, which gives a false impression of passing tests
- Fixed linting errors in test files by replacing require() with dynamic imports and properly mocking global objects
- Improved fixtureUtils.ts by making the resourceType parameter meaningful with type-specific defaults
- The most critical issue appears to be with mocking in the tool test files - need to implement consistent mocking patterns
- WebSocket server port conflicts in E2E tests need to be addressed with dynamic port allocation
- ResourceFlowManager tests have issues with optimization and batch processing that need to be fixed
- GameLoopManager test has an error in the error handling callback test that needs to be addressed
- Fixed analyze-lint-errors.test.js by simplifying the test approach and properly mocking node:timers with importOriginal
