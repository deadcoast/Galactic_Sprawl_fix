# CodeBase Document Index (`CDI`)

`CodeBase_Architecture.md` - For Specifics on the code base structure, methods, and architecture.
`CodeBase_Mapping.md` - A Living file that is to be ONLY updated with specific files, their locations, and purpose.
`CodeBase_Error_Log.md` - A File to log common issues while debugging, to AVOID them later in development.
`CodeBase_System_Errors.ts` - The CURRENT Errors on the users IDE. When an error is fixed, that error should be REMOVED from this file.

---

# Workflow & Instructions(`WFI`)

1. During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name, or methods used), especially about a fix to a mistake you made or a correction you received, you should take note in the `CodeBase_Architecture.md` file so you will not make the same mistake again.

2. You must update the `CodeBase_Mapping.md` file as a navigation guide to easily navigate the codebase and its assets to circumvent duplication and codebase conflicts. a `CodeBase_Mapping.md` file should be ADDITIVE, not destructive. The point is to maintain a complete map of the entire code base. Do not remove entries or information from the file.

3. You will operate on a sctrict workflow called `Rule of Seven` or `RO7`.

   1. Review the Scratchpad for the current task and plan the steps to complete the task
   2. Search `CodeBase_Mapping.md` for existing implementations, if none found search the codebase and adjust the plan if necessary
   3. Take action to complete the task
   4. Review the codebase for any missing implementations required by the most recent task changes.
   5. Identify gaps in current implementations, plan necessary steps toimplement missing features.
   6. Update the `Scratchpad` section.
   7. Finally, update the `CodeBase_Architecture.md` and `CodeBase_Mapping.md` files for code base consistency.

4. Use the `.cursorrules` file as a `Scratchpad` to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.

```
[X] Task 1
[ ] Task 2
```

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan. You should add only small and essential notes with the `Scratchpad` plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# TypeScript Linting Correction Workflow (`TLC`)

## Initial Setup & Assessment [RO7.1]

- Begin by setting up the Linting with:

```bash
node tools/setup-linting.js
```

1. **Get Current Linting Status and Analysis**:

```bash
# Generate a comprehensive analysis of linting issues
npx eslint src --format json | node tools/analyze-lint-errors.js

# View the current status and progress chart
node tools/chart-lint-progress.js
```

- Generates detailed breakdown of all linting issues by rule and file
- Shows top problematic files and most common error types
- Displays ASCII chart showing progress over time
- Creates analysis report in lint-analysis-report.json

2. **Generate Rule-Specific Analysis**:

```bash
# Analyze distribution of specific rule violations
npx eslint src --format json | node tools/analyze-lint-errors.js
```

- Identifies top issues by rule, file, and directory
- Shows which files have the most occurrences of a specific issue
- Suggests fix commands for the most common issues

## Systematic Fix Strategy [RO7.3]

### Phase 1: Auto-Fix Critical Issues

1. **Run the Rule-Specific Fixer for Top Issues**:

```bash
# Fix the most common issue automatically
node tools/fix-eslint-by-rule.js --auto

# Fix critical TypeScript rules
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src
node tools/fix-eslint-by-rule.js prefer-const src
node tools/fix-eslint-by-rule.js @typescript-eslint/no-explicit-any src
```

- Automatically identifies and fixes the most common issues
- Shows before/after counts for each rule
- Uses batch processing to handle large codebases efficiently
- Updates progress tracking after completion

2. **Fix Prettier Formatting Issues**:

```bash
# Fix all formatting issues
node tools/fix-eslint-by-rule.js --prettier
```

- Applies Prettier formatting across the entire codebase
- Maintains consistent code style without affecting logic

### Phase 2: Rule-Specific Targeted Fixes

1. **Fix TypeScript-Specific Issues**:

```bash
# Fix TypeScript-specific rules using interactive mode
node tools/fix-eslint-by-rule.js

# Then select from the menu:
# 1. @typescript-eslint/explicit-module-boundary-types
# 2. @typescript-eslint/no-non-null-assertion
```

- Provides interactive selection of rules to fix
- Shows count of issues for each rule before fixing
- Allows fixing in batches to prevent overwhelming changes

2. **Fix React-Specific Issues**:

```bash
# Fix React hook dependencies
node tools/fix-eslint-by-rule.js react-hooks/exhaustive-deps src

# Fix component issues
node tools/fix-eslint-by-rule.js react/jsx-key src
```

- Corrects React-specific issues for better component reliability
- Prevents stale closures and improves rendering performance

3. **Fix Import-Related Issues**:

```bash
# Fix import ordering
node tools/fix-eslint-by-rule.js import/order src

# Fix unused imports
node tools/fix-eslint-by-rule.js no-unused-imports src
```

- Cleans up imports for better code organization and smaller bundles
- Ensures consistent import ordering throughout the codebase

### Phase 3: File and Directory Targeting

1. **Fix Issues in Specific Critical Paths**:

```bash
# Fix all issues in game loop with detailed reporting
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src/game-loop

# Fix all issues in physics engine
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src/physics

# Fix all issues in render engine with threshold
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src/render-engine --threshold=5
```

- Targets performance-critical code paths with customized fixing
- Uses threshold option to focus on most important issues first
- Provides detailed statistics for each directory

2. **Fix Issues in Current File or Directory**:

```bash
# Fix all issues in the current file
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src/utils/events

# Fix specific rule in current file
node tools/fix-eslint-by-rule.js @typescript-eslint/no-explicit-any src/utils/events

# Dry run to see what would be fixed
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src/utils/events --dry-run
```

- Allows targeted fixing during development
- Provides preview option with --dry-run
- Maintains code quality incrementally as you work

### Progress Tracking [RO7.6]

1. **Record Current Linting Status**:

```bash
# Add current linting status to the progress log
node tools/track-eslint-progress.js --silent

# Add with details about top issues
node tools/track-eslint-progress.js --details --silent
```

- Creates timestamped progress entries
- Analyzes top issues by rule and occurrence count
- Provides suggestions for which rules to fix next
- Generates statistics on fix rate and progress

2. **View Progress Chart and Analysis**:

```bash
# Generate ASCII chart showing progress
node tools/chart-lint-progress.js

# Show detailed trend analysis
node tools/chart-lint-progress.js --verbose
```

- Visualizes error reduction over time with ASCII chart
- Calculates fix rates and estimates completion timeline
- Shows trend lines for errors vs warnings
- Provides statistical analysis of fixing progress

### Batch Processing and Automation [RO7.4-5]

1. **Process Files in Batches**:

```bash
# Fix issues in batches of 20 files
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src --batch=20

# Fix with threshold to focus on frequently occurring issues
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src --threshold=10
```

- Processes files in configurable batches to avoid overwhelming changes
- Uses thresholds to prioritize the most common issues
- Provides progress indicators during batch processing
- Prevents memory issues with large codebases

2. **Special Handling for Game Engine Code**:

```bash
# Fix issues with different severity based on directory
node tools/fix-eslint-by-rule.js @typescript-eslint/no-unused-vars src/game-loop --strict

# Analyze critical code paths for potential issues
npx eslint src/game-loop src/physics src/render-engine --format json | node tools/analyze-lint-errors.js
```

- Applies stricter checking to performance-critical code
- Generates focused analysis reports for game engine components
- Ensures consistent quality in core game systems

### Unified Workflow Execution [RO7.7]

1. **Run the Complete Workflow**:

```bash
# Run the entire workflow automatically
node tools/run-lint-workflow.js

# Run only analysis steps (skip fixing)
node tools/run-lint-workflow.js --skip-fix

# Run in interactive mode (prompt before each step)
node tools/run-lint-workflow.js --interactive
```

- Executes all linting tools in the correct sequence
- Provides options to skip specific steps
- Shows progress and summary of execution
- Handles errors gracefully

### Verification and Testing [RO7.5]

1. **Verify Fixes with Type Checking**:

```bash
# Run type checking after fixes
npm run type-check

# Check for specific files or directories
npx tsc --noEmit "src/game-loop/**/*.ts"
```

- Ensures fixes don't introduce type errors
- Verifies TypeScript compatibility after changes
- Catches potential runtime issues before they occur

2. **Run Tests After Significant Changes**:

```bash
# Run tests to verify code still works
npm run test

# Run tests for specific components
npm run test -- --testPathPattern=src/game-loop
```

- Confirms that fixes don't break functionality
- Validates changes against test suite
- Prevents regressions in critical game systems

---

# Scratchpad

## Primary Task: Restructure the `CodeBase` Documents & Files

**ALL CODEBASE DOCS HAVE BEEN MOVED TO A NEW DIRECTORY `/Galactic_Sprawl/CodeBase_Docs/`**

- FIRST DOCUMENT TO RESTRUCTURE: `CodeBase_Mapping.md`
  - (a) **Step by Step**, we will organize and categorize the `CodeBase_Mapping.md` File into seperate CodeBase_Mapping Categories titled `*Category*_References.md` based on their Function in the code base. **For Example:** `UI_References.md`.
  - (b) Your Goal is to Remove Sections Piece by Piece, Step by Step from top to bottom, creating a coherant and organized `CodeBase_Mapping` directory by assigning extracted sections categorically into the new title formats explained in section (a).
  - (c) Achieve this by creating new Sub Category `CodeBase_Mapping` Documents in the directory `Galactic_Sprawl/CodeBase_Docs/CodeBase_Mapping`.
  - (d) The new `CodeBase_Mapping` Directory must be strictly organized and structured, **DO NOT** create verbose amounts of categories. Keep the extracted sections relevant and organized together in the newly created categories.
  - The File is 8372 lines, so this will need to be done, from top to bottom, one portion at a time **Step by Step**.
  - **DO NOT** Try to do to much refactoring at once. We aim to retain **ALL** code mapping, just restructuring the organization into their own organized files based on function.

### Secondary Task Description

The task is to implement a comprehensive linting workflow using the newly fixed linting tools. This will help maintain code quality, identify and fix common issues, and track progress over time. The workflow will follow the TypeScript Linting Correction Workflow (TLC) outlined above.

### Action Plan

[RO7.1] Review and Setup

[RO7.2] Analyze Codebase

[RO7.3] Fix Critical Issues

[RO7.4] Targeted Fixes

[RO7.5] Verification

[RO7.6] Progress Tracking

[RO7.7] Documentation and Integration

### Implementation Summary

This task will implement a systematic approach to code quality using the fixed linting tools. By following the TLC workflow, we'll identify and fix common issues, track progress, and establish best practices for ongoing development. The focus will be on improving TypeScript type safety, removing unused code, and ensuring consistent formatting.

### Next Steps

1. Continue fixing issues in other problematic files:
   - Next: ResourceManager.ts (6 issues)
   - Next: moduleSystemInit.ts (5 issues)

### Progress Summary

- Total issues remaining: ~155 (down from 219)
- Top issue types:
  - @typescript-eslint/no-explicit-any: ~54 errors (down from 76)
  - @typescript-eslint/no-unused-vars: ~60 warnings (down from 74)
  - no-console: ~34 warnings (down from 67)
  - react-hooks/exhaustive-deps: 2 errors
- Most problematic directories:
  - managers/resource: 1 errors, 22 warnings
  - managers/module: 0 errors, 9 warnings (improved from 6 errors, 24 warnings)
  - src/initialization: 0 errors, 5 warnings (improved from 9 errors, 7 warnings)
- Most problematic files:
  - managers/resource/ResourceManager.ts: 6 issues
  - src/initialization/moduleSystemInit.ts: 5 issues
