# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a Knowledge on the Project. Use it before you start the task.
  - KNOWLEDGE_BASE_PATH="/Users/deadcoast/CursorProjects/Galactic_Sprawl/GalaxySprawlDocs"
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When implementing threshold-based systems, use proper TypeScript types and React Context for global state management
- Handle lexical declarations in switch-case blocks by using block scoping with curly braces
- Remove unused imports to avoid TypeScript linter warnings
- Use 'as const' assertions to properly type string literals in TypeScript
- Properly handle cleanup in useEffect to prevent memory leaks with intervals
- When fixing linter errors about unused variables in React components:
  1. First remove unused imports
  2. Then remove unused props from both interface and component parameters
  3. Finally remove unused local variables
  4. Keep props in the interface if they might be used by other components even if not used in the current component

# Scratchpad

## Current Project State: Galactic Sprawl

### Current Implementation Task: Mining Threshold System

3. Next Steps
   [ ] Create threshold presets system
   [ ] Add threshold history tracking

### Current Implementation Focus:

1. Automation Systems
   [X] Mining automation with threshold-based logic
      - Resource node management
      - Auto-dispatch mining ships
      - Threshold monitoring
      - Resource collection & storage
      - Automated resource transfers
      - Visual threshold indicators
   [ ] Exploration automation with recon ships
      - Sector mapping
      - Anomaly detection
      - Data collection
      - XP system integration
   [ ] Colony growth and trade automation
      - Population management
      - Resource exchange
      - Trade route optimization
   [ ] Combat and defense automation
      - Threat detection
      - Ship deployment
      - Combat resolution

2. UI Enhancement
   [X] Real-time resource tracking
   [X] Resource transfer visualization
   [X] Visual threshold indicators
   [ ] Interactive galaxy map
   [ ] Advanced visual feedback
   [ ] Performance optimization

### Technical Stack & Libraries:

1. Core Framework:
   - TypeScript & React (.tsx)
   - React Context/Redux for state management
   - RxJS for event streams

2. UI/Visual Libraries:
   - react-three-fiber for 3D
   - react-spring/Framer Motion for animations
   - d3.js for maps and layouts
   - Material-UI for styling
   - GSAP for complex animations
   - react-konva for 2D canvas

3. Performance Optimizations:
   - React.memo for component memoization
   - useMemo for complex calculations
   - Proper cleanup in useEffect
   - Optimized rendering cycles

### Next Steps:

1. Performance Optimization
   [ ] Add memoization for filtered sectors
   [ ] Optimize rendering with React.memo
   [ ] Add proper cleanup in useEffect
   [ ] Implement React.memo for sector and ship components
   [ ] Add useMemo for complex calculations
   [ ] Optimize real-time update intervals

2. Feature Implementation
   [ ] Complete automation systems
      - Mining threshold system
      - Exploration mapping
      - Colony trade routes
      - Combat response
   [ ] Enhance visual feedback
      - Trade route particles
      - Ship movement trails
      - Resource flow indicators
   [ ] Implement advanced game mechanics
      - Tech tree progression
      - Officer training
      - Ship upgrades
   [ ] Add notification system for discoveries

### Tech Stack Notes:

- Using react-spring for animations
- D3.js recommended for map visualizations
- Consider using react-tooltip for tooltips
- Use React Context for real-time data management
- GSAP for complex animation sequences
- RxJS for event stream management
