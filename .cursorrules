# CURSORRULES

## Correction Guidelines

- **NEVER CORRECT CODE BY COMMENTING IT OUT WITH "\_"**
- **NEVER ADD WRAPPER FUNCTIONS AROUND EXISTING METHODS**
- **NEVER ABSTRACT OR ALTER EXISTING FUNCTIONALITY**
- **NEVER CREATE YOUR OWN IMPLEMENTATIONS OF EXISTING METHODS**
- **NEVER MAKE ASSUMPTIONS ABOUT THE CODE - ALWAYS VERIFY FIRST**
- **ONLY CREATE ACTUAL INSTANCES OF REAL CLASSES AND USE THEIR EXISTING METHODS DIRECTLY**
- **AVOID CREATING NEW FILES WHEN ASKED TO CORRECT A FILE**

## Primary Context Source

### `.cursorcontext` - _Comprehensive Codebase Reference_

This file contains all essential codebase patterns, structures, interfaces, and relationships. Refer to this file first when seeking context for code generation, correction, or analysis. The document uses hashtag identifiers (#system_name) to mark major system sections.

**REVIEW ENTRIES INTO `.cursorcontext` FOR DUPLICATES. ENSURE NO DUPLICATES ARE CREATED.**

## Workflow & Instructions

1. **Context Retrieval Process**:

   - When analyzing or generating code, first search `.cursorcontext` for relevant system sections using `(#hashtag)` identifiers
   - Look for code patterns, interfaces, and type structures in the identified sections
   - Verify implementation approaches against established patterns
   - If context is insufficient, ask the user for clarification

2. **Architecture Alignment**:

   - Ensure all implementations follow patterns documented in `.cursorcontext`
   - Maintain consistency with existing type structures and interfaces
   - Follow established naming conventions and implementation patterns
   - If context is missing, ask the user before implementing new patterns

3. **Incremental Implementation**:

   - Generate code in manageable steps aligned with patterns in `.cursorcontext`
   - Review implementations for consistency with documented patterns
   - Identify and resolve gaps between implementation and documentation

4. **Context Maintenance**:

   - When discovering new patterns or implementations, suggest updates to `.cursorcontext`
   - Format new context entries according to the established structure
   - Ensure new entries include concrete code examples, not explanations

5. **Scratchpad Usage**:
   Maintain a task list in thw Scratchpad section below in this format:

   ```
   ## Scratchpad

   [X] Task 1
   [ ] Task 2
   ```

   - Update progress markers as subtasks are completed
   - Use the Scratchpad to maintain implementation context and track progress

---

## `Scratchpad`

## Context Extraction Workflow

- **REVIEW THE `/Users/deadcoast/CursorProjects/Galactic_Sprawl/CodeBase_Docs` AND THE RELEVANT CODE FILES IN `src`. COMPLETE THE CONTEXT EXTRACTIONS FOR `.cursorcontext` STEP BY STEP.**

- _THIS WORKFLOW MUST BE COMPLETED WITH CONTEXT AS TOP PRIORITY._

1. Search the relevant DOCS.
2. Search for the relevant typescript or tsx files
3. Extract the context from both 1 and 2.
4. Export the context into the proper `#hashtag` section in@.cursorcontext.md
5. **NOTE:** _VERY IMPORTANT_ - ENSURE THAT YOUR ITEGRATION IS NOT A DUPLICATION. CREATING DUPLICATIONS DEFEATS THE PURPOSE OF THIS DOCUMENT

## `Tasklist` - [PRIORITY] - Extract Essential Context from Documents

# Phase 1:

### Phase 7: Integration Systems

- [x] Services Integration (#services_integration)

  - [x] Review components/providers/ServiceProvider.tsx
  - [x] Document service injection patterns
  - [x] Document service discovery mechanism
  - [x] Extract dependency management patterns

- [x] React Integration Patterns (#react_integration)
  - [x] Review component lifecycle management
  - [x] Document state management approaches
  - [x] Document component communication patterns
  - [x] Extract React performance optimizations

## `Additional Tasklist` - [PRIORITY] - Missing System Integrations

### Core Infrastructure Systems

- [x] Factory System (#factory_system)

  - [x] Review factories/ships/ShipClassFactory.ts
  - [x] Document factory method patterns
  - [x] Document factory creation workflows
  - [x] Extract factory implementation details

- [x] Registry System (#registry_system)

  - [x] Review registry/ResourceRegistry.ts
  - [x] Document registry patterns
  - [x] Document registration workflows
  - [x] Extract registry integration patterns

- [x] Entity Pooling System (#entity_pooling_system)
  - [x] Review lib/optimization/EntityPool.ts
  - [x] Document object pooling patterns
  - [x] Document memory optimization techniques
  - [x] Extract performance optimization patterns

### Game Systems

- [x] Factions System (#factions_system)

  - [x] Review managers/factions/ directory
  - [x] Document faction behavior system
  - [x] Document faction relationship management
  - [x] Extract faction AI patterns

- [x] Behavior Tree System (#behavior_tree_system)

  - [x] Review lib/ai/ directory
  - [x] Document behavior tree implementation
  - [x] Document ship AI behavior patterns
  - [x] Extract decision-making algorithms

- [x] Manager Registry System (#manager_registry_system)
  - [x] Review managers/ManagerRegistry.ts
  - [x] Document centralized registry pattern
  - [x] Document manager instantiation patterns
  - [x] Extract circular dependency solutions

### UI & Visualization Systems

- [x] Visualization System (#visualization_system)

  - [x] Review visualization/ directory
  - [x] Document visualization renderers
  - [x] Document chart components
  - [x] Extract visualization patterns

- [x] Shader System (#shader_system)

  - [x] Review lib/optimization/WebGLShaderManager.ts
  - [x] Document shader management patterns
  - [x] Document GPU acceleration techniques
  - [x] Extract WebGL optimization patterns

- [x] Component Library System (#component_library_system)
  - [x] Review ui/components/ directory
  - [x] Document component variant patterns
  - [x] Document compositional UI architecture
  - [x] Extract component design patterns

### Data Processing Systems

- [x] Data Processing System (#data_processing_system)

  - [x] Review utils/dataTransforms/ directory
  - [x] Document data transformation patterns
  - [x] Document filter transformations
  - [x] Extract scientific data processing patterns

- [ ] Effects System (#effects_system)

  - [ ] Review effects/ directory
  - [ ] Document visual effects implementation
  - [ ] Document component effect patterns
  - [ ] Extract effect coordination mechanisms

- [ ] Web Worker System (#web_worker_system)
  - [ ] Review workers/ directory
  - [ ] Document worker communication patterns
  - [ ] Document multi-threading architecture
  - [ ] Extract performance optimization techniques
