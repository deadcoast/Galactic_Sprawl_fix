import { AlertTriangle, Check, Info, RefreshCw, TrendingUp, Zap } from 'lucide-react';
import * as React from 'react';
import { useEffect, useState } from 'react';
import { useResourceRates } from '../../../contexts/ResourceRatesContext';
import { useThreshold } from '../../../contexts/ThresholdContext';
import { useComponentLifecycle } from '../../../hooks/ui/useComponentLifecycle';
import { useComponentRegistration } from '../../../hooks/ui/useComponentRegistration';
import { EventType } from '../../../types/events/EventTypes';
import { ResourceType } from '../../../types/resources/ResourceTypes';
import { ResourceTypeHelpers } from '../../../types/resources/StandardizedResourceTypes';
import './ResourceOptimizationSuggestions.css';

// Define the ResourceRateDetail interface locally since it's not exported
interface ResourceRateDetail {
  production: number;
  consumption: number;
  net: number; // net rate (production - consumption)
}

interface OptimizationSuggestion {
  id: string;
  resourceType: ResourceType | 'all';
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  category: 'efficiency' | 'bottleneck' | 'allocation' | 'prediction';
  actionable: boolean;
  implemented: boolean;
  suggestedAction?: string;
}

interface ResourceOptimizationSuggestionsProps {
  showAllSuggestions?: boolean;
  maxSuggestions?: number;
  focusedResource?: ResourceType;
  onImplementSuggestion?: (suggestion: OptimizationSuggestion) => void;
}

// Helper function to get resource name for display
const getResourceName = (resourceType: ResourceType | 'all'): string => {
  if (resourceType === 'all') return 'All Resources';
  return ResourceTypeHelpers.getDisplayName(resourceType);
};

/**
 * Component that analyzes resource flows and provides optimization suggestions
 * to improve efficiency. It integrates with the ResourceFlowManager to identify
 * bottlenecks, underutilized resources, and opportunities for optimization.
 */
const ResourceOptimizationSuggestions: React.FC<ResourceOptimizationSuggestionsProps> = ({
  showAllSuggestions = false,
  maxSuggestions = 5,
  focusedResource,
  onImplementSuggestion,
}) => {
  // Register component with system
  const componentId = useComponentRegistration({
    type: ResourceType.RESEARCH,
    eventSubscriptions: ['RESOURCE_UPDATED', 'RESOURCE_FLOW_UPDATED'],
    updatePriority: 'low',
  });

  const [suggestions, setSuggestions] = useState<OptimizationSuggestion[]>([]);
  const [loading, setLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const { resourceRates } = useResourceRates(state => ({ resourceRates: state.resourceRates }));
  const { state: thresholdState } = useThreshold();

  // Component lifecycle tracking for performance monitoring
  useComponentLifecycle({
    onMount: () => {
      console.warn(`ResourceOptimizationSuggestions (${componentId}) mounted`);
    },
    onUnmount: () => {
      console.warn(`ResourceOptimizationSuggestions (${componentId}) unmounted`);
    },
    eventSubscriptions: [
      {
        eventType: EventType.RESOURCE_UPDATED,
        handler: event => {
          console.warn(`Component ${componentId} received resource update:`, event);
          if (event?.data?.resourceType) {
            refreshSuggestions();
          }
        },
      },
      {
        eventType: EventType.RESOURCE_FLOW_UPDATED,
        handler: event => {
          console.warn(`Component ${componentId} received flow update:`, event);
          refreshSuggestions();
        },
      },
    ],
  });

  // Generate optimization suggestions based on current resource state
  useEffect(() => {
    const generateSuggestions = async () => {
      setLoading(true);

      // Simulate API call or complex analysis
      await new Promise(resolve => setTimeout(resolve, 500));

      const newSuggestions: OptimizationSuggestion[] = [];

      // Analyze resource rates for negative trends
      Object.entries(resourceRates).forEach(([typeKey, rateDetail]) => {
        const resourceType = typeKey as ResourceType;
        // Type assertion for rateDetail to access the net property
        const rate = (rateDetail as ResourceRateDetail).net;

        // Only include suggestions for the focused resource if specified
        if (focusedResource && resourceType !== focusedResource) {
          return;
        }

        // Check for negative resource rates
        if (rate < 0) {
          newSuggestions.push({
            id: `negative-rate-${resourceType}-${Date.now()}`,
            resourceType,
            title: `Negative ${resourceType} flow detected`,
            description: `You're consuming more ${resourceType} than you're producing, which may lead to shortages.`,
            impact: rate < -10 ? 'high' : rate < -5 ? 'medium' : 'low',
            category: 'bottleneck',
            actionable: true,
            implemented: false,
            suggestedAction: `Increase ${resourceType} production or reduce consumption`,
          });
        }

        // Check for extremely high positive rates (potential waste)
        if (
          rate > 20 &&
          thresholdState?.resources[resourceType]?.currentAmount >
            0.9 * (thresholdState?.resources[resourceType]?.maxCapacity || 1000)
        ) {
          newSuggestions.push({
            id: `excess-rate-${resourceType}-${Date.now()}`,
            resourceType,
            title: `Excess ${resourceType} production`,
            description: `You're producing more ${resourceType} than you can store, which may lead to waste.`,
            impact: 'medium',
            category: 'efficiency',
            actionable: true,
            implemented: false,
            suggestedAction: `Reduce ${resourceType} production or increase storage capacity`,
          });
        }

        // Check for underutilized resources
        if (
          rate > 0 &&
          rate < 3 &&
          thresholdState?.resources[resourceType]?.currentAmount >
            0.6 * (thresholdState?.resources[resourceType]?.maxCapacity || 1000)
        ) {
          newSuggestions.push({
            id: `underutilized-${resourceType}-${Date.now()}`,
            resourceType,
            title: `Underutilized ${resourceType} reserves`,
            description: `You have significant ${resourceType} reserves that could be utilized more effectively.`,
            impact: 'low',
            category: 'allocation',
            actionable: true,
            implemented: false,
            suggestedAction: `